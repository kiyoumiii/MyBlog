{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/shoka/source/css/app.styl","path":"css/app.styl","modified":1,"renderable":1},{"_id":"themes/shoka/source/css/comment.styl","path":"css/comment.styl","modified":1,"renderable":1},{"_id":"themes/shoka/source/css/mermaid.styl","path":"css/mermaid.styl","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/404.png","path":"images/404.png","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/apple-touch-icon.png","path":"images/apple-touch-icon.png","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/failure.ico","path":"images/failure.ico","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/avatar2.jpg","path":"images/avatar2.jpg","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/paypal.png","path":"images/paypal.png","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/play_disc.png","path":"images/play_disc.png","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/play_needle.png","path":"images/play_needle.png","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/search.png","path":"images/search.png","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/wechatpay.png","path":"images/wechatpay.png","modified":1,"renderable":1},{"_id":"themes/shoka/source/images/avatar1.jpg","path":"images/avatar1.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"57e8cb9794c6e01cb68b72caa72d25903e03e2eb","modified":1721629963257},{"_id":"source/categories/index.md","hash":"465a2031d9fcaf3bba029db55d8f4a7ac35c06c0","modified":1735310131717},{"_id":"source/_posts/Ant-design-vue中icon的使用.md","hash":"0791df629afe796238cc895ebffde14cee65494f","modified":1735380880340},{"_id":"source/_posts/FMRI2TXT-非侵入性语言脑机接口.md","hash":"60b832d2c0d9b8ba5eb132ee27c4756e786c1d54","modified":1737380001782},{"_id":"source/_posts/HTTP协议相关知识.md","hash":"5029f0a351cb19a80723800215470e7903acbb8e","modified":1735309455984},{"_id":"source/_posts/React与Vue.md","hash":"c7884799dab52fe292213d39ef1d4f46f29a9d7a","modified":1736157916225},{"_id":"source/_posts/Flex与Grid布局.md","hash":"fa01654b275950abfbed7daf6ee4549b50d7bba8","modified":1740126546884},{"_id":"source/_posts/SEO优化策略总结.md","hash":"ac5f4bba39a998220cde301a6996d5f3392efb2e","modified":1736078168626},{"_id":"source/_posts/Sass-Scss-css预处理器.md","hash":"b868e06b4bda3c6212c31ea224bc134249b2063e","modified":1736150410830},{"_id":"source/_posts/TypeScript与JavaScript.md","hash":"baa2a27035f4dbeffa02dcf21c8c7e07cfa1e5c6","modified":1740149970276},{"_id":"source/_posts/flex弹性布局.md","hash":"68b22e6da14181226492986e775dbb5806dc3096","modified":1735310491811},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1721286520955},{"_id":"source/_posts/okjob-wztj项目对比.md","hash":"9c1762a16474fca85c92d691b9e732f401e72a26","modified":1736156194521},{"_id":"source/_posts/vue3-Router路由.md","hash":"25bd499e500d91eef83ae64d44d3597b16e44805","modified":1736078171089},{"_id":"source/_posts/vue基础一览.md","hash":"087b227221fdc74927e2ef24b6f5d96d6d2b9e5a","modified":1736091366903},{"_id":"source/_posts/vue脚手架一览表.md","hash":"229a838d390703b02aa6ab3e5673f3add1a2c69b","modified":1736154428609},{"_id":"source/_posts/vue进阶一览.md","hash":"160f33d3bf8d185fd7a3ebda38c546ed749d6434","modified":1736091109623},{"_id":"source/_posts/前端基础-HTTP基本概念.md","hash":"db718fb63acaece365dea3bcf3d33679cb8752f5","modified":1735310395774},{"_id":"source/_posts/前端基础-互联网基本原理.md","hash":"2e767ee0b4deb0c52251d8cce893abf623acd89e","modified":1735310371152},{"_id":"source/_posts/前端基础-浏览器是如何运作的.md","hash":"0d1c8d4639889f2b778b36f98c01bb1b2eb8a576","modified":1735310382776},{"_id":"source/_posts/前端学习之JS篇（三）.md","hash":"a6c953996c373a676aea5fdaed6908ce45b90394","modified":1736675516394},{"_id":"source/_posts/前端学习之JS篇（一）.md","hash":"71bd95a9672d62f7650250b5ee1f743c6583e09a","modified":1736325999528},{"_id":"source/_posts/前端学习之JS篇（二）.md","hash":"8dc1ca7e762794e6958d512a5c9e457ba7caa9fc","modified":1736601178024},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）.md","hash":"633b9eac0bfe49b496ac6e1aa160ba1bffc8b6b8","modified":1735639568980},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）.md","hash":"23ad5d7f0c2c3939cbc6aa9caa39a71d7c88c645","modified":1735720924252},{"_id":"source/_posts/前端学习记录-时间轴效果实现.md","hash":"df311a99089e3e65dd3373591da9100defb8d594","modified":1735310427072},{"_id":"source/_posts/前端学习记录-简约唯美登录页面.md","hash":"8846abbacfd878497b69054ae79213cf011080f9","modified":1735310417457},{"_id":"source/_posts/前端编程语言.md","hash":"090922c19427fd548bd71159b5bdab9ee2829e47","modified":1735310356601},{"_id":"source/_posts/前端学习记录-翻页漫画书.md","hash":"1d7f09fd9acabc88e08f342662678da332821bd1","modified":1735310406243},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖.md","hash":"21d3f10f1110eb21804ecafcd884aabe4649d27f","modified":1737378635073},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛.md","hash":"578fe630de662501bd758799e36c517b4f2e62dd","modified":1735310324169},{"_id":"source/_posts/开发问题记录-AI命理师.md","hash":"de9067a33054033f9a5151e312affad41ce3b2cc","modified":1740378894904},{"_id":"source/_posts/大模型基础.md","hash":"88c8a4c9018218033500a3a6bc982bfb5cc7c771","modified":1735310311705},{"_id":"source/_posts/昇腾CANN-Ascend-C算子开发学习笔记.md","hash":"5b7a1b8e15869192eb4d74294d0c32a1f7ce13a1","modified":1735380876047},{"_id":"source/_posts/机器翻译赛-seq2seq与transformer.md","hash":"428c18903907f70a0fdb393d3927254d61b7a452","modified":1735310297736},{"_id":"source/_posts/浏览器输入URL会发生什么.md","hash":"700a3d6ae4596ff75827771e0957407f1101d193","modified":1740554372957},{"_id":"source/_posts/机器翻译赛-门控循环单元GRU.md","hash":"06c44bf197144c19f1e55089b0c9bd5cf0a370d2","modified":1735310302240},{"_id":"source/_posts/简单有效的密钥配置教程.md","hash":"127672cd7e887c25bd2e8b572dec0b576d66124b","modified":1735381813122},{"_id":"source/_posts/计算机网络-基础知识笔记（一）.md","hash":"fad281894eb1c3f7df8da73a82aecf1ec75224e3","modified":1735310344855},{"_id":"source/_posts/自用常备linux命令.md","hash":"8f1880b28280e5413135c85fdf9fb4f9eaad94bd","modified":1736659470593},{"_id":"source/_posts/超级常用的一些git命令.md","hash":"8e56f39f0b80a13f412186afc7e1568d871e25cc","modified":1735382546379},{"_id":"source/_posts/项目对比注解.md","hash":"9a9c583b54f2617a00f0f54d3e08acd5bf74f8a3","modified":1736156857638},{"_id":"source/tags/index.md","hash":"d8782fee82b0e9d21d89ba517b8a34a345e122b5","modified":1735310149148},{"_id":"source/_posts/node版本引起的加密库OpenSSL无法支持算法问题.md","hash":"6dd5aec7089854029a7f5e9a97843acb46efa8af","modified":1736409335991},{"_id":"source/_posts/将vite构建的vue3项目部署到githubpage教程.md","hash":"238fbc1a7eb1464c0b19877278463378d956068d","modified":1735794486772},{"_id":"source/_data/images/wechatpay.png","hash":"93842f7e28d7993a8dec3bf69054cacfd8f977b1","modified":1735312041279},{"_id":"source/_posts/Ant-design-vue中icon的使用/01.jpg","hash":"27e1c6fd73fd451796ddc5262b5960ed92bdae04","modified":1726576133171},{"_id":"source/_posts/Ant-design-vue中icon的使用/03.jpg","hash":"ebdd5776caa17b3d4c6c92f6f6d91bbc9c152faa","modified":1726576383415},{"_id":"source/_posts/Ant-design-vue中icon的使用/04.jpg","hash":"0fe708d469da42ae2be8c233b3518b93a66d30f2","modified":1726576401136},{"_id":"source/_posts/Ant-design-vue中icon的使用/02.jpg","hash":"b00cbbfe8f41088db43aabd8e77cbab031112645","modified":1726576114580},{"_id":"source/_posts/HTTP协议相关知识/1.jpg","hash":"19ce5b25d18b3baa383ce14efc9b5f43be3866c5","modified":1723476307525},{"_id":"source/_posts/HTTP协议相关知识/gateway.jpg","hash":"70cf622ac091360882515af30067693e909b0526","modified":1723545362189},{"_id":"source/_posts/HTTP协议相关知识/2.jpg","hash":"82ce87787474d2ee15043b514b3e464f29872d5b","modified":1723477813483},{"_id":"source/_posts/HTTP协议相关知识/请求代码和报文.jpg","hash":"2e1a91a06530b397bc47fe48c5ebd95c83502d6f","modified":1723480437587},{"_id":"source/_posts/HTTP协议相关知识/报文.jpg","hash":"4eca1fd36537e0830e57cda23f61409cb1171b9a","modified":1723480517853},{"_id":"source/_posts/flex弹性布局/01.png","hash":"1ecaac9b18d66edf3ab7aeaadde91dd7b47ac4f5","modified":1726575071690},{"_id":"source/_posts/前端基础-HTTP基本概念/02.jpg","hash":"9027476d9fcb77d2af3876a153b3457fdab95d7c","modified":1722314160464},{"_id":"source/_posts/前端基础-浏览器是如何运作的/01.jpg","hash":"aa7e916a1a6d04cbe80f7f4e1775b6caceb5eb29","modified":1722428166433},{"_id":"source/_posts/前端基础-浏览器是如何运作的/02.jpg","hash":"9098925ee00dd180375bbcbceb586a627750fc9a","modified":1722428630624},{"_id":"source/_posts/前端基础-浏览器是如何运作的/03.gif","hash":"48b947430e110a022e8e530acacc3d774d3bad1d","modified":1722429451633},{"_id":"source/_posts/前端学习之JS篇（一）/01.jpg","hash":"89e63c8be4c57a9dd68bb208e710535a27f3d469","modified":1736302309054},{"_id":"source/_posts/前端基础-浏览器是如何运作的/04.png","hash":"b0b1234592aa96ccf58427938d475a15c6a088e2","modified":1722432238378},{"_id":"source/_posts/前端编程语言/01.jpg","hash":"1ca7fe528e0e3e6e0292d825178d8639b20a5538","modified":1723882443071},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/01.png","hash":"a1b3b0940b6a5e2ffcf765adf49e48d54d455138","modified":1737355194827},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/02.png","hash":"124d4f1b27d4b03be5336945de7d031501b5a3ed","modified":1737376619709},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/03.png","hash":"06a0d51263aab476fafe000bee02f0b843440704","modified":1737356786240},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/04.png","hash":"e03f3bfbd777cd7381aee282401e8dd220e32305","modified":1737356814792},{"_id":"source/_posts/大模型基础/Attention公式.png","hash":"83c547248d74271665705704292abbd8fdd94ca0","modified":1722260609883},{"_id":"source/_posts/大模型基础/BNLN.jpg","hash":"dfd57e6980286f456298b9706e2c7df365dc3d9a","modified":1722258588994},{"_id":"source/_posts/大模型基础/attention01.png","hash":"7a0742292cc0053681ff44500bf11fb0e23ff4a1","modified":1722260550676},{"_id":"source/_posts/大模型基础/attention原版.png","hash":"8da277e2d0bc43da1130bcb1e44afaa939aae8bd","modified":1722261263209},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/RNN_BLUE.png","hash":"2cda79c41b2d73fce83ecac1112a9aa085f1d857","modified":1723906367243},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/attention.png","hash":"e9ad528381a6bcf2ae4d11c36461233004959360","modified":1723906486205},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/e-d.png","hash":"da737d550ac553ad274c3f1ceb0a841e9de09595","modified":1723906155126},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/no_attention.png","hash":"3bb07c947bdf7ed63010421fb731ec63e66d8430","modified":1723906474704},{"_id":"source/_posts/机器翻译赛-门控循环单元GRU/01.png","hash":"48a7beb442024ec10a6734c377e431c3c201758d","modified":1724052834369},{"_id":"source/_posts/机器翻译赛-门控循环单元GRU/03.png","hash":"6c5fe3c82186f3db2bf189bae42ff8baefd45e8e","modified":1724053115631},{"_id":"source/_posts/机器翻译赛-门控循环单元GRU/02.png","hash":"abacd1324b85440451c5105c0464b06422b4692a","modified":1724053087396},{"_id":"source/_posts/机器翻译赛-seq2seq与transformer/01.png","hash":"2bed5d7432f8b9debdf4b9dbab602c598b1d653f","modified":1724055395082},{"_id":"source/_posts/机器翻译赛-seq2seq与transformer/02.png","hash":"b928d84f3386802106641457084b9a6764421895","modified":1724056420699},{"_id":"source/_posts/machine-learning/cover.jpg","hash":"87131683a3ef9cc7e1655d6db5be60ba0f3d5b67","modified":1735307723537},{"_id":"source/_data/images/avatar.jpg","hash":"6d822e6628b65fbd1fbff686087fbcc2d7ae6382","modified":1735304626888},{"_id":"source/_data/images/alipay.png","hash":"1d5d6f8a122b6a938cf382bc651401c19e60cff7","modified":1735312062359},{"_id":"source/_posts/deep-learning/cover.jpg","hash":"23e55519f2f5155aba0c58d696b2b190ff5dbfcb","modified":1735307735444},{"_id":"source/_posts/前端基础-HTTP基本概念/01.jpg","hash":"3b8a3ab3c37f5f1de9a5b920350aa77ec6c6be6b","modified":1722314148010},{"_id":"source/_posts/前端基础-HTTP基本概念/03.jpg","hash":"279b5b2c537ae6957a92cb4f64f08f932a5f5ad6","modified":1722314180773},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）/HTTP与HTTPS.jpg","hash":"45c66d9f9831fcfdce1aebc9d80213d59a565cdd","modified":1735626326681},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）/http1长短连接.jpg","hash":"81f817525811e11520f9477f3ca7d58dbe1ffdea","modified":1735571794474},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/08.jpg","hash":"008cca8e9868a90e9a536861bc8c62ce9cbcabc8","modified":1735715806651},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/07.jpg","hash":"c6d3227f94aead4aceb8cdd992441e7a6c1f1f66","modified":1735715694161},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/09.jpg","hash":"037e2cd724366bb0a547ed3740935bc64a2cd29d","modified":1735716146506},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/10.jpg","hash":"919e7eea1aaab2e68baaf6baf0108fb03dd247c2","modified":1735718418715},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/TCP_IP_五层协议.jpg","hash":"9b4795a485098fc28649e7f0487ddff891056ce2","modified":1735712825075},{"_id":"source/_posts/大模型基础/transformer原版.png","hash":"d0ecdeb56fb268280a6b81446e800401bcd40259","modified":1722261231387},{"_id":"source/_posts/FMRI2TXT-非侵入性语言脑机接口/01.jpg","hash":"2ebdba6bf850f1dec0d6c0ea2f1251c34873ed8e","modified":1737378828859},{"_id":"source/_posts/front-end/cover.jpg","hash":"bfeba2c00d7c81809add00201bb033516f986941","modified":1735307513639},{"_id":"source/_posts/typescript/cover.jpg","hash":"fc98e67753b05868391b0914a474e67425a48847","modified":1735307515525},{"_id":"source/_posts/前端基础-HTTP基本概念/04.jpg","hash":"c46b972f6733fd6bd150bb3a6c054283e3ecb03a","modified":1722314194956},{"_id":"source/_posts/前端基础-HTTP基本概念/05.jpg","hash":"76f1f6f9f051b7eec76ebe5e889194032a8a5562","modified":1722314212598},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）/TLS加密.jpg","hash":"2864a29b79d5f5789c8432ec82764e11a25f1949","modified":1735626566853},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/03.jpg","hash":"2f1784a7d7c994508d265067af130604dd9e9cc4","modified":1735713316781},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/encore.png","hash":"bdb5794f0208bbf8f6cd198696c26351a14a4ee2","modified":1723905453792},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/spacy.png","hash":"d3d86f464915046ba6044ef52d16fa4e5ee049fc","modified":1723905323168},{"_id":"source/_posts/超级常用的一些git命令/01.jpg","hash":"3611ddc30ec18768faef40a6395452ddbcd799fb","modified":1735382033145},{"_id":"source/_posts/前端基础-HTTP基本概念/错误码.jpg","hash":"d22c3fee4fd66d301874d380a5fd96f0fbf3d544","modified":1722314097967},{"_id":"source/_posts/前端学习之JS篇（二）/01.jpg","hash":"c7eb04c47b96554e446b916066ee02524f90dc9a","modified":1736518018906},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/04.jpg","hash":"794bf521e24ba369409bd1762301b5955f96f975","modified":1735713330916},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）/状态码类别.jpg","hash":"97752c9a96953e76dda15f899972d7815c6f5c16","modified":1735630348322},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/05.jpg","hash":"e1386dbc17329b43215f4228b3e1447cedf6071e","modified":1735713344716},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/06.jpg","hash":"ef75fcf052c6025f729558a0fabed0317e1ef4c6","modified":1735714295134},{"_id":"source/_posts/大模型基础/transformer01.png","hash":"0bc5d1fdce6f7a84af4ff73ffd2d9fe1f89b6c9f","modified":1722258777125},{"_id":"source/_posts/computer-science/cover.jpg","hash":"bb606e90b09d32d8f142e9a3f7f3191d5e593bc6","modified":1735307476352},{"_id":"source/_posts/javascript/cover.jpg","hash":"c14b054646d58d673cd2841a6ae8c2b1ad777ff1","modified":1735307514001},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/OSI七层模型.jpg","hash":"65be345cc0614e800b034f001ff31dcc707c7ac1","modified":1735709118778},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/05.png","hash":"2c587cbad811831061be0510d465242d10c6fc35","modified":1737357387254},{"_id":"source/_posts/开发问题记录-AI命理师/aichat.jpg","hash":"ec9054f906b4fa1d02d77474aa1aab96830e66cd","modified":1740378722096},{"_id":"source/_posts/vue/cover.jpg","hash":"bda8f01c53d1a2a8b2ced5e2a64360a1d111f326","modified":1735307599300},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/06.png","hash":"ce9141612282d5314c6d7ee73154ed42912315db","modified":1737368425486},{"_id":"source/_posts/FMRI2TXT-非侵入性语言脑机接口/02.jpg","hash":"6959954707ad4f736f62c3bf0eb1d4e185fae7ce","modified":1737379874869},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/model.png","hash":"ee5b1fa06079d6e1b08fc54b6e2c3253c4d71579","modified":1723905729058},{"_id":"source/_posts/开发问题记录-AI命理师/wx.jpg","hash":"041b5a8dc8c7f16499a3aff653d0e88090912c90","modified":1740378362840},{"_id":"themes/shoka/.editorconfig","hash":"57f50fc69fdc98a28c9bb04c338865a8b267b4bc","modified":1735301334283},{"_id":"themes/shoka/.gitignore","hash":"bfd7d4c19270c8b349107ffb26f50302943571a9","modified":1736091606364},{"_id":"themes/shoka/LICENSE","hash":"1a301f54567fbcd67fc138c37071b96ac9e670a1","modified":1735301334284},{"_id":"themes/shoka/README.md","hash":"162ec0ffef6a69e09c9b00dbc9a8f400b3826fac","modified":1735301334284},{"_id":"themes/shoka/_config.yml","hash":"8c22616c0b5fe98f1d3c80034ccabf4025bdd3be","modified":1735301334285},{"_id":"themes/shoka/_images.yml","hash":"da16c60f2756812e8fb1a623402caeb6e5d5fe17","modified":1735309141099},{"_id":"themes/shoka/languages/default.yml","hash":"da38f00bb45a318f118db0d74df24a137351777e","modified":1735301334303},{"_id":"themes/shoka/languages/README.md","hash":"d40601b23836327a36b0d75361f57e95413c50b3","modified":1735301334303},{"_id":"themes/shoka/languages/zh-CN.yml","hash":"d2cac0184e803ec1947187b23979e24065184ad4","modified":1735301334303},{"_id":"themes/shoka/package.json","hash":"78e368a218a687a4a0d1936fc723e2e6fca2bdfb","modified":1735301334312},{"_id":"themes/shoka/languages/ja.yml","hash":"579f9e79003eb37a9c68346db0961bff4d9f6a03","modified":1735301334303},{"_id":"themes/shoka/languages/zh-HK.yml","hash":"85a4b1ecd3a36b2e92ebe923495aab1682359e3c","modified":1735301334304},{"_id":"themes/shoka/languages/en.yml","hash":"41fb069ee781a9b36be8257627a0f5bd9479cf7f","modified":1735301334303},{"_id":"themes/shoka/languages/zh-TW.yml","hash":"060f1886301e9c13241b63c2b5983ebc9f35acaa","modified":1735301334304},{"_id":"themes/shoka/example/_config.shoka.yml","hash":"ab07b1fd050e985e120d0e1797c588c721ac1772","modified":1735301334285},{"_id":"themes/shoka/example/_config.yml","hash":"a6596f241cd5d2e970c025cf927d54ed226e9ec0","modified":1735301334285},{"_id":"themes/shoka/layout/archive.njk","hash":"01847f527849426aab8fcad795597a7076d761fd","modified":1735301334311},{"_id":"themes/shoka/layout/category.njk","hash":"11a604e3285262d34368b1eb1bf6ff8349c3345f","modified":1735301334311},{"_id":"themes/shoka/layout/page.njk","hash":"2dac7be8699c8ad6364831eac2ab0167dba7c689","modified":1735301334312},{"_id":"themes/shoka/layout/index.njk","hash":"561b703a552bf6afaa76a128945a1cc26df3f865","modified":1735301334311},{"_id":"themes/shoka/layout/tag.njk","hash":"f1e9539c178db724961e04bcc08fa94279aae4b1","modified":1735301334312},{"_id":"themes/shoka/layout/post.njk","hash":"7213742682ed6c759f6078809b404401ea1784c0","modified":1735301334312},{"_id":"themes/shoka/example/package.json","hash":"4744a2d23b4558be8932df77989c2ba133f0388e","modified":1735301334286},{"_id":"themes/shoka/layout/_alternate/atom.ejs","hash":"4b40589945713ab19eea69902b0768fc69ec1027","modified":1735301334304},{"_id":"themes/shoka/layout/_alternate/json.ejs","hash":"74975fb6d1ca1099cd843c180ce49353b2061c53","modified":1735301334305},{"_id":"themes/shoka/layout/_alternate/rss.ejs","hash":"bd8df7a85959df3231b0bb617d7b5d05a98c48de","modified":1735301334305},{"_id":"themes/shoka/layout/_macro/card.njk","hash":"0dfd6a2e21119131566f03d7bebedda15d4261b0","modified":1735301334305},{"_id":"themes/shoka/layout/_macro/comment.njk","hash":"fc91ceb0b2c86a38839cef84f50487f119367cd7","modified":1735301334306},{"_id":"themes/shoka/layout/_macro/postmeta.njk","hash":"11e73da9e907e20ea81b920c47265e88fb5d210c","modified":1735301334306},{"_id":"themes/shoka/layout/_macro/sidebar.njk","hash":"7f170b2649f09e88933de4121803990baf5d4022","modified":1735301334306},{"_id":"themes/shoka/layout/_macro/widgets.njk","hash":"1045129c1163e603e9a927161417354758602737","modified":1735301334306},{"_id":"themes/shoka/layout/_partials/footer.njk","hash":"4aabeeac4cec09a868aed39282c9d3b3a23e38ba","modified":1735301334306},{"_id":"themes/shoka/layout/_macro/segment.njk","hash":"c8e21eeea552c7c685e50252d1983785edc6a29a","modified":1735301334306},{"_id":"themes/shoka/layout/_partials/header.njk","hash":"370b4ae76844b6659ad4dc506a37d6ac9bcead20","modified":1735301334308},{"_id":"themes/shoka/layout/_partials/layout.njk","hash":"322cd6927edccbd47eafb63097181ad115a9a4d5","modified":1735301334308},{"_id":"themes/shoka/layout/_macro/breadcrumb.njk","hash":"1dc8ee1de2c20d514c251145d00536d9b0170335","modified":1735301334305},{"_id":"themes/shoka/scripts/filters/locals.js","hash":"63ada9722d96f021f1cd398bbe7bb4991dde1231","modified":1735301334314},{"_id":"themes/shoka/layout/_partials/pagination.njk","hash":"676ef88ab76d735696f6e8c04338eb3887fb63cc","modified":1735301334308},{"_id":"themes/shoka/scripts/generaters/archive.js","hash":"a6f87b628f6125cc2614f7214e2ef2995a084663","modified":1735301334315},{"_id":"themes/shoka/scripts/filters/post.js","hash":"44069b5007b3a692eba70dd9354fc0f4dd27d5ed","modified":1735301334314},{"_id":"themes/shoka/scripts/generaters/config.js","hash":"8b9aebab15e192f3a5bc2539ce3aeaddbee98be8","modified":1735301334315},{"_id":"themes/shoka/scripts/generaters/index.js","hash":"27b52046c1452b8cb7ca1f64f1eff3d8ad4b0ab6","modified":1735301334315},{"_id":"themes/shoka/scripts/generaters/pages.js","hash":"dd8bb4adec63efa8efc282febd4da989e1523262","modified":1735301334316},{"_id":"themes/shoka/scripts/generaters/script.js","hash":"243e11786081d8d7d5d3b52338925a71c8da8e2c","modified":1735301334316},{"_id":"themes/shoka/scripts/generaters/images.js","hash":"fcf3d1802c4bb5ff6f2683987f048371e2d00488","modified":1735301334315},{"_id":"themes/shoka/scripts/helpers/asset.js","hash":"df236860cd91a1c6ffc78ffb4156730d6a59c5d1","modified":1735301334316},{"_id":"themes/shoka/scripts/helpers/engine.js","hash":"02bdf84317ddb775cbb5fcdb9ad70c1cb5631ffd","modified":1735301334316},{"_id":"themes/shoka/scripts/helpers/list_categories.js","hash":"84507e35a428179bd5838fe80d527a9433916391","modified":1735301334317},{"_id":"themes/shoka/scripts/renderer/njk.js","hash":"480f25325494e4caa04794cd496912f628ae2691","modified":1735301334317},{"_id":"themes/shoka/scripts/tags/media.js","hash":"a0f66450f48a1ce0f6c532e687fc3ee85aeed175","modified":1735301334317},{"_id":"themes/shoka/scripts/tags/links.js","hash":"ac5844307e62693a9add08b89d9ec4d6aa5bc25e","modified":1735301334317},{"_id":"themes/shoka/source/css/_colors.styl","hash":"6cb23f12441e7517cc614336d867cfa2f35284d7","modified":1735301334318},{"_id":"themes/shoka/source/css/_iconfont.styl","hash":"05117f95a16e5f7c08351492752994c03f185911","modified":1735301334336},{"_id":"themes/shoka/source/css/_mixins.styl","hash":"68c4bfee20cc6ee477548ce3e4e28e19697d8af3","modified":1735301334337},{"_id":"themes/shoka/source/css/_variables.styl","hash":"c939f1af34a0a8a6a37e6439a8b609a26c9e09d2","modified":1735301334337},{"_id":"themes/shoka/source/css/comment.styl","hash":"7502a76342c8d84e4a476b35a91fcec22a15cbed","modified":1735301334337},{"_id":"themes/shoka/source/css/app.styl","hash":"572d20c4c574b87a2fc49290206c90c8baa7133d","modified":1735301334337},{"_id":"themes/shoka/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1735301334339},{"_id":"themes/shoka/source/css/mermaid.styl","hash":"ec821a3f997691b92b0926ba4534c94a795ef587","modified":1735301334337},{"_id":"themes/shoka/source/images/alipay.png","hash":"013436bac325a3a0c2c9b13a08312fc4e7025d69","modified":1735301334339},{"_id":"themes/shoka/source/images/404.png","hash":"b7b18f6689d0a14041d87bab6c4e4ce567249d01","modified":1735301334337},{"_id":"themes/shoka/source/images/apple-touch-icon.png","hash":"d4e5d65ff663cb71f43515e68d757cbae1ceb3ec","modified":1735301334339},{"_id":"themes/shoka/source/images/avatar.jpg","hash":"93af0fd2ee6322c5c77760eefba6c81afa2e313e","modified":1735301334340},{"_id":"themes/shoka/source/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1735301334340},{"_id":"themes/shoka/source/images/favicon.ico","hash":"8ae48d9e33b7593cd005aae88b755aa9ce129f0e","modified":1735301334340},{"_id":"themes/shoka/source/images/logo.svg","hash":"830dfbd6dff2986130819f747b25db230b05ca84","modified":1735301334340},{"_id":"themes/shoka/source/images/paypal.png","hash":"872d4b6d3cacee4845246fbf29817f1ee98bb037","modified":1735301334341},{"_id":"themes/shoka/source/images/play_disc.png","hash":"3cfa8dd2e12424c52d1f5e34e9502e446fecde9c","modified":1735301334341},{"_id":"themes/shoka/source/images/search.png","hash":"08c4f6a7a92eff3548aec94b267a23a25e6bd215","modified":1735301334341},{"_id":"themes/shoka/source/images/play_needle.png","hash":"e0998828ab50ce37617f9f4d46b74648206ac852","modified":1735301334341},{"_id":"themes/shoka/source/images/wechatpay.png","hash":"470a42ee16dd516580d5e51607f11dc353a49675","modified":1735301334342},{"_id":"themes/shoka/example/source/_data/colors.styl","hash":"00b06d9366f6a477d02e94eea16bd07aafb7ff2f","modified":1735301334286},{"_id":"themes/shoka/example/source/_data/iconfont.styl","hash":"b3c284f5bf48ae84d4f016779cf43b67c87e0b87","modified":1735301334287},{"_id":"themes/shoka/example/source/_data/images.yml","hash":"bca089255d50638a65fe91b58cd94aff42d9f49c","modified":1735301334287},{"_id":"themes/shoka/example/source/_data/languages.yml","hash":"79b49c2d38c14e29274ebf461fbb3f83ea018fbb","modified":1735301334288},{"_id":"themes/shoka/example/source/_posts/code-highlight.md","hash":"607f8cf393ad1082398c7f5246e229405bda4de3","modified":1735301334288},{"_id":"themes/shoka/example/source/_posts/elements.md","hash":"66dde9f7cef1c9a90a15776b633c8ab4272ed826","modified":1735301334292},{"_id":"themes/shoka/example/source/_posts/categories.md","hash":"c1ca20b94100a77efc569f43986951a2551f6b64","modified":1735301334288},{"_id":"themes/shoka/example/source/_posts/excerpts.md","hash":"9f51babe45d9f45a04d1e6c52eb8a96b58478029","modified":1735301334292},{"_id":"themes/shoka/example/source/_posts/hello-world.md","hash":"ceb583413b760182a3c2463bf7f15c03328a37bc","modified":1735301334292},{"_id":"themes/shoka/example/source/_posts/gallery-post.md","hash":"ae577f5171f0354fb0a3702da5bb8ba14372dc28","modified":1735301334292},{"_id":"themes/shoka/example/source/_posts/images.md","hash":"f09b4339b8334584ec311be7e2a2e7e839bcfa04","modified":1735301334292},{"_id":"themes/shoka/example/source/_posts/link-post-without-title.md","hash":"811e7ec6f4ed747388e8255b27e482d04b304c51","modified":1735301334293},{"_id":"themes/shoka/example/source/_posts/link-post.md","hash":"ac9a280178ba63ccc3acc7540aa96db4d08b5b21","modified":1735301334293},{"_id":"themes/shoka/example/source/_posts/long-title.md","hash":"e11f04c88e453b6b265d634458a69d0124edc684","modified":1735301334294},{"_id":"themes/shoka/example/source/_posts/markdown.md","hash":"7b03cdab8abff7010603ad0e66ef611564e08694","modified":1735301334294},{"_id":"themes/shoka/example/source/_posts/no-title.md","hash":"24536a15b2a9633d0a4dfad66c0ab51a683d78b5","modified":1735301334294},{"_id":"themes/shoka/example/source/_posts/tag-plugins.md","hash":"35e8c2ca9e48d5653f8d69ef05a0221c1b207e4e","modified":1735301334294},{"_id":"themes/shoka/example/source/_posts/tags.md","hash":"788411e01f179f65bc6ea61c73601a0a4a1072d0","modified":1735301334295},{"_id":"themes/shoka/example/source/_data/custom.styl","hash":"d90bc10047d824d73d4f0ba10f81dfe1628558a0","modified":1735301334286},{"_id":"themes/shoka/example/source/_posts/中文測試.md","hash":"0dd7c0e2e2242939b69dd6d66fe28f56b69ff65a","modified":1735301334295},{"_id":"themes/shoka/example/source/_posts/日本語テスト.md","hash":"5ae9b45f038baa96bd179b4ad0b03409e9a76bdb","modified":1735301334295},{"_id":"themes/shoka/example/source/friends/_data.yml","hash":"1b090bd2f25f4d00471f31c4136141d4ad1ae19a","modified":1735301334302},{"_id":"themes/shoka/example/source/friends/index.md","hash":"c44fdf47aae95588c686a15fa2046ab9a4c09b9b","modified":1735301334302},{"_id":"themes/shoka/layout/_partials/head/head.njk","hash":"91acf8eae82afe770d6f174a37c12b9617b0d97c","modified":1735301334308},{"_id":"themes/shoka/layout/_partials/head/head_unique.njk","hash":"afb09eeda0de5dd4df67ba80b58b9ace9eaf5e0d","modified":1735301334308},{"_id":"themes/shoka/layout/_partials/third-party/baidu-analytics.njk","hash":"9f4568ede657e6844fe54e3cdf9635ecd94b2bf9","modified":1735301334311},{"_id":"themes/shoka/layout/_partials/sidebar/menu.njk","hash":"14192d78b637ca07ec4a0505268bfaecca2f0680","modified":1735301334310},{"_id":"themes/shoka/layout/_partials/sidebar/overview.njk","hash":"3c12aa376662f15366177792a35873f2344152b8","modified":1735301334310},{"_id":"themes/shoka/layout/_partials/post/copyright.njk","hash":"b6aa82c28683bdb337920db718841bee207dc2d9","modified":1735301334309},{"_id":"themes/shoka/layout/_partials/post/footer.njk","hash":"8e7cae0c45bbc2cf3e91eac10ab319caa6b27d2e","modified":1735301334309},{"_id":"themes/shoka/layout/_partials/post/post.njk","hash":"e1846d51aca86c873f1c74152b80d50eec79507b","modified":1735301334310},{"_id":"themes/shoka/layout/_partials/post/reward.njk","hash":"f7185a561288a754beae1323a19c200b99dccd08","modified":1735301334310},{"_id":"themes/shoka/layout/_partials/post/nav.njk","hash":"01e49cc56aa8722f0eb2739ce2e55080429e576e","modified":1735301334309},{"_id":"themes/shoka/source/js/_app/dom.js","hash":"1bd152fc94f33793e71cada5ec8bbfd71e531d6c","modified":1735301334342},{"_id":"themes/shoka/source/js/_app/fireworks.js","hash":"e4bf5a9955618bb43020e175e59e497b28c78131","modified":1735301334342},{"_id":"themes/shoka/source/js/_app/global.js","hash":"a792824837bcf9cb90ec2c831dea2dc4de85cbf1","modified":1735301334343},{"_id":"themes/shoka/source/js/_app/page.js","hash":"d8a51bdd02bc839290df4ea9708a3e1cf39a823a","modified":1735301334343},{"_id":"themes/shoka/source/js/_app/pjax.js","hash":"0528d97ad162eb9f70e21540d993d48e6027ba2d","modified":1735301334344},{"_id":"themes/shoka/source/js/_app/player.js","hash":"d49cc563b239659d554c838f784af8244023f886","modified":1735301334344},{"_id":"themes/shoka/source/js/_app/sidebar.js","hash":"1d532138431e98e28f7579a52b0e88909aba76e0","modified":1735301334344},{"_id":"themes/shoka/example/source/_posts/videos.md","hash":"32735a9b9f0370d49e0f4311c8bc1fbcfba98445","modified":1735301334295},{"_id":"themes/shoka/source/js/_app/utils.js","hash":"6e123d054bf003deb4fc5eb80cfec233e4941851","modified":1735301334345},{"_id":"themes/shoka/source/css/_common/components/components.styl","hash":"3677ba4471475026d232e3af00d5e6de027151e6","modified":1735301334318},{"_id":"themes/shoka/source/css/_common/outline/mobile.styl","hash":"15c7be9e4e1b3c6b55e7beef5685898ae4f846ab","modified":1735301334331},{"_id":"themes/shoka/source/css/_common/outline/outline.styl","hash":"e107c799b88278db84a2d5a8819d17f48511f73e","modified":1735301334331},{"_id":"themes/shoka/source/css/_common/scaffolding/animate.styl","hash":"dda625de5efb0e5b53e81c9da053850e9767da22","modified":1735301334334},{"_id":"themes/shoka/source/css/_common/scaffolding/buttons.styl","hash":"555c4b09c9970931e73abe544ae6356cf870670e","modified":1735301334334},{"_id":"themes/shoka/source/css/_common/scaffolding/divider.styl","hash":"faa2e60cafdb0379f66a9ff7f9bd8e4d53551882","modified":1735301334334},{"_id":"themes/shoka/source/css/_common/scaffolding/iconfont.styl","hash":"b3c284f5bf48ae84d4f016779cf43b67c87e0b87","modified":1735301334335},{"_id":"themes/shoka/source/css/_common/scaffolding/normalize.styl","hash":"eea39861e6cb0cdc0e26d2f7878c2059991d3d40","modified":1735301334335},{"_id":"themes/shoka/source/css/_common/scaffolding/pagination.styl","hash":"80bb3542fb6c7245f9f559c97938a65d29a61784","modified":1735301334335},{"_id":"themes/shoka/source/css/_common/scaffolding/ribbon.styl","hash":"e9c99fbd15cb9b118091d6e9add6aaf2abd8ab7d","modified":1735301334335},{"_id":"themes/shoka/source/css/_common/scaffolding/scaffolding.styl","hash":"14295140c2e5e50545a9b8404839589d486d78c9","modified":1735301334336},{"_id":"themes/shoka/source/css/_common/scaffolding/scrollbar.styl","hash":"f34503ae1dce5bfc964d52f3f22601058fc7a907","modified":1735301334336},{"_id":"themes/shoka/source/css/_common/scaffolding/tables.styl","hash":"a67472f2b36047f5f1c2d85e398afe5003e06087","modified":1735301334336},{"_id":"themes/shoka/source/css/_common/scaffolding/tip.styl","hash":"ffdfdc91b9d29060a36bfdf92b746596fd05afd9","modified":1735301334336},{"_id":"themes/shoka/source/css/_common/scaffolding/toggles.styl","hash":"a71d609401001c9b15608d5276636180d49cf844","modified":1735301334336},{"_id":"themes/shoka/example/source/_posts/computer-science/note/cover.jpg","hash":"6d077a7330284d0fb2b79e96d7e5b56121395df3","modified":1735301334290},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc.md","hash":"cd2c1d52df850bd7e8cc130bfb19ae6a5fc97f25","modified":1735301334290},{"_id":"themes/shoka/source/css/_common/components/highlight/highlight.styl","hash":"18be598f5f1d75cb4869adcd1ae47bd19456b2c5","modified":1735301334318},{"_id":"themes/shoka/source/css/_common/components/pages/collapse.styl","hash":"a0ecc9afe8c03eae06075fc53c39057e05d22b1e","modified":1735301334319},{"_id":"themes/shoka/source/css/_common/components/highlight/operation.styl","hash":"f2ac0660d8f9e4d4582a4a8c4f97bd6d80162a6d","modified":1735301334319},{"_id":"themes/shoka/source/css/_common/components/pages/home.styl","hash":"95ad71e89df31b58e9db37b4b0c092f2102f91b2","modified":1735301334319},{"_id":"themes/shoka/source/css/_common/components/pages/pages.styl","hash":"e2af0d359247a82dab6f8d6ce90d6b0d5fca4dc9","modified":1735301334319},{"_id":"themes/shoka/source/css/_common/components/pages/tag-cloud.styl","hash":"2ebc481064dae0b593e8caff838044f92a5e2ef7","modified":1735301334320},{"_id":"themes/shoka/source/css/_common/components/tags/collapse.styl","hash":"aa663a0fcee4138be9a3272172cd30b8118261df","modified":1735301334322},{"_id":"themes/shoka/source/css/_common/components/tags/container.styl","hash":"541d71873e36373b671a7cec61ac10db48413d9f","modified":1735301334323},{"_id":"themes/shoka/source/css/_common/components/tags/label.styl","hash":"dff26da9be9a7304780941b95d144d03e6b7b19b","modified":1735301334323},{"_id":"themes/shoka/source/css/_common/components/tags/links.styl","hash":"2732062ecaf3a5fec24442bf2fc25de7f4279ff9","modified":1735301334323},{"_id":"themes/shoka/source/css/_common/components/tags/list.styl","hash":"53ceac76fcaa1353cae910e80449810be0cc4254","modified":1735301334323},{"_id":"themes/shoka/source/css/_common/components/tags/tabs.styl","hash":"950cb00307208fbb332119796c4a1ac850f19941","modified":1735301334324},{"_id":"themes/shoka/source/css/_common/components/tags/note.styl","hash":"0eb5410344a0e4506b641689d6835ea8929553e8","modified":1735301334323},{"_id":"themes/shoka/source/css/_common/components/tags/tags.styl","hash":"b353f2dfc373508d0e0c798bd22107f63591054f","modified":1735301334324},{"_id":"themes/shoka/source/css/_common/components/post/breadcrumb.styl","hash":"43f7a0d6c7f7bde6a4e521acb67a5b0543a12b77","modified":1735301334320},{"_id":"themes/shoka/source/css/_common/components/tags/player.styl","hash":"f182dad19b6cc575a1631713a00fd7f0d4516c19","modified":1735301334324},{"_id":"themes/shoka/source/css/_common/components/tags/quiz.styl","hash":"cc0fbb250fdf00887c043e41f0cb777f4f46f992","modified":1735301334324},{"_id":"themes/shoka/source/css/_common/components/post/copyright.styl","hash":"0a3991a291b53301c6a3f5a86532ea75b8acf355","modified":1735301334320},{"_id":"themes/shoka/source/css/_common/scaffolding/base.styl","hash":"415635fa6f145a53a10fa7f0b72247747530f9e7","modified":1735301334334},{"_id":"themes/shoka/source/css/_common/components/post/expand.styl","hash":"ecd24e46405f6e2f08394d7e1e65c86b9294642f","modified":1735301334321},{"_id":"themes/shoka/source/css/_common/components/post/footer.styl","hash":"256f45905d0d1b17d74b6cbfebdc5ef7a107ed83","modified":1735301334321},{"_id":"themes/shoka/source/css/_common/components/post/header.styl","hash":"b1b13db6e10a9b46fbd052dc4db1aa1cfb97ab97","modified":1735301334321},{"_id":"themes/shoka/source/css/_common/components/post/nav.styl","hash":"7c8f1bf2c755b8c3d1a41eaf1aa6f59d3c23a4a2","modified":1735301334321},{"_id":"themes/shoka/source/css/_common/components/post/reward.styl","hash":"897a0a0e37ed23ef8ca6c644b3794cf8c32f1650","modified":1735301334322},{"_id":"themes/shoka/source/css/_common/components/post/post.styl","hash":"510d1f7457c2191f8a7bd84ce79cc3c0aade44a8","modified":1735301334321},{"_id":"themes/shoka/source/css/_common/components/post/rtl.styl","hash":"4a431ec0b382ae6693f1aee54599da18eddc6a59","modified":1735301334322},{"_id":"themes/shoka/source/css/_common/components/post/tags.styl","hash":"e3348bf77b141068b91181655945277d6270312b","modified":1735301334322},{"_id":"themes/shoka/source/css/_common/components/third-party/loading.styl","hash":"dc513c323ac3555a94e96809d57d09bc4d65fc2b","modified":1735301334325},{"_id":"themes/shoka/source/css/_common/components/third-party/pace.styl","hash":"c93cb3a4715394f8a35db9bb65e03aea8bda45da","modified":1735301334327},{"_id":"themes/shoka/source/css/_common/components/third-party/search.styl","hash":"33b29d3782f058f2b8b89deb3f738fda2517ca4c","modified":1735301334327},{"_id":"themes/shoka/source/css/_common/components/third-party/theme.styl","hash":"2d112448cc435b58c57ebd9b31e016e6ae8af5d0","modified":1735301334327},{"_id":"themes/shoka/source/css/_common/components/third-party/third-party.styl","hash":"68ee764bfb8bb0bb478cd41c78895dd341600d26","modified":1735301334328},{"_id":"themes/shoka/source/css/_common/components/third-party/valine.styl","hash":"59c69ea7817c0348872f865d406b9650814279ce","modified":1735301334328},{"_id":"themes/shoka/source/css/_common/components/third-party/widgets.styl","hash":"71fe298ba9de676ebc3c00febe10784aa7dc119a","modified":1735301334328},{"_id":"themes/shoka/source/css/_common/outline/footer/footer.styl","hash":"66592076afe7b86b7962aac5451e0b5248d7172e","modified":1735301334328},{"_id":"themes/shoka/source/css/_common/outline/header/brand.styl","hash":"6335d84443326d19fff8e17f364d4cace8f19445","modified":1735301334329},{"_id":"themes/shoka/source/css/_common/outline/header/header.styl","hash":"ca7f94ebb0f3090405aab79889b81d4e708a6ab6","modified":1735301334329},{"_id":"themes/shoka/source/css/_common/outline/header/image.styl","hash":"0777d91cbc7e228426c46ee97627a32054526013","modified":1735301334329},{"_id":"themes/shoka/source/css/_common/outline/header/menu.styl","hash":"3b309ade55860b4d8c693b336a33e470436a32b7","modified":1735301334329},{"_id":"themes/shoka/source/css/_common/outline/header/nav.styl","hash":"b267a98cfee639dad82e0889b29ac5bee2634ab6","modified":1735301334330},{"_id":"themes/shoka/source/css/_common/outline/header/tool.styl","hash":"1fa043670ba8cc2a4c86081e5dd88e9ed4b1f978","modified":1735301334330},{"_id":"themes/shoka/source/css/_common/outline/header/right.styl","hash":"d9a7f9923ea7ad2b3aeda9ce7140697f9d094054","modified":1735301334330},{"_id":"themes/shoka/source/css/_common/outline/header/waves.styl","hash":"f9e6ae9e36429568c0323a112f39d6ea2baaefd6","modified":1735301334330},{"_id":"themes/shoka/source/css/_common/outline/sidebar/author.styl","hash":"a09b34b35d31a4b8e275bfbb92efa48fe6608d2f","modified":1735301334331},{"_id":"themes/shoka/source/css/_common/outline/sidebar/dimmer.styl","hash":"66f159f21cafe1dc71570f7018678a0a3862c175","modified":1735301334331},{"_id":"themes/shoka/source/css/_common/outline/sidebar/menu.styl","hash":"46df47361148673e6c2ce114b4f498be63c0e4ab","modified":1735301334332},{"_id":"themes/shoka/source/css/_common/outline/sidebar/related.styl","hash":"e300d2ec33fb7bfbc9310578b8891eb6cd137e86","modified":1735301334332},{"_id":"themes/shoka/source/css/_common/outline/sidebar/quick.styl","hash":"01b34ce24ad3dde1147c8f3a6babd70e3d45b461","modified":1735301334332},{"_id":"themes/shoka/source/css/_common/outline/sidebar/sidebar.styl","hash":"6a1a13ecc6de3ceba1957f95aa852d440abaae9b","modified":1735301334332},{"_id":"themes/shoka/source/css/_common/outline/sidebar/social.styl","hash":"33f6459f44e15ef3320e3b208e5345ff1d0cee5f","modified":1735301334332},{"_id":"themes/shoka/source/css/_common/outline/sidebar/state.styl","hash":"c2eaaba4c35df5253ae236318b5e6f76861d37f8","modified":1735301334333},{"_id":"themes/shoka/source/css/_common/outline/sidebar/tab.styl","hash":"b6f604f7293230d0113dabe5deeb61b809fdf035","modified":1735301334333},{"_id":"themes/shoka/source/css/_common/outline/sidebar/toc.styl","hash":"5836be92d4d153bd44ff86fe05e0ce83b11ae569","modified":1735301334333},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/cover.jpg","hash":"57341ddf90eeb71d0b9a3fef8cf1f094f9c299b3","modified":1735301334289},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/week-1.md","hash":"8284465659be7a4b7568244264bc236c01a6d1cb","modified":1735301334289},{"_id":"themes/shoka/example/source/_posts/computer-science/java/course-1/week-2.md","hash":"5efffda6c8abc24a1d4671c54928cfe7fb838ce5","modified":1735301334289},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/dependents.md","hash":"5048e40092f39f776060e083c822698e5842a3ea","modified":1735301334291},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/config.md","hash":"19c4015857b6953da18628967b7a0b84e624a43d","modified":1735301334290},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/display.md","hash":"fce410e8e5756ea256c6a23ee688455bb8d51e93","modified":1735301334291},{"_id":"themes/shoka/example/source/_posts/computer-science/note/theme-shoka-doc/special.md","hash":"3c0c0bf6b7cd1ab3c12e0d097330937a2803ed10","modified":1735301334291},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/class.styl","hash":"0d9b0d1d2ecf981b881e9416fc770d47f679a50f","modified":1735301334325},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/flowchart.styl","hash":"83296761c85b8e82d0757b1a4792a74d50509d2d","modified":1735301334325},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/gantt.styl","hash":"bae6617a32026891f510483aa6d25c70a82c5945","modified":1735301334325},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/git.styl","hash":"a7e5f3bb9378b1a4fb0f710e28a02fd4fd1b3040","modified":1735301334325},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/pie.styl","hash":"bce4029a87d60ba40ff4faadb9d95c76b824141a","modified":1735301334326},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/sequence.styl","hash":"7e91e07c39e1c1343626c8d5b9fecfebc6c086f6","modified":1735301334327},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/mermaid.styl","hash":"e54378b88ce839626bdbcb00676d79dbe70a742c","modified":1735301334326},{"_id":"themes/shoka/source/css/_common/components/third-party/mermaid/state.styl","hash":"83d21d840bd2bc4249e2dced49efe8cef2281f05","modified":1735301334327},{"_id":"themes/shoka/source/images/avatar2.jpg","hash":"6d822e6628b65fbd1fbff686087fbcc2d7ae6382","modified":1735304626888},{"_id":"source/_posts/开发问题记录-AI命理师/cursor-1.jpg","hash":"9cb9dd29fcc6a6bd98e401bd4ba8535015db4a02","modified":1740368024839},{"_id":"themes/shoka/example/source/assets/wallpaper-2572384.jpg","hash":"1df3620ab8c69fe2498a746f8ead057162df0637","modified":1735301334298},{"_id":"themes/shoka/source/images/avatar1.jpg","hash":"52b71d65705cb960ef224763cb709207e741a199","modified":1735304581922},{"_id":"themes/shoka/screenshot.png","hash":"676ab8bfe3fa106e5b88617ab377cd6b438cc0d9","modified":1735301334314},{"_id":"themes/shoka/example/source/assets/wallpaper-878514.jpg","hash":"9f9705a377c42320b335b3c66b023e62b80e56e3","modified":1735301334302},{"_id":"themes/shoka/example/source/assets/wallpaper-2311325.jpg","hash":"ddaaaeb4fa04a05c83053c1f8149720d18c9c8de","modified":1735301334297},{"_id":"source/_posts/react/cover.jpg","hash":"af2cf40a8c8db8f37c8fd7e5418f6f1c41aaed7c","modified":1735307585655},{"_id":"public/rss.xml","hash":"576a29cb2a904adce26265748c819adf2e92b3cb","modified":1740554397909},{"_id":"public/search.xml","hash":"99b23f498c9d2061ee732ba0155ff4cf3163c59f","modified":1740554397909},{"_id":"public/atom.xml","hash":"f9f1515512bec8c5b5c663a3b0e95ac845e6b822","modified":1740554397909},{"_id":"public/feed.json","hash":"07bc10083dedd440cb4845a5e54c9d3716c89d78","modified":1740554397909},{"_id":"public/js/app.js","hash":"edbf1186c18baf58e467c204425968ea2577532b","modified":1740554397909},{"_id":"public/categories/index.html","hash":"37e7e148fc229c02fb287d0703c85817c747a862","modified":1740554397909},{"_id":"public/about/index.html","hash":"d57856c324eb687c8e03eba3ba01e12a94a4af83","modified":1740554397909},{"_id":"public/tags/index.html","hash":"82e94988b213d2792d93e7dc86e9f72e29b5602c","modified":1740554397909},{"_id":"public/2025/02/26/浏览器输入URL会发生什么/index.html","hash":"d10b859bed4e23c53f7f46198a49c3112472dfd1","modified":1740554397909},{"_id":"public/2025/02/24/开发问题记录-AI命理师/index.html","hash":"a6b7b0ddc3efb5533971e27306a453fc46341e39","modified":1740554397909},{"_id":"public/2025/02/21/Flex与Grid布局/index.html","hash":"98db3b136ea673791c63e21523f53e3da37bd835","modified":1740554397909},{"_id":"public/2025/02/21/TypeScript与JavaScript/index.html","hash":"589e221dbee93d672605e730ca115f6b781e057b","modified":1740554397909},{"_id":"public/2025/01/20/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/index.html","hash":"d90a2b245730d6b581817b7b670498af0d8f9174","modified":1740554397909},{"_id":"public/2025/01/20/FMRI2TXT-非侵入性语言脑机接口/index.html","hash":"efbcc8b3de70687f41fd9cfd5efe4695e0623fec","modified":1740554397909},{"_id":"public/2025/01/12/前端学习之JS篇（三）/index.html","hash":"8d502e829919a981c43af43077c27aec05ccdefd","modified":1740554397909},{"_id":"public/2025/01/09/node版本引起的加密库OpenSSL无法支持算法问题/index.html","hash":"30b945b9e16adf9301661f52aa2d7a2ff5b98fc0","modified":1740554397909},{"_id":"public/2025/01/09/前端学习之JS篇（二）/index.html","hash":"ebe387a18894daeb80722a0ef54391459a4fb82f","modified":1740554397909},{"_id":"public/2025/01/07/前端学习之JS篇（一）/index.html","hash":"f984230832631409cbdca2b18cb0ea129167a59b","modified":1740554397909},{"_id":"public/2025/01/06/React与Vue/index.html","hash":"7807660f361831600c2d23b1783b5f42df35f1be","modified":1740554397909},{"_id":"public/2025/01/06/项目对比注解/index.html","hash":"51150360d7bc0aa3ed18b433033da50c6ff2eede","modified":1740554397909},{"_id":"public/2025/01/06/vue脚手架一览表/index.html","hash":"2df58ce1d6e200c1d7047e8f0ca75530d1d7f747","modified":1740554397909},{"_id":"public/2025/01/06/Sass-Scss-css预处理器/index.html","hash":"5d1aad219308aef2ead3cab79b9cb5b976643e50","modified":1740554397909},{"_id":"public/2025/01/05/vue进阶一览/index.html","hash":"3d06143a3613163d197f67475ac6b118a0c2f73c","modified":1740554397909},{"_id":"public/2025/01/05/vue基础一览/index.html","hash":"76a40348dc8b98c1d6526d8f69721dc32b83ac43","modified":1740554397909},{"_id":"public/2025/01/05/okjob-wztj项目对比/index.html","hash":"a890ff9abeb63abe3e81011df9be7baa9c4ac645","modified":1740554397909},{"_id":"public/2025/01/02/将vite构建的vue3项目部署到githubpage教程/index.html","hash":"3af9f1641bea496f8d9a8c88fd633cbc6b97327a","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/index.html","hash":"2ac9d7515904f2e0f4f4cbc87156f06bd24e7c55","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（一）/index.html","hash":"e58c302ddc76e4805decf087b896ea906f87d2db","modified":1740554397909},{"_id":"public/2024/12/28/自用常备linux命令/index.html","hash":"08b6b3313ab86ba83fc93677093d8f66baeb2ec8","modified":1740554397909},{"_id":"public/2024/12/28/超级常用的一些git命令/index.html","hash":"cadeed910032ca83b1e6b652731a4d867b583241","modified":1740554397909},{"_id":"public/2024/12/28/简单有效的密钥配置教程/index.html","hash":"c6a01090cb30399e432a9c85792f7f99fd0d1a3b","modified":1740554397909},{"_id":"public/2024/09/17/SEO优化策略总结/index.html","hash":"0d77ffac3e7e456377ba0c67a19966925cacd23e","modified":1740554397909},{"_id":"public/2024/09/17/Ant-design-vue中icon的使用/index.html","hash":"596441bd0de575dc33fcf18ca960ab9f93997e9b","modified":1740554397909},{"_id":"public/2024/09/17/flex弹性布局/index.html","hash":"dd7edab853d7c55a9056f698fd05a9059bdda60a","modified":1740554397909},{"_id":"public/2024/09/17/vue3-Router路由/index.html","hash":"cd6f0a2d09e2b1aaf59a62310bf95a747b267525","modified":1740554397909},{"_id":"public/2024/08/19/机器翻译赛-seq2seq与transformer/index.html","hash":"1171eb9cf4e8cadd567b09ba7917b659c16d2497","modified":1740554397909},{"_id":"public/2024/08/19/机器翻译赛-门控循环单元GRU/index.html","hash":"fc8f38e20f8569f45c9f24dc68c3587f50eabdc2","modified":1740554397909},{"_id":"public/2024/08/17/基于术语词典干预的机器翻译挑战赛/index.html","hash":"1b4a80ca51816bdc759e0527c5a3117698150f1a","modified":1740554397909},{"_id":"public/2024/08/17/前端编程语言/index.html","hash":"7e402aafb3907d6dbb06119d188536c4c0ab8c51","modified":1740554397909},{"_id":"public/2024/08/12/HTTP协议相关知识/index.html","hash":"f86b22ed4c21945e859a122d33c73eee024e96d0","modified":1740554397909},{"_id":"public/2024/08/02/计算机网络-基础知识笔记（一）/index.html","hash":"6bb8e038067353e4a8022cd6c776941e6ee10ccb","modified":1740554397909},{"_id":"public/2024/07/31/前端基础-浏览器是如何运作的/index.html","hash":"4a2f7ecdd669be511b46b38dcded76953453ea00","modified":1740554397909},{"_id":"public/2024/07/29/大模型基础/index.html","hash":"7c60bd1221d402ef1afaaf956cb45d32772ccfbc","modified":1740554397909},{"_id":"public/2024/07/27/前端基础-互联网基本原理/index.html","hash":"e358fe1eedf8be1997fa2bb4982cc3c8d742453c","modified":1740554397909},{"_id":"public/2024/07/29/前端基础-HTTP基本概念/index.html","hash":"6bc2133e3e9f5df61e8a2062f93f2b79916758ad","modified":1740554397909},{"_id":"public/2024/07/25/昇腾CANN-Ascend-C算子开发学习笔记/index.html","hash":"9a7de97c9b2af70a829e4b52d047dda256f8e231","modified":1740554397909},{"_id":"public/2024/07/22/前端学习记录-翻页漫画书/index.html","hash":"40a91aa406ab1ee29843eefee67ca6e871155b8e","modified":1740554397909},{"_id":"public/2024/07/25/前端学习记录-简约唯美登录页面/index.html","hash":"bdfdd16e87efcf85e8da62893ae3819a05242738","modified":1740554397909},{"_id":"public/2024/07/22/前端学习记录-时间轴效果实现/index.html","hash":"2f0461c0b154fc8129b360700bfef43d4fd2be8e","modified":1740554397909},{"_id":"public/2024/07/18/hello-world/index.html","hash":"f8054e936b114bf0c0bb4ee4576135f610a64285","modified":1740554397909},{"_id":"public/archives/index.html","hash":"a3fb081a0b158805361f193510a3ed4dd7896397","modified":1740554397909},{"_id":"public/archives/2024/index.html","hash":"134fc92aa5bf565fe5306be769c27470cef52d8d","modified":1740554397909},{"_id":"public/archives/2024/page/2/index.html","hash":"724491a34cb90c83e49219bcf0655539bf53f2ee","modified":1740554397909},{"_id":"public/archives/2024/page/3/index.html","hash":"5338004628333b63cb96a0904455196d39261d6a","modified":1740554397909},{"_id":"public/archives/2024/07/index.html","hash":"3b6ca88babaa4c53b8dad2778611b858829af0bd","modified":1740554397909},{"_id":"public/archives/2024/09/index.html","hash":"2efc06c4b9fea4dd9c690f15b4ee47be18c0dd7f","modified":1740554397909},{"_id":"public/archives/2024/08/index.html","hash":"6afcf88dbe365ae872b7c920f1df3358b30c6a0a","modified":1740554397909},{"_id":"public/archives/2024/12/index.html","hash":"bea847013053741892c556b5e121650aed3e43c5","modified":1740554397909},{"_id":"public/archives/2025/page/2/index.html","hash":"5053a197d161fcd838a59c364c516bbbcea1ca52","modified":1740554397909},{"_id":"public/archives/2025/index.html","hash":"ebd7169a0aad80a6098108606c9bff416f761715","modified":1740554397909},{"_id":"public/archives/2025/01/index.html","hash":"098e81311209b2c8380e3330fc0516ba51cc38d1","modified":1740554397909},{"_id":"public/archives/2025/01/page/2/index.html","hash":"6f559153e26335c7af6943dbeedbe7d81c608b3b","modified":1740554397909},{"_id":"public/archives/2025/02/index.html","hash":"c77e8c2b7c3f674f3b5da2f05584def04e546f0b","modified":1740554397909},{"_id":"public/categories/vue/index.html","hash":"8e4cdc03b4f34d4a3a8f69d13ead7de65bdf6791","modified":1740554397909},{"_id":"public/categories/vue/page/2/index.html","hash":"8aa05a4f8799f8d6a9b42d25bf40dd1af5d3f977","modified":1740554397909},{"_id":"public/categories/deep-learning/index.html","hash":"faf2e83f99afb2684459fba8b09511238fdb763c","modified":1740554397909},{"_id":"public/categories/computer-science/index.html","hash":"3251f86d7cda41e62817ee6d6bd9dc307fe88d1c","modified":1740554397909},{"_id":"public/categories/computer-science/page/2/index.html","hash":"694f46e228013497d695a07974933a80957be2b4","modified":1740554397909},{"_id":"public/categories/react/index.html","hash":"4d2f92b3a7e2a7e19a76f4b83ebb2188718c300c","modified":1740554397909},{"_id":"public/categories/front-end/index.html","hash":"9dafbcba1097766b36994100e313ce5882fb022e","modified":1740554397909},{"_id":"public/categories/front-end/page/2/index.html","hash":"97eacc70ca14b6be6b121484c599827a7ae9f06c","modified":1740554397909},{"_id":"public/index.html","hash":"4bb0028f0387bd9615bd709fff4fbdff70de2257","modified":1740554397909},{"_id":"public/categories/machine-learning/index.html","hash":"81c8dffc3e2bc7c71cf41f679fe504dd2e3cc056","modified":1740554397909},{"_id":"public/page/2/index.html","hash":"2969c08145517d6b58ac36ce4b2b7653fdfb10a2","modified":1740554397909},{"_id":"public/page/3/index.html","hash":"80be18c0dae56313d3e0e01f261d3b65f7b9ab08","modified":1740554397909},{"_id":"public/page/4/index.html","hash":"6389541e8fd0b5d04918556bb75986e9af9404a6","modified":1740554397909},{"_id":"public/page/5/index.html","hash":"c2853973634916f69267a199b66f1e9414dca079","modified":1740554397909},{"_id":"public/tags/Vue/index.html","hash":"23f3a7d1ecdcc0061884e104feb262a30b43b4b8","modified":1740554397909},{"_id":"public/tags/Vue/page/2/index.html","hash":"ef064cc07d0a33b1ce6a0d1ceb56fce3c1a5dd94","modified":1740554397909},{"_id":"public/tags/脑科学/index.html","hash":"a7ac1c01feff752c0f219ba6d126c0392d542e18","modified":1740554397909},{"_id":"public/tags/React-Vue/index.html","hash":"073f23c5add0d2077e0fe649d4246524dfbf564d","modified":1740554397909},{"_id":"public/tags/前端/index.html","hash":"adcf4ed2d59177fe84e7e88a84bd295a6da65121","modified":1740554397909},{"_id":"public/tags/前端/page/2/index.html","hash":"eef48b103a1edf563edc8f77a00b029ab26afa35","modified":1740554397909},{"_id":"public/tags/前端开发/index.html","hash":"694a0ce44f606d0b8f410b56b19648bb6ec4f490","modified":1740554397909},{"_id":"public/tags/计算机网络/index.html","hash":"d6d9352eb87bfb66f29ec08674808308daacaa2f","modified":1740554397909},{"_id":"public/tags/NLP/index.html","hash":"c05971d5703c5225b9bb0969a3f8447070f06882","modified":1740554397909},{"_id":"public/tags/大模型-NLP/index.html","hash":"1ac85f5cb5fa5781a98229124de614fc17279761","modified":1740554397909},{"_id":"public/tags/操作系统/index.html","hash":"710b7302d1f1319c4162a2ea4f3b89f272773a7e","modified":1740554397909},{"_id":"public/tags/操作系统-计算机组成原理/index.html","hash":"ab44a37ec1adaaf4d073143b4ab46135642654e2","modified":1740554397909},{"_id":"public/tags/linux/index.html","hash":"29caef0c7d5d43b9dfff623cbc8d755a15e78346","modified":1740554397909},{"_id":"public/404.html","hash":"f2ae4d756407a8d2d37d9c11688be1534a773759","modified":1740554397909},{"_id":"public/tags/git/index.html","hash":"aac16dae8da0049ffec7ce071de5094e01b93245","modified":1740554397909},{"_id":"public/images/404.png","hash":"b7b18f6689d0a14041d87bab6c4e4ce567249d01","modified":1740554397909},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1740554397909},{"_id":"public/images/apple-touch-icon.png","hash":"d4e5d65ff663cb71f43515e68d757cbae1ceb3ec","modified":1740554397909},{"_id":"public/images/failure.ico","hash":"5eec5c163400d8ece74286da49130da1ead3f6f6","modified":1740554397909},{"_id":"public/images/logo.svg","hash":"830dfbd6dff2986130819f747b25db230b05ca84","modified":1740554397909},{"_id":"public/images/favicon.ico","hash":"8ae48d9e33b7593cd005aae88b755aa9ce129f0e","modified":1740554397909},{"_id":"public/images/paypal.png","hash":"872d4b6d3cacee4845246fbf29817f1ee98bb037","modified":1740554397909},{"_id":"public/images/play_disc.png","hash":"3cfa8dd2e12424c52d1f5e34e9502e446fecde9c","modified":1740554397909},{"_id":"public/images/search.png","hash":"08c4f6a7a92eff3548aec94b267a23a25e6bd215","modified":1740554397909},{"_id":"public/images/play_needle.png","hash":"e0998828ab50ce37617f9f4d46b74648206ac852","modified":1740554397909},{"_id":"public/images/wechatpay.png","hash":"93842f7e28d7993a8dec3bf69054cacfd8f977b1","modified":1740554397909},{"_id":"public/2024/09/17/Ant-design-vue中icon的使用/01.jpg","hash":"27e1c6fd73fd451796ddc5262b5960ed92bdae04","modified":1740554397909},{"_id":"public/2024/09/17/Ant-design-vue中icon的使用/03.jpg","hash":"ebdd5776caa17b3d4c6c92f6f6d91bbc9c152faa","modified":1740554397909},{"_id":"public/2024/09/17/Ant-design-vue中icon的使用/02.jpg","hash":"b00cbbfe8f41088db43aabd8e77cbab031112645","modified":1740554397909},{"_id":"public/2024/09/17/Ant-design-vue中icon的使用/04.jpg","hash":"0fe708d469da42ae2be8c233b3518b93a66d30f2","modified":1740554397909},{"_id":"public/2024/08/12/HTTP协议相关知识/1.jpg","hash":"19ce5b25d18b3baa383ce14efc9b5f43be3866c5","modified":1740554397909},{"_id":"public/2024/08/12/HTTP协议相关知识/2.jpg","hash":"82ce87787474d2ee15043b514b3e464f29872d5b","modified":1740554397909},{"_id":"public/2024/08/12/HTTP协议相关知识/报文.jpg","hash":"4eca1fd36537e0830e57cda23f61409cb1171b9a","modified":1740554397909},{"_id":"public/2024/08/12/HTTP协议相关知识/gateway.jpg","hash":"70cf622ac091360882515af30067693e909b0526","modified":1740554397909},{"_id":"public/2024/08/12/HTTP协议相关知识/请求代码和报文.jpg","hash":"2e1a91a06530b397bc47fe48c5ebd95c83502d6f","modified":1740554397909},{"_id":"public/2024/09/17/flex弹性布局/01.png","hash":"1ecaac9b18d66edf3ab7aeaadde91dd7b47ac4f5","modified":1740554397909},{"_id":"public/2024/07/31/前端基础-浏览器是如何运作的/03.gif","hash":"48b947430e110a022e8e530acacc3d774d3bad1d","modified":1740554397909},{"_id":"public/2024/07/31/前端基础-浏览器是如何运作的/01.jpg","hash":"aa7e916a1a6d04cbe80f7f4e1775b6caceb5eb29","modified":1740554397909},{"_id":"public/2024/07/31/前端基础-浏览器是如何运作的/02.jpg","hash":"9098925ee00dd180375bbcbceb586a627750fc9a","modified":1740554397909},{"_id":"public/2024/07/31/前端基础-浏览器是如何运作的/04.png","hash":"b0b1234592aa96ccf58427938d475a15c6a088e2","modified":1740554397909},{"_id":"public/2024/07/29/前端基础-HTTP基本概念/02.jpg","hash":"9027476d9fcb77d2af3876a153b3457fdab95d7c","modified":1740554397909},{"_id":"public/2025/01/07/前端学习之JS篇（一）/01.jpg","hash":"89e63c8be4c57a9dd68bb208e710535a27f3d469","modified":1740554397909},{"_id":"public/2024/08/17/前端编程语言/01.jpg","hash":"1ca7fe528e0e3e6e0292d825178d8639b20a5538","modified":1740554397909},{"_id":"public/2025/01/20/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/01.png","hash":"a1b3b0940b6a5e2ffcf765adf49e48d54d455138","modified":1740554397909},{"_id":"public/2025/01/20/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/03.png","hash":"06a0d51263aab476fafe000bee02f0b843440704","modified":1740554397909},{"_id":"public/2025/01/20/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/02.png","hash":"124d4f1b27d4b03be5336945de7d031501b5a3ed","modified":1740554397909},{"_id":"public/2025/01/20/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/04.png","hash":"e03f3bfbd777cd7381aee282401e8dd220e32305","modified":1740554397909},{"_id":"public/2024/08/17/基于术语词典干预的机器翻译挑战赛/attention.png","hash":"e9ad528381a6bcf2ae4d11c36461233004959360","modified":1740554397909},{"_id":"public/2024/08/17/基于术语词典干预的机器翻译挑战赛/e-d.png","hash":"da737d550ac553ad274c3f1ceb0a841e9de09595","modified":1740554397909},{"_id":"public/images/alipay.png","hash":"1d5d6f8a122b6a938cf382bc651401c19e60cff7","modified":1740554397909},{"_id":"public/images/avatar.jpg","hash":"6d822e6628b65fbd1fbff686087fbcc2d7ae6382","modified":1740554397909},{"_id":"public/images/avatar2.jpg","hash":"6d822e6628b65fbd1fbff686087fbcc2d7ae6382","modified":1740554397909},{"_id":"public/2024/07/29/前端基础-HTTP基本概念/01.jpg","hash":"3b8a3ab3c37f5f1de9a5b920350aa77ec6c6be6b","modified":1740554397909},{"_id":"public/2024/07/29/前端基础-HTTP基本概念/03.jpg","hash":"279b5b2c537ae6957a92cb4f64f08f932a5f5ad6","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/07.jpg","hash":"c6d3227f94aead4aceb8cdd992441e7a6c1f1f66","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/09.jpg","hash":"037e2cd724366bb0a547ed3740935bc64a2cd29d","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/10.jpg","hash":"919e7eea1aaab2e68baaf6baf0108fb03dd247c2","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/TCP_IP_五层协议.jpg","hash":"9b4795a485098fc28649e7f0487ddff891056ce2","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/08.jpg","hash":"008cca8e9868a90e9a536861bc8c62ce9cbcabc8","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（一）/http1长短连接.jpg","hash":"81f817525811e11520f9477f3ca7d58dbe1ffdea","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（一）/HTTP与HTTPS.jpg","hash":"45c66d9f9831fcfdce1aebc9d80213d59a565cdd","modified":1740554397909},{"_id":"public/2024/08/17/基于术语词典干预的机器翻译挑战赛/no_attention.png","hash":"3bb07c947bdf7ed63010421fb731ec63e66d8430","modified":1740554397909},{"_id":"public/2024/08/17/基于术语词典干预的机器翻译挑战赛/RNN_BLUE.png","hash":"2cda79c41b2d73fce83ecac1112a9aa085f1d857","modified":1740554397909},{"_id":"public/2024/07/29/大模型基础/attention01.png","hash":"7a0742292cc0053681ff44500bf11fb0e23ff4a1","modified":1740554397909},{"_id":"public/2024/07/29/大模型基础/attention原版.png","hash":"8da277e2d0bc43da1130bcb1e44afaa939aae8bd","modified":1740554397909},{"_id":"public/2024/07/29/大模型基础/BNLN.jpg","hash":"dfd57e6980286f456298b9706e2c7df365dc3d9a","modified":1740554397909},{"_id":"public/2024/07/29/大模型基础/Attention公式.png","hash":"83c547248d74271665705704292abbd8fdd94ca0","modified":1740554397909},{"_id":"public/2024/08/19/机器翻译赛-门控循环单元GRU/01.png","hash":"48a7beb442024ec10a6734c377e431c3c201758d","modified":1740554397909},{"_id":"public/2024/08/19/机器翻译赛-门控循环单元GRU/02.png","hash":"abacd1324b85440451c5105c0464b06422b4692a","modified":1740554397909},{"_id":"public/2024/08/19/机器翻译赛-门控循环单元GRU/03.png","hash":"6c5fe3c82186f3db2bf189bae42ff8baefd45e8e","modified":1740554397909},{"_id":"public/2024/08/19/机器翻译赛-seq2seq与transformer/01.png","hash":"2bed5d7432f8b9debdf4b9dbab602c598b1d653f","modified":1740554397909},{"_id":"public/2024/08/19/机器翻译赛-seq2seq与transformer/02.png","hash":"b928d84f3386802106641457084b9a6764421895","modified":1740554397909},{"_id":"public/machine-learning/cover.jpg","hash":"87131683a3ef9cc7e1655d6db5be60ba0f3d5b67","modified":1740554397909},{"_id":"public/2025/01/20/FMRI2TXT-非侵入性语言脑机接口/01.jpg","hash":"2ebdba6bf850f1dec0d6c0ea2f1251c34873ed8e","modified":1740554397909},{"_id":"public/2024/07/29/前端基础-HTTP基本概念/04.jpg","hash":"c46b972f6733fd6bd150bb3a6c054283e3ecb03a","modified":1740554397909},{"_id":"public/2024/07/29/前端基础-HTTP基本概念/05.jpg","hash":"76f1f6f9f051b7eec76ebe5e889194032a8a5562","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/03.jpg","hash":"2f1784a7d7c994508d265067af130604dd9e9cc4","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（一）/TLS加密.jpg","hash":"2864a29b79d5f5789c8432ec82764e11a25f1949","modified":1740554397909},{"_id":"public/2024/08/17/基于术语词典干预的机器翻译挑战赛/encore.png","hash":"bdb5794f0208bbf8f6cd198696c26351a14a4ee2","modified":1740554397909},{"_id":"public/2024/07/29/大模型基础/transformer原版.png","hash":"d0ecdeb56fb268280a6b81446e800401bcd40259","modified":1740554397909},{"_id":"public/deep-learning/cover.jpg","hash":"23e55519f2f5155aba0c58d696b2b190ff5dbfcb","modified":1740554397909},{"_id":"public/css/app.css","hash":"fb62784c136a79ddbbf27a495b5d7b56be4db709","modified":1740554397909},{"_id":"public/css/mermaid.css","hash":"9f25b3bd688df703a313335fb362740e7aaeec24","modified":1740554397909},{"_id":"public/css/comment.css","hash":"5e1870d98d2f158299ee9e91fa46c9ba9a210eb5","modified":1740554397909},{"_id":"public/2024/07/29/前端基础-HTTP基本概念/错误码.jpg","hash":"d22c3fee4fd66d301874d380a5fd96f0fbf3d544","modified":1740554397909},{"_id":"public/2025/01/09/前端学习之JS篇（二）/01.jpg","hash":"c7eb04c47b96554e446b916066ee02524f90dc9a","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/04.jpg","hash":"794bf521e24ba369409bd1762301b5955f96f975","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/05.jpg","hash":"e1386dbc17329b43215f4228b3e1447cedf6071e","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/06.jpg","hash":"ef75fcf052c6025f729558a0fabed0317e1ef4c6","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（一）/状态码类别.jpg","hash":"97752c9a96953e76dda15f899972d7815c6f5c16","modified":1740554397909},{"_id":"public/2024/08/17/基于术语词典干预的机器翻译挑战赛/spacy.png","hash":"d3d86f464915046ba6044ef52d16fa4e5ee049fc","modified":1740554397909},{"_id":"public/2024/12/28/超级常用的一些git命令/01.jpg","hash":"3611ddc30ec18768faef40a6395452ddbcd799fb","modified":1740554397909},{"_id":"public/front-end/cover.jpg","hash":"bfeba2c00d7c81809add00201bb033516f986941","modified":1740554397909},{"_id":"public/2025/01/20/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/05.png","hash":"2c587cbad811831061be0510d465242d10c6fc35","modified":1740554397909},{"_id":"public/2024/12/31/前端学习汇总-计算机网络篇（二）/OSI七层模型.jpg","hash":"65be345cc0614e800b034f001ff31dcc707c7ac1","modified":1740554397909},{"_id":"public/2024/07/29/大模型基础/transformer01.png","hash":"0bc5d1fdce6f7a84af4ff73ffd2d9fe1f89b6c9f","modified":1740554397909},{"_id":"public/2025/02/24/开发问题记录-AI命理师/aichat.jpg","hash":"ec9054f906b4fa1d02d77474aa1aab96830e66cd","modified":1740554397909},{"_id":"public/computer-science/cover.jpg","hash":"bb606e90b09d32d8f142e9a3f7f3191d5e593bc6","modified":1740554397909},{"_id":"public/images/avatar1.jpg","hash":"52b71d65705cb960ef224763cb709207e741a199","modified":1740554397909},{"_id":"public/2025/01/20/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/06.png","hash":"ce9141612282d5314c6d7ee73154ed42912315db","modified":1740554397909},{"_id":"public/vue/cover.jpg","hash":"bda8f01c53d1a2a8b2ced5e2a64360a1d111f326","modified":1740554397909},{"_id":"public/2025/01/20/FMRI2TXT-非侵入性语言脑机接口/02.jpg","hash":"6959954707ad4f736f62c3bf0eb1d4e185fae7ce","modified":1740554397909},{"_id":"public/2024/08/17/基于术语词典干预的机器翻译挑战赛/model.png","hash":"ee5b1fa06079d6e1b08fc54b6e2c3253c4d71579","modified":1740554397909},{"_id":"public/2025/02/24/开发问题记录-AI命理师/wx.jpg","hash":"041b5a8dc8c7f16499a3aff653d0e88090912c90","modified":1740554397909},{"_id":"public/2025/02/24/开发问题记录-AI命理师/cursor-1.jpg","hash":"9cb9dd29fcc6a6bd98e401bd4ba8535015db4a02","modified":1740554397909},{"_id":"public/react/cover.jpg","hash":"af2cf40a8c8db8f37c8fd7e5418f6f1c41aaed7c","modified":1740554397909}],"Category":[{"name":"Vue","_id":"cm7ll5df80007mcuy2hgz7sn9"},{"name":"深度学习","_id":"cm7ll5df9000bmcuyf3ds1jyb"},{"name":"计算机科学","_id":"cm7ll5dfa000gmcuyd8ej7wql"},{"name":"React","_id":"cm7ll5dfb000nmcuybozqaniq"},{"name":"前端开发","_id":"cm7ll5dfd000vmcuyeegs8unz"},{"name":"机器学习","_id":"cm7ll5dfn002xmcuyferjclz2"}],"Data":[{"_id":"images/alipay","data":"����\u0000\u0010JFIF\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0001\u0000\u0000��\u0000\u0017Generated by Snipaste��\u0000�\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001��\u0000\u0011\b\u0001>\u0001=\u0003\u0001\u0011\u0000\u0002\u0011\u0001\u0003\u0011\u0001��\u0001�\u0000\u0000\u0001\u0005\u0001\u0001\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\u0010\u0000\u0002\u0001\u0003\u0003\u0002\u0004\u0003\u0005\u0005\u0004\u0004\u0000\u0000\u0001}\u0001\u0002\u0003\u0000\u0004\u0011\u0005\u0012!1A\u0006\u0013Qa\u0007\"q\u00142���\b#B��\u0015R��$3br�\t\n\u0016\u0017\u0018\u0019\u001a%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz�������������������������������������������������������������������������\u0001\u0000\u0003\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\u0011\u0000\u0002\u0001\u0002\u0004\u0004\u0003\u0004\u0007\u0005\u0004\u0004\u0000\u0001\u0002w\u0000\u0001\u0002\u0003\u0011\u0004\u0005!1\u0006\u0012AQ\u0007aq\u0013\"2�\b\u0014B����\t#3R�\u0015br�\n\u0016$4�%�\u0017\u0018\u0019\u001a&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz��������������������������������������������������������������������������\u0000\f\u0003\u0001\u0000\u0002\u0011\u0003\u0011\u0000?\u0000��5m[J�t��k\\���\u001bG��f���mZ��N�4�+d2�^_��I\r���\u0011�I5�ı�\u0012)wuPM\u0000y7�4����\u0000E���\u001d/\u0003���\u000f�i/������o�:^\u0006�\u0000��\u0000\u001f��_���\u0017����t�\r�\u0000��\u0000?᤿go�/\u0005���x\u001b�\u0000��\u0000�I~���^�\u000b���7�\u0000/h\u0000�\u0000�������\u0016�\u0000å�o�^�\u0007�xo�>\u0018�\u000e��\u000f\u0011�>*�.\u001eX��|7����<��ɣ�P�..�$x��\u0012fhۆ\u0000�@\u001b�\u0001���7�\u001b\u000b��\u000b�\u0000�_\u0007����'�������k�K�i\u001a\u001b�k�y������dx��TI\"�\u0019$Ue \u0000z��ݭ�����ͽ���\u0013]]��M\u001d�����m4�\u0017\u0017\u00132E\u0004\u0010D�,�J�\u001cq�;���\u0000<�K���'\\Ԭ4m\u0017�W�]_W�o-��3J��#�;PԵ\u001b��R������Y�����y#����)&�WH�Fv\n@;�\u0011���>\u000fҦ�|]�-\u000b��%�Ɨ\u001aψ�}?Dҭ�f�\nM��w\u0016��<��F�2�o�A<P\u0007/�o�\u001f\t|q�\u001d\u001b�_\u0014~\u001dx�W\u0010Itt�\u000bx��^ ԅ�X�n\r�����\b\"ܾd�/-7\r�2(\u0003�h\u0000�\u000e\u0013��\u0014�\u0019x\u0002���ǟ\u0011�\t���B\u0007����w��?ớ�h�򤸴�Y�,���9v�¯\u001aI�3\u0006�9\u001f�i/������o�:^\u0006�\u0000��\u0000\u001f��_���\u0017����t�\r�\u0000��\u0000��'W�u�2�[еM;ZѵKX�t�[I��Դ�F�u\u000f\u0005ݍ���Z��̄<S��$R)\f�A�\u0000h�\u0007���D~��71Y[�s�;=���k\u0005�?\u0013|\u0015-��2�\"��(\u0013[id�IYb�\u0014C#�B*� P\u0007�kZދ�*�]�\u0016���:&�\u0001�Ե�j��KҴ�e!Z��P��\u000bKH\u0015�T�<��\u000b\u0000[$P\u0007\u000b�ߍ�\u0006�_���xO���\u001f\u0013�wA��F��|+�j�\"%�!�O�u[���h\u000b9�\u0016\b�s`s@\u001e�@\u001c��<w�\u0001Y��\u001e:�<\u0017aw9����g�t�\u000eY�\\�2\u001b{{�b��\u0019�\u0011��\u0018ݤ\b\u000bm�3@\u0014�#�3��\u0007���\u0010|\u0011�i4�MB?\b��A�#ؤ��Ox�5��[$�\n��\u0004\u000eA\nI\u0006�;z\u0000(\u0000�\u0002�\"�xm����h����y�D�\u0018!�\f��4�\u0015H�\u0015�I\u001d�\u0011\u0014�\u0010\u00014\u0001��H~�\b̏��຺�VV���uee8ee:�!�\u0004\u0010FA��\u0003᤿go�/\u0005���x\u001b�\u0000��\u0000�I~���^�\u000b���7�\u0000/h\u0000�\u0000�������\u0016�\u0000å�o�^�\u0001�\u0000\r%�;�{�-�\u0000�K�����\u0003�\u001aK�v�\u0000���[�\u0000\u000e����{@\u001d�\u0000��w��\u001fY\\�~\u0005�|k�Y�\u001b\u001b�C�^!�<Gekz!���������At �\u0019ͼ�,�\u0019��f�\u0011�\u0007U@\u001f�?�Z/�D��\u0014w��������n�?����\u001a|q��1�9���\u0016~$��[�<1��ោ|A��\u001cx�};M��u\bt\u001f\t�[O�u�b[\u001d#N�5[���>��t�\u001b���Z��*\u0000}��\u0000\u000e��\u0000���\u0000�4�\u0000o�\u0000�C�+�\u0000��\u0000\u001f����*o�#O��\u0000�\u0000�7������\u0001�\u0000\u000e��\u0000���\u0000�4�\u0000o�\u0000�C�+�\u0000��\u0000\u001f����*o�#O��\u0000�\u0000�7������\u0007�?\u0018�\u0002|t��|U\u001f�h/��\u0016~\u0005x�m:�X���\u0018�\u001c��Ꮚ��n˭��\u001f��m�h����M\u001c�oz�f�s\u001b��b��\u000f�b�\u0000�R�?��\u001f\u0004\t���g�\u0000R�@\u001f�>5�\u0000���8�\u001dx���\u0001���\u0000\u0005\u0000��|\u000b�\u0007kZ���]�\u0019~�\u0002|1��\n��G���W�<G��oǖ:Ƈ��W��g�iZ������R���\u0014Ѻ\u0000\u000f�X���\u0000����Q�����\u0015�#���\u0005�k�@�w�\u0003���\u001bx\u000bǾ\t���:x��~7�g���\u001dw��.���t/\u0002_�~$�ǉtK�\u001dg@��k��+Xүm5\r:����\u0019�\u0003�Eio�)��\u0013��/���������(\u000f�I�\u001e����\u001f\u0007x'�\u001e\r��>\u0004����1�w��\r��\u001b�|5�x��Y�\u000f��A��Yi\u001a\u001e���]�z��wkaakquq\u0014N\u0001�h�\u0000�M�\u0000�\u0003������/Ǐ�߱?�q�7�w��ګ�/���\u0019�0���\u0019>\u0019�)�U����\u0000\u0013�3�O\u001a�B���\u0013ƞ\f�<!�o\u0003x?úv��x�Ş'�4�\u0003��-�橫j\u0016�6�΀\u001f�\u0017�\u0017�����n��&ſ���!���\u0006~�\u001f�/��K�-G��\u0000\u0001�\u0000e_�^\u0001��~3x�Oе�����\u0003��?\u0010x���Ş�b�y��i�\u001d�\u001a}�����\u0010^�?\u0003�����_������:��?h\u001f�����\u0017�g�\r�\u0013GO\u0019�c���-�1����i\u0006�K_\u0011x��:&�ڍ؊Ckb/\r������c`\u0003�%h\u0003��7�տ���Ț\u0014����'�\u000b�|��\u000ft�\u0019���/�\t��Ob\u0011�SB\u001ex�@]]�\u0015Ѯ�O7\u0006�:\u0019B\u0006\u0019\u0000�\u0007�\u0000��\tx��\ni���X���\u0013w�> �\u0000���#��\u000f\u0019xO�O�b\u001d\u001bQ���+���Z����4�\rx��?\u0001��{�xO�\u001a����i�6�ya����׶���\u0003-\u0000,����*o�#O��\u0000�\u0000�7������\u0001�\u0000\u000e��\u0000���\u0000�4�\u0000o�\u0000�C�+�\u0000��\u0000�/�\u0012�����?f��'O�]�?��߶g��?�y�=�:�1��o�����'�\u000f¯��\u000b|y�\r���\"�O�o��;��/\u0004x�A�!��Z�߉�]3Y��\"����\t��\u0000~��>!�<[��\u0017�^\u0015�4\u0013x_��F��\u000f\u000ex���������A�l��t}oD�4ٮt�WH�t��{�7R�������\u001b�Y��Tv\u0000�\u0000\t�:���~ԟ\n5�kQ��4}#���uM[V�.���3K�4�\u0000��]�������\u0015�����R�����\u0015���RM4�\u001a3\u0000\u000f�\\�\u0000��~ۿ��]�\u0000\u0004����gO�o�����\u0000i?�\u000f����K�\n~\u0004�\u0002����\u001f�O��*��4��\f�=�a��Ş#�<A=����:7��=KQ�\u000bi�Kf�\u0019\u0019@?�O�7\u001b�\t��{�\u000e�\u0000��~��\u0011�5~�?����\u0000��.���<y�G�k����\u0000��K�xn�\u000bDԼQ��\u0005�:\u001d��N�\r��_Dg��q�r\u0005\u0000�M\u0000%?�w���D~ҿ��������/Ə��%��<��\u001aׇ~\n|-���MwH�\u001f��vɪj�O�t-z�\u0000OӚ��o���i�b\u0012�\bZ\u0000���\f���j�\u0000ٗ�_�U��%�1~�߳姊<)����7_\u001b�\u000b|H�Qo�+�-_S��\no\u001exk@�W��9\u0012K����{ttyU\u0015� \u001f�M\u0000|������?g�\u0018�������(�\u000f��\u000e�c���_�\u001f�G�\u001f��1�H�\u0004��j�xcƞ0�u��u\u0015�cc|�\"��E)��A\u001b�\u0003���_�K/�Ig�\u0001�\u0000���:�\u0000�Ơ\u0003�\u001e��\u0000\u0004��\u0000��~�\u001f��\u001f���\u0000<j\u0000�'�ω�9�Oٛ�g�<\u001d�\r\u0013Ş\u0012�_��\u0019����)�֫a��sĞ\u001d�~\u001f�Z����\u001aޗ=֙�h�Ιuk��Z��usc�X\\�wi<��G#\u0000���\u001c�\u000f�>!��W�Z\u000e��\u0013��ŷz>���\u000e�w�޽�j�����:^���\\�\u001a��{q\"Aieeo=��ΑC\u0013�\u0005 \u001feç੿�?��\u0000�\u0000\u0010����\u0000�s@\u0007�:w�\n��\u0000H����\u0000�\r�\u0000h��w4\u0000ç੿�?��\u0000�\u0000\u0010����\u0000�s@\u0007�:w�\n��\u0000H����\u0000�\r�\u0000h��w4\u0001���/�W����g�շ�+�7�{��n|g\u0016�?���9|\u001f���\u0015��>�\u001e�7�����t\t5شi5m)5Y4��M9�==n�&��H\u0001��_�d�������\u0000��Կ�I�!�\u000f�Ҁ?2�_�O�(�������W��\u0000���\u001bA�\u0000)�����h���\u0000���?֫�����\u0001��_\u000bu/������\u000f�\"�W�j�6��x���Qm&�T�\r���5��K��.��B���\r�̛�od^h\u0003��\"\u0010�\u0000�1�@�\n߯\u001b�\u0000�#@\u0007�D!�\u0000\u0004b�\u0000���\u0014�\u0000�^7�\u0000�F�>���n/�;���׊|a�&|o���\u000f\f�+[��犵�\b����.�{b5+]:��cK����ar�Lr��\\7�@\u001f���\u0000\u0007��\u0000�T<?�\u0000f����\u0000J��\u0000�����O�\u0011���\u001d�>���\u0000�A�\u000f�\u001f�\n��\u0000\u0004<�\u0000���h�\u0000��~ܿ\u0017>\u0017~�_\u0016�g���W�W����\u0005�n�'�\u0006��O\nx��\u001e��hZ݀��=�дԴ�.�\u0017\u0016�L#�|ȑ��\u0003�=?e?\u000bx��߲�����\u0016�w\u001a\u001f��\u001f�\u000f�߅�M�ݘ�ޏ�\u000f\u000f�<�擬�wF\u0019%��\u001a~�isi7�,���6�\u001dp�\u0003�F?c��;��c��;����\fP\u0007�&�a?�\u0014��R\u001f�1�ڏ�\u0000Tǌh\u0003��?�Տ�L��?�\u0013�)�\u0000�+5\u0000�M\u0000|��V���\u0000���;�\f�������/�\u001e\u0017�q��\fk>.]]�5�r�ɵ\u001b�:��\u001fL�%\u0013�d�p�h�`8r�-\u0000���\u001d��\u0000\u0005\r��?n}+�E��J��<\u0013��_\u0001�\u001e?����\u0004�\u0014�Q��zi�y����`���A\u001f�e�\u000e��\u0001�u�\u0000\u0006Cɬ~�\u001f�p\u001f\u000f�]M@\u001f�'�%�\u0000\u0005o�\u0000�p~��\u0000\u0014o�\n��ߵ��_�?\u0014��'G�o�\u0017�x�Nڭ����\u001b�\u001e�C��Q��o큚\u001d�,�GΨx�\u000f\u0003?�p��\u0011�\u0007�6\u0007�S��\u0000�^7�\u0000�F�?���\n\u000b�\u0000\u0004��\u0000��~�?��\u0000�S�`~��\u0000�wğ�߳O�#����\u0000\u0018>\u0007|^���e|1�\u001f᧍�ۭc¾/ЗX���Qt�kL����_��W^T��[��P\u0001��?����M���:���\u0001�]\u001e���1�?���+�\u001e,�/�F�C�/��\u0017�WE�t��\u0004�A��7T�����e�/6\u0007��t�\u0010\u000f�ЗB��S��<3��\u0019�M{�~1}\u000bD�-�}�Q��}h��m�\u001ec�\u001f�wyq\r�^c�o�w:�H\u0000����\u001f�K_�(\u001f�\u0013�����?m\u000f�/�]���\u0003�\\���&X�B���Ə�����\u0005�麕�׈5��5�_Vk(n���aa��O��6�F�\u0000?����C�\b��\u0000I\u0003�)�\u0000~�o�\u0000̍\u0000}\t�3�X�\u0000��?�GĤ�=�1~��\r�1|L�D��F�\u0010�x�u6��a\u000bj��:���Z�\u0016b�\u0013(7>a�\u0006�np\u0001��W���+��>\u0012��\u0000��\u0000j�>\u0013�%�\u001f\u0014�o�\u000f�-]]��Mr;G�}6�i\u001af�7����2(�ا��\u0014\u0001���D!�\u0000\u0004b�\u0000���\u0014�\u0000�^7�\u0000�F�\u000f��C�\b��\u0000I\u0003�)�\u0000~�o�\u0000̍\u0000�/�\u001c��T���7�\u0014�Z���2|S���\u001f��\u001f\u0003~\u0012xj\u000f\u0019x]u%Ҥ�t\u001b}y5}5F�a�]��-s\u0000�6�3��q�\u0000|E�?�\u001d?ি�O�?\t|y���cߊ\u001f\u0014�\u0010x��{�\u0011\u001f\u001d�vO\n����\u0000�1�}k���\u0000�ƥ�+\u000b����\u000e�Z5ǝi\u0017�V�9�|F9\u001c\u0003��\u001e�\u0000�,��#��_���G�\u00005�\u0001���\u0003�\u000f�φ_�J���\u000e<y���g�\u001f\u000f�\u0000��~\u0000�G��9�\u0018M���\t��:N��-\u0012���<\u0006�J�,/,.L\u0013M\t�\u0007�6�\u0000�\u0000\u001f�O�R+�0�\u0000���=�\u0000Ձe@\u001f��{���_�\f|g��\u000f���\u0001|0�w���?\u001a��Y\u0017GK���j��q��\u000b+{��\u0004O,j�E��e�\u0010�@\u001f���\u0010��\u0011���\u0007�S��x��\u0000�\u001a\u0000?�!\u000f�#\u0017�$\u000f�����\u000024\u0001����\u0000\u0005\"��?n�k�>\u001d��h�\u0002|r־\u001f�z^��-;�\t�,�\u0006��]���w���\u001a6�\u0019�����\b�������F\t\u0000�.?��\u001f�\u001d?��_�+��_�v���\u0003�\u000f�2k�Q��S�\u0000��j_���\u0010�\u0007�i@\u001f�?�Z/�D��\u0014w��������n�?�O�\r��\u0000��~���4|b�\u0000�p��@\u001f�\u0007�\u001d��\u0000(^���\u0000e��\u000f��\u001b:\u0000�\u0000&�\u0000(\u0003�#�����4O�?��#����a�\u000fß�<o�R���\u0000�7���U��\u0007���\u0000\u0006��\u0000�\u001a>\b��\u0000�g�\u0000R�@\u001f�ԅ�1^�q��ߏ΀?��?�v/�\u0012����w���:����Wß\u0019x���$]?���݂��\u0010֯�?�%����\u000b�Q�i�{����\u0004�\b��\u0001�Z߳ύt\u001f��\u001f�\b�E�3]'��\u0001�ᯍu׳�k���<+�M\u0017]����\u001a6��\u00166\u0013\u0018 \u0005\f��*[ \u0003�%h��8��\t��\u0000\u0005$�\u000f��\t��7j\u001f\u0018�?h\u000f�kᇎeO���4�g?��!?�O�~\u001b�>\u0018�\n/\u0013x��k��t\u0019<M�]95]]�gM:ɦ�x$\u0011m�\u000f������n��\u0014[�\t�\u0000�\u0000\u0005\u0011�W�L�}�>\r����:\u0007���^o\t|M�Ě�ϯ�Ri�\"�J�J�i��0�\\J\fK�a�@\u000f?���93�\tw�Q�Rg��?\r?e�_\u0003]x���Žc�~!O\u001dx�\u001f\bئ�}�9�x���K+ߵ\\\u001b�\u00144\u00024(�}�p\u0000?΋�\nE�\u0000\u0004w��?���\f�j{/�6��^}f��~6����BHd�:����Y��\u0011\b�o0��m9\u0000���\u0000�j��?�G�\u0012���+�\u000fڒ��e���S⧄�a��\u001f�'�u��Z7�d�o\u001e��5+%���n\u00168\n�t\u0006P�HU\u0000���(\u0017�\u0013W���\u0000��?h�g�\ni�\u0000\u0004��V��4x��\u001e\u0016�U�]|c�L\f|j�*�K`�\u001d�dw>\u0014�����=A�l/M�-�Y�c�\r�\u0003�o����\n�9:?�����k�\u0000��\u0000J߳7�\u001c\u001b�\u0000\u0004��\u0000�[~��\u0007�\u0000��\u001f�\u0015�\u0000��o�'�-�\u0007�?g_���\u0004�o?�<\u001do�\u000f᎟\u000f��M\u000f��O\u001e�e\u001e��G��̶Z�vv�y\bY�\u0011��\u0000=ſ��\u001f�$\u001b\u0002\u0006��D�s�Z�\u001cs��\u000f���q�s@\u001f�\u0007�ƺ\u000f�~?|:���\u001b��\f|]���57����\u001a6��\u001d;\\�x-��[���J���\u001b��A�;�\u0003���\u0000���\u0000��?�L����\t��W���\b�?��|I����\u0000��\u0011��_\n�tM\u0012MZ�R���5\rU���c\u0001��Pgh$\n�r�4\u0001�)~�_���\u000f���������\u001e\u000f\r�|K�:�ƅ\u0017�����\r�Ѭ���]j�\u0005���٣c\u001019v\u00013��\u0001�h�\u0000�<�\u0000��\u001f�'�\u001bq�@��\u0014g�\nAm�\r3�u����>\f����\u0012��\u001f\u0018���$�X�9\u0012�^��G���\u001bJ�7�����\u0004@b42�}y�\u0000\u0005*��>\u001c�\u0000���\u0000\f�\u0011�*�0$ֵO�\u0002<[q��V�\u0000\u001c���A����d�\u0016��K�nf֗Q��.�V�Xb+\u0000i���h\u0003�g� ��\u0000���\u001f�v�\u0000��k�\u0000��\u0000~6�\u0000�F?������\u0012���>\u0007��6�\n��ߍ�\u001bi�\u0000\u0015tX�\r��n�|)����^\u0011�{�B+;\u0014����\r��[6�� [IĄ\\m@\u000f�?`��7��\n\u0001�\u0000\u0005!���?i?ٻO�Es���ž$�\\r���D>\u0017ֿ��)%�z���&�xV�\u001b���y�L7����\u000f��\u001a�\u0000�����A/���\u0012�����c�V��k�U��g��r�C�\f'��O\u0016~�~\u0007���7�\\Z��\u0000��\u0000\u0018|!.���\u0001a�˨�l$k##\u0000Z߳\u0017�\r�\u001f���\u001f¯�G�\\���\r�3x;J�߂�״ӣ�/�k(�Y6�������E����)���\u0006����!\u001f\u001a�\u0000�|G�\u0000�;Y�\u000f�I���\u0000�\"��\u000f��/���X\u0016T\u0001����]�\u0000�C��\u0014\u0017������[�P\u0007��P\u0001@\u001f���\u0018��\u0000'\u0007�{�\u001b�9�\u0000���h\u0003��\u0000���t�\u0000�mد�U����\u000f�?�ɯ�G��O�\u0000g����C@\u001f٥\u0000~d�\u0000�h��\u0012��Q��3����u�\u0000�\u00001?�6��S��\u0007����\u0000Y��\u001d\u0000x\u001f�v���{����O�?��l�\u0003��h\u0000�\u000f��\u0000�#���?l�\u0000�8�\u0006�\u0000깆�?\u000e���J���\u0000���\u001e�\u0000�V�@\u001fן�\u001a��\u0000(h�!�\u0000c�\u0000ş�J\r\u0000GR}��P\u0007�S��_�y������ǿ�Z�+�\u000f\u001f�W�[ߊ?\u0013>\u001e|2�.m��O��9�4������Q�~���~���D\f�f���b�,\u0019<�}��\u0014\u0001����?�i\u0007��/~ٿ���!���\u0003�F�Ꮐߴ7��\u0000�� Ѵko\u0016.��h�\u000e�y���RӴƺ�Kqyk��\u0005�\\2�'t2���\u000f�\u001a�\u0002�?'�\u0000�?�Vo�?�I/�\f�*�d�\u0017�~ h�\u0014<k�m'O�,�Tw�\u001a���ɭ�uxui\"��I\u0004f5�I��\u001c�\u000f���\u0000����_\u0002?ச��k�k����|\u001f��mβ�<�E�/��\u0005��V��\u0000d�1\u00066�f����\u001b{�\u0000���\t7�\u0000\u0004 ���ி\u000e~,|E�-�O���;�\u0007��_\u0004�~<�\\��Q��46�m�\u000e�\u0004ыx�V�A1Y<�\b\u0005O\u0000\u001fӧ���\u0000\u0005K�K�\u0000\u0006�|2��\u0000�U~�^\u0006�ƿ��\u0004�uo�ڇ��\u000eI�����\u001b�%��$�%��x�KmW��}�f\u001dC̈C�c�b�\u0001�G�\u000fT���#�\u0019�����׃?�2�?,�)�\u0000��_��\u0000�\u0015��?�?��\u0006�2|\"�\u000f¯ۣ�z��5�\u001f\u0004��\u000f\u0011I�\u001f\f�W����H�|L�M��a�lm/c����%��_�r�4\u0001�l|j�e��\u0014���c�ַ{g�k\t>%x�Ꮃ���A��\u001a���Q��WQ��\u0013\u0005�Y��iSOj%U�A\"y�\u001f\"�<ʀ>����f\u001f\u0015~�?�\u0017�_�c��ދ��\u0016�n񕷂�\rw�Kr�&��]Y�^�s�-��Ѷ\td��B3��\u0007p\u0001���\u0000�\u001f�\u0000��ڿ�\t��y|*���$�n�3��\u0000\b�\u000e��\u0016��\u0017���4Z��k�D�u��mB�-B�$��\u00128;\u0007��\u0000}��\u0000\u0007��\"/��~\u000e�\u0000��r�?�O� \u000f�\u0015k�\u0007�\u0012k������\u0017�<q��\u001f�\u000f�\u000b?\u0003��d�㿵���\u0004\u001a��\u0017gU�(~���Pyd�_\u0003\u001bs@\u001f��\u0000\u0004��\u0000��|\t�\u0000����\u0016�O��\u0000\f�#|>�����j��<�E�=J/\u0010�\\�[G��&i��\u0017�f�͵pWnO@\u000f̿�8\u0007�\r���?�\u001f��¿��\u0007>-�+�\u0007�|\u0007�<�\u001f\bo��\u001dA�ɪ]k:Oď��3�P�m*�[�Ie�{;hČ&\u0017\u0016�%��\u001d\u0000~��\u0000�\r����\u0013����\u0000�ƛ�.|Y񇄼o�\u001f�\u0010�t���Q�E�O�L�v�58��\u0017V���\t�<��v\u0013�\u0000?���,/�\u001b\u0001�X�\u0000�D�ߴG�����\u0007�+�\u0003|&:/��Wo�g�\u0006�<\u0001�7���@j\r��IfMީ����_%�,�mĘ�8�\u000f���\t��5x��:���\u0000f\u000f���֏�/\u0015�\u000f�GᏇ����r4]OQ��)�4�x��\u000bYw��'Q \u0000��@\u001e����HGƿ�$�\u0011�\u0000�\u000e�h\u0003�Ra?�H����\u0000gK���\u0000V\u0005�\u0000�'�\u0017�P��\u0000\u0005\u0005�\u0000�v�7���T\u0001�.�\u0000P\u0007�1�\u0000\u0006?������F�\u000e�m��\u0000�?��\u001f�\u001d?��_�+��_�v���\u0003�\u000f�2k�Q��S�\u0000��j_���\u0010�\u0007�i@\u001f�?�Z/�D��\u0014w��������n�?�O�\r��\u0000��~���4|b�\u0000�p��@\u001f���\u0000\u0005��\u0000�z��\u0000�T\u000f؋�\u001f�N��\u0017M�Y�x�ƿ\u000f<Y\u001f��]\u001e�\\����\u001e\"�\\����9���#\u0004r\tB�ͽ�\u0003\u0014\u0001���\u0000�\u0010�\u0013���\u0007�\u0000���?���\u0003� ����\u0000G��?�6\u001e!�\u0000�\u0000M_�C\u000f�$\u001f�?��\u001f\u0007~6�/�\u0007�\u001d\u0017�\u0014�\u0000\u0016�#�;�T�<;}��4���\r&��2��\\ܼ�N���$l��vm�\u0000�&�\u0000���J���\u0000���\u001e�\u0000�V�@\u001fׇ�\u001a�H�\u0000�2�\u0012#��'�\u0016���\u00003A�9\u001f�\u0000|\u0005�^�\u0000���\u0002��?j?�\u001b�a�c�\u0019���\u0000�\u000f�O�_\b�<Wg�\u0013D���Eq�\u001f\u0014j>\u001c�X���M�kH5\u0007���V��#�\u001c�\u001d��4\u0001�s_\u001b�#[�]�����:d�E��\u000f�_\u0010>\"ţ�2\\ͥ��_\u0016j�&M6[��9�MHZ�ꊲ<fEP\b\u0000\u0003���-�\u0000\u0006b|F�S��O�)�\u0000mo\u0003�|8���_\u001fK�C��^�]F/\u0007��K�\u0013��O.��\f���\u001bd�Ԭm v\f\u0014�\u0001��=q�\u0000\u0014\u0001�_�\u0000\u0005w�\u0000��i\u001f�J�~����>\u0019j�\u0016,'��\u0000��\u0005�\u0000\b�����7Bo\u0010�뮠oo ���o�L4^^�ߕa�\b\u0007���\u0000�r�\u0000��/\t�\u0000�_~\u000b|\u001d�S�~�^#�;q��F�㹵mk��w���\"����\u0018�����խ�F�Nҹee\u001b@\r�@>k�\u0000�-�\u0000�\u0013<G�\u0000\u0005����c�ߎ\u001a\u0017���3m᫫�u�\f_��kc�r�ĉ\u0000���ko�}�-�\u0017\u000f��b�?�\u001b�\bW�\u0000\u0004z�\u001f�\u0011��O�_��!�͢|d��\u000f�\u000f\r���Q�<9{�ȴd�|7&��s�{qr�2�3��dp��k)l�\u0000���\u0000�����6�\u0000�����%��t_ڇ¿\u000b,5�\u0000\u0002x\u0007���-[�\u001a��{\u0004�\u000b�\u001fL��\u000b;�h^;��X�\u0011�eX�@\u001f��\u0000�\u0004'����7?����a�\u001c~?�7�@\u001f�G�3�8^��\u001f�����/j>&������\n�as�+)t�Mzo\th��S��\u0013��ZCv��T�I\u001d�\r���\u0007���@���m��;��G�\u0000W'��\u0003��^\u000e��\u0011�\u0001��;�ӥ�ߍ|-�ص\tb3Ga/���\r\u0012;�!R�*Z���R\u0019�2�A �\u0007�?���~1�\u0000�%j��U�\u0000\u0012��\u001e\u0018����r�\u0000����\u0012�>\r�<3�x��KS�\u001d\u0013M��\u000b�\u001d*�W�R_�\\[K\u001a�\u0014�\u00143�(\u0007��\u0013C�\u000e��_�\u0014{���q�%蟲��>\u001aj\u001e?���\"��'Y��ƃ�˩2�ai��<��E傲����P\u0007a�\u0000\u0007��\"/��~\u000e�\u0000��r�?�\u000f�#O�\u0012_^�\u0000���j���k��\u0000\u0017to��_\u000e�\u001fA�u�g�מ\"�Q��X�G�ώ����H%V�L&f+�0\u00006�\u0000\u001f�m�\u0000\u0004*�\u0000�\u0015x��\b��?�\u001a�~=h\u001f\u0019\u0013�\u001e��m.�\r\u0013����\u001bF>\u001d���y'k�˥�[�r\u0015U6\u0014+�$q@\u001f��\u0000-�V��9o��\u0000�K\u000f��Q��u�ٗ�?\u0016/��\u001e�+���i>6Ҵ\u001b'��Qj2G��>���Q-��q\u000f6�y�h\\\u001c�~g�\u0000�o\r��<u�\u0000�?��\u0000���\u0003�#{�k�\u0000F1��9�\u001f�\u0000�E\u0000_�g�ȿh\u000f�\u0012��ž�>�m��B�����sr��\u001a\u001d�į�\u000b�84{���\"��L�ZK\u0019�\"D�y iQ\u0015\\(\u0000�\u0000\u001bO�O�R+�0�\u0000���=�\u0000Ձe@\u001f��~~�\u0017����c�D���w�m<\u0013}��ᶧ�Ko\u0015�XͩZhR�\u0013�L/�,m�k��\u0016�LQȬw�\u000f\u0014\u0001�F7�\u0019\u000b�1���sx\tA�\u0007�\u000f\u0010�\u00001��\u000b~��Ԓrh\u0001��\u0004'���>\u0001�\u0000��\u000f�\u0000-�\u0003���\bK�\u0000\u0004\u0016�W�\u0011��/�\u0005�\u0011|���h�6x+�^\u0013���|)�xrM\u000eO\nk�Ʊ%�����-�]����q�4m\u0011f$0\u0014\u0001�W�\u0000\u0007��\u0000���\u0000\u0004��\u0000�_���\u0000ӷ��\u0000@\u001fx��_�ڟ��#R�\u0000�'���?�J\u0000���\u0000���%?ࣿ�f�\u0000\u001f?�^�t\u0001�B\u001f�N�\u0000�7_�\u0000�{~�_\u0004�\u0000lO\u000b�+H���|\u0016ԼY���\f׵+�#I���\u000f�Y�\u0019���t����[Ko\u0015ͨD�F�I�\"��\u001c��\u0003���\u0000��h�1��_�s�q�\u0000��\u0000?�7��\u001f��k���\u001c�\u001c�\u000f������\u0000�\u001a�5�\u0000�;�\u001f���\u0003�#y���\u0007�\u0019�5���.w�:ಀ?���+\u001f�\u0014����U��WO��<g�ÿ\t�k\u000f\u0000�>\u0003O\f�g\\���>Km\n[�\"�k�V\u000b{�<�\u0000k*�\b�(A���\u0000�\u0000G��5?�P��K���_��\u001a\u0000�\u00007\u001f�,y��\u0015��\n:q���_�7���^%��\u0007���#�\f��\r�w��������Ž\u001a����\u0011.�[_��\r���n�o�\u001d\u001fķ\u001am�̺�Oqma6����*���\u0012��94\u0001�|\u0015�\u0000���=�Y�����e��W��G����7�^\u0001�խ>$����L��t�\u000eϨAo.��O=�Z�\\�\u0013�G$�*9\b�\u0000\u001fۿ����S��c�\u0000�s���t\u001b/\u0015j�\u0000��\u0000�?�\u001f\u0018��\f�WS�i�\"��o�}k�ֺ-����sgi�M�%��ͼrM\u00043��!uQ@\u001f�w�\u0012/�\u000e����\u0000\u0005*���\u001c���-���\u001b|2�|i�x�U��w�|q�kT�o\ri/�E\fV\u001a��\u0016�%Ӡ�Fy\u0003F�2�x�\u000fw�\u0000�ſ�\u0014�g��O�/�\u0017��\u0007�?�\u0000\u0004\u001f�\u0000�E�\u001f�\n���O�O\u001c|`�W��?��\rt�\u001e�k\u001e\u0014����+�Z�Q�$z\u001b��6��ʹ0A\u001cry�,L�]v��\u0004\u0000D?\u00174��\u0000�=�F�>\u0006L߶L��9��5�~+��r�\u000b_��n���σΤu6Ԏ��:�yK\b�Z=Ě\u0000�����X\u001f\u001d�\u0000�`�\u0013|}��㯃�\u0013�7w��7��\u000fc�xO�Zǈ���5�\r>�.�u>�mm-��ȋn�į\u001b�d,\u0018�@\u001f���Yo�9����\u0012����G���ك���]\u0017A�\u000f��\u0019E��\u0000\u0012����\u0016�q7�tw�n,_N�짴Hld\u001eT2���_��<P\u0007�\u0001�\u0000\u0004���|A�\u0000\u0005\u000e���\u0000���(�V���]��a�\u0006���z\u000e�{��:\u0019�_ŏ\u001f|8�K=KQ�\u001bˡ{i��}Jc<Hc���\u0014�q� \u001f�����\u0000\u0007u|p��l��k�\\��\u0000c�\u0000��2��\u0003|e����?�z��?\u0017�ڟ�-<%��i0jז6zt��w7q���\u0005��E\u001b�\u0011��-��iO�?�F�?m_\u0010�ן\u0014|\t��ךf��Pk�\u0007Ѿ\u001e�KT��\u001f��~��⶧�]/T��a��t�\u000f�x�}\"�P��+��k8�n#I�u\u0000\u001f����j�?�O��$b�e�@|0�W \u0002���&�\u0000r\u0007\u0000��q\u0003�8��@\u001f���\u0000\u0005��\u0000�6�B?�ߵ�=�4\u0001�s\u001f�k���_�l�\u0000�_�/�E��\u0003�G�\u0000����\u0011\u0017��q?\u0007�~�@\u001f�\u001f�\u0019K�\u0000'��Oٻi���Y�\u0007�A�\u0000\u0005��\u0000����\u0000�\b�����_�/�?\b|d��&��&��Ş%ּ;\u001e��\u001c����{G���Z��\r�F�0E@���@\u001e��\u0000\u0004%�\u0000�����\n��1|O��<s��\u001f\u0007�?\u0000�{�>\r�xoº���\u001b\rB�G�w���ɭMy��mq\r������KTF�aӠ�_|�(\u0000�\u0013�����LW���~\u0006�\u0000�/�h\u0003���$��\u001a��s�\nA�\u0000\u0004��\u0003�ex�������^�Ŀ\u0014���\u000fx\u0013��֑���\u001a�$|)��&��j\u0010^\\i��\u001e�W��_&��{x�C\u0014f�?���('�Ѥ~�߶��'�+�\u001e&�|g�|\u0007���?�Zo��k\u001b]7R��t)�\u0018�;�\u000b'�����6� �G�\u000f�84\u0001���\u0000������s�\u0000�h�\u001f�\u0000�Z��\u0000��¯�7�\u0001�\u0000i\u001f\u0005|i�t�]~�\u0000�gŭ7ǖZ%�Ķ�z�φ|J��6\u001770+�\u0004\u0017Ol!�X��Eb�\t\u0014\u0001����\u001e��B�����\r�$���7$���\u0000�,P\u0003��7��\u001f��k���\u001c�\u001c�\u000f������\u0000�\u001a�5�\u0000�;�\u001f���\u0003�#y���\u0000�ƾ\r�����\u0000+(\u0003��\u000b5�\u0000\u0005����\u0000\u0005���\u0000g�_ǟ\u0004|\u001d�bO��\u0000M���i��Kĺ߈��)�*���7r_6�ml֍�\u001f\u0003ۭ���\u0013\u000b錛LI�\u000f�3�\f��\u0000�}~��\u0000�y\u001a���?�4\u0001��P\u0007���\u001f\u0000|+�U~Ο\u001bf�\u001cj\u001a���\f�_��ڞ��ǬXh�2Ѯ�MF�L{��\u0004����G�iQ�\u0012\u0005ܤdP\u0007���\u0000\u0010`�;���?�2���\u0000+(\u0000�\u0000�0?����Zh��\u0019xk�\u0000��\u0000�\u0018\u001f�N��-?�O�\f�5�\u0000��\u0000o�A��\u0000\u0004��\u0000���C�p�g�\u000f���:�\u0001�\u0000\u0010a�\u0000�:�����\u0000�4���\u0000+(\u0001G�\u0019��\u0000\u0004�\u0004\u0011���\u0004\u0010G�M<3�r?�\u001b@\u001f�w�\u0013��\u0018�a�\u0000\u0004����1�-|!��K�O\u0005xSX�\u001e�c�x�kI����K��x�=�P�c�_�\u0010��\u0017�h\u0003���\u0000���+'�\u0014y���f��\u001d�?�x�\u001e�\u0001�E���\u000e����\u0015|1�u�B�?�\u000e�B�k�O\tx\u0003E���|B��\u001a_��=a��:���PT{��4���(��3>�\u0006\u0005\u00008_��?���H�?��\u000e:c�.o�8ǵ\u0000���/�/��\u0000������s񮣨�>\u0012���ǿ\b�K�h�\nj�Z\u000f�\u001f\rj>\u0018��W�u\u000b{\u001dJym\u001aDtY�\u000b�( �\u001b��\u0017�\u0012+�\u0017�\u001b��{\\�\u0000����\u001e1��ď��\u0007/t�\rx{\u0016�t��\u0005^Y�A�_\u000e�j\u0016�5���Mmk!���:��\r�\\�\u0000�#�C�\u0000��|W�\u0000���)��\u0000\u0004����?�_��\b��;��l���\u0005���Z�$�\u0003@�^��k�_X�:�uk�t�O�v�F\u001c�\u0007����\u0000���\u0000���\bxC�����-W�ߍ�\u0000io\u0010]|\u0011�����t]'Ú\u001e��4������i�&�\u0000�F��#lͅ�\u0001\u0000\u001f�_�\u0015K�\u000bI�F�\u0000�Zm>\u0014�|x�Oï\t/�K�v�A\u0001�jV�x��6��\rC��\u0017\u001b�kn�//o$��\u0000u�J�\u0000�.��9�\u0000\u0004���O���\u0002�3�f��g��7�5�\u001eZ�7V������m\u0005����E�kg2H$\f�f\u0000!@\u0000\u0003��������\u0004�\u0000�寃�w�\u0015+���O�>\u0018�m�ι�|$Լ-�v����0�?\u0007�ǆ�\u000b�hu�/o��휆[�Ә��\u0018�\u0017�\u0000�����\u0000��~�?�@��9�\u0000�G~��\t�q��\u0000���\u0014�\u0016��\u001f\u0017�R����y�����'�\u0005���q���i�%���,�v�mm�\u000b�Y�,��Y\u001d�?H�\u000b�\u0000����\u001f�\u0015��?ÿ�)g�_�_\u0017<!�����J�I�ρotko\u0007h>1��g\u001f���3�Pj\u0016w\u0017���w��Ed�S�8�TI#6M\u0000a�\u0007~\u001ah�\u0005~\u0010�.�9��˻�\u000f�(�u����\u0015��w��\u0017�Z_��˛�,my=��\u0004�-\u001a�\u0019�ʀ1@\u001f���\u0014\u001f�k�\u001c\u001f�8χ]��h�\u0001����_o�Cg�\u0014#���W�\u0000�ރ@\u001f�1�\u0000\u0006��\u0000�e�\u0000f��\u0005�B�\u0000�Z�?��<\u001b�Q\u0011{�\u0000g\u0013�w�\u0000G�\u0001�|�K��*�\u000f�%'�_\u001e�[�\u0019�?\u0004x�_����o\u0005j��:�����ӭ�X�d��lg�Arg�!.�6\u0013�p@\u0007�c�\u0015����\u000e��|q���(>\u0011�~��:g��\u0007q�!N�u����yt�N-|���\n�[C��֢�F|�}��\u0007'�f���=�\u0000�Q>$�s�\u0010����\u0007��\u001f�~\t����M��s��P�=��<W�x������K��ah�\f^\u001e�+���#�&�\u001a����!��U\u0000�N��P��?�S�N�������\nxcƷ�\n���|\u0019\r�\u001a(�<\"����w�M0��_�����*�@��\u000fԯ�\u001f�\u000ej���\u0000����w�\u000f�?�\u001f�Z�\u0000�>\u0012�t4\rgŚ~�6�y�\u0000\t�ď\u0017|M�~�-��6�m��\u0019j6��\\k�(m�� f \u001f����!�\u001f��\u0000�����M��\u0000K�to\u0019�l�ֱ��\u0000\u0012iz\u0002N�5����Is\u0006��/$�h���Y]�\u0003�\u001a\u0000�\u0000g/�\u0017�V^4�\u0000�^~�^\u000fԥ�\r;ş�O����튭�6Z�����*�X\u0019�Q4p�Hі\u0005D�7\u0002\u0001\u0014\u0001��j?�f��\u0013�R�����W�\n�^\\�tꚟ��+\\J�L��\r!�<�O'4\u0001O� ��\u0000�u�\u0000�k���\u0000�i��VP\u0003��\u0019��\u0000\u0004�##�W�\u0012A�F��?��@\u0007�A��\u0000\u0004��\u0000���D�\u0000���_���\u0004?�f\u000f�\u0013�u���D\u000f����\u0000��\u0000\u0007�\u0019��\u0000\u0004�=>5~�\u0007��h�\u0000�2�?t�\u0000���K\u001f�?�I߃\u0010>\n�\n�W��[�ψ�\u0013'������{\u000b�F�[���\u001b�Z�6�oo\u0012�\u000b\u000f\f��\u0015դ����T\u0000\u000fӚ\u0000(\u0000�\u0004$\u0001�p(\u0001\u0003�\u001d�� d�y�J\u0000�=�\u0000���*/���\u0000\u0004���W�/��~\u000e�\u0000�ˋ�o��\u0000�g�s�'��Ѥ�]0�\u0000���{ユ��O(�\u0000�O�<���\u001eiU�\u0007�\u001d�\u0000\u0011E�u�\u0000����#/�{�\u0000��@\u0007�E\u0015�\u0000\u0005��\u0000��?������\u0000C�\u0000\u001f�\u0014G�\u0017Y�S�q\u0016\u0004���f_���}�g�}��\u000f��7�\u0000�\u0018�\u0000�,�\u001f�g���r�׿�����Q���\u0005~\u001c���\u0000�/�\u0003����\u0018��\u0000�\u001f�>\u0017�|g�\u0003����|2���χ�\u0014\u001a���}CP\u001e\u001f�O��7�+��\u0016����\u0010�k\u0018\u0007�M�\u0000\u0006��\u0000�\n\u0010n��\u001f�O\u0005��3�`\u001f��?{�� ��A\u0007�\u0004\u0012\b\u0007�M~Ǥ��y�-1\u0001K~�\u001f\u0004IQ�\u0002~'x`�d��ӒO�&�?�;�\nM�c��\u0000\u0001��������:����\u0000�_��ǯ�\u001f\u000e�Jt�\u0017]���>\u0019���>\u001a�?�|I��\u001a\u0006����i�w_��֕��w�_�}csn�\u0013\u0000���\u0012��\nI�i�\u0000�ll�\u0000�?�?\u0019��-�#|NѼU����?�+��\u001f\u0006N��x3Jmo�7?�~��\u0005�S�/M����[�#H񕅽�0_EunLT\u0001�\u0011�\u0000\u0005����f�� 7�k�n�%>\u001c��?�����ៅW\u001f\u0013\u000f�<y��?��b���M\bx3���G�?����t�\"u4��\u0016�g_�����\u0000�7�\b���G�\u001cY��\u0007�\u001f�,��?�~\u0011|\b�u��W�S�O�}\u0007�|�\u0000�_����c𮣯o~�Z_�/\u0012�h�f{\u0013���Xմh���N��E�\u0000I��\u000b��\u0010���w�\u00006g���\u0000聠\u000f��\u000e��\u0000�s~��N��ǂ?c\u001f����-�\u001b�\u0017��Q�=7�\u0016\u0017�O�gW״�\u0019E����m���\u001b�\u001ap������J�����4�K>$\u0000\u001f�߲O�\u0017\u0013�\n��\t�\u0019�?g��W��\u001f\n�\u0011i:޽�=?�c����s\u000e��[�}�ޝ{�G�\u0018x�_��\u0001/���^���ZA\u0004%\u0000t\u001f�L�%G�\u0013�\u0000\u0005����\u0005�\u0000�I?��\u0000\u0002\u000f�\u0017�i~Ҷ^;�>5�f\u001f\u0014>2�!\u001e4��i�G�\u001f\u0006<\u00130�w�#�\u001f�\u000f�\u001e\u001c���k����\u001b��'�m\n=G�\u001b�cVK�{P�5K�\u000f�c���\u0000���P?��?���\u0019�\t���\u0000���)��W�L���O�?��\u0000���R�\u0000���\u001f�@~\u0015|=�.4\u001f\bxX����\u001b�F�Q�4�X-�<k��\u0000\u0011���\u0000���=^��f\u0000�{�\"��\u0000��?��g��37�{���?\u0003�\u001c�\u0007�\u0004x\u0017�\r��\u0000�'h����#i�������\u0000\u001ai����?k\tͷ��.-5�MO�:���D�V�\u0014w_c��]=��\u0012Z=�hH\u0007��}\u0000\u001f�F��(8S�?g�c\u0007�G���\u0018\u001f�\u0000���\u001a��\u0000)���?�\u0017�\u000b�\u0000Qk�\u0000�\u0000S��\u000b�'��o��g�W�c�վ*�+>#��Z�\u0016_\u0019x�\u0000����\u0004�t��|7�O��G�Ss>m\u0006�,n7�\u0000��M�=�\u001f���\rs�\u0000�\u0013/\u0007�\u001d��y���l\u0011��\u0000G\u0003@\u001fx~�_�J��\u0017�\tǨ��U���\u0005��w�\u0011�t�/\u001aM�\u0000\u000bC�'�1�Z��Mq����U����߳M<��HM>I�m�y�U@\u0007�a�\u0000\u0007����R������\u0000\f;౑�\u0000e����\u0000\u0011��\u0007�\u001f�n\u0017�\u0011\u001b�\t��{�\u0000�6t�����~*�X����S�S��|h���\n$��\u0000��4D�lN���⿃�4��onG��G[ہ'�U��\u0013h\u0007���\u0000\u0005���~\u0006��\u001f�U�ڧ�h���\f~\u001c|\u0011�h~\u0007/�|\u0019�\u0000\t7�<c��<_�7|\u001f��$~=�\u0007�|W�}�Ş*׵!����\u001b1x,l���mkk\b\u0007���\u0000\u0004��\u0000�y�\u0000������\u0013��6����D>4���W�_��e��\u0014��ߵ\u0007�Ʒ�MZ�Y5\rDh>\u0013�ՠ�sJ�C�?dѴ}>�<~��<�@?�}K�>\u001f��f\u001dW��\u0007��\u0014���\u001f���\u0019�a����}�3��5�{&���#y�I���h�\u001a.�n.|Cs��j\"�K��_M4�J\u0001�S\u001a��\u001d\u0001�\u0000\u0005Ͱֵ�+O�|Ami�j6��\u000f٧�A}��y<Q)y�\u0000�#�ET��X��\u0012�$\u0003��$��\u001c+�\u0000\u0005���\u0000��\u0000���\u001f�_����?��\u0019�\u001f\t��\u0000�\u0017��ᣮ�z���K�?�{�?\u00054\u001f\u0013i~k�\u0011�^����ɷ\u0011ܠf�\u0007�t�F�\u00148 \u0013�qб#�\u0003��ך\u0000���\u001f�\u0000)�\u0000�u\u000f�\u0014����\u0000�q|\u001d���U�\u0018|g�\u0000�7�|O���/��8�\u001f\u000e�\u0013�D����\u000f\u000bxwQ�->��W��9��~�y}u7�4{}>�����f�$�\u0010\u0003��\u0000�T��\u001f�\u0017�\u0014��\u001f���i�m�\u0000��y��^���\u001eM�\u0000\n��\u0017ï�G��m��a����\n<\u0003�X�o�9|-�6�q59,�÷O{E��\u0017\u0000\u001f�\u0005\u0000\u0014\u0000P\u0002\u0012\u0000�����@\u001f�\u001f�r��%���U�\u0000�T|K���9|Q�o��\u0000�\u001aW�/�\u001aF��\u0005�\u001d3^��5�\u001a��k\u0016PݴR��Q�v��M�|lW\"�?\u0010?�ҏ�(g���f��?����j��W��?\u000e�;��5�\n�^?�ƭg�kW�;�O�Ԭ#[xLwW\u00169��\\�b�x4\u0001�|�ӟ�g�k�g��$��g��\u0000\u001d_�b�xP�A�$��\u0000�F����N���\"��\u001f��v���\u000f��\u0000��_�G_�G����\u0000�T���@\u0007�8��\b��\u0000H�������\u0000�h\u0001\u000f�\u0010��\b�q�\u0000�z~ͩ�w�\u0017(Ǿ~��ր?M>\u001c�8�'�/�^\u000e�W���:_�>\u001c�=�֑��\u0000\u0004xGC��t\rxc�֐�6��۳3Aa�Y[Cik\tf��\u0013q�h\u0003���\u0000k?�-��\u0015���G�/��\n��ߴ.��o\t~�?\u0019<5�\n���\u0016��h:\u0007�o\u0011�>�e\t�o.�O��-�-�$�1*䑚\u0000�����I�]��o��\u001a;����\u0001���\u0018$�\u0001�\n\u0000�\u0000s\u000f��\u000f�\u000b�w�^2�_�+�zo��\u001f|C�ƹ��\u001a�OZ�{�\u001fľ\u0014�6�s���\u0016�\u0000(gӵm.����\u0010��[�\"n\u0019�\u0000|U�#�\tK�\u0000\u0004���~$��\u0000\u0017�g�����_��\f7��7��\u001f��u�>\rN\u0003i\u0015��]I�;�v0͔ ��E\u0000~'����M3��'����h\u0003��f_�/�����E�\u000f\u0017~�?\u001c|{�3��*����\u0000���\u0000j�I��4[{ſ�L���7�k\u001d��ǁ�F���\u000f������X�\u0006�\u0000��~�x=\t�\u0001�\u0000�4\u0001�q��^\u0001�g�\u0016��#�3�\n���3�����c◅|\u000f��_\u001f�>+�<\r��\u0010xI��gA��µ���5-n5Ԯb��e�d�3�\u0000�l�\u0000��?ٻ�O��\u0000\u0005O�������w��\u000f|0�~\u0011|\u001d��<\u0013�\u0003��V����.�{�L����.@����3�@\u001f�\u001d�\u0000\u0006Ȑ��C�Y[�����#\u0004��2��q�\u0019�\u0004u�\u000f�4�\u0000�؃�\u0000\u000fq�\u0000���9��>3��\u001c\u001f\u0017�\u001e�\u0001�|���\\\u0012\u000e@�<�3�\u0000~���?�[��+^����o�u���������gះ�]\u0012����\u0017�&��\r\u0013N��'�Y\rַ6\u0013Km,y\u0019��s�@\u001f�e�\u0000\u0005�d�\u0000�6�A�NI���u^����\u000b�q�}\u0000�{P\u0007�������,���\b�\u001ag�0A�G���(\u0003�yh\u0003�R�\u0000���\u0000l\u000f�s�7��g�\u001c~˟\u001b<w�?ž%��}��{^�\u0016�4�CT�c���zuܦ\u0019��%�ip�\u0014\u0011\"��\u0000�\u0007����Xo�Ho�'�\u0000���\u0000�\r\u0000|M�L~�\u001f����\u001d\u001b�7�G��\u001f\u001c|m��\fZ�/F�O�u5�um7¶z����hV�\"(|�>\u001d_^�oᄮ~�t���\u0000\u000f���\u0000�@��\u0000�=�\nx'�����z��xk��=�\u0019�\u0000~��r�\u0000�K�6�i��^)�����6�'�_�Ǎ�F\u0015���\u001e\u001a}G�\u001a�x{��O��Cv.�\u0012�\u0000fxoB��kL\"�v:u�\\��\u0000�3�O�\u000f��\u0000\u0004~\u001exK�/�O\t��\u0003�o�\r\u0012��~\u000e�o����E�ރ`��:V�jK�,�јC\u0019v\t�@\u001f��\u0000\u0005\u0007�\u0000���\u0000�R�)�f�۟\b�9�q�|��\u0019x{�����\u001dh>\r��ZG�i�\u0004�>*���\u001a_�mm����l�?m\u0006�\u0004%�m�b2ă@\u001f�������us#Kq<�M4���,��I#�������\u0000�~\u0015|U���?�'�~-�$�~��\u001f�>\u0002� �\u0007�|e�۟��~\u001d֭�D�Դ˒���D��\u0011�6\u0003\u001e(\u0003��?��Xv!S�\n\u0017�Ip8U�(�\u001d\u0000�\b���\u0000��?��o�*/�\u0014\u001f���\u0000���s�\u000f�/�\\|d���������~��^7�\"�z\u0014��c����Ij��\u001f�i�O3��\\\b�ؐs@\u001f���=�\u0014~ɿ����\u001d\u0003���\r��㾋�]CQ��\u001f�|@�\u001bX������[Yjw�j,��3��Z[A;���\u0007\u0018�\n����9� ~�\u0016�4���?g�?\u0001�~\"Ϡ���\u000f��,�D~'��z�^\u001e�U\u0006i���c׵��?/�����\u0000\u001fX\u0002\u001b����x�\u0005�\u0002�?\u0017?��߈�\u0000\u0010�\u0011�\u0000�\u001b�mo��\n|y�?�?\u0010<7῅\u0013xw�_\u000f|Q�x/�:\u0004��\u0000\u001f�\u0013�7��&�����iR^iw��m�����\u001a}�ݜ���&��?�\u001b����e�n�׀>4~��\u0000����\u0002_]����+�ǯ��?����:�i��^\u001b�_��m\u001a��O�U�����洝Vh\u001e9\u0000j\u0000�~\u0010�п�\u0017����\u0000�9|`�\u001d����\r+^��\u000f|L��=O\\�mg�]�����+Z�.�;\u001b{���-/���)�\u0000|���j\u0000���y��\u0014���\u000b�o�W|x�\u0000���\u001e��S\u000f�)\"m��\u0014\u0017����c�����}�\u001f�\u0014\u0000?�\u0014��\nH���\u0000\u0005\u0004�����\u0000\u0019_���\u001e�\u0000�>�\u0002/�\u0014��\nDX\u0001�\u0000\u0005\u0005��O=\u000f�]��\u001cs�Ǹ�@\u001f�\u0011�\u0000\u0004���<u�\u0000\u0004����k�\u0013x��~2�_��\u0013�\u001e*�w���K�~%�'�5o�\u001e\u001f�յ�{^��o5]cVԯf���\u0000R�.�.�.e�y�Gf \u001f�m�l#7��\\(�?�ӟ\u001e�$\u000e?�jx��\u0007�ZV��x{Vӵ�\u0013R��u�\u0013P����_K���T�u]6�;�\rGN���+�+�\u001b�b�����;�k���\t\u0012DV\u0000\u001ff��?�_��_�{����<\u000f�x�\u0002�?|��O�{�����\u0000\u0005i�!�/����A�_�z���$O��3�W���:�se�g���þ(�f����i0\u0013[<�r4\u0012�$e\\\u0006�\u000f��\u000f\u00159�\u0000�Si�9+�C�2v�R��\u0007?PE\u0000�-\u0000o�g?���9~����\u0007�\u0005�\u0003���(�9��:��q|a�U�O����˽Qo$ѓƚ\u000e��[]\u0004U�k1\u0003L\u0014+�\u0003\u0000\u0003�\u0005~\u000e~ϟ����a�h���\u0000�߃�\u0000\u0003��\u0010�[�^\"Ҿ\u000f�3�g�M7]�l�k;]CX��f����w��ۭ`���iဘcu���\u000f���\u0000��y�\u0000���Fq�[�w�|\u001fq�)r>��?\u000f~\u001f��_�\u0007�\u001f\u0007�\u000e�\u0014��ߵG��\u0000��\u001cK��;�_�_�'ş\u0004�7B�R�n��A4o\f�g��^��-���_ꗢ��\u0001u��^^Ͼ��y\\\u0003�[?��?�g�q�B�\u0000�7�bo�\u001f\u001f?d�٣�Ư�����\u0000\u001b|Q����O��_\u0014~#��^�Օ����\u0000\u001e��\u0000�~\u0016ּW�\u000f\u0014kW��y�k� յ\u001dWR���/.���\u0007ߏ�\u0000\u0004��\u0000�m�3þ�b%��?e/� �pG��>��\u0000�\u0000\u0011\u001b�CP��\u0000��u=\u0012��E��o\u0012\\^�\u0017�T�i��U<�}ޝsh�Mcuc40�g=��-��G$.��@\u0007�\u001e4��n߉�\u0015�|\u0007�\u001b����� �\u001f��/�x��~7��>/���^!�Y�W���\r��1�ѵk\u0016�(�kK�+�r��\u000f���5�p�\u0000�������4���C�c��y'��@\u001f���/���h\u0003���\u0000��\u0018?�9�0*���DjM��W�\u0017���~4\u0001�i\u0001\u0018�`2\u0007_�\u0019�b�?�G�\r\u0004��d��\u0007�\t���ş\u001ff\u000f���w�t��'��\u001b�<K�w��o�> �|=o�K�f�\u0006���\u001e2�ֳ����jz���G��s\u001d�w����B'���\u0003�Y�U�w��\u0000��\n��~\b�*�u�w�\u0011��j��7�o�<5��\u0000j����\u001a�^\u001d𞛤����\u0018�7�if�\u0017F8��9E�\u0007��\u001e�\u0000���\u0007�\u0011�g�\u0000o�ۿ���\u0015O���7ÿ�c���\u001f��/�Ex�H𿃼\u0017�H|c𿅼;�Z�Ķ�^���\u000f�V:N��[�D\u0016V\u0016���\u0002|��\u0013�\u000f�/\u0011��!�g�5�\u0014��[ռK�\u0013j����/\u0011kڕޱ�����{6���zޭ�Mq�j���sq}�jW�\u0013�_^O5����+��\u0019\u0006'\u000e##�8\u0018�B{\u001fqހ\u001a�P�=h\u0003���\r��k�����\u0015��h�\u001fů\u0000x+�w�5��Z5�\u0005�B��O\nj�o��]KÞ#�Դ��\fʳD.��\u0011ȫ\"a�\u001a\u0000�\u0000Y��߱w�e�3�\u0010x����4�\u001e�V7zT\u001e3�]�#���\u0000\u0016ŧjj��\u001al^\"🅴�e,u\u0004�\u0012��o\u0004\u0017J��\u0011�P\u0000\u0007���\u0000\u0007����\u0017���'�\"�?g��\u0019>\u0006j>%���^��Z����7�g��Xx;��\u0016\u0016Z�߂��\u0012�U���y������\u001by��XQ\u001eGb\u0001�\r��?�_��_�{�\u0000\u0012����\u00007�\u0001���\u0000�g��ώ��\u001f�-�J����Ɵ�?\u001b�K�~�Z�������\u0000�o\u0018|J�4�\r>\u000f�,�\u0013E�uo\u0019�:������׷˧Z�Ef���W\"\u00115Į�\u001f��\u0000\u0014\u0001�S�\u0000\u0007/�\u0000�\u000fo\u001f�\u0015�\u000e�\u0000�G�\u001c�\u000f����?�x�PM'Ú.��\rRX�=7D�ouk�\"�w�\"Y�Aqr�Ā���\u0015�~g s@\u001f��\u0019��+�\u001f���y��ºo�tK��\f��g����hZeΧ\u001f�\b��\r&_\u001aZ��M~���h���\u0016�\u0016�D|�\u0007�\u0014xo��\u0000�ǌZ�|'��\u0000�~&6>_�\u000f���\u0003�\"��ϗ����n���;<С�v��\u0000�\u0000;��=O�>\u001c���m�\u001b[�k��'������]5�\u001a\u001e�c��<��\u0012tYf��\u000bx�S�Wu,\u0017�\u0004\u000e(\u0003�#�\r\u001f��\u0017m�\u0000\u0004�ד�]��X������\u001a��\u0006���#m����y���Ń�Eu��y�\u0000R/���\u0001N/gQ�\"��\u00198�\u0019I�<�t�\u000f�&�\u0000�����7\u001f�S/��o���\u0018e�\u0004���Ǚ<\u0017/�a�\u000e\f\u001f�� :+xb]\u0005[Dm\b��G�aҘ��\u0000d���\u0007�\u001d��K��.�n�U[�����8�\u0017�V�P��H\u0017?k[��\u0000hYǟ�\u0006\u000e<̊\u0000�\u0000u�}C�L�����o�����H������O<ҕHa�\u0018ݤydvTH�K�����\n\u0000��/�_\u00074{\u001b�OT����N�������\u0016��������������\u001b{h\"V�i�u�4VweEf\u0000\u001c�����wC��R�<A�\u001bG�`\u000e!�ҵ�z}�BA��wV�P΁��`�\u0003\u000e\u000eE\u0000v1x�����G�b��\u001cx�`>�4H�_\fx��a��QӒ��\u0000\u0002\u001c��y?�ݜ�l�\u000b��\u0015�\u0000�4��\u0000�o�?�[@\u001b�\u001f�<'ᆸ\rxc��\u001ek���=\u0017M�Z�G��samne\t��I�.N1@\u001f��\u0000\u0007���ž\u0017���\u0000b�<5�\u0011�z\u000b���\u0010'��C��=&+���\u0014\b�\\Gaun�J�J��\u0019�IP@8�\u000f�|!��4i�h�5�\u001fǑM��� �F�G�R_�~���\u0000k%����\u001f�\u0013\u000f�ڽ(\u0003�i�ۯ��\u0017��\b��\u0014G㟆Z\n��=#�h���~\u000b���\u0001��+�\u0006�5�4j!��m>����}���ϗ@\u001f���w��\n����'�\r�6�+\u001d=�\u0016�O�tv�^��FŴ��-̓[��ͱ�#\u0016ݻ\u0017\u0018�\u0000�l�4��|V�hA\u0018 ��\u0011�?��\u0003��P��'�8`�����yR(a�o��O<�8H�4���Yd`��\u0019��\u0000\t4\u0001���\u0000\u0005��O���\u0000�D~ޟ���2��x�O�:�����\u0005�M�\u001b���=�N\u001af�o�ѷv>��ͻ��h\u0003�~���\u0018�\u0007�ĲxK�O�ŉ�� �A�G�\u0016��|��WkK5��N�}�|��@\u0014?�k�S�\u0000����\u0000�,�E�\u0000�\u001a\u0000�ּk�/\u0012A\u001d���[�mz�\u00172�o�kڮ�\u0004R���\u001c7�S�\u001c�~Rꡊ���\u0000��?��;��6�;�����\u000f��\t�6]+�\u0013�<8�4��\u001a���\u000f�HYS��W�6�;q��P\u0007��\u0000���<ҴO�(O�\u000b��3��_\f?�k�\t�K_�~\"��t)5�����9罇�7���jͧ&�\u001c��\u001a��qY$�![q@\u001f�n�y�K��N]_�W�\u0000\u001c|C���@���u��^��\t\u0002XEޞ�\u0016�X�(�1!d,��&�5��?k_������\u0017�o�\u0000\u001a�\u000f\u000f�$^\"�Z�SŃW_\u0011��\u0006���\u0000�F���\u001ej�cQ\u0002�]�<�s����h\u0003���\u0000e?�\u001f\u000f��\u0000��߳���{���^��\t�����g�z%ƣs�\\��^\u001e����\u0000��u5��ne2�i�}��F�\u0000�\u0000)\u001fأ���\b�\u0000�?�d��¯\u001ec'�/�'�k�\u0000\u0003x��4i��ټ��t���O$���\"\u0011\u001ew��\u0001���|)�U\"\u0006_��\u0000�'9�o�z��\u0000�m\u0000~ ���\u0000\r��/�\t%�L^�-�%���ha���/<\u0005�x,�Q\u00137�,Vo��\u000e�G�FLE��fq��\u0007�s@\u001f�W�\u001a�i����\n��y~$Z|_O\r���\u001a�G񝿍\u0017D\u0017�N�~ͽ��[\u000f��'��擻���\u0000���n�\u0015�Y�g�|�\u0001���i\u001f�I�ȭ���3p4��H�b3��~p����f�\u0000�m\u0000\u0000?�yw��5�\u0017�>_�\u000f��O\u0016���o��_\u00147�\r\u0012�_��k�O�a�\u0017_o\u0004�^%��)o�\u001d4j&7�`�6��s�\u0000�,�\u0000�.�)�\t~��\r���9�xf����Ԯ��<A��:-�����XE�6������e�H�ȍ\u001f�\u001b����\u0000b�\u0000P\u0007�O�\u001c��\u0000(=���W�;�\u0000�\u001f�r�?��\u0000�4�g�\u000bC�?�F�?꾼�\u000f���\u000e���?j/�3�r���'�,�\u000e����\u0000\u0011x3��u�\u0000\u0014�>\u0003��R��4[�\u0002ɧZ�7�$��+y�Ym�m�ZS�6�\u0007�_�\u001bu,_�Fxih�\u0000�S/�A'Ƨ�c�+_��������ޮ����}���F�\u0001w�/�2��4\u0001���q���\u001c�\u0000�e>=~�?\u0015���^\u0017�mχ_\u0007�\u0013x��\u001f\u0013<_�*%�.���\u0019j�.�_�|=�O;X5��y�2�P@\u0012M֥d�2\u0005\u00009?����+�?7�\u0013����s�\u0000\b�����%��@\u001f\u0001|w��>4~�?\u00125\u001f�_\u001f�\u001c���Wĭ\u001a�O��|\u001b��%�֬m5H~ӧ�=��(X����-�,�@<P\u0007�2�\u0000�\u001b�?�I��'\u0011�����g2x�O��\r\u0012~��?�W��V�C��\u0000��\u0000�N�{�0\u0007�_\u0015�䑀\u0007=z\f\n\u0000�8������U�\u0000\b��_�ǋ<O�\t��\u001a7��3���'�|A���^\u0014��t]\u001b�\u0007��-SQ�q�\u0017[k;\u001bi�}��Q�\u0010q�\u0000�\u0000P\u001f�,\u001f����\n>G\u0018��j\"1�\u001f\u0006<bF=0@#\u001d\b\u0014\u0001�1?\u0002?gߌ�\u0000���]/�'�/�^$���/[����<\u0019�;E���\u000bm6\u0003s5���\n�Zۃ,�~B�\u0000�Ͽ��_�&����$�H/>'~ҟ��ů��\u0000����\u000f\u000fE�\u001a�Qi�Aֵ'�M���.�?i�\u0010K������\u0001\u0000�\u0000Ez\u0000(\u0003�F�\u0000��?������E��>%���f�\u0000��\u001c4/\u0005|\u0018��O�z<z�������+�+\u001b�$���.,Ѯ#@\u001b1��\u0000\u001f^�\u0006ko٫�\tY�\u0000\u0004����\u0000\u0005\u0014�����\u0013����\u0000Ŀ��3־\f�d�\u001fA��_\u001bk��xK\\����\u0012�]Ӕ���\tɒ\u0010IT<P\u0007�G�C��_�?���3�\f�χ~%�,�z��\u0015�ǅ.����Ǣ�z���i4��\u0014>r���6��\\\u0012�eݍ���\u0001�Y��V_�#��\u0014��7�\u0014�������'��㏇^?���*x���.м5\rƍ�\u001f\u000e�\u001e&���5]2��3Y^[H�[˱C���\u0019�\u000f�_�qg�\u0015�����D�\u0000�)m�\u0000�\u001a\u0000�����\b��\u0000\u0005d��ǿ�>$��\u0000`��\u000bHд\u000f��\r��gT��\u000bk�iz_��[�B���P% ���i�|\u001d��\u001c\u001a\u0000�\u0000_\u000f��\u0000\u0016�\u001b�\f�k⟋�\u0017|[��\u0007ᧁ����a�\u000f\u0010�m�O\u000e�\u0011�\u001c2j\u001a��G)��%�(��6��x�\u000f�'�\u000bQ�p��\u001f�R��'����\u0013�\r���������!�xN��\u0006�\u0013�k~6�\r�����k3i�t��i:i�\u0011Isq��+\u0012�\u0001�@\u001f�k�A�\u0000�1?o��G���U���\u0000eO�_\u0007>\u001dG���\t��t8t�\u001f�gV2�����y3}���(�B\u001c�=� \u0003ȿf���\u0000����<K�x7�a�1��~*�֒�����\u001bMMKP�4y.V�=F�)'�\tj�N�o\f�9\u0003n9�\u000f�?�ſ�W�1�\u0000\u000e����z��Em��@\u001f\u0015�ҿ�G�+�\u001d��E�{�P|\u001d��?\u001a���6�3�|/�=4�SP�歫hv����O8}>�W�u�\u0018��3s�ܡ\u0000��\u0007�m��\\�\u0000�\u001et\f��\u0000\u0019\u0017��s�\u001fj��\u001fJ\u0000�����\u0000\u0005`�\u0000�q��_\u0014�S�O���}�c�W�o\u00056�<S�_\u0016k�Yk�'�$>\u001e�<Y���T��C���{H�m@����\u0016��y�\u0000\u001f��\u0000\u00051�\u0000�g��߶����W���\u0000����k������7��$|\u001b���\n-O�\u0010�\t�\\G.��\rj2]۵敨ƌ��\u0018\",��\n\u0000��?b��*��\u0013�����&�̿\u0016k�\u0000�>\u0004����'�o�_\u0011�\u0015k����-����\u0001|;���\u0000\u0018�>�t���m�E��\u001aiZ���\u001b1+��;I�\u00120]�\u0003��ľ8�|\u0017��B�V���>\f�ևy�]w�:��N���:}����n���KK{4i�c\u0011\u001a���P\u0007�P�\u0000���\u0000�!\u0014a��\u001f��g��Uq��n�����h\u0000?�]_�$\u0011��\u0000�@�gR=�Ur�\u001b@\t�\u0000\u000f��\u0000�@c\u001f��\u001f��\u001e���c��͠\u000f�'�\u000e��\u0000����߶w�?��@���\u0000h�\u001cu�\u0003|R�����N�\u0016�.�q��3V𗆬���A$��\u0011Ayukq\u0004\f\u000bn�\u0017\u0018\u0018�\u000e7�\r\r���\u0000c�ػ����W�C|7�\u0019u�\u000f�?��ς ���.�'�m�1��j��\u0012�b;k�94�5�\u001d.�ٰ�\u0016�ݸ�\u0003�����\u0000k�ٛ��������s�G�>7x;�>#\b��!�&�&���^%�L���Ѯ�\u000br�˥�m�+\u000f\"�\u0016��`\u0000}\u001f@\u001ei���~\u0000�'���⦶�\u001b�m�����|s��\u0013]&��\f���΢���$�K+yf1B�#�ڊX�@\u001fǿ�\u0017/�\u000b��\u0000\u0004����\u0000�������\u001b����ů�:\u000f�[?\u0007�b/\rx���[�\u000b�g�O\u0015ꈷW�1[C�m\u000bA�/\t�E\f-�.]�\u0010\u000f��\r���>\u0002��_�Sχ_\u001f�i/\u001a���\u0000�f�������x�[\u001b�E-�O\u0013x:�Kѭ���Sܱ���a\f��L�r\u00074\u0001���\u0013G�\u0011������\u0000\b�\u0000\u0015�?�?�:��\na�\u001c�C'��$���+�|LO�1x�|Zm��SL��:Ė\ra�jV��_<C&<��v�{\u0012\u0001��kG�\u0015s�\u0015�\u0000�y~�?�߁�\u0000j�\u0000���\r<K�\u0003�?��S�m:m\u0013X�[Q�4�\u0000\u0005E�\\�y�e��q\u0004����\u0019Y�,��4\u0001�H\u001f�9��\b�A\u0003���$�\u0000�\u0000�C�C'���p9�ڀ?���+\u000f�\u0013����\u0000����^9������\f'���.�C��\u0000�<5�O��z�����k>\t�WH�%����z�m��\u0003���@�#d�Yy�\u000f��\u0000�\t���_\u0001�\u0000��߱?�_��,�\u001c����^�-��\u0000�\u001a\u0004�Cq&��\nx\u000fD�u�5�y ��5\u000b9�2B�\u001b�܌�A�\u000f�����k��9Ϗ���<Y@\u001f�:\u000f��T\u0001���\u0000\u0005��\u0000�R�\u0000�H��j?�S\u001e1�\u000f���\u0000�j�\u001f���\u0014��\u0017���\u001b�\u0011x\u0017�w�|7��\rg�R��_��γ��,��6�Q�p�k�\b6F@��\n\u0000�\u0000P�\u000b�\u000b-�\u0000\u0004���~+7�oك㕯�o���R�D�\u0014:\u0006��:h�A�_ޙ�\u000b8 �\u0001�\u0011�~����=����\u0000���ʿ�O\txG�_�wĈ~\u001axW�> �𿆵I��KT]C[���S��E���I\u0019K4i7�\np@<P\u0007�'�D��\u0000\u0004g�\u0000����\u0000�?�_���\u0003�\"h�\u0000�3�\u0000����\u001f��V�\u0007�I�\u0000\u0005~��i��.\u0007���_���\t���o�\u0007�]�_�<\u0003��C��g�i�\u001d��ſ\r��<a�\r7^��PFҵ'[v��\u0011�N�ٗ�\u0000���\u0000�^�P�\u0000b��$G�%�\u001b�\t��||]��'�[~�v^=������Gյ��/w�\u001b⧎~0�F)u]\u001a��L����\u0007�/\nkj��\u0012\b�R\u0010JVh�E\u0000��~\t|d�\u0007�\u000b�����\u0000�z�x���?\nh�6�F�\u001c\u0013�G��k^���\u0000J�R��#��n�eI\u0004sF�.p�\b�\u000fPv*��n p=Oa@\u001f���\u0000��\u001f�F�I絺�����m���xǄ|R�%�F��p�pp�A#���\u000f͟�+��\u0017��\ti�L�\u0000�4?l��\u0006�h�/\u0016|P���S�ǃ<:�\u0019�\r�j�����s\u001d�����m\u0011h��`�ȋ����\u0000�J���a��,���=4ψc�\u0000-k�\u0000�ѿ��o�DE���O���\u001f��\u0007�9�\u0000\u0006���\u001f���\u0013������#����o���>.�3c�M\u0003R�M�u?�kQ���P��a�`��\n�F�ouT8\u000394\u0001���G�\u0015\u0017�+�\u0000��j~6ҿdϋP|N��wg����84}[J�ʵ����F:����Ζ\u0017\\FI\u0018�\u0018�\u000f���\u000f\\�\u0000����\u001f�c�\n�\u0000���B�\u0007���\u0000\u0006��\u0000�\u001et\u001f�8ώ?�U�\u0000�%����N��������\u0000�{�>P\u0007�K�\n?�\u000f�\u0000�O/�6?���G5\u0000�'푭�\u0019�\u0000��~�\u001e#�n\u0005����\u0000�(��\u001doU�*�-��+���M���E\u0005�Ck\u0004�\u0015PY��\u0002M\u0000���\u000f�/\u001f�\u0013\u0003����>%��_\u0007?h�/\u0015�g���\\�I���P�o�6�k�;�w�d�%�ՄV��}��Cl�O\"C\u001e��:�H\u0000�\u0003�9�\u0001����_\u001f�t���8^�[��/\u000f���ƞ$�ľ\u001d�M#D�x����m�丛c�\u001a�\u0019�n\u0001�\u0000~40\u0001�\u0007p\u001d\u000f��\u0000�k�G���?~ܟ\u0018-~\u0004~�^\b��\u000f���\u000fk~(���\u0017�Z{ɢ�u-�ծ��4\u0016�mc���\u0017���Py�\u000f�/��c�\u000b/��N�1�>.�N��\u0011�\u000f���w�\t��b�;/~\u001ci�\u0000��«��\u0017_\u0016-|Sy�X�մ�W�f����\u0010x���\u0017\u0002\u000f�I�}\u0015H����`�v6\u0000?��2k�Q��S�\u0000��j_���\u0010�\u0007�i@\u001f\u0015�G�\u0006x������lO���m��u�\u001f�O���Wᯁ���J=\u001fH���.𖧣��jZ���\u001e�d��Q-����\u0004e�*B�?�o�!\f�\u0000��Н�?����\u0000�O@\u001f ~ܿ�ow�\u0014g�\t��>k����!�τ�o��\u000e��\u0018�֥u�\u001f�:w����<_�G���\u000e�m�[K,/{*���P �20 b�?\u000f�\u0003�\u001b�\t��\u0000\u0004����\u0000�1|F��N�>\u001e��\u0000�FO\u0017�\u001cx����\u0016�Vf��\u0000����`o\"A.Ҿ^\u0006s��8��(��\u0012����\u0000�]����ïگI�^��O��\u0015�<e��\u0015�\u001bO\u0019Yˢi��Ѯ^�����mn\u0016�YR\u0016W2G�\u0001C��\u0003�\u001f�'�\b'�\u0000\u0005\u0001�\u0000��|\u0018����0�?\n�o�v~*�<\u001bqq�\u001f��\u001e\u0012�Ʒ��\u0012_F�m֛q#[����p\u0018��@_��\u0000�\u0000L��!7�]���\t��\u0000\u0004��i�5�к�t�\u001e\u0015�_���Z��� ���:���\\7�q�V���)�{~e�F<��K0��\u0007�_\u001f��o�%o��������G��\u0000\u001b��%|\u0017���φ\u001e9�Ѿ\u000e꺾�o�\u0005�w�\u0006�\u0016��E�G\u001e�e\u001d���oy\u001cj��\u0016D\\0\u0014\u0001�S�����\u000f�\u001f�w��\u0000�~\u0014��\u000b�D���W�^\u001b��٬�%�|]�{�\u001aD�vn���/��\u0016�=��4\u0012�����@?�c�\u001f�4o�^\u0002��o\u0011���瀼'�/\u0019��K;v���C�y�j�Zګ#\\�%���\r����\u0005�H,(\u0003�F��?��\u000f�&�\u0000�\u0014�����\u0000\u0004�\u0000��|I�wQ���m_�~=���\bi�1�W�xO·�\u0000\u0016~<�cR�g����^(�Ԯm�=�O�\u0012i�j��ż�i�O-�:B��\u001f�/���\u0000\u0006��\u0000�H?`_�\u001e'��h\u000e|\"�~\u0018xJ�Fӵk�\n|T�|O�-ֻx,4�G�ӭ�^�J�e\u0011&[\fx�\u000f���Ο�J��\u0000f��;�\u0000F�\u0001���\u0000\u0007��\u0000ɛ��?�q\u001e%�\u0000�u@\u001f��\u0000�\u0013��\t\u001b�`�\u0000�Rf��m�(i>\u0000ծ>\u0015C��x�|q�O\u0006�1�O\u001d��Z���^\u0016ky<݅v\r�s@\u001c��\u0014_�\tk�V�-�c���_�n���'ğ\u0014�3�x��#�V�3��E��E�諒����[9���n�#<y�p��\u0001�Y�\u0000�\u0000���'O�\u0013��\t���\u0000٧���\u001fŝ?�v��7◊�m|\u001f�Q�^��W�u��t�M^�P��I��\u0013<+\u0018h\u001f�bM\u00000?�Z����\u0007���\u0000\u00058���\u0000j�������ƣ���w~%�&�޷,^\u0013�%���z�۴[���œ^𶨐\u0007����\r�\u0010�(\u0000\u001f�_�\u0013W�\u000ez�\u0000�W���\u0017��:�U�W���\u001f\u0006>\u0001|9�w�[}\u0007���x��>\u001f��u8��V=R\u0018�\u000bU���7Qĉ2a�@4\u0001���\u0000���\u0000��\f6�\u0018~�Y=3�/W\u0003>��\u0018\u001fR@�\"�?�\u001b��4��\u000b\u000b�^]�V\u001e\u000f�\u0004�:��Ƨd��p�\"��/�{�v�&�\t��2�t'(�SҀ<\u0007���\u0000�f��7�?�_���_\f|\u0016��_�{��\u001e/�ׇ�/i��\u000e�mqmk#��L:\\R^��]B\u0016\u0015�\t\u0004��\u0001 \u0002��\u001a��\u0000\u0005���q�������?�\u0016��\u000f�\u001b�\u000f\u0006�\u0000�D^�\u0000���\u001d�\u0000���\u0000�5\u0000S_�l��\u0015��A�\u0000�Z������\u0000j�gǚU��]\u0003�:g�ǁ�\u000fy�9��е\u001b��\u0000��iyi�$X�#��y��\u0017�@\u0007��\u0000�ɿ�ROً�\n�d�\u001e���+�2��\r��ٛ�\n��|o�;�\u0007j��/�ŏ\u0016�Em��\\]<�+�x�Gt�YBI;\\B�\u001a��\u0000���\u0000�|�\u0000��\u000f�'��\u0013��\t����\u0000���~+��\u0012�~/�M���\u000e�a�x�H]\u0017�3��i.5[mB�&�u��πG�\bP�w\n\u0000�j�\u001f�������\n�M���\u0000���/�\u0012�Vo�'>)���޽(�?���ᶸo�K�&�ħ�<\u001d�Gl\u001ei>�h��k��\u0010\u0000\u000f��\t{�\u0000\u00077�\u0000�-d�\u0000�'���8|\\�Oƫo�_\u0007>\nxK��3���\u0000��S[��״{y\"���U�T�;�ef\u0002;��\u0016A�Q�\u0000~$�m�\u0000�k?����o��o��\u000b�\u001a��)�[�N���9�����\u00174�\u000e����o��\u0015��\u0015�\u001f]k�\u001f�L�}\u000bZ��4��]\u001ey�L�y줖G���#�5�\u0000\u0006��\u0000�Pc?�?\u000e?k/��\u0018�/c���r񟇾2�K�����3�\u001a����\u001fjV�$�\u0014�>�\u0006�\fڶ�\u001e�ap֚|SG%��!GR��\u0007�G�X�y�\u0000`\u000f�+\u0017����\t��$��\u0014��k���e����Z_�>\u001a��'���5�%�����\u001e-��.��\r=ⰸ�/�-�H�\"�\u001d�\u0000\u001e�\u0000�\u000f�\u001b��\u0000\u0005)���\u0001x������σ���\u0000-�����_\u0015��\u0010�h5+ج-E��\u0006�\f�%�%P�uؙs�\u0014\u0001�\u0007�\u001a\u0014\u0000�\u0000���X\u0003��\u0000\f���\u0007�ghX��T\u0001��?�Q��*���\u0000\u0004���\u000f\u0018~�\u001a����\u0017�޽�xk���_\u0005]���mS�Zm�����oiwh�0���la�ˉ��\u0000\nd��O�\u001c��\u0000\u0005k���\u0000�~$���?�3W���k�KD��a��\u0003�x-����\u0000�{�\u000f\r1.��΢�G��g�m\u0019O���\f\u001b�\\\u0000D��d�������\u0000��Կ�I�!�\u000f�Ҁ\n\u0000(\u0003���\u0000��?�\u000b�\u0016�\u0000�|\u0001�\u0000Ճg@\u001f��\u0000\u0004��\u0000�I�o�\u0000��|A�����_�<\t��k�7�4�\u001b�><�R���M����a����N��.�dq \t�d���\u0000�\u0000C\u001f�7{�\b��A�$������㏇�2?\u0017��{�M�I�9E��#�x�_n�ѷ��7�\bb���s��\u001f���\u001e��\u0000'y�\u0017��3����\u0000�\u001az\u0000�����q\u0007��\u0000\u0004���5O���\u001f�O�>1�U�\u0000�?\u0014x�=S�Ph��&���a\u0015��6�u\f�\u0000i�ڹ�\t�\f�&�?k��\u000fE�\u0000�}2�\u001f\u0002?h�O\u0000�o\fc��\u0000��\u0000�������?�'���W��>\u000b��M'�_\u001d�h\u001f��\u0015�7�kk\nk\u001a~��\u0018��\"Ӭ�5�g�o��o��D�\u0018�[c\u0015��\u000f��_��\u0000#@\u001f�3������/�\u0018�\u0019hs���\u001f\u0011~\u0015|B�.�wzXY��\u001e-����Y\\�\u0014\u0005��\u0005Ρ\u0014��R�R��N\u0001\u0000�\na_�4�����?m/�C����O�Zǅ>\u0004~�_\u0007>.x�K�n�Bھ��|=����R�M\u0017\u0016)\u0001������fe��t\u000eʤ�\u0000���\u0000�\u001f��ğ�(��\u0013�'�W�Q��o�\u001e2���R�X�k]&�o\u0017����n�嬣��<�!X��\u001b�$P\u0007�'�(�>~*���\u0000\u0013��\n;�ex�\u0016�\u0013�h:������g���w�$?\u0010\r��w�=z++!�[e\\\u001b��L�|{\u0010�@\u001f\u000f�\u0000��^?ٛ�\n��\u000f�w��\u0000�\u001f\u000f~'�3Z�a�OU�ƭs�4��4�C�\u0013h�\u0005�i�3�nR�A#\t\u0015W��\u000eG \u001f���d\u001f���\u0000n��\u0005|0�\u0000ҽZ�<O�\u000fx�\u0000����?�|B�\u0000Չ\u0005\u0000~U�\u0000�8�ۿ���\nc�0��?�ߊ?\b|)�s�~.�����;�n=m/�\u001d����M\"X��n-晷[�!b�x\nNIn�f~K~��Ϗ?`\u000f������;[�<G㿃�>\u0012��\u0006��g��A���\u001e\u0001��-<��y\u001cW\u0005a�|[amq�F�]�p\u0017(\u0015�\u0011�\r\u0000\u0014\u0001���\u0018�\u0000�o@�\u0000�.��\u0000�PP\u0007��\u0000�Sٓ��o�\u0013�P~�\u000f5M\u0017E��߆w�\n����\u0016�4]>��QӮ��Qkeyź����#6�P\u0007p\u0001�@���\u0000�Fߏ��oOŭ\u0003�\n��S����į��\u0000\u0001�ӼG�\u001f�\u0013jS���o\u001b�?�t�Ӣ�m�l\u001d-��\u0012K�6t>P;rh\u0003�ڳ�\nA��\u000e{�Z����υ�_���ֿ��p\u001e)��\u001d���χ>\u00184�k\u001a���y|���� 6��1\u001f.@�8�\u000f������\n\u0011�\u0000E��v�\u0000��\u0013�\u0000�\u000f����\n\u0011�\u0000E��v�\u0000��\u0013�\u0000�?\u0007����K���I�\u001e\u0007�\r���\u000b񏊼w�K�����\u001aMB]*�Aռa�?\u0006��ܾ�\f2����\u0011�O\"����qlU�oP\u0001�/�\u0013_�\r���?��5��A�o��O\t�>���,�*i>4�ZMdj^\u0011��;��[\u000bI���c\u0017����\u0015�\u0000h\u0003������\n\u0011�\u0000E��v�\u0000��\u0013�\u0000�?�O���n�W��J�h���s�i\u001a�~\bx�Y��M[A3����$W7:k\\�s���وʊ��E\u0000���\u0013W�Q��\u0004ٖ~��\u0000���\t@\u0017?ࢿ�a��\u0007�����C�J\u0000�\u0000$\u000f�!\u000f��\u0017�\t��\u0000g\u0015��#�(\u0003�U�\u0000௿���\u000f��\u0000�\u0005���,�/��=��\u001a|EM\u00054�[�\u000fs\u001e�jt�j�P�ݵ�rN\u0003�\u000b*lC�\u000eh\u0003���\u0000�\u0019�\u0000������\u0013\u001f���jO��\u0013�\u0011x���w���\b�G�mƵ&�u\u001f\u0017�i�X\\*��Anm�{'�F\\8\f�A�?I��?�$/Ǐ�+���ٟ�?\u0003<k�\u001f\u0005�_\u0006�y��\u0014��\u001eK��m}g�\u000e�zM�:qӠ��xg�&y����m$�P\u0007��\u0000\u0010\\�\u0000�B?�����\u0017��W�\u0007���\u0000\u0006��\u0000�+�5�&�e�\u0000��\u0005>8x��\u001e2�\u0017�_�w\u0014���\u0000\u0002ɨK���\u001f\u000f|\r�5��:�0J/���o&!\u0014��K\tݸ�\u0000\u001f��\u0000P\u0001@\u001f���\u001d��\u0000(^���\u0000e��\u000f��\u001b:\u0000�\u0013��\u001f�X?\u0005�\u001f>.�t����\u0000�~&��\u0007��\u0000��\u0007�-t�\rx�K���<�?���\u0012j\u00177\u001a���w\u0011L���!�U���[h�\u0000?�\u000f�\b��\u0000\u0005��G�\u0016\u0011>5K��\u001e+�8>\r��\u0012�<M�]\u001f�?�\u0007�B��1ҭ-���}���wo�0\u0001\u0004�\u000f�?�_�@/��\u0000�X\u001f��\u0004>(�K���g��O��\ru�\u0001�i^%��;�b}WĲk�o>�wk\u0015�0��\u0006�Ugwˍ��(\u0007�P�\u0000�!~9�O����\u0007Ꮛ�\u0003�8Ձ�\u0004\u001fB(\u0003�b�\u0000������\u0000�\u0013K�����o\u001fh�\u0000\u00135\u0007h^\u0016֧�n�����u�x�M�Ҋ\u0018�5\t���퐈�f�k�̪��\u0000��@��l�'�u�\u00009�\u000f�k���\u0019�����/��\u0017,m/��E��/�\u001e\u0007��g���9�e�֓m�\f�~$�N���SH���-Mmf�4X�x��\u0000W\u0000\u001fz��=��x\u0000\u001f�c� \u0000O�,�\b\f�u��_\u0019�\u0000_�����\u0018��o�9�\u0010�\u0000�]\u0000\u001f�\u001b���\u0000�1���s�!�\u0000ʺ\u0000��!�\u0000�E�9�\u0000\u0007X�_��\u000f�\u001f\r���;��\u0017P|v?\u0013~!�6\u001e;�Z�������E��\u001a~���H��n\u001a�ȄBې��\u0000����\u0013��\u001f7�6>.�\u0000�\u0000C��A��!Ϗ��Z����\u0018�t��H�2��V��|3�c�ͣ?�g��G��ջ��@�\u0017  �fͿ6s�\u0000���\u000e\u000f�\u0000�>�^�\u0000��~�_�-މ�\u0003���\u000f��\u0000<M\u0017�ߌ\u001e&�o5Ȭu\u0013|F��\u001f\t�W�\u0016\u0013�����Z����}�_�6vV�[�J�����kbjF�\u0018�N['$�ͽ\u0017���c0�<;��&�EM�rQr|�٥\u0018�'�k\u001f�\u001f�I_�?\t�����χd�\u000f���ƛ}\u0003��:�����I�\u0001-���V]Q�����Q�\u0011\ni��\u0015�:۵�>a��9�zr���/ޣ\u0004�����ٞ#�̝h�\u0015?��\u0000�O��\u000b��\u0000\u0004����,��?\u0019��\u001d��\u001e9�\u0019�|{�\u0017�ll~\u001a�_���\u0000\u0013����\u0007�.�o��\"�V��?�������Q�.��\u0000�wNM=/M���[\u000b��LNY���U��\u0011��J�a)]�|*N_���3�\u000eeVTp��I�^W�R\u0011I_�J*=;��Zg�\u0013��\t\u0015��ɱ�\u0000��|t�̐M��\t��ǵ�;\u00027�Ѓr\u000f-�8ʂ\u0002�\t\u0019�jקB�ѵn�r��=�Щ%u��\u0000���\u0000��}�\u0000\u0004��\u0000�?i��.�\u0000��\u0000\u001d|���?��z�¹�\r4�\u0019E\n~�-�sUN�j�Ԃ��Wo��=\u001a�>�|�6ջ-O������_�/�A�N���k�Z�\u0000�<7�]K�{��]KH��5=\u001e(�x�-*�~�fn���P�,\u001a9�.��)\u001c\u0012GN\u000e����T�%(�v�4�$���gf�H���ie�)�ŷ\tT��9c*����M'�Ϸ>\u001b�g�\u000f�6���Z�]^騲^��V��^�\u0013�ĜAp��@\\\u0014��\u001f��\u0000�l-j\t:�I7k�FZ��Ѿ����a�i�\u0012r��������\u0000��ǈ?ࣟ�\u001f���;�>;�>\u001b�\u0010/|5s\u0017�u�.�XӴ�еhu'Y�,&��S:�寗\"�''�+��?\u000e?����mW��\u0000�%o�\u0007�G��g��\u00164Ⱦ\u001bx������{�����x�,\u0016;�\u0000�jw�\u0016�U�؎����\u001f�#�\u0000�l�\u0000���Z�)�\u0000\u0004��3���'��\u0011���\u0006��\u0017Ƿ\u001e\u0003��|5��~\u001f�Ӯ��y���Os�Z�E4\u000f\u001cF\u001f*5G\fCn�\u0004\u0003���\u0000��>\u0007�\u0000ы�V�\u0000Ý�\u000f�U�\u0007��\u0000\u0005��\u0000��xG�\n��O|2���!��_\u0007l�\u0003�\u001bC�;?�|I���!��.�?\u0011|j��W�d6��[M\u000f���Kw�̲�M#6�c\u0000\u0003��\u0000�\b��\u0000\u0007.|2�\u0000�X~Śo��ُ�\u0015�[/�~=������4����<\u001e1�K�\u000b\u0005��ln.D�cOa,�M�\u0019\u0017`\u001bH�\u000f�\u0019�\u0000�h��\u001a?�\u0014{�,�5�fx{�ڧ�m\u000b�'�,c��+[����WE\u001f\u000f~,���U��Ԭ\"�����~\u0006�ա1F�]��\f\u0012\u000f2'$\u0003�Z�����\u0000��\u0000�o��I~��7�{���:g�_��$��c�MO�\u001e'��\n�\\�%�N���Ԣ����iW�\b�6'*1�\u0000��_�:�\u0000�/�\u0013�I�?`��J���\u0013^��4�\u001f�\u001f[����\ri\u001a?��ٶ�?�Z����.�N��M�|M{�ɵ�\u001d>�in��ob��G�7b\u0001俴��\u001eE�c�����ୗ�_�;��\u0015>\u001a���v����o\n���3��E�Ң�.-`�Rk��^�L�F��UH&�?�/�'�\u0000�=�~��\u0000�����T��\u0017�<i�|\r������\u0000º]�����i����\u0016�ב�mk4��\u0015�h�5\nr��?ѯ�\t��\u0000\u0007O|.�\u0000�����\u0000\f�d�\f~�\u0010~\u001c�?\u0012��\u0012��\u001aߎ�7�i�g�V�q���N�ӣ��J��P$�RAfl\u0012@?f��_�Q�\u000f�-d}C���_Ýo⦗����>\u0005�\u001f���\u0013P���S_A\r��`��a�6E���\u000f&�\b˂h\u0003��#'�\u0017��?�X\u001e|q�/��\u0000x����\u0000\u0004�#�\u001f\u0015��\u001e&�^��(��|W��<V��iVv�k-��m<�JY$YUP\u0002��7?�_�\\�\u0000\u0002�\u0000�\u001c5���H��\u0016�h�\u0003M�����xc�:?�\u0017��������1�.�krn�S>8��0l\u0010\u000b\tD����\u0007��\u001c��\u0012�\u0000��|\u0007������\u0000\b�G�r���ˏ�\u0017:\u000f�u�3�7z�ݿ�|)���u���C\r�C☬ż�҉m$�v�\u0014\u0000\u000f�z\u0000�\u001f����<M�&���\u0000�O�7��\u0017B�'�>\u0003|\b���WÚ\u0007�Ơ|;�k\u001e\n�ơ�Xi��ү4�H�W\u0016i\rر����Y����\u000e\u0000?���#f����Կd/����\u0000��\u0000{����\u0000\u0005]���\u0000\u00078�Nӿ����ï�\u0000�\f�N�5�������|U\u0017��?X�)f�7�4�9�%x��^\u0015\u001an��Z%��.|==ѳf�\u0015Ŭ��\u0000~~�\u0000����A?���\t\u000b�_�~���S�\u000fƟ�z��ϊ\u001e\"�.�c�FO\u0003=�����\u0014}~\u001b�3�\u0011?\txr�^Kr�\u0019~�5�>FvD���\u000fϏ�$��\u0016����\u0012\u0012\u001f��|\u0010�M���Y���\u001fmy�)��6:i���-��H���|8\u0007�������Iھ^�r\u0001�/�\u0000\u0011�~�_�j_�\u0017�����\u0000�F�\u000f�����<\u001f�O�C\u0000�H��>q�\u0019��F}3ǭ\u0000~��Ͽ�H\u000f��rw�=+�\n��T|M���+�\u001f���C�:�ï���%\u0017�M6���\u0000��i7zZ|E�ߍ�P/5\u000bP'�M߈. 7\u001f��\f\u0011��\u0001�G�\f���Pn\u001f�w�xJ���\u000f����P\u0007��\u0000�����G�G�7��\u0000d�\u0006~Ϳ�\u000f�<\u0017�1k�����/\u0011��\u001f���}�?\u0005u\u000b��\u001a\u000e��\u0013�|D�t���_��o�c�i�\u0016\u0006�{�ggknc�\u0000?C>:�\u0000���\u0000���?\u0018~)i?�\u000f�_���\u000e>\u0016|A��S�!:m���\u000f\tj�!����/�[k���\\���u�y�ȑ��c�k�\u0007���\r|\b���G�g~ʟ�g��mg@����\u001b��\u0000��\u0000\u0011k�\u001d6C�\u001a6��\u0017Ǻ\u0017��=OE:������cg�Ksbo���E�Q���E�6\u0000����?�lO��\u0000\u0004����%~տ\u000b�>��\u001e;�5�\u0007�Z�|7�V���^#�\u0013M���xw��&�d�'2A��ľ`\u001eb���\u0001�g�\u0019��\u0000)\\Կ��~'��\u0012�?���8\u001b�\n���\t\u0015�/�����\u000e>\u0018�J��)|P�|\u000b��\u0014\u0013�o���~�ት��Ӈ��C�ۿ��q\u0018���s<\u001eO݄>^�?�O������\u0000�R�������z4\u0001�#�-�\u0000�\u001f\u0017୿�o��hό�\u0000�u����\u000f��<]�Z�A�b<N�\u0005�ៃ_\n�wi�ݯ���\u0011j'V�Q���Z�b���Y��yv�8�����J����\tk(��E��wk��Z�7>;��Y]\u0018��O\u0014ܴ��������1X�F�>@\u0014\u0015n�c<`���\u0011�}�HB��N�\u0000�o��\u001f�a�ܛ�k6�����\u0014��[O�N�?�w��\u0014蚤C�\u001f\u00054{\u001f\n�\u0010�¼:��5�`���m\u0006|��f֖��ZB`�gY\u0000�h��n&�ԩ�K\tJV�\u0005��=\u001f/k_^ߙ�_\u0006e�0�J�B\u001cժ�\u000e�9�տ_�?)�\u0002~�>!����??�t˛�T�T&K�{�˴�[\u0016�-�o,\u0003��Ϸ�<._j��(�������]ϭ���5��Ӣ����<G�o�뿆z�e��!��ol�壒;��\u0006\u0003\u0019}�q�\r� �G\u0013R�]8�=o�}U�'��\u0019��I�Q��o�y>����\u001b��EO�\u000f��<���k�>\u001d���y��\rE,�\u0012\u001f\u0016�/ͻ{|6#G�C�S�����(\u0015w\u0005�k�Ȫ�x�F�uyݕ�]�j�k�g��8e_\n�\u0013����b�~���_���t\u001f�����p�>\u0004�\rזER@u[�\u001d�aрp\u0018g�\u0019\u0015�f�q�\u001dV�\"��&|�A'���[*rk�8.��~�\u000e��+�>�Z\u0000�0����1����+Q�\u0000�\"��?�\u0016�?�O� \u0017�\u001b��3�\\?d�\u0000��\u001f>3�i����ľ\u0001����\u0000��~���_\u0000��{�i?\r�\u0018��\u001dR�x���\"��Ւ��\u0017�ry\u0017qY�;KM��7�,�\u001f��\u0000�\\o�'W��\u0000�%��ѩ���\b�m�ψ>\u0011��W��Ǒ���3�}�H���bդ��s�\u001bA�͝���\u0016�t��\u00076Y>R\u0000?���\rp�\u0000�\u0016~ß���\u001f���\u0015\u0000@T\u0001���v�\u0000�<�bO��\u001b�2|v�7�;�Th�#���W�\u001fŭHЦ�J�.���G�v��\u001dWM�\u0017P�o{|4�\u001b�f{m<^]��\u000bX�\u0017\u0017\u0013K�F\u0000�����\u0000�;�\u0000b\u000f�\u001f���\u001f�\u001e\u001f��?j�g\\�[��~;�t�j�gI�u\u000f\rhw�����,~\u001bZ^\u001b+���;��][��yr�a�\u0007�1�\u0000\u0004���|%�f~�\u001f�'��}w�>\u0016���\u0000�:?�5�M_\u0011�:~�\u0005���\u0007W�Դ϶#[(����õ�tD��\u000f�\u0003��\u0011\u0017�\u001f�\u001b���_�\u0000��~�?\u0016~/�h���7�i�-��㌞\u000b�ី�+�_\u000e^�y<\u0005�o\u0007x�������\u0000g��ȋ�O7̏1�\u000f�w�\na�\u0000\u0007)���\u0000�T\u001f�Q��~/|\b���\u0003��G��\u0010�̞\"�u\u001f�T�2j>\u000e��{\u001bD>&񾻥}���H�a��1UA\u0014�|Ā~��\u0000���\u0000�p��:�9��-�[@\u001d��\u001f#�\u0000#��\u0013k��ګ�\u0000N߳�\u0000}��\u0000\u0006M�>�j�<�K�\u0000T��\u001a\u0000��(\u0003�'�\u000bE�\u0000(��\u0000���\u0000ٛ�|�\u0000�{��\u0007���\u0007�߰G�����\t��F�\u001f�\u0017��\u000f�����\u000e���\u001at\u00104\u000b�\u0012�h�1�dѵsq�Xk:\rķ\"�V6���\u001a�6\u001d�\r�\u0003��)_�\u0017\u0003���\u0000��x\u000f�ÿچ��ݶ���ڧ�|2�\f�\r��N���[Fm\u000e�jW\u001a���F�Vbbc�8m�&ĆV\u001f-\u0000~�����G\u001f�\u000b�\n�o�K��Cs�j��\u0012I����a�M+�\"A�%���\u001a��|I��\u0018#�<���6��\u0018\u0000�o�9\u0017�\tY�0�\u0000�*~>~��\r�\u0000f\u000b��W>\u001d����\u001e5�+|K�V��Au�3��薣N�Ӽ;�حm\r�\u0003,2[�;����|�\u0001�]�\u0000\u0006��\u0000����o�\u0014��#տhO�:�㝯�l>,���P����\u0016��}\u0005�}\u0016\r>[&�M��W�'k��Ry�\u000b�G\u001bBĘ$�E�o�\u0000�W?jO�7����'�\u0013\u000b�\u0003��a}�5�(��/\u0018�^��τ�/��\u0011�X��d<A�\u0011���C�'�4��5�8������m\u0007��s��\u0007ȧ�\u000f\u0019�\u0000���\u000e��&c��Y�\u0014�\u0000_�G�P\u0007�\u000f�+����_�\u001e?���x�Wğ\u0012<k�\u001e��=2\t-4��<a�_x�W]>�I�e��\u001a��p-m丝�ˍ攩v\u0000���\u0001�\u0000\u0007T�\u0000�O�i�\u001ex'�m���~���9��|]ῂ>;\u000e�(�\u001e��$�g�mf��~'}\u000fT���o��+����M��O����ɸ���#08\u0007���?��?�L\u001f٫����\u001b�Ƨ�L��\u000f��\u0000\u0013<\u0013�c�+�/�\u001e\u001c�4\u0006�W�<G�x�A]gM��Ο5��u-2���q_ZIqo�$���H�\u001f���?�G�s�\n\u0013�<x��b��?� �g���\u0013R�\u001b��ݯ�|I��\u000f߮�a�=V�I����ΠN���d��R��\u000f�o�'��\u001b��\u0007�3>;��D~����I�{7���\u0005�\u001f�_�z/�4#�k���m���\u0000\u0004�~qt\r�^L�m؟>��6�}I�\u0000\u0005(�\u0000�W�̿�UO��\u0000�e�O��J����o\u0017]��Ç៊��\t��7�L�4�P��|;�8�lͤ�R\u0004���o����\u0000\u001f�\u001f�\u0007\u001f�\u00123��ߵ��\u001e\u000b�\u0000�\u000f�>\u0011�;f/�$�쥩|\u0015���o\u001c[�/�\u0017�]w�>��WŚo�5x<S��;��\u0001o�Yh^\u001b��K���y������o^�Sv�q\u001c0}O\u000bb��LV+\u0011��\u001a\u0014�a�s�^�]u>7�0��V\u0013\t��Q�z�1/�鮉��a���o�ڃ�_\u001f�\u0013�\u001b�J�e5ݞ��^Yì��i���%��md��K\u0015���i��co4֋t��p\u0019�S����43�S�p�22�\u0016Ԝ�(Ú.�[j���u���x~�W�X�杢��#��Z��Y������\u0013��/��;A�-O@�\u0017��G�=N{-[A�b[i�R�|�^M�A�\u001f:Hoo��;hˉ\u001ax`���@cU��&S��'��~�M/j��Zv���5g3�0��[\u001cL��MuR�\"ڂ���W�Zu������?��^\u001c�i��?\u0012x�B�G�u��\u001a�\rR\rB�9�:�Κ[SA\u0014��\u0016���\n�ż�я�$$\u0011�����G\u000f:��$�kNT�|�����PΧV���9Q��J|���$��}?\u0003�������!�r�(|\u0013��\rJ�Y[m'�WW�t�\u0016�|�6�\u000e�g\u0005�\"m\u001e6�}&K)^+�V�9\u0000u��\u0017\u001f�G\rEb!%6�q����}մ]N�.6�&��:3T�ڔݹvv���^�\u001f��OO\u0003x����\u0014S�ޏ�K9l���#��\u001f�10O�ϬF�JMi�q-���A�J��͔�1\ns^v_��1����͢{{���m��<�\u0015���ME�+�=RV��y��^�k�g���w������i\u0012x��g�C�R|e�Lz휺���-�a��V�\u0013Zӭ�'�қX���Q����[�C,\tun�%_��j�H�����\u0000�3�2x�\u0015ݖ�(ԟ��Jj��\u0000\u0002Z�Ǘ�F3�\u0000\u0005u\u001c\r/�L�㟃>)���\u0015*�O�?n��_�p����\u0000\u0005/����f��6��M���~\u0012��\u0000ƭ/ß����C�����N_�-C�� ��ln�\u0017\u0010}�<�n٣�h\u0003�r�\u0000���.�f��*�O\u0004|(���$[xS�>-�ƚ!�k�?º�k3�iO���G��\"�{Qk#m�-�q.\u001c�Tl \u001f���\u0007\u001f�\u00123��ߵ��\u001e\u000b�\u0000�\u000f�_�&��\u0013#�q�\u0000�X|\u001d���َ��-ς<o�3R���7Ŀ\u0013��+�ǊuO\n�O�\u0017+g�i�\u001f��0i��>\f��v�g,�tn�7\f�$q\u0000|o�\u0000\u0005\u0003�\u0000�x`O�)W�\ry�L�ї�\u0000\u001e`��{�\u000f\f�&X�\u001e|E�<1���|'\u001d�zV�2�\u0000������돵No�M���Ŵ�\u0000�M?m/�,_�u�\u0000\u0004\u0002��>%�$�a\u000b_�׿����\u0000\bp�[s������/�2���\u0007�i\u001b�\u0000�O��\u0017�>\n�u}�\u0011�2��4_�xgL�\u000f��J�&\u0017�\u0016r�\u0017@\u001f-�\u0000�c_�W_�\u0005�ɟ�f|S�\u0000�J�?���7��⏎_�G����\u0000���_\u0018?gO�?\u0014�Z�=��:Bx��\u000f�?\f��^]*�k��l���5{�ck-�̖��(�y�\f�\u0001��E��l\u000f�7o��\u0000���\u0001�H\u001f�B\u001f�L/�\u0013���+�\u001f�G�P\u0007�J����ڧ���;�\u0000R�\u001a\u0000�\u0000:�� W�\u000b�/�\nO�\u0000\u0005\u0007��\u0000f_�&o\u001b���P�M�3Ɠ���\u0000�\u0016~\u001a�\u0010�|'g�ϥ\u0004��mz�l��M��\u000e��(�\u0016X��N\u001f�R\u001f�>\u001c�\u0000�Q|+��?�\u0012��\u001dK��\u0000�\u0007�<A����~ӷQ�Z�\"���-6��^\u001ao\t�xn�Ἲ6�ڧ��\u0011��]]��Z�xc��h�Y\u0000?�\u000f�)��\u0015����\u0000���_\u00075Oڞ��M����\u001f\u001c��\t�\u0000�_��S�1<\u001f\u0010��ƿ�����<Jo�Y<\u001b�}��k1n��H���b\u0000���ɯ�G��O�\u0000g����C@\u001f٥\u0000yw�߃?\u000eh��\u001f\u0012�\u0004|^�_�?\u000b~/x/�\u001f\u000f~ xn=[Z�d�<%�:}'\\�\u0013Z�桤��[^X\\�\b��5;\rBؿ�ku\f��\u0000?�\u001f�.\u0007�\u001b��\u0000\u0004���?�����)�;�̷�\u0004����A�o{��\u0016M�����\\z=ψ>5|6���#x�_\u0014�A�G�>\u001f�\u0006�b\u0013T��R\u0003t.��+�-�\u0003�9�\u0000�x�c�����\u0000��|;���j_\u0002M�\u001f�\u000e�����uO\u000bA��\u0019x*K�[��\u000f��t;��x\u000f�\u001e\u0019�\u0014\u0002��4��o�Eor\u0017ʺ�xIB\u0001��?�\u000b\u000f�\u0010����T�\u0000Ē��?���\u0007���\u0016�Y�ۉ>\bA�\u0000\u0004p�~�Q����i>3�E\u0013��\u0000�%�෵O\r���\">.\u001f\u000fg����\u0019:?�<��}��e@?��ۓ�\n;�a�G�c��\u001e�؟\u0015-�*����/|'�\u001dJ��_\u000e|\u00024�\u0007PԛW��6_\u000e<%�->�˨3N.o�.��\u0007�I�/��=��4�\u0000���J���\u0000\n�>\t~ɿ�\u0005��\u000f�w~#�|Ws���\u0010|\u0013�Ē�ڲ���_\u0010>\u001dx�]O=-�Qm\u001e���m�0FX�\u0003�v�\u0000�Y�\u0000�6?c_�./�y��(W�\u0014��E��\u000f�[|H׼W�_\u0018�O����+�徫�x\u0013S����\u0017�o��\u001b�=�:n�\u0005�\\�\u0015���?����o�P\u0007���_�CU\u0005��o�p?��j����j#���Z\u0000�\u0000)Oڃ��\u001c�q�M��?\u000f�\u001d�exG�\u001d>-�3ºS]^�\u0007M�煼}�\r\u000fC�7ڍ�ޣz֚e���������1���&�䑀?�C���l��\u0011[�\u001e.𧏼'�#�z_��\u0015�M\u000b��\u001a�O�\r�M_.��\u001f\r�v�Ώ~lu\u000f�7Zm��jVv�\u0006���{)�~Mż�3��\u001f�_�R\u000f�^?�\u0003�\u0000\u0004�\u0000��>8�*�\u0017�_\u0013�\u000f~�\u001f\u001e>%|>�\u0014�f�����?\u0004�3�\u001f��7�I���:���-���Z]\u001b\r[N�Ӯ�f\u000b�K�w�'\u0000�\"��_�^\u001f�*_���\u0000\u0005.�E�=~�?����/��'��5\u001dk�\u0016�\u0000\u0005�\u0003x:K˭\u000f@��Mq�x\u001fះ<An �U����\fr�d�*|�\u0001�!��?�\u0017�9�\u0000\u0004���l~:���\u0000\u0011a�e�>o�~\u0006����\u0007x\u001f�\u0011�\u0003X]M�\u001b?�_�\u001e\u001c�F�����������Bb\t�\f��?�\u001f��k�\u000b���\u001b#Kǯ�3_��\u0000�V�?�/�5��\n��t�I5ڮ\u001f�#�=��x�\u0019��\u0005���m���W�\u0006�.�s\u001e��~\u001b�+�-�\u0011\u0000���X��DE��\u0007��\u00163���p�Έ��\u0004O�+K��Xo�NK�m4�^f���KK�Xg*\u0015�K+���]��\t�:x�:2�\ta]�d�����2��tס���\u00150��ΓQ��h��6���~���?�o����\t���|K�\u001d����ǎ<+�\\/��m<Y?��\u0007�^ݺ�j\u000f���[�����\u001e�I-�����8�\u0000�|�>{�����\u0015i��Z\u0018\nS����r�\u0012j�\\���+o+j�����T1�G��c\u001d>m[�\u000ekyr����U��\u000f�\u000f�¿\u0011�^����v����ō[�^\u0003\u001a\u0017���\u0000\u0015^]x\u0017�\u001a���\rGY_\u000b�[�Y�b��R���R�\u0005�����^���ll\u001ay#oԱ�l\u0015^X��-{ʂ�I[T����nM�\u001f\t�ⱘuO\u0011AӣA�\t՜\u00174�%tӗ��Gvמ�W�'�;�~\u0018������\n�G[�4{�l�mWK�Z��Ӧ��'�l�-u}2M�w3��Ԋ�&@�o\u001b[��=|�u^1�J��}[���({?i��Mssþ�|�G�\u0006\u000f\u0015��1�r��ʒ��ҭ��<yӼce\u0016�o�7}\u001bG�s|_�\u001f�~\n����Ua�)|7\u0004�6���\u0013�E\rżfC���\u001d�d@�j�;�����$W��q��](ө�:P�c.�Ҍ[�fݮ�����\u0000�fa��5��J�\\\u0015YF��r���y]�շ��\u000f�߃߳��\r_���?��~\b>\u001a�=q�=X�/�/&�6��xie�.'�I#�GԴւ�Ö��t����3�'��#��\u001eY_\u000f^�i��*��շ'���<���oE~e�v�y��K0�U���a��ӽ����^��e�[��ֺ[~��r������*�#�\u001d��u����\u0014\u000f�\u0014v\u001f�\u0003�Ҿ�\u0011u7}?���>3+�j�W�(Ν��4�˚��ܶ������\u0000���~���1�W�ƿ���+�\u0001|`_�?���\b>\u001a�SO\r�\u001e\u0012O\u0012�xC�\u001e6D�u�\u0000�lƋ��\u0000\u000ex�A�r-�\u0002��k�a�<�\u0016&�?X?�)��._�\u001eF��\u0000���+�\u0000�\u0003�\"��\u0000���\u0000���������\u00009Z\u0000��?��/�(\u0017�c�\u0000\u0005\u001a��>4�b��~'A�S�\u001f�?j\u0013�4���m���\u0001����w�O��(��[I�s�o\t��M\u0016���v���V\u0013j2\u000b�\u0004�oook\u0014 \u001f҅\u0000�/�\u001d\u001b�\u0000)������?��g�\u0000�\u0001�\u000f�w�Y�\u0000��?ా\t�?g/���\u001f�N��|&���\u000f��\u001f��(?����>\u001d�3xw�ZN���}���\u0017/k�H4�\u0000�k�R}fb�k��[�k�\u0000�\u0000X�\u0013x\u000b�\u001f\u0019>\u0011�\u000e�#X7�<%�'�7\u001e\u001b񖚗��K��?�tai�Z\u000b�\u001a��P�k�{��\u0017\u001am՝�\u001b�[I\u000b*\u0015\u0000�c?n�\"��\u0013k�\t��\"|~���\u0000b��\u0017�\b�\u0000k\u000f�O���g�W�۟��\u001a�!��3Ǻ4���n�/��&�E���\u0012��7�(t�\u0015x[[�%�7Mb쑕\u0000�\u0016i��/��\u0015c���/�������t�\u0000\u001e�\"��/��+\u0017�\u001f�>\u0014�P\u001au�w֛u�\u0006�/�<Gg�]D��\u0000������G� \u001fz�\u0000��D\u001f�,��@g��g��ĻB��\u0000�\u0017���\u0000\u0004���?��\u001c�}�O�+�-�ō\u000b�v�����\u0016V�\u0010�&|?:>��\u001b\u000b=7V�k���0��ޤ.��-b\u0010j����c�-�G��\u0003�s�!a�\u0000�\u001aћ���_�G�\u0000>�\u0000�>��?��_�?�\u0013��ߋ>\u0014�ǟ\u000b�>\u0015x\u0013��4��\u0017��k�\u001d�D���\u001e-�CѼ7&���ď\u0015��U�V��\r*��67��x6��Z���&�\u0003�j\u0000(\u0003��\u000e_�\u0000�\u001e��?�+�\u001d�\u0000֏�9@\u001f��9��?\u001ed��\u001awƟٻ�w�>\u0010�S�4�cF�|k�I,��,��\u0010Y����D�֗��\u001dB���p�3\u0018��e<�\u0007��?�\u0000�\u000b+�\u0000I\u0005���\u0000��\u0018�\u0000�n�?���7f(��\u0010����XP~�o�.O\u0007��F����|\b�'[��Ɖ�\u0000\b��\u0006�������O�2b]�9�\u0007���\u0000\u0010��\u0000�\u001a?�\u001f_\u0002�\u000f�����\u0003O�\u001b�\u0000�\u0000\u0004h�+�\u0000\u0004��\u0010\b\u0004�\u0016�%���G�T���\u0007���\u0000\u0005���?k\u001f�%'���\u0017�3�\u0000�v|s���.�\u001f�\u001e\u0007��'�c�t�u��4Mgź0�<I��E�i������\u0002n����!��*\u000e(\u0003���಄�ࠟ\u001d�\u0013�}��\u001c�\u0000�@\u001f�\t�=�\u0000�\u0014?��?\u001b?g\u001a~*�Ŀ\u0006�k�O����\u0000�\u0013�%x�Y��\u0003k\u001e-�\u0019����>(՚�^��mK_�\u000e����\f\u0010Bn��1�\u001am@\u0001�}��\u000f�\u0017g�\n��?�[�y���\u0000o\u001f��φ|U���7��C�]��p�jz\u0016���\u0003Kմۑ\u001f������}�Ŭ�\u001d\u001fʕ���\b\u0000�\u0000\\_��\r�\u000b��獾\u0014|L����\u000f�_\u0011�)��\u001b�\u001e\u0014�|���K�/\u0014iw:/�4=E`�\u0019��T��.l�DSE!�g���0\u0000�k��\u0000�D�\u0000�5�\u0000eo��7�o���E�U������4\u0019x^�[�V���-ͦ�\f-{�^@\u0012�ܘ��\u000b\u0012��\u000f4\u0001���\u0000\u0007�����`\u0004\u0012?h��d��\u0007��s��\u000f���\r>��eo�s����<\u0015�W|\u0013�w��\u0000\n�?����/\f�2�P��I��ioaq��\r>��O�=�\u0018\u0018���Y���@\u001f���*�>b�\u0000�~�ŗ\u001f�w���?��x�+\b<Z|\u0019\u0016�\u0011�#�\u0019��oF��_�[<�4~_�As��\u0004���m⟇z\u001f���u\u000b=C�\b�iu�$\t\r���\"���)*D`\u0010z�\u001a��U��&�iƧ����w�V���_�C�\u0017����\u001au'(,=Nt�kI餯}4�~Ek�\u0010Ӿ\u0013�%��- �\u0013X�\u001e��:�61K\u0004\u000eg�4�-�'�UAXݱ�����͇�<�^��U�����\\��u����/�c��\u000fF�ZZo�n��P���*�^!���'��(����\u0016�h�F�wez�_g�2_i1ͨﹱ{s$S%��qH<�dG�\u000f���\u001b��1���)ʵL-튫�i����U�\u001f�x��K.�˯��(Q�So\u0013��װ�S�ƛ��}=����\u0013�f�\u0007|\u0001x�_\u0015�+\u0007�|7�\u001df�<,�\u0016�����/��[E5�\u001e\\�]��},�m�t��d�㶞�+E:s�J��\u0012�b���\t�\r&�\u001eed�Z.����xe�y�\u0016j�W���#\tK��\\c8��w\u00174�̺kk��W�\u0014�㗈<1�3�^\u0012�\u000b��_\u000f�'u��\u000f��mͮ�.��4�ڌ��3=��c\u0005��H�U�o-D{��̩�\u0018LV1P��)�׼��6��Km�ҳ�Ng�B�i���\u0011��(G�(Ǘߊ�����n��͘��H��(��_�\u0015���N�N�\u001f����N��j�ϯx}�&[]\u0016��\u0000y�!ӥp,m�\u0013͂�H�\"8���㊝,U<=J��9]�&��˦���|FWJ�\u0016�2�*��N��Q$�*J���\u0015ڵ�?�o�+��\u0000�~-�C��\u0000�\r���\u001f|I�+�+�>:�ƪ����\u0006����þ'����I\f�a�h����x!�\u0019Z\u000b�<�#|0�q)5\t+����<\u001c�h��S��]�8�<�=�����F���\u0000�}|\t$���M��\u0000��\\��!�\u0000�����\u0019�\u0000�}�\b\u0019�f���=�ω=H�\u000f��\u000e��\u0000�h���\u0000�/��\u0003�?���������<S��\u0000�~!��\u001b\u0006�\u001d���SO�:��\u001f���\u0012a�4o0\f�\u001cP\u0007ǿ�i�\u001b� ~�\u001e3�������'��8�x\u001b�\u001e\u0000�𕷌�ԥM\u000e�S�u\u0018/����l\u0019Z�(cI|� !\u0017\u0018�\u0001������k�0���\t��\u001b�ʟ\u0006�%�G��$�]׎5�\fx6;���Kŗ�>��]k�\u000b�__�og��=�X�YV?'O�\u0004\f\u0019�\u0003�5�\u0000����_�Q/���\n�|\u001d���k\u001f�?\u0007~\u0018��7�\u001f�a�w��tX����v�^m_QU���\u0013ߵ�����\t�v��\u000f�\u000f�#_�\u0013�\u0000�5�\u0000���\u0000�7�\u0000g?ۯ�\n\t�>�\u0017����~9\u000f��������w\u001e6���g�����\u0002\u001djm\u001bQ�4��\u0000�g���\u0005�?N�>�o�I������$�@\u000f������\b��\u0000H��\u0011�\u0000��&�\u0000撀8���B��$g�>\u001b|B��?a/�~\u001f�|\u000f��\u0017xS^���\u0010��<I�\u0006�\u0000Yе{#/�%�]麥�����9\u0010M\n\u0017G\\�\u0000�\u00005�g�\u000b��\u0000\u0005�ҵ}SM��\u0000oώ�v:~�{egm\u0015߆�p�Z��om\u0012n��;\"�8�L���'�\u0000�;�\t��\u0000\u0005I�\u0000����?���\u001e~��\u0000�O�ߏ_�/�\t�WF�w���.4i�%�\u000f�:�����\u001d���t�:����mm�mo��&%Ġd\u0010\u000f�\b_�7�\u0000�\b�W'�\t��!����ļ���Ę�(\u0003޿g/�$��\u0013��D��m��i���\u0017|\u001d��i�j�\u001f�񧄠�bբ�5��Vӕ�����_�\u0010���X��k-\u0000~�\f``��9��z�\u0007�M�\u0000\u0007q�\u0000�B�m/�k�_�����Dx��U�ğ\u000f��7^:��Sip���<)�|\u0017�ò�?�:f�Y���A����b\u0000j\u0013�\u000f��\u0001�\u0017�\u001a��f�����Y�C�A��~4����<+�Q_�7��!�|��W���O��[�E�m:��!f�����\u0000�<�u���UT\u0003���\u0002�?\n?���?��߷�#�E���\u0000���\u000eP\u0007��P\u0002�`\u0001 ��>��\u0014\u0001���d\"�k�s\u0012\b\u0006�D{�\u001e��\u0014\u0001��\u001e��@\u001f���\u0000\u0007Z~�\u001f�����\u0000\u0005%м\u000b�>~�ߵ\u000f��\u0000\u0004M�'����\u000e�?��\u0000��O\nϫ�\\�w�M��\u0005��D�$�.�8������ꈲ��T\u0000\u000f�_�7��d��?n��&o���+����~\t~ؿ�\u001f�|a�\u0013I�'�Oڧ�G��\u0000hO�z���k��B�5���\u00174\u000f\u0017��U��[/�=&��[��N�\u001fg��\u0018�J\u0000���%\u0017�\u0012�#\u0011�\u0000\u0004���ԁ�\u001f����\b�\u0000�s�\u0000��h\u0003��?j?�)'�\u0014S��7�E�8�u�{~�~\u0002�{�\u000f��\u0017|\u0013�?\u0001x/�����o\u0006x+��\u0015��\u0000�4/\u000bxK�^\u0016мua�xs�>\u001d�,,t}\u0007AѬl��#J�����K{;xa@\u000f�\u001a������No����ǿ�?\u000f�`_ث��<�?�_�>1�W��\u001d�,|\u000b�ϋ�#��\rx\u0017]��9�\u000b��D�%���x�@�,��m\u0013\\�om5=+S��������)�\u0003�����To�I7���~؟�?�\u0000<Z\u0000?���T�I7���\u0000���C�\u0000�Š\u000f�C�\r�����\n\u001d�\u0000\u0005\u0006��\u0011�~�\\���q�\u0010�࿎�_\u0017���\u0003��+���\u0015��\u0016M-to\u0013G���F��_\b��4�sr4�etq�؋���s\u001f��\u0000�\u0000E�������5kz��gO�[�q�\u0005�\u001d{N�G�uς�\u0003�\u0018�,յ�&+��Ŧjڏ�|/�^j:|W@\\�gy<��p\u0004�\u0018�-@\u001f�/�\u001e\u0019�T~�߳>��\u001b��7~��\u001eg��Q��DO\u0014M�G��\u0000�/�R��lm4�e\u001e�'�<C�����ݭc�i�\u0006wh�\u0017l�l�\u0000�����\u0005���\tG�C�'��\u0000�?\u0016?h\u001e韷�Ŀ\ti\u001e+���;�?\u0013<I��_O���\u0000g�j����#�ֵ���~\u001f����j��F���M��u�R�+t����~�\u0004�*��ww�_���Y��\u001aI^����?�\u001f��G�o�!\\jW\u001aΕi{��r[��|-�]�\f��ݳ�k\f�\u0013�h��u-!\u0012�\u0011D�i\u001eA\u0011Sۍ�\u0017M�'�O[+i�W��׹�Sͱ\\�\rB���MK�M��m\r�\b�.��ű��4=\u000f@�{�q����񘼙�\u0013_4ז�E�Ҽ���5��2m�\u0002��W\u0017O븟�Ɲ:�}���i;ke\u0014Փ^{u<n+x��T�UjU�)'\u0019E��w�\r�%�\u0000n�6�غ�e��_\u000bj�\u0000\u000e��[�\u001f\u0015j�V�~��]�Z���\r6+f��\u001a����mt�\f����L��\u001c�M\u001f���\u001cn\u000fꕩ�h:�J�:t�xFS��}�i�+���\u0000\u0003����Mlt*Q��jxj���M�ʤ!5)F��R�J�$���\u0007�\u001b�\t�i�]m|O���N���To�;�\u0012���w[�H-n�p#��VEF�W���A�M��W�xK�h��%�c�N�\u0012��5OH���Is'\u0007}]��WI�m��oO\u0001���˫{LuU\u001aj���$�\u0016���W��W}w>p��\u0000�\u0011��^�\u0017�\u0011����\u000f��=��Mj�����\t�}G�~.׬5\u0003,�m�K�J�I�呙����;��\u0004���̖N� \u000f\u001f�<�+��aO*�FS��\u0016�/�&���������fz�\u001f���c�֞g���0�T�Q��\u0017�,����w�V�����<9?�?i7ү/��/�\u000f\u0012�S��\u001dވ��\u001e[c�X`�������\u0019�5������Ӈ����t�h5k_��qi��OMN�\rb2n\\C��\u0019�І��5K�M�dթ�d~�+\f\u000eGA�ڽ��?�/�:��Ə���\tss�\u0003�'�\u000f�\u001f\u0004�|�\u001d�\u0016i\u0011���\u000f�\u000f\u0015�7�j�:����:b�������\r>�b�]�\u000bϳ\\��M\u0014�@�\u000f�����g~؟����xk�����\u0000i/��\u001b�/�մ}\u0007�W�?��\u0000\u0014�]\u001bT�ݭd���/�>)�lt�A홠k�H\"�h\u0019�2\u0018���e�\u0000�d)\u0003�\u0017�͓��;�\u0019��\u0000\u0013�W�h\u0003�\u000b�=G�(\u0003�\u001f�����;�A��o�_\u001ec��[��\t��-\"\u001b�]���\u0011�J�|�N�$]7K�ľ3��������ҋ\u001b\u0016�6ւY<��\u00126@=��g��_\u0003�\u000f��1�-���?\b�\u001bxg�M|9��Ꮔ<;�/\u0003xw�cX��\u0006��\u001f��)�i:\u000e�5M{V���El,-�歩_�7\u0002K����\u0000�\u0000'��,��\u0014{�\n\u001b��\n��v�=�e�y~��\u000e�\u0001�\u001f�'�:/��\u0011�_ڋ㇄�!�\u001a��\u0015��|=�\u0003�:~��i��qoa�����\u0018��Pq@\u001f�7��T��)Ϋcy�j�Q�ۿR�u\u001b[�\rCN����\u0000h\u001b�\u000b�\u001b�^�������\u0014��v�V�I\u0005ʹ��\f���J���@>\u0015��{������gi&�Vg�Y\u001d������#�,�ĳ�,ı$�t�\u0003�\u0017x���\u0000\u0010~\u0019x��\u000f<}�=F=_¾6�7�u\t���Z�\n�\u000e��x�A���t}B$y\u0016;�:���\u0015�$�1�\u0007�\u0007�\u0000\u0006��\u0000�@�\u0000oO��V?ٳ��Ə�s������]�Ń]�\u001f���S�7��\u0019�����n-���\u0014��U�/ż�@.�f�U�\u0000p\r\u0000b?�t��ό�\u0000?��^\"���\u0013���߂�\u0010-�:�\u0019� ���O\u001ex��ǌ!�u;�j=KL�ľ\u000e�tmj-?PX�K�4�[k��14n\u00116�~0������i�L|s��4��C����h\u001d+¿\n>\u0014j>\u0018�>7|l���[O�ޡ����\u0016څ��e�\u0013k��=����\u0016��Z|v��A\u00041N�\u001ch�\u0003���\u001f�\u001d?��_�+��_�v���\u0003�\u000f�2k�Q��S�\u0000��j_���\u0010�\u0007�i@\u001f�\u001f�V�\u000f\u0018��L\u001f��M�{k�;�\u001c�~�\u001f\u001bm|%g�\b�\u0019�Qs���]a4�<?\u0016�\u000e�&�%эlSO\u0006��( \u001ef(\u0003��5����\nO�].�C�\u001f�?�;_�o�5��5�\t|e�t�ņh�a[�>��{K���\u0018g�M\u0013��(�\\:+\u0000\u000f\t�����H|.���.���\u0017�\u0007�|+kqkis�O\u0018�:�g��;{��D\u0016V�j���ie\u001c�s���'�<�\u0010��1�\u0000[�e���\u001b�ڟ�β񯄼1��;\u000f���W6V�'�4�z����#E\u0013�[C��]G\u0004�\u00111��*;G�3\u0015�?Џ^���2�)�O\u0012�\u000e�\n�(����x'����!\\�'m\u001cjbо\t_?�ݏ�4\u0001��r~�\u001f�u߳��\u001e?\u0000���8\u001f\u0010����N\u000f\u0017�\rOş\u001a?c�\u0014�k\n[�G�~5�E�_�#Ɏ\u0001y���\\\bP�)\u0010�\"\u0012v�ɠ\u000e��ߵ�\u0000�\u001d�-2-\u0017¿����\u001e\u0007�Ht�\u0007��=#N�I�t�Ge��\u0016����#,A��bM\u0000m7���\u0017� ��߳�\u001dH\u001f\u0018�\u0002zs�^�\u0018�\u0000z\f\u001f\u0007�g�\u0011�[����_�\u001dv��\u0010ŭ�k�x\u001b���Z�\u001a�\u000b�uX�\u0015����ME'\u0017�z%��ba8����\u0003��������_�K���4�ڇ�\u0006��j?���M;MӬ~-�\u001a������ψ�l�-��\u001ek����\"��\b��WH�Y�\u0002\u0001�&�\u0001��\u001f��\u0000��&x���\u000e�\u001f�_\u001dx��9��]C�\u001a��V���Io��v�W�$\u0011��p��>f s@\u001f���\u001aW�5���\t��\u0017�'���;��ÿ\u000eI�\u000b�>���~\u001fx��:C��ɣ�{5�5�.����#s\u0014\"]ﱶ��@\u001f�\u0011�\u001f�\u001f���\u0016\u001a�ŏ�^\u0006�k�j�oa�j>:�F��[\u001dB�8M��Y��w�V�7)\u00002�0��,`�\\\n\u0000����\u0000�\u001f�\u0013����������ﱗk?�I� �*�ř�\u0005�ڍWS�\u0016�@\u0000$&�\r���\u000f�oڟ�����_\u0016�g�G�)��x���\u000f\u0013i\u0012|b�o�xw�>\u0002��߉w����\u000b�?���F�{o�/�U���u}/I�\r͕ω4Т����屸NT����/����a�xY'�����3�k�����k=r��z&�b�C�u4�\u0013�\u001b\u001f3X�g�-E>��\u001b���������˂E3���\u0016e������2��f���]7~�/��b)M��*6�b�̗�K��s|<�oa��ux5�\u000b�yt�ek�\u001ax^�X瘗��'�Z�G m�کh���$)�\u000e��\u001f���LMj���\u0017g\u000fuj�F�s�\u001fG\u0013��\u001a\n��T�\u0005%�[^V��������\u0000�^$�猣�������í隴2k�4�$v�jv��Hd�\u00133Y�\u0004�\\4bG�JF\\��i�V�,M�)Մ�|��FI�ʾ$��+N�\u001c�9�\u001a��*��\trUj�I�n��I>��~����]��e��K���[ÒA�Ǣ�V&\u0004����g-���ڈ�Y\u0012��h��!\u0010�����1�I�K\u0005�p5�k*mr�J\u0011�Qv����4�g��h�y,ƕ\\U\u0015�yՋ�IO�8��{��k�����?\u0000�3i�\u001aơ�x\u000e�Iaq<P�6��\u0017:}��-ԍ\u001e���\u001c̯2\u0007�\u0014�\u0011<�\u001d�8�\u0000\u0006�a�\u0018��i��<EY��*�E�Z�qW��d���8\u001a�\\%8��[��R�nI����z�_{�~t~�Z��Ï�[����\u001dx&_�^,���1�\u001f�?�c�?\u00114\r[�\u0007��A�wDO\u0007˭�_�^\u0014�u\u000f\u0010ɨ�Z]�楠�i�6�=���\n[�h&�l�+�\u001f\u0017,d�NT'EF�%)Ӟ�]rZ�����f�\u0017��\u00117%\nЫ��\f*Gw�?΍�\r�P�6>\u001d��x��|p��\u0000�5�\u0007�\u0018^ ��?��-�Γ⿃?�/���4w\u0007L�\u0017��/�zy��w�?ص;\u000b�o:-����oM�k\f�\u0000�����/�#�O�?l�*������Y�xf��M�:,�\u0018>\u0014�6Z4ں��њ=5�_���ߋrK-�Ｌ��\u000f����?��\u0016�<\u0015� �\u0000�\u001e�'�杨7�> �i�\u0000\f���oM���i:qӿ�#?\u000e��ye�Y��f5\u001dȲo�p٠\u000f���/��\u0000l�\u001a����[Ŀ���mr�\u0000M�X���u�\u000f�>\u0015�/4����b���5��+��%������8�\u0007����\\�o*�\u0007�<��_�\u0017��\f�*�M3���/��\u0000E���z��4�\u0015�,h��+\u001aD�\u001e\u001f:l�\u001f������U��L���\u0004�I��\u0001���\u0000���W���\n��Z�L��m�\u0000h��\u0000�L�\u0000\u0002\u000f��o�*O�~)�W��#�f�3����[\\�<��\u0017�����M'\\:]ğf�\u001d��g}�Q���@?��\u001e�;�<a�\r7�m��4�\u0000\u001eY�w\u0010x��Ƒjpx��XB�j�^�Y\u0003U�QRT\\-�\u0017 �H3@\u001d?��b����j\t�x'����\u0019��\u0016H��O\u0017��$R��H�F(��)*��E\u0000�Ň����@�=���|'�3��\u001a_���-[W�<\t�K\u001b\u000b+}2\u0019��o�nt����\b��4�H�\u001a)g`\u00014\u0001���\u0000\u0005y�o�1�7�\t��g�\u000f��e�\u001c|f�W�=I�s�/�R�0�~#k�$��O6��4o\u000b��\u0010�\u001ȃ��\u000bm&\to\u0019U�h@j\u0000�\u0000,\u001dW�s���\u000b���\u001fX�-���]��\u0003�x����:�e��.��ZO\u0011ɧ��X�̂\u0011�����_$�<��?\u0015�)����\u0015�I������)�ҼC�\u000f\u0010kZs\\@š��u-F���\u000b\u0012b���\u0019'c\f�\u0000��?�̏��\u0000\b�\r�x����-�O�\u000f�+-s�'�KM\u001a�Ǟ,м'm���x��S][i�kw�Q�Oo\u0014��<V��\u0014r#:��$\u0003��\u0000�Ѿ7|\u001c���\u000f�'��\b�*|=��\u0017��5�NG�K�/\u0017�>,�F�S�>\u0004�����w׫b��cz֋rc7\u0002���\u0018C&�\u000f�\u000f�2k�Q��S�\u0000��j_���\u0010�\u0007�i@\u001co�?�^\t�M�_\u0017|M���]+��\u0000�\u0017��O\u0015��Ś���t\u000e�sE���U�5;���YXZC-�ĻN�ћ\u001cP\u0007�O�>��\t;�\u0000G��;�\u0000�f���@\u001f�\u001f�_/ڿ�p�\u0000���\u0000�8�}�'~�?\u0018�\u0013�X~�\u001e&����z\u0007������/�5o\u000ex+Ŗ�ߋ5�=)c��e��1I�j2��ɶF|\u001cb�>\u001b�\u0000�E�`��\u001f�C��ko\u0012��?���ς�\u0017��\u0006�CC�֩�\f�6�ίg��u\u000b�>�C4�m�\u0016@��\u001e\u0001X���\u0007��\u0000��?�G�]�^�~��\u0000��_\u0000�#|k\u001e\r��\u0018�Q�\u001e�ڰ�\u001bQ�O6?o\"X�F�F�WR�\u000f�\u0000���\u0019�\"��߲.���\u000b���\u0000\u0006<s�[�>-Ү5�\r�\u001e:Ҏ�y�i\u0016��O��,�2I�[Cz��G��(*FA�\u0007�|\u0003�\u0000�q���\u0000�/�����;���\u0000\u0016>0x\u001a\u001dV�C��\u001e\t���t��{\u0010�w����=�V�,m$er\u0003��@\u001e��\u0000\u000eP�\u0000���\u0000ф��?�F7�\u0000%P\u0003��\b��\u0000\u0005a\f\u000f�0_�\u0010�=O�X\u0001����A�N(\u0003�>�\u0000f��+W�\u0013W�7���\u000b�'���7�g�>$|1�+����\u001f\u0006k�*[Ms�~6�_��/\u000ex��Zŧ�ɶ�t-wN���\u001b}��wk4y;r@?��\u0000s���\u000f�����ϭ\u0000u�\u0001�\u0017��)���\u000e>\u001e�{R�w��w�=\u001b�>\u000f�\b���G�o\u0011_���&�m�~���76�v��\u001b�5��h\u0003���\u0000�\u0018�ǟ��\u0000�\u0013��\n)������\u0007���]���\u0015��\u001ci�+���oG>\u001e�N����B�NЭu\rP�8�mN�����ϙ1\u000b�Z\u0000�\u0000E���Q��S�����+o�����M��˥^kg��\n�\b�5d�t�\u001f�u\u0006�\u0010ǋkc4~d��w��(\u0003�\u001b�\u000e���?i/���Y��|'�3�\u0019��Ə\u0012�c㖿���F�&�ڵ���O��젿��I\u001f�m%�$*�9�\u0003\u001cp\u0001�\u0010�\u0000Ô?�?�a?�O�\u0011��\u0000�T\u0000��\u0000\u0004T�\u0000��\u0000\u0000���\u0000h����\u0000�\u0018�u<�{�\u0001;\u001f\u000f|x���7~�?\u0010.�\u0015��?\r|Q��5���k\u0017�\u000e��n�o�k0\u001b�.�[]�m��\u0000e�m�:\f�Q���\u0000���>\u000e�\u0000�-���\u0000�\u0007�\r|_�'�\"�g�����Q�r�_��\u0014���4\u001dr=\u001bY�|=�=�؝<ձ���KL��\u001b.���\u001f.I`�_�����\u0000\u0004R�\u0000��d�\u0005~�#\u0004`�\u0000�\u0016���+\"m����\u00003�9�\u0000d�\u0000�+\u000f�\u0013w����6�\u0019���c|\u0011�\u0017�_�\u0000�\u000f|1���O\u0010��Y����\u0010<\u0005��Þ\u0015�5�/����<;�=+R�5;m�`���,����\r�wiZھ�L�M��%����h\u001b�vY!��\u0011�VheS��'�\u0006�Ѻ��2��(�QQQ�B��ݽӵ�ݐ��R����ngv���>����\u0016~)�\u0007���\u0015?�$���[��?�>\u001c�\u001b�F��x���!�\u0016Z&��ã�\u0010�}��ma\r�K<([i�:�t�����J��o����\u0000\u0005�\u0000�?�O��\u001f��?�ߵ��ω�\u0011u��F�o��J����Ga\u0003\\]�����E��\u001aY>a�Ry�\u000f�h\u0003�_�3����?d�\u000fh~/���1x#�φ�C�ɢhZ�uA�i���\u0015�]��k1�A%��#M��\u0001a��\u0007���\u000ba�\u0000\u0004�-��\u001b��w�;�\u0000�f����ހ?Ϸ�\u000e����g������\u000f�\u0007�j��ௌ�\bпd?\nxCY�'��5�t�?�6�\u0019�7k\u0017Z-��8����kz5��`���-[v_\u0000\u0003�e,�\u0005'��=3@\u001f���\u0000\u0006���\u0000\u0004.����v~��a�a�� \u000f�\u0001�P\u0007���u\u000f�m�\u0000�\n\u001c;\u000f�o�\b\u0003\u0000`}�!��@\u0007���\u0000\u0004��\u0000��\\����ƻ���l�\t��>\u001a|R����Y�Ï��[�\u0017ő��o�у����օ��}��v��\u000f����?�?�L�\u0015��ߴWÿ\u000e~ڿ\u0002uo\u001ck��׎|-��f�ň����\u001b�\u0005����M���\u001b�&�?eH�\u001f��I\u0014\u0001�g�\u0000�G?�~\u0001�7�\u0000\u0005F��~(|V�V�����\b����s��-��E�����������`�m�2\"��8,>�\u0001����Z_�s�K�\u0000���:~9��_�7�χ_���\u0019�\u0016?\u000f'�>\u000e�,ֆ��o\u0013����jZ��:X�\u0013pl�a��q�)H�f=1@\u001f�\u000f���\t��y~̞\u0001����@��\u001f\u0017>\u0012�;��t�\u0012\u0018��çK��W�$�=/O7Fw�\u0000J�x�\u0016�˘�Ҁ<��q��?i�\u0000��V�F��2|\u0010����_�V\u0016\u001a���<\u0005�\u001d^�Aӵ[�����A\u0004��0^\\��C\u0003��x\\v�\u000b?���a�T���\u001e\u0010����\u0004�B�#s��u��\u0006C��\u0018�\u000f�8<6�\\Z�X2�禕&������:���\u0000\u001f�Q�\u0000\u0006M�>�j�<�K�\u0000T��\u001a\u0000��(\u0003�'�\u000bE�\u0000(��\u0000���\u0000ٛ�|�\u0000�{��\u0007���\u0007��\u001b��X|\u0005���\u0000�?\u000e~<~�^;��q�E�e�BԼSmywmm�x���Zf�j�XAqp�yz�\n\u0015���� P\u0007�&��9/�\b�\u000eG��@y\u0019\u001e\u001e�Fy9<�\u0000dg����>����_����<n�\u0000�o��+��=m4x���;S���m\\Jl<��\u001bKS'�<�\n���o͊\u0000�\u0016?���\u000b�]���@_��o\u0017���Y���\u0000ǥ\u0000}5�\u0000\u0006��\u0000�_��\u001f���\u0013�\u0000Y�=�P��z\u001f�?�w\u001a<e�<=�i����jv�dvW�m���!g{y@R��Ð(\u0003�$\u001f�rg�\u0011��\u0007��\\��� �H��h\u0003�'�G�\u0001|t�Q�\u000f�\u001f\fu��Q��◃�?��\u0003x�\be�\u001ds��'ӭ�m\u000bU�\u000b��x����\u000b��X�UW\u0001�X\u0011@\u001f�5�S�\u0000����Wo\u001f�ӿ�g��)�$��S𯍾<�^�w�ux��\rG\u001e��x��\u000f�u�\u0016�\u0016MUd�.��k�Y\u0015]\u0004�8R\b\u0000\u001fͻd1\u0004�rs���s��@\u001fn�4�'�'���\u0014/�!���+]��?\u000e�\u0015�տ\u0000� ���7\t4�h�\u0011����\rk�!�e��$�X�4�\u000b��\"�\u001eY\u0012&Xј�?���8'�\u000bQ�\u0000\u0004�������\u0000\u0017�\u0005�ο�~��\u000b◈�I�\u001b�#�6:F�isyg���;�E�{�>\u000bp�[����\u0005��&�?\u0011�ή૚�=\u0007���8��\u001f7D\u0019\u001e��4\u0001��{Fw`n�7`g\u001e��\u0000Z\u0000(\u0003���\u0000���#W�\u0014g���\u0000��x�����:�\u0012~\u0017j\n~\u0011�~�ĺv��Z[ˬxsòYk6�\u000b�B��5�����A\\�\u0000�k�\u0000�V�Mb��$��\u0013�\u000b�\t��||h�~\u0003~��\u0000�͗��~/|'ִ�WS�<)w�\u000fⷎ�.xB+��\u001a��N�:���\u0000\u001f�O]���J#�T�)6ʒ\"�Q�\u0000\u0006�0|>��>\u0014�\u000b�_z\u001f\u0014�6���m'�~\b�\u001d�SA\u0006��r�;�/R�\u001b��8I\u0015&�$Pp�\r\u0000��\u0014\u0000��y~�$\u0012\b��i\u001c\u0010pG�^O\u0019�#�\u0000�7�}\u0003U�W���'º\u0005�_�&�\u001b�\u000f\u000fh�\u0011�G����\u0001�:n�h��QZ���\u0018C3\u0005\u0005��\f�\u0000�\u0000%\u0015�\u0000�m��W�8�g=\u0019|A�nGPA\u001a�N�?G���\u001f�No�\u000f�\t\u0013�n�/��ࠟ\u0007�_�?����O\u0012Yx��v���v�s�}&]#E�k-\u0016��\u0000P��u\t��<�g\n�.@�?�O��7�\b�8�\u0000���\u001f�/���\u0000�4\u0001���\u0000���U��?�����\u0003|?���;h�\u0014�[��\u0000�\u0017�(�\u000e���Ō�\u001a\u001c�\u0014��[�}F��7G�u�j;6H��\u0000'\u001f���\u0013����\u0000��^x�O���\u0011j\u0015�~\u001e�iמ-��5\r.���mZY ��O�+�Q\"�,2 \u0011� � \u0002(\u0003���?a���\b����\u0000��_�=G�_��Q��O\u001f�z\u0006�{a{=�����oö��ri�7P�Sk\u001e\u001a�m\u00023���Y�B�e�>�����\u001f�QO�s�5��\u000fٛ�x�~&|2����\fC�];U�--�[��[��e����N\u001eѮ�\f�=��\r��p\u0001����@O���'��\u0000\u0004����go�\u0007���\u000f�/|;\u001f\u001d���\u0012�����I>+���1��B\u0012\\YM=��n�ǉ�MM|�_dw���Eu\u0000\u001f���\u0000\u0005��\u0000���C�\u0000��> �\u0000�dT\u0001��\u001f����x��\t\u001d�.x{F�k�_^�\u0000�s|\u000fѴ�D*�u�꿳/�,��՘���u<Q�b\u0000g�\u00102h\u0003���-�\u0000��\u001f�V���7�O�>.��|M�x#�V�$�~��K��rH4�\u000f��S��$H�G����4숌�\u0018\nO\u0014\u0001�����rX\u0001�\u0006$�=z�P\u0007��\u001b&\u0003�\u0000�e�\u0000eP�\u000003��\u0010��\u000f\u000b_�9�\u0000\u0018���\u000f�\u0010�\u0000��?d��\u0000���\u0013/^�\u001b�4x\n��?��ό�\u0000\t�Mm�>����M\u0017��zĺ����{{p��s\tu2\u0006!�Pph\u0003�K�\rL�\u0000�^��\u001f�O����\u0000k?�Z�\u0017�G�/�z\u001f���=GI�MgT��U�=CT��i��N�mi{m34�\u0015��)$\u0010\u0000>;�\u0000���t�\u0000�mد�U����\u000f�?�ɯ�G��O�\u0000g����C@\u001f٥\u0000|Q�\u0000\u0005\"�\u001d���g�\u0003��g��v�m�ğ�\u001f���o��\u0006��5(tm.��\u001e-������j\u001a��6�u���Q,��\u0003\u001c\u0011���\u0014�\u0007���\u0000�\"�\u0000�Y��'_\u0003?��xW�\u0000�P\u0007ȟ�\u0007�\u001b��\u0000\u0005\u001e�\u0000�z~����1�Ix?�v�����\u0000�<7�_x[⦃�a5O\u0017j���2E�XD�2�%쪳̧l\u0011�G�P\u0007�M\u0000�'�\u0019\bI����I��\u0000�.���t\u0001�'�\u001e�3�^~����v�x��\u0000��?a�\u0000~\u0018~��\u0000�A��(O�\u0014����ǟك¿\r5~)�<\u001b=ߋ~'h�\u0010��[��\u0007��iz�O;[�\\�c�\u0007c�ʑ@\u001fk�\u0000�#_�Yd������Q�?��*p>�\u000e�(\u0003����?���\u0000�&�\u0000�\u0013g�v�!�\u0000\u0004���|a�KF��b\b���9i\u001e\u0012�W�����o�O�^\u001f��/�,�?�:e��\u0016�m�\r\u0016�-?Y�U��-�;��R@\u0000\u0007�7�\u001d��\u0000\u0004kuڟ\u0010>9�`�>\u0004x�\u0001A�?��9\u0003�@�\u000f��\u0000ǟ�j�\u0015�῁�c�\u0017�>\u0001�+\u0007�<\r�O\u0010���\u0017\u0016�\u001b�3{u\u0016��\u001e�\\�e���\u0001-��XX��ۧ�4�c\u0018,(\u0003����}(\u0003��ؿ�3���{�{�����<i�\u000e��GŶ:Σ�Xx�_��Ƒ-��do�\u0003>�z�mn�n�Ǝ���h�\u000f�O�\t��\u000b~�\u001f�n\u000f�\u0011s�~�Nt�\r�/�v��F��v-[�7��~-���\u0013O\u001c���~\u0006𾀰�\u000b\t������c\u0015���\u0007ι\u0000���.��#O�\u0014?��b|U�\u0000��\u0003���\t��\u0000\u0005}���ਗ\u0011��\u0000d�ǚ�\u000b-�\u0016���\u0007��--��$�-?�gRw�iv�O0G�\u0018\u0003'�(\u0003�\n�\u0010\u00002@\u0000��\u000e�Z\u0000�\u0000\u001e��9��S��u�\u0000�k�G����\u001a\u0000��?����s�\u0012��]�\u0000���\u001f��ŏ\u001b�a����k��s����z?��\u0011�:T\u001e$�ׇ�4�R=?V��A�Z-�2,7q\u0000� \u000e\u0000\u0006�?\u0004�2��?�T������O���ׂ~\u0010��\u001c��~#�����W�k�\u0018|=��w�\r�4��T���k�gB����}R��\u001e%���4���\u001a}ܒ�M��Z�?ԯB���C�-'U\u0013[i�V�(`�$��8�\u0006\u001f+.�8#�9\u0014\u0001㿴��\u001b���E�\u0007�?����u�X�0�C᩼Y�K�\u0007I�\\խt[{�{Yf��-J�2�u\u000e-�!�\u0012W$\u0000@?�����\n��\u001e�vf\u001f\u001d�6?��� 񿊿j\u001f��\u001a.��}\u001b�O��?�~\u0012�����z�������$����O���I\u0010��b4��\u0007�o�\u0000\u0010��f\u000f?�\u0006s�\u0000U�¿�b�>\u0002�\u0000���\u0000�\u0011�o\u001f�&?ï\b|R��<1��A🎼Q7��?7��#h�3��Z�N�T�+�=64��\u0001k\u0013\u001f>BSv\u0017\u00194\u0001�]�\u0000\u0006��W�c�\u0000�%׊�i�o����m���T��\u0000���\t\u001f\u0006x\u001fS�]hZ����\u0000ۣ�]\r�$W1��^$bB�\u000e\u0000<\u001b�\u000eT�\u0000��~�_�S��+����\u0000�S\\�f��O\u0005��~\u001c�[���\u000f\b�\u001e\u000e�b�n��W�ߊ�!�ӵ\u0017yg�]\u001f�:\u001c�z�$��<\n��v�\u000f��\u0000�\r\u0001�\u0000�<�?�q�\u001c���T\u0001����\u0000\u0007\u0016�\u0000�3�\u0000a\u001f�?�?��Ax�ⶑ�w�kxI|Yaῄ����X��5�/�~\"�Me��ʶע_\f��E���\u0003��rOh����\u0000���\u0015\u001f��ßڟ�\n\u0015�]~џ\b�u=G��O�~-�ׂ�5�.}\u0013U��5��屗PҮY���d\u0004�m#3�p\u0018� \u0000���\u001d�\u0000\u0007;�*>\u001e~������?\u001c|a�⇂�\u0004~��\u0004u�\u000b_�~#��c���\u001e�;�z�����\u000by���\u000b9��QU\u0010�j\u0016�(F\u0002�?�/�(%�:��\u0001�[�[�,\u0017��\u001b�w\r�a��:��\u0016^��7\\��ز�b\u0001�*?�w���\u001f�������r�Ei���L���O\u0006�.�[�`�4��n�&��+�Z�\u001b{\u000br�I��a��q��\u0007���\u0006�\u0000�!�l�\u0000�!��=���\nS�zxs��\u0019��~\u0002I�I�\u000b[�s��+�?��WĖ\u0013h\u001a_�o��x�Ե\"ڍ�):���G�G\u001f)\u0014\u0001��~��_��'_�\u0014G�ŏ���4���v��B���#�\u0016>*�_��SH���6�j�6��H��<iu\b��)�r�F\tS@\u001fJ�\u0000�D��?�G�\u0012�¿\f�a�Yk�4�tO�z��\u0007I��\u0005j^4�}S�zu����}\u0006���0�i��43HJL��9C@\u001f��\u0000\u0007<�\u0000�Y�c��*o�?cMO�I�\u0007���_��\u001f�k\u000f\u001d7��\r�x)�n<}��ãOMM��+4~\u0010֍�C�jc�I��(\u0003�\u001d�\u0000�&��\u001f_�?��F��\u0000�O�\r\u0000f�\u0000P\u0007��\u0000�'�}���\n���-~��\u0015t�\u0010k~\u0000�=a�C�Z_����^���\u001e6�ׁlWO��H�w�T�E�Ӈ�qk\u001c�`��#?���\u0015/�g�\u001c��_W�\u0000�W~�>\u001b���\u0000��\u0012u�\u0003⎋�O�V��W���?�:�x��vח�T���{w���\u000e��\u0003$�%VFUɠ\u000fɯ��\u001f�\nA�\u0000Eg�v�\u0000����\u0000��\u0000���\u001e�O�4�|wo�}+�M����>\u001f�\u0000\u0007Y\u001aX�\u0000�5o�㬍?��A�\"6�G��+�#�\u0000�'�\u0000�����\u0001��_\u001dg�\u0001|3�\fh�\u000b>\u0015k�\u0006�-�siei{s�j~+}r\u0019�����\u001a�-�#���4\u0010\u0001\u00034\u0001�=�\u0000\u0004\u0011�\u0000��d?�%��_�~��\u0000\u001b�\u000f�cľ/����\u001cG��3L��\u0017L֡���\u0016���\u0019>҆�̪\u0013h\u0005prH\u0000\u001f�'�\u000f6�\u0000�p0+�\u0000\n���\u0019\u0018��\u0016���T�\u0000�\u0007�����ߵ\u0007���Z~��\u0007����\u0007|s��>+�V𽆵\u001cqj�z\u0017��g���K����;�-/��#wE�\\+\u00103@\u001f$F\u0015�\u0006m��3�\u0004�3�Ϸ4\u0001��^3�\u0000���`�ڃ��*��<\r��㦝�O�\u0013Ú���\b�:֏�C�Yx��ƙu�\u001d\u0002�U�-A�L�յ�I金9$KD��\u0019�\u0004\u0003����?�ӿ���c���5��~8���+P�o�υ^=���\u001d\u0017Y�f���\u000f��\u0019�|S�Z�K��\u0014���i��h�H����T�\u0000?3��߷\u0007�\u000f�'w���������x�]�?�4\u000f\u001aiz���;{{�ni�E�ɧZ5�72�\u0013\"Lٗ.\b^��\u000f����\u0000���&�\u0000��>\u0014A�\u0000\u0004���t/\u0015�:��e�=7�l��Ƌkm'�'�^\u0000\u0012&�f.������?��\u0006�\f\u00027��\u0010\u0001\u0000���\u0000�1�\u0000�\u001f�Vgo�\u001fk����\u000f�b\r>o�4�\u001d�߷�'����=/M�\u0002|\t'Y�K��\r-֪���F�!�x�\u0018E�@e����@\u001f���\u0019��\u0013���/�\u0011�\u0000�-\u000f�\u0000�4\u0000�g\u001f�N\u000f�$��G�\b�?�X�\u0007���5�\u0000\u0004O���\u0000�\u001f\u001c|u�\u0000\u0005p���_���?\u0000?k�-S����*j\u0017�o�4�>\u0010x_D��|@����kye\u0003�x��6�}`!��~�sc#��\u0014\u0003�\u000f�\u0019��\u0000\u0005\u001f\u001c��?��\u0007'\u001a�N\u0007\\\u000f��O��@\u001f�\u0003�/|7��\u000b~����\u001f\u0011�iw�/��\u0003>\u0012�5�nt�w���|\t�\u001f\u000f�[T��y\u0015${9ﴩ�gUv���\u0004�\u0000?��\u0000\t����O�\u0018�D���M;�_�ȵ�\u0014��F�=��\u001a6��1�z�m���4���\u0016�su\u001b��\u000b\b�`g�\u0000�J�\u0000��6��#_�\u0014\u001d������ǧ�O4*\u0000�\u0000-O�#?�����\t��|$��>-�>\"��\u000f�;/\u0014��zg�m���\u001f[Ѧӭ��\r̰��%�4��\u0018@H�\u0000�?�\u0013�\u000e*��?��\u0000�\\_�O�\u001f\u0001|Z���e�g�<n5\u000f\u001ai�m����ᕴk��;���K����ٴ�@\u0014\u0001\u000f�\u001c3�\u0000\u0004����\u0000\u0005Z��>\r| �\u000f�?\u0004xk_�\u0007�K�\u001cjמ9������g��Ɛ�Z���õϟ(r���0N{P\u0007�\u001d�\u0000\u0010c�\u0000�H?�����>��Y@\u001f���T/�%����%'��\u0005�\t���O\u0005x��~9�Y�|ZҮ�\rwwy����Wž/�|\u0016�2�Ao*�&��NY\u0011P��[r\u0018�`\u0000?��!\u0017�\u001c[�\u001e�\u0000�2?`�+�c���O�~\"����9�P�^�����L�l�D�|\"[��&\u00171-��hS\u001e�Y\u0002�ɠ\r�ڏ�\b��G���\u0000\u001d�s�\u0000\u0005y���[���߳��r<2�\u0000\u000f�-�^��\u0000L��>\u0002�;�߳\u0017�ƿg�����o|o�_�z�� ����n��d�3�\u001a\u0000x\u0007�A��\u0000\u0005 �\u0000���;��]�\u0000�e\u00001�\"�^��*��:���\u0000\u001dOm���\u0000���\r�x?�Shlf��Ծ\u0010�I�E�\u0014�Cͱ�������X4�\u000b��\u0019\u0002��\u0000�W��\u0000��o�{���W�~��\u000e~\u001c�j�~$���\u000b��\r��_�\u001aN�\u000f�4�\u0000\u0015x�I�\u0000�GI��緾��-.\rB�)n�7�`VdF8\u0004\u0003�_�&��\u001a��v��߷w��P�A���GV�O�_��7��I�h\u001aƳ6�y�XAy\f���O��\u0014�\f�(Ȳ:���\u0000�������o���\t���^�S�xC���d�\u0013H�|S5ž�nt�j�P���o\u0014� ha`�c?1\u0000��\u0000:?�B��7?���\u0000�e~��\u001f�G��_\b�G�}?�g�\u0004K��3T�n�éx��M�O�`���#m\u0013YI��߹C)\u0000�@\u001f���q�\u00123���\u0000��|,��<\u0017�\u0007�\u001e\u0001�ƥ�sǾ=�O�����핽Տ�<9�i61i�emp�O\u001dƛ;N$\n\u00166B\t$�\u0003�D�\u0000�1�\u0000�\u001f�Vgo�\u001fk����\u000f���\r��\u0000�Z|t�\u0000�P~˟\u001a~\n�{�'�<M�_��\u001fn�(��~\u0005����`���w�_\t��ܗ�[ȷ��\u0000�7��T)�I\u000bn�H\u0000\u001f�\u0005\u0000|��i~ч�B��h�\u0000ڐx8|B?����\u001f|Z\u001e\u0006> �\u0000�Lx��\u001f�����\u0001�7�'�?�F��?��\u0000j�\u0000�?������\u0000���y,\u0001�N\u000f�/���q!�\u0000�4�좟�\n��?�M��5>9������\u0015?�d\b�\u001f\b�O�\u0016�\u0000���|�&\u001e\u00126��+��5�y���_�6�\u0000��\t\u001c?�֡�\u0000\u000fyO�\u0001�nf�[�\u0000\u0016��\u0019�O�\u001f�̫��\u0000���\u0000�\u0010��\u0000�?�d|��>\u0017�_��ҿ�[j\u001f�^_��t��\u0000kP\u0006�\u0000�sS�/��\u0000��?�\t�\u0001�\u0001�\u0000\u0005��\u0000���\u0016E�\u0005L߳\u001c���.�(M���\\�\u0000���\u0012G�|�?\n~\u0019�#�f�������\r� \u001e��\u0000\u0004J�\u0000�{��\u0000��|!���Uk�?go�T\u0011t�\u0000�\u0004|\u0005\u001f\u0017��\u0000�|9\u001e�5c����c���o6�a��Ԅ�~�/S&\u0015\u0000���\u0000�\u0019���/�!G�\u0000��\u0000\u001f�\u0003:�O��\u0000�(�\u0000�\u0004?�cB('�\u001e}3c������\u0000\u0002o��\u0003�\u000f�W�Å�;����$�O���g��\u001e�8\u001e m?�%���B<U��g�`�_l��\u000e�t϶�\u0000g�\u0000h�����7�n���H\u0001�~�_�w_����w��\u0000�Y�\u0018�\u000f�L�\u0000���)�?�c��\u001f���\u0018�\u0007�\u001f�*�\u0000`4�\u0000��~�>\u0002��\u000f�v�,�8�<S��\u001f����_��%�3\u000f�\"���\u0004\u0017�\u0000m��y��Y\u001bl��;�yd\u0003�\u000f�����m!�\u0000�M~���ө�g��ߴ�<�/�[�m�:\u000f��\u0017čf�U\u001e\"�\u0000���\u0015��6C�\f�!nD��]�@\\\u0003�\u000f�-��\u0016\u0016O�#��߄_\u0016���@���\u0013Q�\n�}�,\u001f��؟��\u001e�]:����m�0j^g��O�\u001d/Nٟ<^ɏ&�?�\u0007�\u000b{�\u0000\u0005�?�Y;\u000f����/'���\u0005��Mr\u0019>5����\u0012Ck\u0011���K��� �}�6�ژ��6퀦X\u0003���\u000f�\u0017�\t\u001d�\u0000\u0006���\u0000\u0005O���7�\\/��/����\u0000\u001cx����#�m_����'V],�#�#���֗�Kw��3�ȾǏ+�w_�(\u0003�\u000f?��߱1�\u0000�s~�\u0003�c!�%�0\u000f��^:�O�����W�����O�ē!���W�F����1:6��I�?��8j\u0005�����?���_�\u000f\u0007��;���\u0000h��`�\u0000�<���~\u0000�\\�����Y7��\u0000�*�\u0000�GX�ҿ��\u0000�\u0018?�g�?���\u0000���\u0000f�\u0010�\u0002������a\u0000�t�\u0000��2���:�!��\u0000�ڤ���\u0000�N\u0019��ր\u001d�\u0000\u0010s��\u0011�\u0000\rL?�r���\u0015\u0017�_��AO�4a�\u0003�\u001f������\u0000�Q�\u0000\r3��(j�I�����\u0000�{R�\b���\u0000�מWؤ\u0000O��\u0002O�.(?�IF��������S�3�\u0017��Ч�K|/��\u001f�#����\u0014��S\u0001�D\u0007F?\u0011|'拃 �Q�\u0011J\u0000��\fhB\u0001�\u0000��L�\u0019�b���bG�b\u0001#�@\u0019��\u000f���$\u000f�\u001b.��J\u001f���������m\u0017��\u0018x\u0007�\u0010W��?�V�<X�+��|J>;�Co�\u001f�ǐ��\u0017\u001eo7�l��?�\u001a\u0000�\u0017�\u0000���\u0000�m��\u0000�6�?\u0002�������_�\u001a��4����F�F|8�\u001c���\u0013\t��g�ѫ}�]yf6�K\u0016�^�$���\u0007���\u0000�kଟ��_�C���\u0010�\u0000\u0001S�x��\u0003�_�?��/�?�[?ڣH���\u001f\u001b\u000f\u0011�|�:�jl���'m��%tk�\b�\u0016��no\r��\u0007�?�\u0012\u000b�\r���\n��\u001d�ߵ��6��\u0001���_\u001cx\u0001�\b?g\u0005���\u001f\u0006K�����\u0000\t?�/��l��CP��\u001f�GTY�X�mי��\u000f�O�~c��%���)�/��?c\u001c(��d���\u0000\f��\u0011��\u0012?�ُ�����C�\u0011\u0006��|\b\u0017�\u0016��κ�\u0019O\u00137�3kM��$\u0000�\u0000���\u0000�_E�\u0000���\u0013h\u0001G�\u001aR��P��ϓ�~I�����~���R����/�3�K�\u0000��?\u000f��\u001f�ў\u000bo\u0018�\u0005�\u001a�\u000e\u000f\u00157��(|D�h�?�\u001b�����@\u0017�!\u001fO�\u001f�3g�\u001e\u0001'�_�e?���\u001b�S�\u0000�\u0018x��\u0015��U���\u001f\u0019�G���\u0011q��\u0000f}��w�\u0011_\u0010�\u0000f��\u0000j�ǿ��� \u0002\u001f�>bd���\u0010>8ܿ��\u0000q�C�'\u0012?3@\t�\u0000\u0011�M�\u0000H���\u0000\u0013X�\u0000�&�\u0007���\u0012#�\u000ey��\u0000���غO옿�\f\u0002�����><�\u0000��~�'⁃�\u0010�[\u001b���E�C�<�?���C~|I\u0018�\u0011��\u001d�p�\u0001���\u0017\u0003�\u000bA'�\u0011����/\u001e\u000fٹ?h����\u001f\u0018�I����~\u0010�\f\u001f\thzF���/��X|O���y�~��O��_e�<����\\`\u001f��G57�\"�/�Mc�\u0000Л@\u001f�'�\u0011/�\n���X�����f����v?\f�2\\�%�\u0000�Y~+��\u001aз�O�<c�����\u0000\n���q�J������/�����-���[�~��\u0007ϟ������\u0000���f���1��^�|/ᯏ_\n�i�]�\u001f����]�4�\u001a�w�\u001dG�Cq���g\u0005��j��MleE\u0013Fɐ@?���'�\u0000�\u001a��/�>�k�?�\u000f�i_��9�w�}G�:���O\u0018�\u000e��ޯ'��\u0007�\u0001]G�ˢh\u0016z�%�����mͥ�Lo-��BЙ\u0011�;_�;s�P��o��'�\u001f�X6t\u0001�M4\u0001�*�\u0000����D_�?�X\b?hI>,�b���\u000eI�$�W�͟��Ƭ<B�mru/�I��Kg�m���)�!�x8\u0014\u0001��\u001f�H��$G�$/�\u001f�_\u000b�\u0012�Q���KL���+�Z���\u0016��V��e�����\r���\u0019Ӵ�w��\u0005Y�k��a1`��(\u0003��\u000b��\u0000\u0007\u001e~��\u0000�J��\u0003M���\u0018�\u0001�)�3���\f|1��\u0007��\u000f\u001c��I{��}\u001c�K\u001f�5�>����LL�yĳoc�\u0000?\u0019�\u0000�6��W����\\�\u0000��ŏ�j(\u0000�\u0000��?m6�[�>��B�rF��`����%\u001e�\u0001�u|^���w����\u001a�����|O���?�z���4���ڏ�|G�x������K�����巵k�\u001es\u0004hev}�@\"�S��υ\u0013�\u001d|PӬ�5\u001dK῎�!��7N�3�����\u0000\u0010i�!���kf��mn�4��0�\u001c�\u0017s\u001b�� \u0003�F�\u001f�\u001c��L�S<m�\u001f�&��\u000f���W��\u001f�ωt_���_\u0010�\u0005�|@��|\u001f�Fj\u0010|'�\u001f��'o�\u001dv�\u0000B�Ě\u000e�⫝KE�X���\u001fP��o����#`\u000f�\u0003�\t��\u0000\u0006�~�_�M�ڳ�_���3��\u001f\u0015x+L�\u0016�g�\u001b��\u000f��\u000b�|I�>�u%̚\u000e�e������yW(<�\u0003�/\u0014\u0001���\u0017'�\n[�+�\tW�\u001c��ҿ\u000b�\u001e�#�W�n>&�K����x��]��\u0005��WPk��3���~�.mŤ~@������n0\u0001����ߴW�����\\���\u0000kM\u0007F���/�.i1|u�׉gG��|A�-s�\u0017k�y�]v?��x�M�J����\"}>�\u001b�t\u0002��P�@?\u001e?��?�\"\u0007�?�$\u0006��=]�%���O⤿\u0018�|[m�/�k?\tZ��\u001f����ݴ��F4�;s��,�}��\u0000E)�M\u00004�\u0001����h��������/�\u001f���@\u001f�\u001f�Vo�:w���\u0000�y�\u0000�A�h����?�g�?\u001e�G���\u0000��M#Ş1Ծ![��V��\b�\u0001�\u0016��\u0018t=z�KV���}݅�٭�\rgkl҆���\u0001�\r���\u0000�^��]~ӿ\u001c�\u0000i�\u0000\u0016h:7��I���o��(k�\u001c����z.���R}R�M�dԦ��\u001e��I�+v��i�`\u0019$fɠ\u000f��l�\u0000�8�\u0000d\u000f�\u001f���?�:��]�I����߂�\u000b>'�>��|/�K��/\u001fx\u001bB�]����y�/\u001e���V��Ѯe�᠊34�!f \u001f�7�\u001bf4�\u0000�_�ŀfqe�\u000b⍢����m��]�]�\u0000��P1�\u0000��\u000e�\u0001�%�W�I�o؟���#�Vx7�z\u0017��S�;Ɩ�7��3�y5\b|?������%��.�=�������m.!�z \u000e\u0014�@?�s�\u0000\u0007�~ڝ�c��t���>,g\u001e��F3��\u0003�#n����e��\u001c�X�\u0000梀?w�\u0000��\u001f�pO�\u0001�\u0000\u0005q���-|\u001d���3��\u0000��'���+?\u001d�j�\u000e�gu�j\u0017w\u001e ��䲽_\u0013k\u001a���$\u0012��m�c*�\\��@?=����'߰���_\u0013��ɥ�\u0007���\u0007����?�\u0007��3���xj�,�D���ٗ�\n3�c|a��~\"���\u0000\u001e|\u0001�\u000f�M�#��S�Zw�ˏ\r�C���\u000f\u0005|,�F�&����m��#��\u001a�Ṻ��B��a\tn\"E\u0000�\u00005��(�����������\u0000e�\u0007x�[�g�~\u0005�Y�7��\u0017�~$��-wY���(/�X��-����13-��0\u0006\u0018D\u0003\u0019\u0000���c��;����i��\u0000�o�V�?e���R𷀼7�K�~��K�|KM~�@�Ꮗ6z��px�=8k\u0017:m�w�\t\u0015�vb��c�`��\u0007���}^O��\u0000�=�\u0000j�B�\u00129o�f��w�\u001c|�f����RrHV��$��d�\u0007�u\u001e���\u0000%\u0000P��hO��;�o?\u001c�\u0000�ݠ�\u0007���\u001e�\u0000�\u0000&��\u0004�c���\u0000�G��\u0003��(\u0003�1?�ɯ�G��O�\u0000g����C@\u001f٥\u0000\u0014\u0000P\u0007��\u0000�P?�/��\u0014��l�\u0007��@j>>Ҿ\u001bx��~\u0013�F�y��]�<9��|\u001b�ǭi)m�k�\u001d�N�\u001d��q*���D�M\u0006R)�o��?�\u001f�\u000e=�\u0000�\u0019~�\u001f�I߁�\u0000���oٗ_���\u0015�+���>%��ύ�+�>\u001d#G��떯�[��\u001e\u000e����W\u0013M=��/\u0007ȐF�=\u0000~��\u0000������s�\u0000��_�/S�\u000f���8��?\t࢟�og�9�\u0000\u0005<��k�C���&��t�\u001eX�?H�L\u0016�\u000b���\f�t��#��f��k�\r|Wz���2}�u��'\u001bB[�T�\u0001�j��[��k���\u0013��\n\u0011�\u001f�\\�\u0015�O�Ǆ�/�]cM�����~!�D�~$�F��\u000b�OF�<3c,+9ŪG���G��I[�\u000f���\t��\u0000\u0006��\u0000�3�\u0000j/�k�F���#x�������?���/�_\u0018��S���3�V�#�ǂ�\u0010j��Zv��W���㽾�l�n�MB�\u0018\u0002$�s�.@>��\u0000�3�\u0000����=~��\u0000�x>\u0019�\u000f\"���Я�%��߁\u001f\u001a�&xwƟ����\u0000�τ�\u0011�q�C�|Z�ss�˫�O��ο�G�[Z�\u0016������O�.����Ym̉\u001d�.�E\u0000�\u00009���㏋fo�\u0006�\u0000h����%׎�\u0005�O�7ſ\u0005�����S��Ǌ>\u001f��N�N�\u0006���j\u001aU��&��[.�km��Oqk��\u0015����\u0000L�\u0000�\u0019�\u0015���ؿ�\u0000\f����~\u0014\u0001��/��p�\u0000���2��\u0000\u0004��\u0000����\u000f�)�\"��\u001a��ص?�A�>\u001a|D�\u0000���&�=\u0012\u0007�\u000f��G�_Fm\u0016o�k��\u000b!ᕺ��\u001eM��W�\u0001�[�\u0000�2�\u0000��߱��\u0012��W�/�?�7��;k\u001e ����?\u0004x�\u001f�\u001e7�t��{\rV=j�M6���\u0000\u000f|\u001f=���c\n��wu\u0013[�O��Ā\u0003��\u0000���\u0000�\u001b�e_�+$?\f-i�w�&�o���[���*O\u0017�g²L��V�_\r]�C�\u0018��Ql�\u0001n�F2[q�<\u0000��\u001c}�\u0000\u0004����\u0000���\u001a�f��.��gY�>,�.�g��O7ş\u0015x�Z�:�����K(���?��\u0007Aih�nZ�\u0019�od�|:O\u0012�\u0019\u0000��?���C?ï�._\u001e?�-��?���9��S��u�\u0000�g�O����\u001a\u0000�\u001d\u0018��L��;�\u0007�\u001b��\u000e��\u0000���\u0018�W�����<\u0019�\"��/�?\u000f�\u001b���3�_\n>\"^kr�{��\u001c�|/�˪�[|e�����M��Z��\u000b\u001bH&�2�\u0015�\b�\u0012��\u0017�\u000bu=�����䡸����&]NQv��q��[��.N\u00143���@�I<�\u0007���\u0000�.?f��G�\u0014\u0013�U���,�x����Ư�6>\f�m߃u+-\u001f�\u0016�U֙�ݼ�.���Z单��� &��/�\b]|��\u0019@?���-\u0017�\u001bI�\u0000\u0004��\u0000�}�>~.�ԟ\u0004<U�Lj\u0011�\t}�;}\"��\u000f�\u0004k�\u0016�=o[�N��f��|-�֡3,\u0012�[���p�\u0000�$\u0019B\u0001���\u0002�\u0000���\u0002?ি��?�O�\u000f�|CҼ\u00017�o\u001f��]�2�\u0006��\u0012�c�\t�6���Z߆�We�'�d�i��(�.\u0013e�![p\u0007�J�\u0000�4�\u0000��_���\u0012�◍~-���#������\u0011��:�?\u0015�s�/\u0014�1��j�j��}���\u001ex>����D\u0015����3\u0011* \u0007�\u000fV�\u0000���\u0000�\u001e�\u0000e��+.��E���ό\u001a5��-CZ�<.~\u0012���~\u0015���_����j��\u001f\u0004��.�Xm��:[����3��\u0000\u0000�\u001f�\u001cY�\u0000\u0004����\u0000���\u0000���?��\u0000�V��?X�o�f�\u000e�[��~+x�C�N��&�~'|T�u�\u0016w�\u001f���WK�V��ZI��\\-�����\u001c��\b\u0007���\u0000\u0006��\u0000�\u001et\u001f�8ώ?�U�\u0000��(\u0003�����\u0000����&��w�C�`��~*x������������]k��\u001e\u0001�|3\u0006��J%��E�5/�:�햞��Ȃ�U��\u0006w�?\u0018\u0000�\u00004O��\n�1�+�\nQ�_�>\n�T��\u001f\u0007?n\u001f\u0012|+����7���\u001c�y����:\u001cڽ�����ީ.��ھ�umac\u0005�ٚXl��t�\u0000?گǟ\u000b|;��'�~\u000f��]R\u000f\u000b�M�gs��\u0010M�\\��k\u0011i\u001e#������.�o������F��{;���+<\u0012(*@?���)��\u001a��\u0000\u0004����\u0000`_ڧ���c��ڦ��\u001f�o��׍�'g���\u0001��/q��\\YEn�֛�|#�o�lH�s,\u0016����B��@\u000e@?��#��o����\u0000��|\u0012��~4^x�M�q�\u0016_\u0010&�u�-cM�|Q\u0010��K�B��ڦ�����ܛ�TK�iW[�,�\u0010��\u0003�0���\u0000�n��!�\u0000\u0004�����\u0000ڃ�w�G�\u0019�|GӼ#�\u0005Cg�7�\u0017��I�VѼ]\r�\u001a����|1�o�-\"6S�Yb���`�\u0010\u0000\u0007���\u001e�\b���\u0000`py#�\u001f� O��!\u001e\u0011�L\u000fʀ?΂�?�\u0013�\f��\u0000�}~��\u0000�y\u001a���?�4\u0001��P\u0007���S\u000f�?\u0010�\u0000g/�'�����&�\u0007�~'�\u001f���-|D�\u000e�s�iz����\n�?TմMBm\u001b[���5H�o����u++�+��+�$��H\u0007���V_�[��:O\b�\u0000�9����(\u0003���\r��\u0000���M�\u0000o��)����������\u0000\u001d�$��\u001b|[�\u0016���;���/\u0006�ϫxS�\u0017:��p��<\u001b�kp���i+�\r�p܁��$���\u0003��=��M?�&�\u0000��������\u0003���O�����\u0000��/�\u0017��\u0007��y\u0004\u000e�\u001f��\u0000\u0006�\u0000�q��\u0016��\nE�\u0000\u0004�����������\u000b�_\ro>\u000e�?��\u001a.���O��[\\��ԣ�.�W�5�Y\u0016U��-��\u000bX��8���\u0007ҟ�L��&��{�\u0000\u0005����\u001b�\u0000\u0005\u0015�\u0000���8�~6���\u0000\u0012��\u0013�W�\u001f\u0010�\u001f\u001fx��\u0016��h�\u0002��\u0000�<3m\u0017��\u0013x���\n���M\u001eC����\u0017�\u0004גM/�@\u001fχ�k�\u0000\u0005��\u0000���;�\u0000j\u000f�\u000b�\u000f��>:x{�����\u001e�`���8|\u0002�6��s�\u000f�5\u000f\b�#�A�mG�\u001e\u0002���|i��o��'��|9�i�Sk�%�5MoRxM֥wu$��\u0007�k�\u0000\u0007X�\u0000�nI���~\u0013+��g_��ON�\u001f\r�zpO@�~`\u0001����0#�A��\u0001%���~6\u0002ǫ\u0011����'�'�S@\u001f���\u0000\u0004��C�\u001f�\u0007�����\u0005|S�&��\u001b|c���\u0005|2��o�j:<ڷ��o�+Þ\u001c�\u001e�\u0016��]X��l��N�uo\u001d��{i}h�\u000b�[���\u001a�?�/�/_�\u0010/�\t�\u000b�\u0000�6>-~�?�o��\u0010x+⿅�E�=;D�\u0006���\u0007���-��~;\u001dI[E�g�5�\u0016��j�5k�\t^\"w�Ѹ\r@\u001fć�O�w~���OO���t��<m��\u0003�t�\u001bռ\"����\u000f\tx���\u001aٷ:���?��msI\u000f)�����\u0017\u0011��Rǒh\u0003���\"��\u0000���\u0000��xG�\u0000\u0011��{�\u0000�q@\u0007�Ee�\u0000\u0005��\u0000�����#����\u0000��?1�\u0000o?�)w��\u0000\u0005,�_��o�`|E��#x�ះ�/\n�>�\u0000K�\u001f��\b�v���)�_��i�o\u000f�~����\u0011fY�\u0011���b;(\u0003�$?���C?ï�._\u001e?�-��>���?���\u0000�%������\u0007�5�E|\u0005�\u0017��1�O�@��l>5|e𭮥/��)�x'Eh�\u000f\fx�I��~���\rh�L�6\u0016����2�y�\u0003��?৿\u0004�\u001c~���P��'�\u0017�\u001d\u0012o\r�0�?�B|J��M\n�U�5ˍ+�\u001e\u001b�\u0015柤�M�kww���,\u0016�G\u001b��W�W���y�rX�|(�\u0006\u0005�@9#�}��?�o\u0010�\u0000��?�Y�\u0014�7\\�\u0006��K�V�#�Χ�\r_OO��\u0000�5��:\u0006��ϣ_٭�����`�m>�XE�3%�L�X�Y\u00140\u0000�c���h?�\u001f���\u000f�?�G�-v��\u001f\u0015~\u0013��/\u0015x\u0013_��to\u0010��:�\u0016�\u0016��M�x��R�u\u0015Hn�_��6\u0017V�s\u00132�\u0000\u001f����\u001c\u0001�\u0000\u0005E���\tx��v���;�w��\t|c6�>���\u001f�?\u0007�)sw&�x��\u00055�\u000bx+H�����՛��Љ@� e;h\u0003�د�����\u0000��?\u0019�����K\u000f\u0001|Q��Zτc׵\u001f\t�S�v���[�Z��\u001f�Z>���[X\u0002�\u001b\u0013s\u000e���\u001e�$\u0003���\"��\u0000���\u0000��xG�\u0000\u0011��{�\u0000�q@\u001f���\u001a��\u0000\u0005i�����1��t��\u0003⾏�\u001a�ᇇ|\r��:-/�ÿ\u0001\u001d:�ZԵ\u000bmE�\u0002�k��\t��5U�\u001a�\"+�U\u0018�@?\n�\u0000����IO���\u0000f;��__�-\u0000J\u001f�h\u000f���A�\u0000�����\u0000�^\u001a�\u000f��.��\u001c\t�\u0000\u0005K����7���8�{��\u0000�>\u000e|2����\u001b�>\f|\u001d�mΚ<i�:|\"��������\u0015�k��\u0000j�O�u�����p-��K+U����\u0015\u0000���\u0000�����t�\u0011�\u0000�s���\u0000��P\u0007�G�~4x��_\u001b|I�B��V��⧋�)k?\u0019�C�&���[�|A�\u0007�n|o�����v�h���x����t�k\u00184ؑ��\r�v��\u0000\u000f�\u001bo�:��\u000beeoogg�P�N+kX!��6���\u0000g�\nCo\u0012�\u0012��,�\u0011��Y���X�I\u0000�O�\u0007�\u000e8�\u0000����?\u0005�#�Ͽ\u001a�\u0000h_\f���Oŏ\r]�G�^\u001e��\u001b�O÷:��z�Iqi\u000e��x\u0013Nִ�w�\".���[�ۄ�rh\u0003�\u0003�U���4�ſ\u001c�%�E��>'��w�_\u00035�xg_��燼Sobڍ��\u0017FM\u000f��~��]���ȃ�v3�'z\u0000�0\u0000��?����.��\u0014��\n\u0005�\u0000\u0005\u001f�?gڃ㖁㯅7�\u0007�)���@��\u0010|&�e��~\u0018�ҦѮ����\u0007h�ҭ��S3[%�[\\n\u0002�9\u0015U@\u0007���z�\u0000�1�\u0000c��)��~\u001dxK���m��H��\u0015�Z׈�\u0015k��@��_LռC��i����>\u0005�\u000e�s��ť��k\u0006�-�0\u0018̐�H��\u0001�y��t��\u0012��+�\u0000�d���+�c��:��kO�z\u0017ǻ�\u001fǪ�D������\u0017P�E\u0007��\t<w�/\u0010>�,b�^��&�֩xn�݉����\u0003���\f��\u0000�}~��\u0000�y\u001a���?�4\u0001��P\u0007��W�Y��\u0000��O\u001d�\u001e���\u001f\u001a|5���]k�>:�%�Zw��-�\u001b\u0019��gF��O�������ym�{K�{�G&)�|0\u0000���\u0000�v�\u0000����`\b��u�7�\u0000��\u0000��\u0000ٟ�\b�\u0000�\u0000\u0004����+i�\u001c?f��;���O��6��h�g�<;�x��S���Ed�v�g\u001cZ�u]<ŨY;��^��T9��o��=�����d�۳��\u0015��m�S��\u0000\u001b�5�mr�Ğ\u0011��Qw�+Km\u000f[�lN�{�Z����\u001aw�{\u0012m�n%�\u0011\u0019�Ư�P\u0006O��\u0000\u0004����a\u000f�LG��\u0013�?\u0004���ӏ�����%�\u001a�iBA����H5�gg�D�\b��a��y�\u0000\u001fi\u0011�G��\u0000~t��\u001f�I��'����\u0012\u000f�_�'��?��\u0011��K\u001f\u000eA�\u0012�\u001e1���C�ZV��V-\u000b��M��٦���٥%�y\u0018`\u0000\u000f��\u0000g\u001fٓ�_��K�%�9�:�~\u0016|-Яu=GH�v�>�q���k\u0017\u001fkԧ�]gP�����~�A%ۨo���P\u0007���\u0000�c�\u001f�V_�(�##�\u001bW�����.���\u0000�G��\u0000\u0004\t�\u0000�?���\\���u���c�V��\u0019|\u0005�=�\u0013kWZ��D��<A�/��\u001eյ�J�;\u001a�j�_�W�\u0017S-�\u0010�\u001eF\u0011E\u001aa@\u0007�G�/�\u000b��\u0000\u0005h��������_����\u0000\u0018�2���O���/�^\u0010Դ�����'�/��]��[ž\u001c����֗�e��T�4��-.���\u000b�\u001a��\u0019�J�\u001f�'���\bM�\u0000\u0004��5�\u001b��\u0017>\u0017��\u001f\u000b�\u001b�\u001f់�?��\u0002��M�~ ˨xs��\u0015�mu�\u000fk�Q����ͮ��V����nmg�iaU�\u0019#,�\u0003��;�f�\u001b�[�.��\n��_\u000f4�\n���>�Z�^�>�o�j7ZMȼӦ�]\u001bP�/խn@�<��\u0005��\u0018q@\u001f�\u001f�\u000e��\u0011{��\u000f�\u0017�\u000e�&�\u0000�w@\u001f���\u001di�\u0000\u0004����aO�{�j���6�'৊|i�]�߉��\f_x���V��<\u0019q�A�\\/�<C�°Gz�p\f1E.�3!L�\u0000���\r>�\u0000�z������[[~��\u0000�#�\u001f��w�e��~(��%����:�j\u0012Z�\u000e�+;\\�1����\u0000�`S��f�\u0000�\u000e��\u0011{��\u000f�\u0017�\u000e�&�\u0000�w@\u001f��'��\u0007�7�[e�O�h�i��$�W���ƽa��\u000fO��閺��r/5��[Ե[�-��\u0013J\u001e�7��E�?ί�\u000b��\u0000\u0005��\u0000��~���V����'���a|G�e���:��(|!�}\u0013M�=Η���\u001f��\u0000�G�5���X𞥨���\u000e���r���m��ʱ�c�\u0000?�/�'��\u0012+�\t��u~Ŀ����Y��~\u0000���L~ҿ\u0004�\u0005����\u0014j^4��\u0017�_��7����\u0015x�Y����4m\u0012\u001dGY��f���KҴ�$�F\u0010Z�\u0018\b\u0000>�?�n��\u0011yy\u001f�\u001f�!��Y��C�?1@\u001f�C�{ú\u0017�i_��\u0011�t�{�\u0000\rk�\u001b�\u0013�WG�ʶ��\u001e��3J�Ӥ1ȓ\bn,&���r��\u001c��_\u000e\u0000?�{�!��\u0000�/\u001eO�\u0007����\u0000l�L\u001f���\u001f��\u0003�!��\u0000�/с�\"�\u0000�����n�\u0000�\u0000�v�\u0000����`\b��u�7�\u0000��\u0000�[�\u0000��o�%��\u0011�\u000b��\u0000�}�(~�>\b�-��\u0016|k��ǈu�\f_����T���ww��N�!�\u0016�n�Gx�:�!�R�&ܩ\u0000�A�\u0000d��('��\b���P��>;x����\u0000����?\u0017]x^�×rk��T�O�Ct<A�k*�k,��\u001f��$�;ˌ\u0000\u0001���\u0000�\u0001�\u0002�#�\u0000����_\u0014�\u0000i��+\u000f����W���/�\u001b_�\u000f�_�_\u0013��t�kÿ\b�?��\f� �^\u0007���\u0017�\u000eқK���\u001ak��s��j\rw�\u000bԖ����\b\u0000?��\u0000ك�M���\u0000c/�P�\u0019���\u0018�?\b~\u0016�kz��-�\u0019�����6-w^kv��\u0015�\\��[�5�ZۙC]���yh�9\u0000�\u0000)\u000f�:7�S��r�\u0000��4�\u001e�ϔ\u0001�\u0003@\u001f�O�\n�\u0000�\u0006?��_\u0014�\u0000b_���g��a߅~%���?�g�{�׌�E{��C��^�_��\u0011�C_�\u0016�u\u001d��-�R�T�5\u000b�����\u000bu�vXa�0�\u0000>��\u0000�v�\u0000����`\b��u�7�\u0000��\u0000���\u0000���\u000f�\u0000���\u0000���\u00137�����{�.�e�_��\u000e>\t��Ğ\t�~����mK���̈́Vڕ�Z��/�\u001exVi\u0002�ե�_1�d�?��� ����k���\u0000��~�?\u0004�>�\u0007G�����x�<E��r]J\r3T\u0016>\u001d���\u0013ˤ_i����F�'�w\u0011ܣv�@?���-��m�2�\u001a�amc���\u0000�e�!����Qi_\u0013�\u001d�7��1�9��u\u001f\u0012��'ǷZ����?\u001d���o\u0015�?c�`Ӭ�v�\u001a�\u0016\u0005�5�\u0004�`\u000f�(�\u0000��?�ZN߷���;\u0003�|48\u001d��\u0000�\u0017Ҁ>&���\u0000�߶W��w�;����׋>9]�1��\u001d����M���\u001b�V�-�E��qY\u000f\u000e�z*Ⱥ��\u001d�^�ݭ�)���LA�\u0012\u0000�d�������\u0000��Կ�I�!�\u000f�Ҁ?7�\u0000఺���o�%w�\u0014'�~\u0019�u_\u000fx�C��~9�z.���\u0017zN��jV~\u0001�f��4�N�k{�\u000b�Y�e����)��VH�WP@\u0007���ߵ�퓬^���\u001f���-�j7%���N���J����\u001b� ����r�)H��W\u0011��cGv«\u0010\u0001��\u0000���\u0000���\u0000�^���\u0000����\u0000�j\u0000?�z�\u0000�@�\u0000�~��_|j�\u0000�\u0000\u001f���W�l?�/�5�ڀ\u000f�^��P?�+߶\u001f�\u0017�\u001a��m@\u001c֫�U~�>\u001f�[=�����[��7����\u0015tۦ��� ���\u0010��\bY6\u001588'\u0014\u0001����l\u0007�<i�\u0013�\t\u0007�o�\u001e>�o��m�K�\u001d�T��_�n��x�Z���Ħ;xg�u���飷��$��5�\u0000\u0014\u0001�i\u001f�X���\u0000\u0005d�\u0000��63��S���q�\u00005KĽ�zu�h\u0003��?����t�K=7L���?i�n�kmc�i��/��v6\u0016V��\u0005�����������\b�����(��$H�TEU\u0000\u001c\u0006��\u001f�:V�k���\u0004��a����}a}e�\u0012Z^X��L�\u0016�v�0X$��\u0016ӢM\u0004дr�*$��:�\u0000\u001f��\u0000�K\u000f�\u001f����\u0014��\u0004��\u0007ůڂ_\u0003O�b��Q��?\u0017����Q�5'ŏ\u000bG����[�\u001bHm\t��\u001a�j`��e�\u000b���`�\u000f���\u0000������'���?�a@\u001a�O�|\u001b��}�B�o�u��-��\u001e��iZ�ה��/�����L�ϳj�d��\u0006\u001f��\u0013|1��mea�?�灾#i�m��i�o��%������H��.��u�\rB���Ht�A\u0014r2|��`\u0000\u000e_�\u001f\u000f�gπ�����\u0000\u0007�\u001c�4|@\u0011/\u000f�<=ே�Y[^c[��mt��\u001f��܂O7����K\u0000v\u001f�>\u0019�\u0000�D�/�\u0015�\u0007�\u0000,(\u0003����o�\u001f���\u0015����\u0000\u0001~+|v��z�\u0007~\u000b��|#�Ϗ��o���fC�\u001bh�\u0019���/��>�c�\u0000H2��\u001f>(\u0003�v�v����� ��_��\u000f�^0�F�m�T�'�t�\u0018x�^�����O�mCWխ��\u000bƵ��-,m���V���\u000bt+\u00141�����\u0011f��O�\u0000�J�\u0000�<��B������K�9owgy\u0004��v���\r=d���tIa�6�x�Eu<2�@\u001f�\u0005�v���6��p��:>��I||���'������/KӾ0�C����>����ll�lm�C\u001d�����1Amk\u00041�\u00041$Q\"\"�\u0000\u001f6~��\u000f~\"��H|\u0002ԯ|\u000b�K{X~6|*�����λ\u001c\u0010�\u0017��\u0019������c�\u0018�W�i�uD@��\u0014\u0013@\u001f�?a�\u000b�:�ն��������ۈ�l�|K�����A\";{k{�&�B\u0001!#Fb\u00018��\u0007�\u000f�\u001c��?\u0017x\u0007�\t\r�Cx���*�'�|G��\u0000�\u0016��-wR��j����)��V�.-o��Xؤ�L�\tVܤ�\u0001�P��ؿ���\u001d\u001f�\u0013�\u0000���W�\u00004�\u0001�x����ߊ:m���7��\u0000�\u001f��U�ɽ��|u��\u0000\u0015������hM奟�5]F�����\u0011�\u0018��fM�I\u0004\u0003�\u0010�\u0000�7�\r�\u0017ƾ:������?�^(���É44����;\\��i5}Mn���.����W@�v�\n�D�\\\n\u0000��;+�]����z|\t������\t�?��\u0000dO\t��_�����>\u001cx?R���_��m޹�h�\u0000\r/�}\u001a�ēh�V�aq�^@���]��m$����\u0014\u0003�I�\u0000�S~9����%\u0016���a��'��d�\u001f�2�I�|I������M��ëa\f��(�.5F��Z_�F�\u0018#\f�\u0010��@?�?�9�T�5��.G���������ܷ���mCM������d/�\u0016�y\u0017v�K\u0004�T�K\u0004�\\���\u001c��\u001d\u0019@\u0007�}\u0000�g�-�\u001f�G�\u0000٪}>[�/��\u0000�l�\u0018��k7�;�o#���6����\tY��9�<\u000f\u0011\u0012��Z2\u0018\u0003@\u001f��\u0016|i��o�o�پ�^���V\\�r����\u001d��e�x����\u001dƖ�9���\u001b�[�M�\u001fO�ؔ�\u001b�kf�pu1�P\u0007�v�\u0000�v�g�\u0011��\n\f7o�\u0000�w�9�\u000087�Q\u0000�\u001e�M\u0000���<g��\u0000k�~)�?��C��\u0000\u0012��g�5�\u0000\u000bkZ����#*\u0018��.����_[����y3�]\tV$\u001cP\u0007�#�\u0000\u0006�|G���K�U�7������>:�8��\u001d�[��\u001f\u0019<Q��P�Tھ�c�I��xW����.����\u001b\u000b�7Vm,�o,e� \u001f�^���썴g�\\������\u0000�)�ۓ���h�̓�@\u001f�?�\u001e���7�o\u0018�\u0000�;��Y�����h��\r~��kq�\u000b��\u001b�zk\u0012iڧ���}Q<=���~�+{x��v%6���BPO.�\u000f�o�2k�Q��S�\u0000��j_���\u0010�\u0007�i@\u001f�?�Z/�D��\u0014w��������n�?�\u0017�\r����g�\u000bi�\u000bi�Ɵc��^'���:~�i\u0005�����:|`�1=��r�0I��T\u0012F�dDq�P@\u0007����B��~\u001dhsx��\u000e��k��\u001a������>2��O�48.o$\u0010�[ͫkqX�E=��Em\u0013�,��BD��\u0014\u0001�����_�V�\u0000c��/�\n�\u0000�ڀ\u000f�]_�O��+���\u0017�\u0005�m@\u001e��H�\u0000f/�vW���\u0015�\u0013�\u0017O��R�R�<\u0007�\u0000\b\u0007�����b\u0013�k}u��\u0000�\b-.�\u0012&�\t�W��\u0015J�@\u001f�c�\u0000\u0007��\u001a\u001f�?ਞ\u001f��\r\u001fK�l�ើ\u001f�m4�>�N�i��X�3Ag\f1\u0019_\u0003s��p\u00018\u0002�?��5?�P��K���_��\u001a\u0000�\u00006�\u0000�,�'�\n��\u0000\u0005\u001f\u0000\u0012O���F�\u000eO��?\u0012�\u0007�:o��Sj\u0016�Z���5|~�4�B���O���9�\u0016�����$���������sku\u000b�5��2<SC\"I\u001b�2�\u0000�\u0000k{\u000f���>�wg���\u0014?d=CP�������������۩\u0012\u000b[K[h59'�����\u0018 �\u001eY�uH՝� \u001e\t�\u0000\u0005T�O���\u0000�i~�I��\u0000ᾎ�9����_\u0007G��\u0007�7���3|%�W�\u001axm4]8�\u000f�6��u��K\u0006��\u001a\u0011h\f�]\u0000�/�)_��\u0000��'��\u0000�\u000fƏ�T�\u0007���\u0000\u0006��:���1�\u0000\u00059��>2x\u000f��\u0000��(>\u0003|F�=G�_�>\"��\u001e:���\u000b[qu�\u001bm0�H\u0016C\u0004A���\\�\u000eӀ\u000f����/�_\u000bl��/��\u0011|\t��N�n��O��ߋ�?�\u001b+�Ĉ���w^ �4�.nR\u0010fh!��X�xT/4\u0001�5��\u001e,�\u000f�\u0003�~�)� x�Z��7��/�\u0012x�?f�b��T�\fWv�ri��U�aq�6�\u001dۤ�͵_$N��\u0002�H\u0000\u001f���)_��\u0000��'��\u0000�\u000fƏ�T�\u0007�:��>)�5���\ts�\n�׾#�g���E�ů�\u0017z���h�_��\u0011��\u000e�y�D�@��Ѿ&�i�*�J��̺M������/f�\u0016M\u0000L\u001e\u0015��?\u001eh\u0016\u001e+�?��\u0011x�����6��_\ni~\r�\u000e������7O��\u001aD\u0017�}඾������H!����M�C\"(\u0007�X��:M�:~�kmaai\n�kgi\u00046���F�R\u001b{x\u00128`�\u0015p�Ɗ�8P\u0000�\u000f�K���eOڏV���\u0000l�cG��~>j�^��V~�\u001a�����\u0007~!�i���}�w�\u00176Z��巇e������;�[�yd�x]&��6V \u001f�����û\u001f�C�\u0015ݿ�|\u001bg�Y~��\u0010�`����%���ýbH��h�\u0012h.-�Ed�Ye�D\f\u0019]r\u0000?ɋ�\by�_��\u0000�?�����\u0000�ڶ���O�Z\\�#Լ]㋻\u000f\f�i�E�ēk\u0017�Χ\u0016�md�c\r%�\u0002�L�v�\u0007���\u0000\u0007/~��ߏ?��_�O��\u000b���׍|Ky��\u0000���\u0013�\u0011�=r�`�=����N��^_ΰ�/)�݄j\u000b6�\u0019�\u000f��_�<w�#Y�\u0000�w�߂�[��\u0010}�{��/\u0005�oX�N��;m�i������~�o�<���*-��:�\u0019\u0000���d/�������\u0000�)�+�\u0000��\u0000��A�_�\u000f�DPO�\u0005|c�9\u001f�\u001aHm.|E��\u001b�<]i�@w��]J�H]E�C�x�3\u0018C�`��@&��\u0000��\u0000�3㝄�$���?\u0018l4��Ч�\u0017��\u001f㯈\u0016�u�QŨ>�6�����\u0016�1E}\r���x�+��<��*�\u0001��/�\u000f�7c�^'��J8cԿ�\u0015ף�w�o���sE�\u001d\u000bQ\u001a\\�+�-�we�q咮�\u000e\u0000<�U�uMv�MGZ�/�mJq\u0010��u+����\u0004I\u0004\u0002{��e�_*\b�=�vE\u001cq�\u0011\u0011@\u0006e\u0000�\u000f�\u0013��������'��=��\u0010�ѿ\u0000��SM���\u0000fm\u001bZ�u���\u000e�u\r>�����l�-/T�o�C\u0015ť��sZ��]�\u001c�L�A<J��\u0000>�����\u0001�ʗ\u0016�\u0000\u0019d(nb�M\r�_\u0011>\fEs\u0004��Ya�=]d�Eq�]X:��a�\u0000~s�n�\u0000i�ٯ��I?����\u0012��~\u0007���z��\u000f\u0012Yh�\u0007��,�\u000b[�5k�/t�KM7J�u����Ub�Z��+\u0005$)��\u000f�\b�<[�r��>\t𿈼c�MCx���\u0000�tMK�:�I~ɤ�\u0016�w�>\\`��6�\u0001fh\u0003���\u0000�Og�\u0000�\u001f\r�\u0000�~\u0017�/�O�\u0017<\u0005���\u0001�k�}Ɵ\r�e�m\u0011/n��\rm-\u001fU�4k\u001b\u0015��dqong\u0012�U�h�N\u0000?�\\t\u001fA��\u0003��?��\u001f�\u001d?��_�+��_�v���\u0003�\u000f�2k�Q��S�\u0000��j_���\u0010�\u0007�i@\u001f�?�Z/�D��\u0014w��������n�?�O�\r��\u0000��~���4|b�\u0000�p��@\u001f�\u0007�\u001d��\u0000(^���\u0000e��\u000fl�\u0000�A���\u000f�j�����P\u0001���\u000f�\u000f���\u0000�$\u001d��E���c�N\u001f��\u0001�\u0000|9�\u0000\u000e��\u0000�ր?\r����J���\u0000���\u001e�\u0000�V�@\u001fׇ�\u001a��\u0000(e�%�\u0000c�ů�J\r\u0000\r��UO�%��\u0014W�o�\u0014��������:����\u0002�������\bx�D�m�ލ�\u001f\u000ek�\u0011�A��:]�8[�\u001dB��\u001b�Y�\u0002H�F\u001dh\u0003�P�d�\u000f�\u0017���f\u001f\rx�N�ѵ�\u000e~�\u0005�=I����ҵ�#ῇ4�WM�����X^��[\\�y�h]\u000f�4\u0001�D߳��\u0012��\n1�����\u0015�#�\u0007�o���~\u0004�\u0017�_�\u001e6���\u0005����\u001a�|o�k�$�\u0006�x϶�MѴ{\u000b�J���!���S���?՗��U\u001f�'\u0017��\u0018�S�߁?l��>,񷍼C��S�>\u0017�|igw���Ě�����h�e����CR�g����Hyn$�\u0014��\u0007�?\u0018�5�#���\u000b��N����\u0000\f�1��Ogm����ڊ�z%������+��\u0001H��r\"�O�s�@\u001e\u0017�7�\n\u0001�\u0012��>5�\u0000��\u0007���K�k�)���'��\n�E���.����n�mb@���ΌK&�.�\u0007�9\u0000�Z�\u0000�����8���'����H\b�\u0018\u001f\u000f�cד�\u0007��\u000f˟�4'����?e]_�ø���9|<�1\u000f�t߇�xbO\u001ek�h����֦��be\u0007�\u0006�]\f�p\u00100'9\u0014\u0001������W�6�՚G�u�\u0000���/��3h�\u0014�mt�\u0012j~\u0003֢֭4mN����X��\b\u000b\r�Š7\u0011�rL_7J\u0000�\u0000<��9��\t��p����U�\u001e|M�\r�/|^������\u0007��&���\r�ί�O��>\u0019��T���6�\\X�\u001f*�?�f�\u0000-\u0000c�oO�?��\u0002?�������\b�\u0007Ï�^\u0011Ҿ2E�\u0005x����{C�U���/��\\w�2\u0012��y�j�n�n\t���-�\u001c8�\u000f�~ �S��_\u000b|i⟆�\u0011�l_��\r�ׂ���\u0000\r��º,��\u0003\\�fkmCJԭ\u001d\u000b��ZN�\u0014�\u001c�u#�\u0000}��\u0010xw�>\u0019�|]�mZ�]𷊴]/Ğ\u001d�4��?Wе�\u001b}OI�,'\u0003l�Z��ͽݴ�bH&W\u001c5\u0000~K�џ�V��&v��\u000f㿆4��g�\u0005���|\"�����E���侼��\u001d�X���B\u00103��{*[E\u0018�eZ\u0000�\u0000\u0019Ef��\u00038���H�z\u0011�\u0012\u000f\u0004�\u0007�|\u001f�;�_��t��\u0005�\u0005�/�?\u0010uԻ�I��������B;8Z���m#!�\u0016�+I!ݕ@O4\u0001�X�������\u0000�&��\u0014\u001e�����>\u0018x��N�\f�\b>!�*_��\u0019��<%���o�#��\u0000�\u001f�\u000e�w�1���gt,�񙼉G@A\u0000���\u0000��_�K_�>����\u0000\u000b�/�&�?�\u001f�9�T�?��\u0011��to�'\u0005ݿ헪�'�\u0017��/��?\u0001��\u0013K�\u0005����cm�����l6P�76��h�5�u\u0003�\u0000���6{��_�%��_���\u0014Sƚ\u000f�w�wƿ�\u0007�>+�G���K��g��A��T�Q���w���:�4�\u001a\r��\u001f��\u000e\u000b�!d�4\u001dF\u00003n�\u0000�]�\u0000���gO���Ro�(���J��?\u000b<a�W|\u0000��7��V�\u0016~\fiSx��w\u001e-�:�~%�#��YbmKE���o����D\t��\u0003���\u001c��\u0000\u0005E�\u0000�\u0017������\u0000�\u0003�߈�\u000e|u���\u001e&�k�3��ǂ|{��Z�B�W���V�ִ\u001df̅��u+F%���,\u0004�1ʒ3@\u001fk�_�\tI�\u0000\u0005%��<7�o\b���\u0000\u001e|E�O\u0017�:G�<1�\r/�7w:n���\u0010i�����i�\u0001��e��V׶�.\u0004��G �\u0001<O�\u0000\u0004��\u0000���/úߋ�W�\u0017|z�<3�.�Z׵�K�\u0017v�~����=�����v�mko\u001b�4��E$��\u000f�>\u001c|<��ŏ\u001dxg��/\n��5��\u0000�uH�O\u000bxO@�7�ֻ�\\$�-?N��\u000f=̨�\u0015�H$+z\u001a\u0000��?��\u001f���K�\t�\u0000�H~\u0004~ӿ�O����������O\u0012?�>.�R�'�ׂ<1\u001e��]��{jڽ�hmE���[A�\u001d�H�\u0006M\u0000���a���U\u001f�����\\\u001e|{e� \u0011�S ��h\u0003���������\u0000j�K�z/���@�3�Ϫx:��R�=���Co���z~�<��}�\u001c*\f\u0010^\\[O\f\u000exy\"u\u001d(\u0003��\u0000���t�\u0000�mد�U����\u000f�?�ɯ�G��O�\u0000g����C@\u001f٥\u0000~d�\u0000�h��\u0012��Q��3����u�\u0000�\u00001?�6��S��\u0007����\u0000Y��\u001d\u0000x\u001f�v���{����O�?��l�\u0003��h\u0000�\u000f��\u0000�#���?l�\u0000�8�\u0006�\u0000깆�?\u000e���J���\u0000���\u001e�\u0000�V�@\u001fח�\u001a�\u0001�\u0000�3�\u0011\u0007���\u0000şQ�\u00003A�9�\u000f��ʏf͠/���'�{�\u0003]bH���j\u000f\u001f1�\u0007#����\u001c�\u0000?_\u001c�\u0000��J\u000f��\u0005>/|\u0018�]�^�\u0007�\u0012�+�/��\u0000�/��\u0015���$w�\"�ǎ�'�xS�z\u0005�\\h���Z�����u�O,q,�\be�\u00103\u0000\u000f��$�\u0000�8�Ib��\u001b�Y���\u0000i���\n�\u0000g_ٓ���G���Ľr�@�F�\u000f�_��:��o�\u0007�:�V:�����<+�j���vV�\u0017/\u0005��\u0010K)D \u001f�g�\u0016\u0017�����\u0000����_ؓ�\t����\u0000���E�\u000f\\�����\u001e\u000f�T��5�3�z�j�!���[��4�M;NF��Kv��1\u0018bv�\u0007��\u001b)�\u0000\u0004��\u0000����\u001f�Q+ϋ���\u0000����\u0000�_\u000e��+��\u000eC�mv�D�͵�U���؁a�]�y�\u000bo6���k��e��\u0007��{O�����\u0000g\u0011�_�W�T\u0001�l��h\\�\u000eGO����\u000f�{�\u0000�\"\u000e��g��b\u0006�����\u0003�\u000e���s��3�'��I'�@\u001f�?�;�\u0000\u0005��\u0000�p��\u00165\u000f�?���5�߅�\u0014t�\u001fF��'��k�_A���ݯt��{-.���{n\u001aX��X/�U�P\u0007��\u0000���\u0007�o���9��\u0000�\u0000|i�|C�I�\u0002\rfo\b��JK��5�|?�\u001dc�ۥ�6�J,��\u000bV�d�aBf����*�\u0003�n�\u0005���_�QP����?\u00191ǌ5\f\u000fCϮ}\u000f\u0014\u0001��\u001f���\u0017��\t\u001d���@���\u001c�����}��������\u0007x�C���+\\�\u001e&���\u001f\u000bh��9�E�&�O�,n�e1;�d��3.\t\u0000�\u0005�O�7��\u000b\u001b�j���a�\u0014|F���o�/l�\u0012���'���I��@u���\u000b���py�4\u0001�\u001b?���T����_�>7|e���u���?\u000etY|E�O\u0016jW�\u001e{\u001d\u000fG�hm佹K]^k��f��6�\f�K�/Z\u0000���\rw]��Yoٹ\u001b8m+�\u001a�\u0004����]��FG�4\u0001���\u0000���/�\u0012.�E�����>�ði�����h�\u000fN(\u0003��2}O�h\u0003���\u0000�!��?� o�'��\u00192�:Ϋ��\u0003��\u001d(\u0003���?�%���u~�_\u0004~&��_�ǋ>.�\u0013�\u001f�w�|\u0005�k�\r΍\u0005�����/�g�\u001d֍\"�:����\u001d\u0017�Z\u001d�q�~U�Cym�\u0000>��\u0000�%~�߳g�\u0011{�!�b��)���\u0017�Y��4ߊ\u001f\u0010~%�|+�7���\u001e\u0007���T�\u0012מm\u0002�U�Ͷ�\u001e�~��.���w�cBW \u001f�����F�\u0016��>\u000exC�����}7�?�?\u001e�\u0000�A�\u0000\b����n�ӵ��E�Q�x3^6�}omr\u0006��o\u000fk\u001aT�HS3��St{]�?�c�\u000b�O�=�\u0000�\n\u001a8���> �\u0000\u0007���;\u000f@(\u0003�\u0012�\u0000����]�%7�d\u000f؟���k�\u0001i�\u0014<3�7~��\u000bu�\t�e�7��������\u0013�|=+�������V��4s4&d%d)��\u000f�\u001f�C�> ���\u001c~�\u001e\n��M�/\u0014x��w�\u001d\u0007�zU�ĸ�5mw����U����A%��\u0010�fGE\u0005��\u00038\u0000�\u00008/�$g�\u0010��\n��>�\u0000�K�\u0000c/��\u0018�\u0000d�\u001d�3���~\u001f�'�|Y�]�vK-\u000fB����{딴է�㍦�H�\u0019\u001c�\u001f)�\u000f��\u000ei\"?�#?�Pb�@���H��\u001f�d��v\u001c\u000e(\u0003���\u0000e��K����>*��\u0014���\u001dj�\u0000\u0014�'�hZω��-�\u0017�h�\u0002A&�~\u001e����Ef�0�\u0007�\u001c��b��\u0000f�\u0000�o�\u0000��O�\u0000\u0004\u0015���F|G�\u0000��iw\u001f�߂�\u0000h\u0003x\u001b�?\u0007u߈\f���6�G�u�k^�>�����Y�'�t�gM�����3\u001d�\b��0\u0000\u001f\u001f�\u0000�ٿ�P������O�3}�$�l���K_��\u0007�\u000bi㹼?\u0006�\u0002�~�������;\u001d�����c����i��D�\u000b\u0019|͹M�\u001f�_�d�������\u0000��Կ�I�!�\u000f�Ҁ?2�_�O�(�������W��\u0000���\u001bA�\u0000)�����h���\u0000���?�[�\u000b��\u0005�l�\u0000���<<w�,~�ڇ����^$����\u001a}�ĭwV��SM�o����Y.uM\u0017��(����\"e��4�Ri�K\u0002� \u0000�\u0017��\r\u000f�+G�\u000e�\u0000���\u001e\u001f�?��(\u0000�\u0000�4?�\u001f�;��_�x~$�\u0000�\u000f���\r��\u0000�Q~�_�I�\u0000�ߴ7�O�sX�O�x��ŏ\u000f���R�&�N��2\u001d\u001fK�z\u001d�z�ο��\u0000\u0007�k|o\u0014�P�kw\u0013A�iѿw@\u001f�?�\u001e7�\u0000)P��\u0000������*�h\u0003���\u0000�R�\u0000�\r\u001f\u0004?����\u0000�A�\u000f�𐠓�P\u0007���C�\u000e��\u0000�Y�,���\u0007�_��\u0019�^��O��8�_�|C.����֕.���wP��&�u?�k9�t�/�놳�{KY��1�%�\u000e�5\u0000�q�\u0000g��47�\n������?�~\"��/��\u001f|[�o�z-3���K�N]\u0017�~2�u�R=>��\u0016��_=��:�A5մS\\\u0018��\u0014c\"�v\u001f�XE_�u7�\u0014��d~ÿ�\u001e\u000f�я\u0018\u001f�\u0005\u0000���\u0011#���;�\u0000\u0004��\u0000���/��>=Xx�T�k��\u0003ƺn�g��E��C�.�A�>��������\u001a��$�ek��V����D��Z\u0000�\u0000K_�'_�\u001c)�\b�O>>M�;~Ξ\u0019����\u001f��;[��|O���\u0000\f�s�\u001b��l/c]CC����|�w\u0011�\u001f��\u0014�m�\u0011�\\�yO�\u001co�\u0000\u0004���?૿���O��\u0000�.��G�\u001f�?�\u001aǍ�E/ŏ\u0014��\u0016�����+6�\u0004ze΁�\u000f\u0018Os|.�V�\u0019�-bX\u0001qp͈�\u0007���N��\u001f���\u0012n��u��;�|\u0016�\"��>�o�a��>%�S��\u0004pI|uq�\u000f\u0003x8Z+-�g6�zd!���\t\u0000�}�\u0000�o��_���\u0012s���#�����>9�\u001a�ş�~\u0014���M��\u000bx�N�H�|%&�x��ǈ<���/Z��A\r���O\u0006]���w@\u001f�_�^\u001f�����\u0014��\n\u0011��ڋ�z���|6�>\u001b|1𕕟ĭ\u000bI�ߊWT����n���'��Qb��\\06r��$�G��\u0018\u000f�@\u001f���\u0000\u0006���\u0000\u00047����ͣ|v���(~7�4\u0001���\u0000�F���/�)�Y�x~�ߴ��/\u0017~�v\u000f�7�x���/���+����+Ķ�\u001f�N�u��k�m��\u001d^��SKy�][Z��E(e��e\u0001�\u0007�K�k�ǈ�\f�V����ų�����?�\u001f\u0019�5�4�-���<�!�'��/\u000b�2�7�6�77Zl���r�\u00177\u0016Vs�jb�[[y\u0019�@\u000f�o�|Y��>�M�x�\\��M\u0013�?\u000fn�[�ŧA\u0014���oÒk\u001a�X�4���v֖s-�R�[�$�\u0011�Iu\u0000�A�\u0000io�/��;�\u0000\u0005��\u000f�?�\t��&�s����\u0000h�\u0000�K�3�\u001b�A�|d�\u0017�|\u001f���ڕͶ�mq�O\u0013�o�/���\u0017F[m\u001e�I{�xO]�I�(�.�΀\u001f4�\u0000�\u0016��O�(_�\u0013��\n\u0013�������ٟR�o�[/\u0015��V�\u000f~#��^�L�kz,�}������\u001b��Vy\u0014�eխ�G�A#\u0000�\u0003� �\u0000���\u0000�<�;�M`��٧�vԾ\u001d�_\u0010�����\u0000��u�;�\u001aǆ�3���u7�c:���\u0015^��\u0017q}�\u000f�\u0014�>����\u0001�l�R�� ����\u0000\u0004��_���ǈ~\u0002��\u0017���\t�\u0011����>+�N�\u001e�\u0006�.��j\u0016��\u0000��\b[����&\u000b<7�2����)�\u0000>��\u0000�o?����\u0012o�����N�\u0018��?��\u001f�f��e�K�\u001f\u000ex�hnt\rF������\u000f\u001a�=m\"h�c\u0016�n��#\u0006\u000e��\t\u0000����2��$�m��߶f�_�S�\r�\b�\u0000�ߎ��\u0007�\u0017���\u0000\u0004����\u0000��/��_�S�'����¿����_\u000e�\u000f��i�\u0011�_\r�'/��\u0012�ݿ�.&�ׂ|/�OC�C���/���[�]��\u001b�>��A \u0007�9�\u0000\u0004V��~-�\u0000�>���?�g��������O���\u0010�M���gS�\u0007�g�\u0000�����?��'�F��h~\u001c�.��\r��G��\u0000�\u001a5���8�ma�D\u0010�w8\u0007�Z�\u0000�t�\u0000�0\u001f�P�\u0000�9ψ?�Y\u0015\u0000~�~���jw�\u0014��6��1���\u000f�e(�\u001dx���Ǎ\u001a�R����\u0014G�\u0013�xk�\u0016�o}�C����\u001dyt+�c���U���P\u000fn�����`\u000f�����\u000fÿ\u0000>\tx�⏍��n<5������\u0014���ho�I��\nhf�T]&���N���Hl�\u0016�Owg\u001c�PI4!�(\u0007�o��\u0000\u0007L�\u0000�4�\u0000k�\u0000�\u001f�'�����\u0000�=��?�>1��O�n|a��zG� �u\u0004�hdֵ=7�޵}eb\u0005��d��U���@��$\u0000~��\u0000�d�\u0000c_��\u0000���\u0013��o��>���o�o�Q�~=\u0002���ƥ��Z#�kvڅ������\"��\u0006\b\\E��7;�ڬ\u0010\u001d�\u0003���\u0000�\t�\u0000��?���\u0013K�\n\u0003�~ӿ�?�g-W�Ɵ��_�.m>\u0019�B�<Nڿ����4��L��\u0019�ZŬQ���\\�VYa\u0005\fpLI\n\u0001G�\u000f~\u001bg�� \u000e1��\u0010㎞\b�\u0000�\u0006sր?�\u0013�\f��\u0000�}~��\u0000�y\u001a���?�4\u0001��P\u0007�O�\u0016��Q)�\u0000\u0005\u001d�\u0000�7���\u0000��[�\u000f�N�\u0000�O��^\r�\u0000�}�Ag?�\u000b�\u0007��M�\b|\u0017��s��>\u0014�t�T\u001e$���W��\u001c�\u0006�=2]n��KG���U�����Sgmp���ƌ\u0001���m�\u0000�?�\u0019��K�\u0000������\u0001�\u0000\u0011����\u0000�g��/�\r�\u0013�[@\u0007�F��\u0013�\u0000ў~Կ�7�M�\u0000�m\u0000\u001f�\u001b�O�\u0000Fy�R�\u0000���7�\u00005�\u0001�~�s��\r?�߶\u001e��H|+�w㯆~\u001b��a�\u0002?�� \\h\u0017:���s_I=�I��CR��$��\u0004 �\t�Vދ�@?�w�\rK�\u0000�4|\u0010�\u0000��\u0000����\u0006�?��>�}(\u0003�*?m��<�����s����O\u0016P\u0007�����?�\u0000|��q|\u0004׿j�������-��\u001e\u001a�/������\u0000��\u0007�> K�4=\u000fX���=s�Zv��ǧCs~�n�w��uz�V�]5�R\b\"y\n�\u0000�\u00001��(��\u001b\u0005�N�6�e_\u0019���\u0000\u0012?h߀�\u0000\u0010|)�WúU�<\u0011��A��\r�#�SM���M{��\u001ah��G\u0012N%�F(?v\u0019��\u000f������R�J��*��������?\u0012�5q�ž\u0004_\u000f|?��-�ſ�\u000b��ozd�\u001d��a�H>��e\u0017\u001eq޻\u0011��\u0007�\u0015�\u0000\u0011����\u0000�g��/�\r�\u0013�[@\u001f���\u001c\r�\u0000\u0005��#�\u0000\u0005����->\u0010�\u001c����\r�x��Xo�\u0017�\u0011�]Y|E\r�V��1��\u001a��1��B C.���\u0007��\"���?\u001e��\u0000\u000e~/|H�C��\u0017­7��\u0000��?\u0004k\u001aċ/\u0019]_j�����\u0017�kxcF� KX`C\u0004��H�3\u001c�\u0014��\u0003��� ���?���\u0000e��\u0014|Y�\u0000�J�?�o�$��]�?�'��\u0013��w���!x��\u001e<���\u000f���ϊ�\u0019\u000e�\u0007��f���\u001f\u0011��L�[���\u0011m4�\u0018Zi�?j����K��|\u0006)\u0018\u0003�+���\u0000���\u0000d��\u0017�����/���[���S���\u0000\u0013|Y�^�'�5?��h:ީ�=N}*�R�#��Mm�%�԰4��yo\r���65l�\u0000�J�O�\u001ae�X~۾&�'������x�w�?k�X���#�\u001f\u0015i�\u0012f�?��1��P����xs�r�\u001e\u001a�Ҥ״=+Ŗ�f�&�wu���kp�W3�\u0018�`\u000f�]S�\u000e���~4�Q��4_�_���<O�gH��\r���T�>\u0019>����<��������i�y�\u0006�,�\rV+봶����� �\u0017�ld\u0003��\u0000���i��a�\u0014~�\u001f�/�[�_�{�x�~\u0007|J���\u000b�\u0012a�\u0006�ck��6mg�K�xj�NK�{�u7�\u0010õ\u0018\u0017\u0007\u0019\u0000��(\u0003��\n��\u0000\u0005!�q�\u0000\u0004������~)|?�į\u000b��\u000bx\u0010�o�\u0013�V���S�%���W�v��Kcf��\u001b�8�_-\u001b�\u0000'_�_�I��;��Z/�u�%xo_���a�;j����^,���ӵ?\rk�\u0015���A4]\u0016/��\u001e&�#Ւ��.��`��2�\u0013\u0019p�\u0003����C���\u0000������Q�g�\u0000�*\u0000�}?�\u001f�J����HϏ�\u0003���-�L��K_���\r'�\r������v�=������\u001e\u000b�I����n�zu(�|\r}y#�\u000bڛ[�@��DȀ\u001f�9�\u0000\u0006��\u0000�\u001et\u001f�8ώ?�U�\u0000��\u0000\u0005\u0012�\u0000���\u0000e��'7���5���6�|����\u000e\u001f\u0000\rcž\n�~\u001eA�[�\u0016\u000f��\u0004|T��\u0000�\"�|Ec���t�\u001cX闟j��v�et�o�hdp\u000f�U�\u0000��~�\u001e\u001a��m�\u0000�w���o�u�\t�[�ſ\u0013|Cм7�i,%��]?\\�%��V�J��Ӟ�\u0010�J�w3@N69�\u000f���\u001d�\u0000���d���\u0004?d?�WR���h�G�^\u0002�U�\u0003�}��5����|?{�\u000f\n�C�_\u000e.��8�<O\u001e�4{�J�MB�&�K�d�@��\u0000Z��P[����ߵ��\u001a4q�~�\u0013�\u0011\u001f\u001b�.�\u0011�Ψ�I]ʲ\u0005l\u00122\u000e\u000e(\u0003�m?��_��c\u000fۏ�g���g��w��\u0016�\u001d�GI�޹�\fI�ů�6\u001at\u0017�Ie�I��Zi�w!�R���\u0018p����\u0000��\u0000�\u0013��\u000e���?࡟�WÏ�?��������+��&��o��e��<���yҴ��)M�Z'���&\u0012�\u000bG\u001f�����-��\u0000\u001f���S��(�ÿ�%�챨�՟\u0014<\u0003�O�\u001e\u0015Ӽq��\u0000\u0002��\u0001O����K�\u0019M{\u0005��I�\u001b�;N\u0016��d��5Ș�_)\u001c�\u0000\u001f�C�\u0000\u0007\u0004�\u0000�x�\u0004�\u0000�`�\u0019��\u001e\u0007�A�S��:�׊��ω7�\u000e���-<W�h�E���<1��%Ŭ�d��\u001b��3\u001c��٘0\u0000\u001f\u0018� ?���\u001c?�:Oǽ_���_�?\n!�\u0003��8ӵ��%Y���MrO�6�6��d�υ�QQ4��E��}���ז�@�\t�\u0000�\u0007�\u0010\u001b�\t=�_�\t\u0013�3�a�\u001d�s�w�ߊz�ď��\u0015��g�ͷ�-t�?J��\u0007�| �e�x�M�.�P[�\u000b�]\u0016�\u0019-��s\u0000\u0012y�EP\u000f��\u0000��������{�$���\u0000����zh\u001f�^>�J<r|?�\u0000\tX��Ǉ��\u001f��ᑭ�o�ti�l�W�W�����/��Ѵ��(\u0007�5�\u0000\u00102O�\u0000IA��\u0000\u0010��\u0000�,h\u0000�\u0000�\u0019'�\u0000����\u0000�X�\u0000�\u00164\u0000�\f��\u0000�Pb�\u0000�,��\u001a\u0000?�\u0006I�\u0000�(1�\u0016?�\u0000E�\u0000\u001f�\u0003$�\u0000��\u0018��\u000b\u001f�\u0000�ƀ\u000f����J\f_����\u0000�c@\u001f�\u000f�\u0012��\t���Lo����\u0000�;|Z\u001f\u001bO�|A��w�\u0016\u0002�\u0010�7\u001a��%\u001a�����\u0015>2���\u000f��?�\u0012;���\u0000��m�\u0000��\u0007��\r�GL��\u0001�'|m�\u0000�+&��������\u0000\u0005(�ã���\u001f�G\u001e\u001f?�����_�x�V�7�7���5\u001e��������/�\u000f��?��G�~�i��\u0011�vC�\u0007��\u0002�?9�߰\u000b�M?c?\u001e����a~\n\u001f\u001b�>\u0016տ�`7�O�a��5�����EG�<\bo~۳���#��>|�.|yt\u0001���\f��\u0000�Pb�\u0000�,��\u001a\u0000?�\u0006I�\u0000�(1�\u0016?�\u0000E�\u0000\u001f�\u0003$�\u0000��\u0018��\u000b\u001f�\u0000�ƀ?�\u001f�\"\u0007�\u0011��\u0000���\n�8|3�1h���\u0007��t5��F~\u0011�\u0000�9�����?�Μ~&�M���V�\u0000�����g��#�g�\u0000\u001f�\u0014\u0000\u001eA\u001e��?�\u000f�k�\f������h�ڜ�C��v>?|]��A�S�&��O�ǋ���W�\b��~Ҿ\u0019��:��i�\u0000�?���o���m��\u0000\u001f�\u0007����\u000b�\t�K��ׇ�\u000f�߄_\r�\u0016\u001f\u0013\r/�\u0010x��=�n��#��\u001b�CV��\u001a��?���g����\u000f�}��B���L�\u001f�\u001f����9�\u0011�s�\u0014�\u0000��qjc�\u001f\u0011�9��\u0000�/�c�������5������\u0000�n�����}�����>G����ͳ�`\u000f��p\u0000�\u0014\u0000P\u0007�w�\u0016\u0017�\t���U��\u000e�U~4��S7�_\u0007x��\u0013��t~(\u0005�\u0000�M��'�\u0011�㯇������w�$\u0003�^~�q�\n\u0001���\u0000\u0004P�\u0000�v��\u0000�=�s����\u0000k����ď�V�\u0001�\u0000�m~\u00017�c�y\u001a�:��������+�C����\u0000e����}��� \u001f�\u0005\u00001��[\u000f�7*O�,/�+����O�\u0011?g����n��d�A�g���uc����\u001f��\u0000�$��\u001f\u001b>\u001a}�\\�y������y��\u0000e}��R_�}��\u0003���\b��\u0000\u0004�o�%'�wa�'��u��l~#x���\u0000�ó��K�\u0000\t��d��?���\u001c�B)��������?�<�����À~$�R?�Թ��\u0000�g�?�Qo\b�\f/ƃ�̏���0��3��W\u0007~\u001e�'��#���0�?�\u000f�?��\u0000�V��\u0000��\u0000���\u0000�~���v\u0001��\u0000�\u0000\u00102O�\u0000IA��\u0000\u0010��\u0000�,h\u0003��\u0007�\u0019\u001b7��w�\u001a�\u0000����?�\u000f�o��S���\u0000\fj�_�?���\u0016z��~��\u0000\rSw�O�����\u0000i�-ϑ�y�g�g��\u001f������_���C�\b�(������\u001f\r�,����\u001a7���п�����4��\u001f���j���ر���\u001fn�>p\u0000�\u001d\u000f�\u0018�9$�\u0000��\"��\u0000і?�\u0000E�\u0000}��\u0000\u0004��\u0000�Q��\u0000�r�ٿ\nk������>\u0019I�H~\u001f����\u000fη���\\i��\u0000���о6\u001ao���\u0000;?��_��|�G�x\u0000���\u0000���\u0000�6��\n��\u001bꟲZ�e_�\u0007R���_\u001e�\u0000�~�\u000f\u000f��\u000f�!w\u0017��\u0000e�,<q��������n�\u0000��?��[��u�\b\u0001���\u0000�\f��\u0000�Pb�\u0000�,��\u001a\u0000������DG�\u0000�1h�����\u0000����\u001f�к�­H\\/�����\u0011\u001f�VV�\u0010-L&#�W������'[��3F����۲�\u0000���\u0000?{(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u000f��"},{"_id":"images/avatar","data":"����\u0000\u0010JFIF\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0001\u0000\u0000��\u0000C\u0000\u0006\u0004\u0005\u0006\u0005\u0004\u0006\u0006\u0005\u0006\u0007\u0007\u0006\b\n\u0010\n\n\t\t\n\u0014\u000e\u000f\f\u0010\u0017\u0014\u0018\u0018\u0017\u0014\u0016\u0016\u001a\u001d%\u001f\u001a\u001b#\u001c\u0016\u0016 , #&')*)\u0019\u001f-0-(0%()(��\u0000C\u0001\u0007\u0007\u0007\n\b\n\u0013\n\n\u0013(\u001a\u0016\u001a((((((((((((((((((((((((((((((((((((((((((((((((((��\u0000\u0011\b\u00048\u00048\u0003\u0001\"\u0000\u0002\u0011\u0001\u0003\u0011\u0001��\u0000\u001c\u0000\u0000\u0001\u0005\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0001\u0003\u0004\u0005\u0006\u0007\b��\u0000>\u0010\u0000\u0002\u0002\u0001\u0003\u0003\u0004\u0001\u0003\u0002\u0005\u0004\u0002\u0001\u0001\t\u0000\u0001\u0002\u0011\u0003\u0004\u0012!\u00051A\u0013\"Qa\u0006\u00142q#�\u0007\u0015BR�$3b�\u0016C�Sr45s�������\u0000\u001b\u0001\u0000\u0003\u0001\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007��\u0000(\u0011\u0000\u0002\u0002\u0002\u0003\u0000\u0001\u0005\u0001\u0001\u0001\u0000\u0003\u0000\u0000\u0000\u0000\u0001\u0002\u0011\u0003\u0012\u0004!1\u0013\u0005\u0014\"AQ2a\u0015#Bq��\u0000\f\u0003\u0001\u0000\u0002\u0011\u0003\u0011\u0000?\u0000�f0�{'�!\b@\u0003\bz�\u0015\u0000\f!\b\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0004!\b\u0000B�\u0010�\u0004!\b\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0004$!\u0000�!\u000e�bB��*�\u0010�\n�Hf0�\u001e�H�t��\u0015\t0��n~\u0004��Ƿ�I���v\u001ab�lf*�\u000b\nЬ\u0011X�v=�\n��$�V!�k\u001e�-���\u0015�\u0001c�ha>\u0010ɀ�\u001d\bB\u0000\u0010�k\u0015�\u0000$?�,+�\u0005b\u0017���=�,q\bf\u0003\u001e�2\u0010\b^\u0004�c\fV:\u001ce�q\fHB\u0010\fO�˰�@$$!\n�b\u0018V \u0001\bHz\u0001�$!\u000b�\u0001\bB\u0010\u0000��\u0015\r@!\bB�\u0006!\b@!\bB\u0001��V7#\f�\bC��0D\u0010��\b�\u0010�\u0011\u0004!�\u0002!\b\u0000B\u0010�\u0007�$0I\u0000\bB\u0013\u0010\bBC>�\u0003�d8\u0000�7\"�\u0007C�ec��\u0010\u000f�`>�B~\u0010�+�6Y�+�T&A_,Rl�.췖EGݜ��(\u0014\u0014{\f��H�N��\u001aEl�Q4��*�s�s�d��x�(�<\u0016����'l�준ɒ���L��\u000b',�k��*��2;d\u0012�dҍ���_�\"��h=�Q\"N�I\u0007\t6 �\u0011\u0018�h{H�#�\u0011\bB\u0000\u0010� \u0001P� \u0001�q\b\u0000a� \u0001�\u0010�\u0006\u001cB\u0000\u0018q\b\u0000a� \u0001�\u0010�\u0004$� \u0001�!\u0000\bB\u0018hLt:\u0019\u000f\u0011\u0000�!\u0000�l`�f�!��`B�`bB\u0010�\"�!\b\u0000B\u0010�\u0005B�\b\u0000T'�!\u0000\f�\\� \u0010��\\\bO�\u0000�a�͉\f\u0002B\u0012�!\fa>È\u0004\n\u000b��@\u00142C�!\u0000$!���b\u0018z\u0015\fT2\u001cT:AaCG��HB\u0004!\t1\u0000�b\u0015\f\u0000:\u0013B�@\u0000\t\u0005CP\u0000�!�\u00140��\n\u0002[\u0010�\u001a�C�B\u0010�cp0�\u0001\u0002\u0010 �!\u0005B�\u0018\"��T\u0016!��B\u0010�!\b\u0000B\u0010�\u0004!\b\u0000B\u0004$\u0002\u0010�*\u0001��b�\u0000\rbCЀ\u0004!\b\u00047\u0003�\u0012\u0000B\u0010�\u0003\u0010� \u000b\u0019�\u0001�,y�);\u001a%�rJ���ݒO�\u0013\u0013�V�dO�ԣh��Rg<�0m$�rd�\"�6��9���Ȩ��\u0012�h�9p��FC�-#�)�\u0001��QBn�$ɒ�)Y�E�2tFՇV*\u001d��҇<\u0002��ҏ<���i��k\u000f�����R�\u0014 �5�,VR��Ѝ(�B\u001f�;g�\bA\u001e��\b�\u0004\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0000\u0006\u0010�\u0000!\b@\u0002\u0010�\u0000!\b@\u0002\u0010�\u0000!���\u0000a\u000fBH\u0000Ip:�u�\u0010\u0001\bt8�\u0011\u00045\f\u0006�%�a�T\u00000���\u0004:\u0018t\u0000=\u0002\u0010�\u0000�z\u0015\f\u0007�P� \u0004A\rC\u0001��\u001b\u000e��X���*\u0010XP\"\u0010�b\u0010�\u0000!\b@\u0002\u001d\f:\u0000\u0018A\b@5\f\u0010�\u0006�!�\u0000\t\f�\u0010�Ir\u0010#�\u00008��H@8� \u0001\n� \u0000GB��\u000e�!\b\u0004!\b@\u0000��\u0002!��HHH\u0000q\bB\u0001\bB\u0000\u0010� \u0001\bB\u0000\u0010� \u0001\bB\u0000\u0010� \u0001\bB\u0000\u0010� \u0001\bB\u0000\u0010� \u0001\bB\u0000\u0010� \u0001\bB\u0000\u0010� \u0000g؆H��\u0005�\u0006�h�5�\u0014�jp\"q`*+2��]�.=��1�d5b1�ǹN|Y��\u001dY���Y��$�9�U�7T����Q�,Vm\u001c��,�\u0015&>H��\u000eL�\u001a4��%�$І�\fE�}�ibĠ�Α)\u0006WVLc��\u0005�,rVU����w;��Q���\u0011\u0015���\u0011z\u0013l�1\bG�f5� �`$!\b@!\b@\u0002\u0010�\u0000!\b@\u0002\u0010�\u0000\b�z\u0010\u0000�!\u0000\bB\u0010\u0000�!\u0000\bB\u0010\u0000�!\u0000\bB\u0010\u0000�!\u0000\t\bB\u0000\u0010� \u0001\bC�\u00000��\u0018\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0001\u0010T\b�C��@\u0003�@�\u0012����8\u0000�!\u0000\n�B\u0010\u0000!X��\u0001�C$8\bB\u0010�b\u0010�\u0000!\b@\u0002\u0010�\u0000!\b@\u0002\u0010�\u0001B\u0010�\u0000!\b@\u0002\u0010�\u0000!\b@\u0002\u0010�\u0000!\b@\u0002\u0012\u0010Q\u0000\u0006����+\u0000\u0012\u0015\u0006 \u0000(`�`\u0006\u0000�cШ\n��a1�\u0010�#\u001d.\u0007�G@\u0003%��W��\u0003C$*\u001d\u000e\u0003�R\u001e��\u0002F��m\u0004 \u0002\u001d� �$��#\u0015\u0015�\u000f(�8w4\u001a+�,B�+Q\u0003/W��75\u0011�fj\"�FS$��\u0004�W$|\u001a9#VP���\u0014�G�C���`lB�\u001al�\u0014k��5Q\u0007\u001cy�Z�V��&To����>�̉$R���53�����f>t�2\u0018��ӏ)�\u0016��b\u0007\u0004\u001c��k�j{(�#�3\u0015\bC�\u00000��P\u0000�\u0010�\u0004*\u001e!�\u0001CQ �\u0018�\u0000\u0004!\fC �@�\u0000��q��\u0000\u001a\u0018�@\u0004b\r!�\b�A�\u0006�\u0003\bz\u0015\u0000\f!\b\u0000B\u0010�\u0004!\b\u0000B\u0010�\u0000j\rv\u001cB\u0000(T\u0018�\u0000��\u0004\u0016\u0004t=\u0006 \u00021\u0007CP�\u0011�t�\u0010\u0011��t*\u0018\u0002��P4%�\u0000\t�\u0000�T #cr\u0013\u0018`\bHB@\u0002\u0010�\u0000\b�p@\u0002\u0010�$�}��!\u0000�!\u0002\u0000�\u0012\u0017��\u0000&�\u00187�\u0000\u0001\bB\u0000\u0010� \u0001\bB\u0000\u0015\b/\u0000�\t\u000e�\f \u0000B�\r@\u0003�\u0011\fi\u0004!�V hq\u0002=�({\u0010\"\u0001�\u0010�\u0011\u0000�!\t\u000e ��!�\u0001\f\u0014Fc�\u0000Ir\u0010��\u0000�+\u0004@U\u000e�\u001ca�!\bB\u0000\t\u000f@�\u0000�w�K��\u0000��C�h}�b\u0004�LWȚ��a!�\\\tp\u0002��2\u000b�\u0005\u0000���~A\u001a\u0013\u0006��e�&�H�6��,����f~i\u0017swe\u001c���d�rwe\\��'E牾�,\u000e�FL\n+\u0013�\u0006X�8���xI\n(B4J�D�\u001d\u0011�\u0011˓�h�W�>YO+�����\u0000�\u0012~\u000ee\u0006�R3'���,R�Ʋ��ؒ\u001aT�\u001a,R�I�Q��w�F�q8x�DI;4���Q��*\u001c��@h!\b\u0000Cx\u001c@\u0000P�\u0010�\u0006Hq\b\u0000B\u0010�\u0001����\u0000F:\n��\u0000\tv\u001cB\u0000\u0010�3�\u00006�GN�\u001e \u0001\bB\u0000\u0010�lW�\u0000-�!\b`:_c\u0005\u0010@\u0004+\u001d.G�\u0000\b�nD\u0000H\u0006�\u001a�\u0000:�K�\b$�\u0002n�\u0003n\u001d��F\u0003�\u001d;\u0004(�\u0004!\b@!\b@\u0002\u00106+\u0000\bj\u001a�`\u0001\b\u0014�`\u00031�\u0018`!\b@\u0002\u0010�\u0000 BB\u0000\u0015\bB\u0000\u0010�\b\u0000Cy\u0012c�ЬI�!���W�¡$\u0002�]\u000bp�J :\u0015�z\u0015\u0001#\u000f\u0015c\u0005\u0014\u0000=\u0002�\u00063B\u0000\u0004�!���v\b�c�\u0018C��\u0003\u0004CВ\u0000\u0018D�\fЬ,\u0001\u000fB���:\u001fh�Ec\u001e(T:�8�\u0002���=\u0005�-\f�\u0007BI\u0005� W(z\u001d\u000e+\u001a@Ш!�\f\u001a\u001a�\u0010�\u0015\u0011���\u0015�;Fj�\u0019�`\u0002\t!�(�\u0018\t*\u001cB\u0010\f�#$\u0010�\u0006�PH@\u0003$=p!\u0000\u0001$G.\tf� ��1�Y\u0006i�|��d��&wܡ)=�M�\by;�7��$9,��hŻ\u0011R8���\u0000�}�\u001aXps�7��5\u001d\u0018�\u0005\u0015��ٹ�\u0017\u0005,�~�J\u00031g\u0002����˧*e���\u001e+\u001ae8D�\u0018�\n0��\u0018Z4ǅ\tȂ8~��a_\u0005�Xx�X�\u001a]��5TTL�aT�\u0011�8��\u00029%�Y�\u0015ѻ�Jf\\z�\u0003��\r�=\u001b�������PZȓcԩv\u0017EYf�\"S��!��\u0010�\u0000!\b@\u0002\u0010�\u0000!\b@\u0002\u0010�\u0000!\b@\u0002\u001b��@\u0000P�\\\u0004��,���!ơ\u0003@5����;\u0015\t!�q\u0000�B��\u001e�5��8�\u0015��HU�\u0012\u0010Xj\u0005}\u0002�Ahi�\u0000 �T\u0016\u0014(�\u0005C�8���:T\u0010�\u0010�\u0000���\u0010�(�A�;\n��E\u000fC�R\u001cB�\u001a\u001bi ��UD��;\u0010\"\u001e��\u0000a\b@\u0002\u0012\u001d+�%\u0007�\u0002��n\u000bh�BƐ)���j\u000b\u001d\u0000�\u001fo\u0002Q\u0001\u000f\u0014\u0015\rC�\u0005�C�\t\bB��\b`\u000b\u0015\n�C\u0000�\u0014�]�2�b\u001d!P�=�\u0002��\u0018�\u0000\u000e�S\fAc�R�\u001e�� \u00104�J��\u0000\t1�#�\u0002��PB�\u0001$*\u0012\u001cE!�T8�(H`�`\n\u0010���\fB\u001c`\u0001��\u001cj\u0001�\t\u000e��\u0004!��P\u0000�\u001c@\u0000��z\u0010\u0000�\u001cT\u0000$�B\\\b\u0000B\u0015\tp\u0000$!\u000b�\u0000\u0019;\u00153%��*�^F�f~n�F��8��\u001e?�%�\f\f\u001d�\u001d<9䯃\u001f+�K\u0004)\u0012�]�C�?D�Ur\u0014b\u0015\u0016Z�^PUE\\ػ\u0017䈥\u001b��\u0006�|��2�L\\>M��\u0015\u00143aQBpFfR��O�<(�_I_bLx��5\u0014�D�#�Ü�\u0015�\u0001\u0013+��&�_\u0004�Tu`ǳ\u000fY�ٹR\u0011����+�b8%��֏\u0011Q�\u001e����\u0000p���̿�r?���\tjo�6x\t�C�Mw����7�MU�ࣨd��ph��\u0007�G��\"�Im���M�\u001fRǑ$����\u0010�IJ�h��u|�f��h�9�5G�cȤ�vJ�?�ߓ-�Y\u001f�;M\u000e�\u001e�\u001a�Z�t�jBE�\u0003�\r�\"�\u001aB�?U!�T\u0014�J*!�P�T=XɨD>��N{�0&\u0011\u0017������K�\u001e�\u0000����@\u001aB\u0005I|��\biЇBM\u000b�\u0001�*\u0018C��+\u0004AP�!��\u000e$\u0000�!\u000e�v0�\\�\n\u0010� \u000b\u0010�:\u0000\u0018C�\u0000a\u000e3\u0000\u0012\u0010)���\u001cB\u0010\u0014!\n�\u0000\u001cC!\u0000\u000e!�\u0000*\u0012\u0010�\u0002�\bq\u0000j\n�\u0019r\u0001���!U\b\u0007T!\bz\u0000��c�\u0001��A\b\u0005C!U\t�\u0010\u000b�\u000e0�\u0000�$&\u0001C�C!�\u0005��BLV\u0000*\u0010�C\u0018��\u001e�\u0001P�������!\u0000�B\u0010�\u0000{\u0018d8�!X�@!�\u0018q\r1\bHH\u0006��� \u0001P� \u0001\bC�Ą!\u0000Ʊ�a$\u0002\u001d\bH@!\bB\u0000\u0010� \u0001\bB\u0000\u0010�$\u0000!\bV\u0000!\nư\u0001>�3�5�ɍ\u0012�Rx�\u0005c�->�E\u0005\u00126\u001ct�\u0016��dQ��5�*)\u0004�L\r��m�b��\u0013V�q�m��[���dY!j��qZ�\u0017�L�,�\f͔\u001e\u001a�\n��\u0012dnu\u0016\u001e\u000e>����V�\u0006\u0017P�b��n�]~��M4q��?^M3�4�c��7d�\tů�\"\bNV�y�]����+#�AG#+)?\u0004�f���f3t\u0014rI\u0010)�\n2C\u0006�\u0011��\ta����|1�&�#2pF�\u001dKO�'Eк�m4�\tK�q�,G+��5�:3p=�E�V�L�\u0017|\u0012=Y��\u0000���`��I=���\u00005���K\u0003�Y�����\u001b�G-.���\u000f���GZ�MQ����\u001c����C>����0���R�\u0014u_g&���\u001du_��\u0005\u001dw����'g$���\u0000pP��\u0007�3��HQ�\u001c�:��%�Q�\u0000�O\u001a\u0003�Y��k?~Y�G���\u0012.���\u0017�#�Y�Ȗt����}�G\\�I���#�ya,��0V�5�u��� 7}u�\u0017�\u0011���\rkb/�\r��1�Tb�j}��\u0000��\u0017�\u0016m,�%�\u0018����\u001d]�\u0017�\u0006�Ș�/�%jW����쟌�5wG�tі�?a�S�-\u0018&h��\u001c��9��N��͊��5A���c��8�\u0002c\bz\u0010\t!��!\u0001C\bq\u0000\ba�`@!\u000fB�p\u001a\u0018u��\u0000\u001dr!�� \u0018�$И�!��a\bb\u0012c��\u0000\u001e�ha\b\u0007�+C!�\u0000f!P�\u0005B\u0019\u000f��\u00004$!Ѐ<\u0018I\u000e��\u0010�5\u0006��\u0007CP�� \n\u0004I1�\u0016:\u0010�\f�D�R�~\u000f%�7D2�Do'<2w7X,���;VVǗ�\t&54g<Z���\u0011fUC\f\u0010�(\u001a\u001d*\u0010�T$!��\u0004:\u0012\u0010\u0000�$ \u0001\bB\u0001�X�T*\u0001[\u0012\u001cIP�4!\b@\u0002\u0010���\f��;\u001aȜ�\"y\u0018�Iر�[�ʏ(\u0012̗��\u0005�q�\u001fR��^�9j\u0017��0ٚ>��ު�2ޣ�\u001f�\u0013B�U�_#z��fD�<\u0001��\\��3g׍w#��Y�-b\"��/#Dٷ댵\u0006\u000f��z�\u0000��E�7�z\u001f�<~�Z�\u0000�^��5\u0016�t?��\u001b�o��\u001fP_ ���(7:_����_g3����%��\u0000�t=Λ�`�M�No��|���|��R�{.z�\u0010KW�{��#���Yu1r�ܙK�lJ�g[�����be��4\u000e\\��%ϑ,Թ<���\\HT@�$�Ԅ;q��p�'#��,R�\u000e\u0012�W���:ϜD�Ì���p�\u0000,E��W�\u0003R���h�2DؤSR&� $��:��e����e�/����3��:)F�O���t/���3\u0014��\u0012g��\t�4��Mw\u0013�K��T\u0012v_�Gƍ\u0005��w\n:�]���u0Y\u0010|H�Z��\u001aյ��O���\u001a�\u001f\u001a5c����c���1w}�\u001c�y�ܝ(߇P|�aǨ��`,�冲��R��:\b�\u0017��]R�Ns��\u001f�#�5:X�W]�]Q��Ǫ�D�5�V�d�u+�?�HuO�����\u001dg�\u001d�4:��?��R�'\u001e�2�\u0000pq�K���CC��R�d���=�::�|�㫒�\u000bQ|l�#�W�$:��8��KĘX�����R\u0016�y\rr|�D��/���Q���>�ۦ�Z��w\u0018��䱏T��V.��qo\u0007Q����\u0010���,�\u0000t[Ŕ�4�A:�i�������I\u001d\u0004&�\r;2��S��x��fd�C-\f%.\u0004@\bC�b�\u0001�=\n�\u0006\u0015\u000fB\\\u0000\f��\u0010\faP�\u0001\f�\u0015�0\u0000�\bz\u0019&\u0003\u0015\n�B\u0000�hz\u001ch�\u0000�$*\u001cI0\u0010�X�t/p��\"\u001a#l\u0015/�rK��\u0014��6�K�\u001b�\u0016hoAFHȆ��r�\u001c��JE�)#A\u000eA\u001c��d�w-\u001c��0�\u0019߂9g�\u001e�H��1'���\"�\u001c�.��.�H�\u0000r7���H��4�d˭i�i ?���\u0000��\u0011���i��\"UԴ��\u0000�\u0013CԷ)mE|�I6���\f׶i�3�!O�D�GF\u0015�����)�S&��g�vUy-��;=\u0018����fmr�\u001c\u0013�`鲮\r}35���4\u0011�\u0017��2��r�����\u001cB\u0017��\u0003w��BK��\n�h`�B'�D\u0015\u000b��hd:\u0017\u001f\"T!�P� \u000e�!\u000e�t0��P\u0000�|!\u0010�\u0003J����D\u0013ʹ#�?��}B��tC\u001d��t[�n\u001f%ijy|��5]��v�7�#\u0007�֖���T�~�.y���2d�>K҈��Ik\u0012�W˭Kɕ<��%L��o�9*.=\u001b_�u��z�q��5�o�\u001cY%F�Vo����\u00195ܾLW���y�Tc�4q�^Z��ȧ�㹋�4��B��6g�e���\f��و�?�\u000f�F�d�Q����do�K��O�K�=[\r��ͅ���\u0000P�Z�\u0000�d,�<��k\u0019����������\u0012��\u0010n\n\f��l��\n�J�l�Yߑ��ȷ4�3g\u0016�J_���'�M�\u0007\u0016E|3OC�6Ԍ2M������7�_$k#��,x~Cܮ��\u0013r���x�<����`�\"��zY8~�\fAN\u0011w\u0016�\u0011�GM�\\�\u001cY\u001a�::ϛD�T\u001c_�\u001cR�\u001cR�\u001d\u0000v\u001ce�\u00111��\u0004\u0005��\\n�^$�VR���a>\u0006�2�\f��Q��z%R�u\"$�$Λ.�w\tI��\u0014Yi��\t\u000e�\u0014��VK�$�ȷ?�\u0013\u001e���\u0014�r-艱�\u001al�&Y\u0012\u0017�Eb��ad�v:��\n\b\u0011>���cz�db\u000e��9\u0002ވ\u0013\u001e,;\u0002e$>�+\u0016�v\u0004�'\u001eGY\u0019[pQ��\u0002��\u001crWfV�&;cE�Y��\u001c�䩺�R�\nLM\u0017Vj��6\u001dK���r�\u0004����:\u001d?R��k�:�nQ�)}�0jg\u0007�ЬZ����ZN�}&��<\u001ew��U(�ΛA��M\u0010е;\u001c\u0019��*I�ZL�S5p�r�) Ֆ�=\r\u0007�~\f�P\u0014*\n�A`\u0000��\u0005�>\u0005A\f\u0016\u0003P�$�Aa@���>��x\u000b\n\u0006�AP�V\u0014\b$�*\u000b\u001d\u0001C�\u0012C\u000e�j\u0010�\b�\u0011�΀��r�&ʚ����ku�\u001a��0�JEP\u001a:��)�`�u���C���6�v0su\u001fRN�\u0012�f��GA�a�����v.\u000e6zݳ�.\u0006��_6\n)\u00179:;\u0019u���V��\u001eZ��䥚N����cVt�:�|��tE>�9.r\u0018U��\u0016�o����5%�\u001d��D�����a{�cCO'@3G�ʿs#ɯI/s*z-Y\u001c�/h\u0005\u001a���G�K��\u001e�(�SfT0�c�9�\\0\u0011�\u000e��/�\u0013.��ǖr�Ջ\ny�(U0��\u001amxt���n�-a�\t��q��4�VX���&O\nf��(�wz=\\'=�f��-�s���/P�<����/^x�r�\u0012�E<�z>\u001ah�(�W�\u0018s���΋M�Ŗ+l�j4rM�'\u001d�;\u0015�!\f:\u0018C\u0001\t1�T\u00008>G�X!P�t�\u0012CP\bt��$:\u0010Є*\u0019��\u0010��\u0010\u0001�*TR�&�vZ�f��Wɬ\u0011�GE=V}�fF|��e�nNL�6���P��$�rla�8��t�њ`�f��Yx�\u0014�\t�\u0013�\u0014�d�����e�Si3\u001f>Jn�\\���,�7�?�_&~L��?U\u001e|՝xѦ�<\u0011KS�gK/\u001c\u0011<�UF��3Է�Y��G�\"s�#H5.zλ�,�䫽\u0002�S�hY��Ȗg�Sy>lm껲\u001b\u000f�\u0017\u001en;��|���n�&���������\u000f'\"Y\u0018YK\u001a/<�c�>�%\u000fQ���\u0005���\u0018&�%RH��¡nI���w:�����`��d�:�F�41MF~��̹c�*j���6A�gOY�����v�R\u000e���֨6��G?�\u0016}FUM�\u0000\"3��g:���\rTm<q�@�\u0018�x��{�\u0000e�>sc%\u0005\u0016j,\u0018��BX!��/�\r���$�\u001b4V\u0018_`�\b.ː\\0ܫ�\u0013��<t��\u0007N�\u0017\u0019\"���\u0001�I&G!8(���\u0006�L\u0001\u0012Y\"\u001d:#�\n]��3�[��G�\u0000!.Ɖ\u001c�]����]�V��\u0015�$2\u0013�\u0014Kc؆LI���L{�\u001b\u0012aB~\u0006��\u0002\u0018)\u0012�$�\u0000�q�\u0005Ь(v\u001d�0,t�v<e@&+AC�MæG\u0016���\u0014\u0016\u001aa'�Gb\u0015\r2[HI���aC�]�\u0012C'�\u0002aE��i�qd��\u001b�3]UL�1�Yc\u0016G\t\\Y\r��Y�?X��<�\u0006�Q�.y<�jۮN���-.L���#��>\u000b\u0011��+I��sC\u0014�pC9�\u0006N����Q6E\u0002���+\u0004���U��V+\n\u0002�H�F�I\u000bb�H�\tG�M�J4FŨ�\u0014P��T�mE7'BR\u001e�{Uv\u0005�Wb\u001d_Q�i���9���f<on\u0007e��GM<��m�3�]cM�\u000ftկ\u0007\t�!�e�Si\u00189z��I�ɳD���j?'ē؝��纗_ϕ��mG<�2�fD�<���D�\u00172�\t��do�J�<�`qi�܉!\u0015\u0015T\u0016Z���<����4���H��v���b�J�+=:޹�X�8$�v\"��>��~�J7۔%0d\u0003�#�Ԟ\u0013�\f���Lf�\u0000(��a㚊d\bx�\u001e��\u001c\u0003\t;�Y?i\u001bv�\u0003RI��\u001c��\"C0�j\u001aJ�\u0002\\��P-��@�q��\u001fI8�\u0016��\u0004@�$�%��\u0014\u0014�\u0003\u0018�>F\u0003���\u0012M6�6�w�\u001a�<���`K\u001ari�8�\r��\t���G丳�1��}�.�Q\f�N.�\n���7i�;��\u0016�K%Y\u001b��}\u001e�\u0012G-�?'é�f�H�0e�H�\u0006�d5B��T\u001d�D]\u0014�\b�*\u0012\u001e��\"��\u0016MP\u0014:CШ,b\u0018$�A`.(\u0016�aW#K��B��yTY������I+�#U$(�'�^��R �7}�S��\u001e\u0010=\u0018�\u0014rkl�8��a��\u0010�5\n%̥\u0002���(�`�Yƌ�Txe�vȔN{\\��s���΋�.\u0019�k\u001f���Ec}�G$��\u001c�2>Y^N���� �\u0013�\u001a��lc\u0006�R\n��O�\u0004:|\u000e+��F�\u0010\u0013\u001b@\u000b`�\u0019����\u0014�&�n\u0000k$��o�w1�\u0016\u0005$\u001cgL��Fn�ةE�,[�\b\u0006��Ӻd2��to��qP^\f����5�F���D�\u001dx�G��B\u0010p��ʚl\u000f/f�\u0017Q�d����2e����靐Vhh�4�Ԕ��#��Z\f��\u001dݾ�s��k��6�cXɟmGɰ�Hk\u0012b�&�L@\b(V\u001d���&KEE�\u001d��7؎F9\u0011ٍ�b�_q�9��\n���\u0011�\u0003���>\u0018�q�4\r�f�9dI��I��+(�L����,{�\u0004\u0013b�\u0006Ę\u0003%\u0012��#L+�z\u0012b�lm�C$U�u_$[���m|�\u0002a'�\u0014�\tv\u001d o�V\u0003��\u001d\u0011��\u001d0\u001d\u0012X�i�\u0017� \u0010Q@�-�\u0000MТ�\u001bv(�$E�H�\u001b�\u0017DЗ\u001d�䍱�����x���zN���\u001cf)+F�N�l�Vs�G�\n�l��\u0006kIٵ��\u001a8Ν���y7���\u0015�N|��΃\u0016D�\u0001ٝ�:��g�_(��V�($���~I�#1\"D�HP�\u0015\u0012�I\f���d\u0006\\��E��$��)\"b<�q�s��\u001c�S��\u0006�J8��_6q}_�=N�rSj?��lwGy���K���ql�:���q©\u001c.Md�6ܙ\u001f�9�Hĝ�]oVɖO|�Ξy�:\u0005b�e�t��\u001a�{\u0003\u001c2O�d��\u0018�����ҕ��I\u0005\u0005\u0018�AnW؆�CFv+\u001aD�lM�D�����\t��\u0007.\u0006��\n�B�\u0016���L\u0001+\u000fr\"}�`ݰ\u001dPi��lt�\u000e/�hx�lt\u0013�\b푿#`�V�dƈ��D�ˑ�\u001b\u001d��ρԨ\u00162c\u0013�\u0012]�\f\u0006r�\u0018ʘ�T\u001c��S�C坢\u0000!�D7+�6I\\!�D�5\u00191�5&��~=�L��8�K���\n\u0012�\u0004�\u0012G�tΧ�[�<SW�f�yG�����E�2���=#�~W�T�\u001c�l����R:�^A��\u0007\u0016X�ƥ\u0006�a�����\u0004�\u0004<\u0010Мl\u0001�m*\u0019 ��E\u0004�0Q�+\n\u0005ă3���Օ5\rS*\"����ˆdjd�\rd�4e�垏\u001a=\u001cy\u0019\nVO�<\u0011�rX���3�\n1\u0015\u000e���\u001a�A��Fv��\u0019;�2���ΌK�\t�s�R]�kT��Aԟs�Կpg3�܊�\u001f%{�#!<�zz�]\u0002/��_ 6`�\u0010�0,I�\u0011\u0007&F�o�\u001b-�\u0007ݑ�d��\u001f�\t��͍c�Q�(d\u0012\u001a���cL(�K�,r��ث\b������$#h+e�\u000e\u0018Ùr\\pM{x`�2$ƿ�F3��1@}?Mz��O�:��1i\\b���[�`���x6�m�\u001f'���Q�\"�%J�\b��'���`iG�_\u0014:\u0004V}���42`�<X\u0013�I���\u0017�\u0006��\u001e\u00106\u000b�XҦH��\u0010��o�\u001c��|o�\u001fv\u000b\u001d��|3��w/\u0007}��|\reE��\u0004�+\u0002�f�g$�LtF�I���$Ǳ��E\u0005\u000fhV�@}�$D����#C�\u0000�����:e\u000b[c�\u0012`����\t;\tv#�ԝ\u0000��n�M�v$\u0005\u0012'��\u001d�>\u0000\tT�Q�\u0000qt�\tw\rv\u0006��\u0000\r0�\u001d���\"H�4��\t\u0010\u0007\u0016\u0003]\u0016�*e�Sj�fldO�%:�c8��|��u];X�I����\u0013J��is�h��j]*��\u001c�w��v��j��q��8�z�ے�\u001dcܞ�\u001c�qׇi��o�{\u000eD��ƏT�Oq��U\u0018-�d�\u0004��r�l��-�UG;���\u0006�\u001c�v��z��Yu.U'\u0018�\u0000$U�캿��4�\u001cr�\u001cgU���L���?L�\u001aǒM��\u000e%,���j Yˬ��o��\u0018�^[$�$��#oc��4K�\f9܁�\u0015\t{W\u0003B|�>F\u001a�\u000eФ\u0002t\f��Q\r4����c[\u0019\nʡ��\u001a\u0012V�v�#\u0012aA��\n��\u0005\u000e�Ƈ��\u0017*V&�\u0002N��\u001cehR��\u0011���V$50\u001ba6���B��t�\t!\n�V\u0012|r\u0012�\u0000�*\r�Z0��l^\u0001��\u0006�:c���)�T\u0014m�V\u000b|�u�t'���Q�>�\u00077�q�=G4*�trG����GW�5�vV\u0012B���\u000e���CI�\u00011�%&CB����O�\u0019VE\r\u0016J���{�4M\u0004�:��EbN�\u0012�a$�\u0012b�K\f��颼d�|�\u0011�~-�cƖ-T��ٞ������S�%$|���}��\u0000��\u0000\"�Ӳ�;��|�.6${l]�\u001e�/B��5�b�8�_&�L����C\bH��\u0004��\u001dv\u0000H\t4�\u0014�.�-��Y����L~�7ѝ���E\f��KY�m�M���aT�\u0019v\u001e5d�Dx�2EI�\bp%�*\u0002}��r��ck�4����}A�e�م\u001c�\u001bH���F����y5��b�|3\u001c�\b���D�\u0006y�=(���\u0013\u0001�\"���.��9Q\u0010��3\u001c\u0002�%z3�\u0007`�,�h�\u00008�*&�\u0004xw\u0010p@R,�\u0012f�O��%��ҫ|\u001d/K�%��]\u001dX���F��\u001av�x�&yӥ�\u0017�F�M)d���机;�ѻӗ�Z]�m\\c�\u001c\u0018�F�9\u0012��G���1E\f��n2^�!��s�J�cf�x���\u001fx|c\u001cV0�\b�Ë\u0015���\u0006��5�1��Bo��3����o�d\u0013��O��H� \r�+\u0006�a\u0011L{\u001aƱ#h�R]�\u0010�p\u0013\t\u0017d�w��\u0005�\u000e�A��\u0002\u0015�\u0011A��؊\u001d\b4�\u0005\u0004H��%>F\u0019.@\t\u0014�L��G]�\u0004Ic�\u0010�Y\"b\u00051�h+\u0015�$\u0000=��\n\u0010\u0000{����\u000f`\u0004�a\"(0�\t\u0013\n\u0012�1Ԩ�+E��/`�\u0006w\u0016�|s��-���\u001cӉ�`��w\u0016�>칋7g|\u0018X'l��|w���to���Ĺe}o]�+�%H�Ϛ1����'�mG��g\u001c�f��\\�/t�d\u001e���H�\u0016\u001a�˒ͥ�\u0011�\u000b\u001e%\u00184�aA�T\n�؛�(TI��\f�<�1K��ʡ��}�\u0011�\u0013\nA�b���4\u001f\fv4��\b[�\"���?R��E��\u0001m�/R��\u0004 ܚ\u0007{�\u001c�\u0001?,\u0000��b��\u001c�\u0019�\u0000a�$�Ni�!�X\b�H+ �IqˎD��ݴ�:\u001fD�v\u0007�N�\u0011��)d�_�G�~=�8tj+��>��x���}?\n�7��/����?�m�\u0000���M�2ľ\u000f\r�Oe�����\u0000��l\u0007����[{x;��/\bg\u0005�O�e_�>\fO�y��w-�\u0006G\u001fǲ��8����\u001c~\u0011\u001cpnʩqv_��o�}�\u0017�'��8�:t1%T�<���.=w:^]��\b�\u00128\u000e�ӽ�q]m�\f\u001c�\f��\u00165�.\b�r�U���\u0007�j?\u001b�8�H���,ݨ*�G�\u000f���r�t��g\u0014�\u000f�n�?\u001fυ6�mx23isbmN\rQߏ�\t��œ��\u001d�Vr�@���M3�ů@M�dm�\u0019�\r,���I�[�+\u001afm\u0013�;v�\u0004d-�P�h�\u0013��\u0016���2_R�e\"\u001a5�\u000fX��5\nP��(����\u0000 �Ա�rܗ(�\u0005���:�m\u0006x�\u0014�y戔F����+A$r?��I\r~\bC$��ڬ�!+F\u000e4Pq�;|\n�\u0005�\u0018�d9ߵ�Z��\u0019����v��#�#�g�,�\u000b�\u001eW��՞�z��K�pK\u0014\fQ$Q\r��dS��dC��\u001cF�E\u001dOf`u\u0019Rf�\\3��.Ԏ�^\u001cy;g=�v̍A��fNy|�ٍ�\"�F\u0006�>H�<鞄|\u0013}�lM��\u0006e� �\u0001\u0004���V\b�K�F�@�ܒ�2h�\r�q����3,\u0019w\u000f\u001am���)NT�o\u001c!���\u0002⋝3L��oa�X�v�#M��\u0015\u001e9�jo����dgn\u0018����:~��2��\u001c�\u0006��u]\u000bQ\r�.\u001a8��أ{./o\u001d�ZN����G�3(�M�y�\u0019�\u001f\u0000�� \u001eE\u0011\u0019\u0014x��-�\u0011\u001f||h[��0�C�\n2\u0000u�\u0000v$\u0006�\u0012b`�`�\tK�\u0016�3���Ѥ�\"�$d2|��g�\u0001X��\n|�蘎A\u000f|\u0001c�\u0006�8�\t1ԀL]�\u0011�{��0S���c�b�\u0004HD���2�5�\u0014�M��\u0012��E\t�Kc[�\u0002�\u0001PV\u0012t���I$N�}����\u0000\u000e�鿐P���6H��\u000eİ�P\u0004�\u0018I�\u000e!�\u0000\n.�R\"\\\u0006�\u0001\"cE�K�-�\u001aA��[�&�\u0000h�s��v�h�b�Ư��sGL\u001b^\u0007�;#o�\u001c�\u000fkQdS�)�\u001ch�O�<w>�;��̓�\u0013���\u0005�8�\u000eR�^�Ɛ�:$\u0002�\t�F�$�(��;0\n\n�kl^\u0006]��ADv�n�s�\u001d\u0006�\u00162v3�\u0016\u0014\u001d�\u000e�\u0002��\u0015�M:`\fؐ\r1���1�?�����X\t\t�\u0006N�\u0004�&\u0003�V:�Y\u001d�I�&�$\u001cx\"�k�\u000eT4��7\u000f���\u001f�g�t�?����<��\u001c\u001f��I>�\u001e��;`��.\u000f�����{�\fz�blPI\u0012U\n*���GS`��3��v\u0004y$�e�\u0006?f�\u0014��ʒ�k`��Ѧ>ŕ�\u001a\r.\u000eK�\u0005���$�\u0000��\u000e?�\u0014�K�x�\u001aI�G\u001d�F�;\u000e���4�v(?�d���j�\u00152�!��Q���r��U��z�2H��q�6����\u0016���R����?�\u000bn\t��z���_&�\u001eD��4wa��H\u0011>><����\u001a\\�����Y�ֺ�B����iSI�Ǔ�c��rB�\u0000k��x\\��vxܾ#����K�\u0006�N�l��<�\u001dK�NH�k)2Z%�\nȣ*\u0016�e�E\u0013�4�\u001d;D;�x�\u0000#$�����\u001c�ɎMS�z���\u0000���\u0018#�#^�^{�+|2�N����\\Ri�.6\u0007�Q���ȥ$�q��~K\rf�+,��J�:)j��q�i��E&\u0016�\\:25RvZϛ��\f�n6ta�є�e<���\n\u0002N���E�q���Y��E��\u0019\u0015\u0011�د��e�ح��*>���վ\u0019�u\u0017����|3��R�G~>�rM�F\u0006�ٕ��4�l��w8�xΜ\u001e\u0015�܌)�,��v��\u001a��Fe�\u0005`�Y�Ia!!���b\u001e��\b��ȴ(�H�\"(��ݘ3D[ǝ�pM�~���U�\u001b�+5zv\u0004��Ԫ\u000b5�5zv�-�K�\u0016s�\u0014�,�\u0017�R+�;�sdg��tG�ܕ��**9�O���\u001aq�\rN���\u0015ʒ8��:��\u0017\u0018�\u0011�l׹[\u000f\f�T�el�Q���>HԇQP��\"�R�X��k�\u0013Ag�\b\u0011\u001fz|xCX��\n�\u001c\u0001�\u00068�\r���I�\u0010\u0003ٜ�.\u0003�\t�d͐ϻ9fw��B�1�X�\u0019p\u0015�0���i!�\t24�\u001c�3\u0014���k\u001a��ht\u001a�\u0001+#M�[���$�\u000e�XXP�t2bLv\u001a����hI��C�\u0018C\u0000j\u0012aG�\u000b�Q�,5��\t0/�Պ\t6�\u0003̈́�cQ\n2\n�\u0002#�2�\u0012\t0(8���P�\t\u0003AㄲKlU�'*\rF��KjM�j�=����6�K\f\u0018Ӓ�\r���X��\u001c�2�\u0000\r���Yr�\u000e-�(B3�f���FY}���]���i���4�Xt�\u000b��g.�\u0016�%>QVq�1\u0015@na���@�\u0002xK�\u001f�`&�a��\u0000\u000f��T\u000b|\u0000�\u0000;�\u0007u�����\u0014J�;��!MЛ\u0000�G%�\u0003`�ح\u0000P�\u0004�\u001b��B\n$���7q�.M��A��N���]y\u0010�-�\u001e�\u0000�aaA!��\u00191��64���\u0012���M�$wF-�|:<�V��\u0000�\td��ͣ\t\u000e��LI�2d�=\u001fO�N\u0013��<����&�;<yj<3����l�3�8��đ}4\u0015�?�a�Pߓ̻5x�i�\f�vǸ/3��]٦�����!\tM�\u0005\u0014��{@��?&�{\u00144�H�\u0019q�=%�j'&I�>�|\u001c��X�A���L蜫�1?-[�NJ2x$��=ec�����\u0014��E��_�r���_�x5�9rE���%�%�b�\f��� Q%\u0000�L�c�I�Z.���t�]\u001e$�?�o#�o�=\u0013�X�_�����S�޾\u000f)��bjϥ�D[��<Ϩ�҉�v\u000b\u0002\u000e�M�{�񪆰X�\u0013e�1�a'�+ȊL͆�JL�\u000ft�&�c6\u001c]����64KF��_=\u0016X�\u0012j�\u001e���_Ǫ�\u00159%?��$�\u0013��vM\u001eu(��O�ڱ\u001e�-De�&[}�0�/R��\u0002i���D)jΘc�v\u001e�\u000e\f�)P����qK���3C\u001c���(a���%�J4a\u0016K|\u0015u/���SԾ�\u0005�7ї�|3��O�\u001d\u000e���s��\u0000��Q8��05l���-Zf^t�\u001c�v\u0014A26\u001c���\u0007�?N��\u0002\u0010\r��\u0005\u0011�\u0003\u0012J�� \n\b\u0014ǳ[!\u0002������l�E�\n=�%ŊS}�0h�\"\\3k��\u0007G��9����颲/Q�u�?\f!��ԑ��Վ\u0016M8EcV�EeN[R೗�r\u0018���&wcT�آ�&�:�އ�\u0012TǌRȩ�sH�:n�\r���'�\t)8��\u0000�\u001e�%��s.\u0005��Kǃ�e\u001c�\\�8'\u0006�\")�A5\f�\b���y��B>�ϐ�XH\u0011��P�\u0012c1�C�\u0012\u0012\u0018AaC�x\u001a�\u001c��4ƭ��\u0011��#\"�s�~\u001d�Dm��\u001aLdd�\u001e�\u0010�\rh�,�Q\t\u0004Ghk/c=C����bR\u001e�\u001a���\u0005\nŰ�\r\u000e��\u0013\u001d\u0006��^x\u0012c\r��JA�hx���lŠ�V/!(����\u0002�%�%\u001e\u0002Q\u000b\r\u0001H$\u0012��\u001c`RV-h\u0005�i\u0004�D��*��Q\u001a��\tcl�\fvM\f@m\u001c6T�\u000b\r`e�c��S�\u0011)Q���+e-6���O��\fX�iʭ�С�\u0018��+j���G�ɓ+}#\u0007\u0004>md�6�����lRm��M.\r�NK�̕D��\u001a\u001f��\\\u0000��\u0000��Ά�;d\u001b��0�\u000bs\u0019΀s\u0002r�X��u�H�\u000f�Ӯ�L=�L\u001b\u001d\r1��}����ɰ\u0018v�6�@l\u000b�\u0006�%_#E�|\r���Y6�\u0000\b\u001d�Ȕ��\u0000�<\f\fehV \u0007s���/\u0004M�H\u0012�:��\u000116\u0000\u0014{���\u0014$<�}�f�;\u000f�5\u001a,�Ǧ�\u0018ŷWgw���H�8�_'��$��N\r�G��;�\u0000�?3�-�Ml�˄��s�N����3�KO��b��W�\u0013�A\u0004-6h䂔\u001ai�e�|�{���e_��Q��\u0017@�5\b>y/\u001c.D<�KҎ\\Q\\\u0000�c\u0007\u0015�\u0016}B��d\u001f�L�8��Gގ,�\u00004բ�%K�h��PY��p��>�^L�R��Ǉ5���\u0019nEn��j4y1�(l:�%̐S�BV�<�J-�w�\u0012����zI���7j�4�$(�>ĸ�۾Nl�{����O�`�/��\u0007&�Qn���/�̚qgBJ^2ݑg�&G�#�J=Z�]7>y:�\u001e\u001f�1��\u0014�O���\u0000�Τ��vX��ǉm8�MǱ>�,��擷96U�>ㅋ�đ�r�CKI�|\u0012�J�\u0014�\u000f�[�;l�c�$�CI�\\I\u001dJ�H�.��h��$��3�\u0004[�r#\u0015\u0006���E� R!)��Z'�+��{\u001e/������Sz]J�7Q~Y�\u001al�.%(��xÛ�ԣ���\u0000\u0014��X3K�\"p:1d�\u001d�W�\fm�\f�\u0019+LX��\u0007w\u0011Q��40\u0017aا�E�K�\\�$P���\u001dG���\u0005\rG�c�%�2�}����2:-W�\u0003Z����'*V�U\u0013#P����q��ژ��Ûû\u0012)�\u000fbJ\u0005�ϑֈZ\u0005�m�����G�I�m�Ӫ*,VG�!���Y{\u0012��d�\u0018�\u000f��l�G\u0017N�X3I����8m�z,\u0018�;���gL;/t�R����tx҇�W\u0006_LƛLה�#FRg��tE�\n�\u0011�8.\u0015���|\u000f\u001a9��:�:���0ߎ;��?�\u00168=إ\t/�Q8C\u001f�Y���zњ�U|Q�cm�\r=\u0017�\u0010�\u001a�ڣ��o󞝭�,Yf������\u0013���7v���,rS����ѓƥٛ�ק��K�ǟ3�9ƾ��#��5+��o�D\u001f\u0010�s|T\u0016߰Y�����D$�\"^@��\u001a�����> �2\u001d0�\u0002�bA.��\u001fw\u0004�v�a��dS\f�l�]��\u0010ϻ\u0006r3\"�-��a&�}��Ԉq���I�P�=��\u000e$\b�jB�?\u0002�FL\u0016�(�\u000ft���Aw\u000b\u0016��c�4\u0015\u0012�\"��\u001a1\u000e,I`�h5\u0014c�i\n#��(��i\u0002�E&-\u0007�BJ���ZhZ�\b�B D�\u0018�E,l�\u001c\t���-\u0004���Ȓ:b�D���\u0002�?N6U˝b�D�=E��,���'��C<��:����i\u001e4�.Y\u0016�\u0004p�}��%Ƒ��;v2�Ч�X-�\u0006R��$\u0016�\u0007s\u0016�5�\u001a\u000bu+\u0007x2|2=�\n��\u001c���F�ě�\u0001\"x0� �醘\f}�xK�'CE�\"I>\bԹ\u0006R�\u001d�\u0003\u000eRTGlQv3|�\nد�\u0003m2@�5C7܎�~\u0006�8ʇs�\"\u001aR}�\u0004�|w\u0001���[�\\�lh��[ y)�/XV2uHRd[�@<�6Z%L��9��FP�����?�raY�cO��e?���\u001bi�zg�\u001f���`ËY�J��G�j��\u001a�\u001d�p\u0018�\u00169�|\u000e\u0011����t^���g�6��]&ϒ�V�-���=%�U�WS/m�\r\u0016�\u0019�\u0019&�Z�{RL����J�\u001eJx�g�1��!�\u001c{�\u0012�R\\#ٗ\u0012\u0013v�9s'\u0005���r]�zf��%�hAr��52������\u0016>��wq�����@JM:�>7&�6,8�]��t�)9w<�ᜥq=\u001c�a\u0018�O���Q��)G�GD��9R;2�\b��j��h\u001c�;୓\u0004e|\u0013z��\u001eLЊv�G�>��\u001b^\u0014炮�\u0007'�֗Q��rņ�q����E�R�D�]�<��\u001f�\ny\u001eL:<**��V\f\u0012�����X�3ϵqxsO\u001c�t]2�}�Ye�Q�,�tݲƏ\u0014R��g��MA&|�i''D���$��c>�S\u000fG��\u001b�'�\u00164H[��6�;��\u001bl�2XjC�d-��&��\u00112c�G)R\u0014g�i�D�\u0007N�\u001a���)\u0013C�n��斟<f�fD��՗D�G�t^��X\"��#wK+~\u000f*�Bz=B��[�ҺNe�\u001cd�tu�9\r�t:ڋ�{\u0019�i-���%V<�\u0011A�^�7Q���%����Ȓ|�$�7F^�ғ9�l�fַ-�Ts���I��n�\u001c��)e�#\u001fQ\u001b�������ܻ\u001cY\u0019�\u0019�}?��.{\u0017�6�\u000b�\u0007\u001bF�*E\u000fK�^��{��\u0017��\t���G��\u0017�^X��K\u001f� �y����\r��\u001a\u000f\u000f�\u0014p߀\u0017�gz\u001fC�\u0017��X>�ǂ�\"i����Ť�ɧ��{�m�����M=\u0016.�#)*;8�C�p�q�\u001b����1AG�܍�����g\u001ch�\u0018��#��v\u001a�ƭ0��#³�GT|2z�<��\u001atbf���{�W�u�3qM$RΥ9&��&RVqz�\u0000ǥ�\u0012�I��sU�兿z�zV|sqi�����˒M��\u0005#<���p\u00191�ri�\u0011��:\\�94�\u0011�G6�́a�\u0011�\u001e��\u001a�[�*\u000b\u0016�X�5\n��Q�f�C2ADV:`r:\u000b- �\t\bi2_c�)�`Q$�����\u001a\"hI|\u0007BHHM\u0001��p\u001dp$���hI|\u0005��&4��Hu\u001eG\n%XP�\u0006��1P�q`\u000e���$�\t24�Lv\u001a�Ň\u00128�H�����)\u0006�\u0001\u0011에�X\u0013A �\t��\u0017�C\\d\u001cI��!�>\b9>Q?1��a�*W�\u0019r�~Gϑa�䡹��2y\u001b<��M�,�Ym�h�p,Q_�!ǂX�e�4�\u0013g5\u0016�\u0019p&��&�:\r��Ri\u0000��\u0010��|�VE����\u0001\u0007`ɤ�\u001e漁o�\u0000$\u0010\u001b�L\u0005D���\u0015�O�\u0003�I�7H�{�\u0005��v\u0014\u0013��x!�J|\f�:A`Mt3|\u0000�`�T�!`H��>�1�\u000f�\u0000�\"\u0010\n_cJ]�\u0010��������7؆n�[�;\u0000CCX7Ș)�\"�\rLk\u0004%TC)\u000e�t�K>6�)\"/\u0003����L��f���{�F�����\u0000⊽o�CU��\u0011Jk�/�f�ѰS�Tj�\u0000���y\u001ddg�bw\u0004q]3�f�y�,֡uo��iuP��S���x1:�Jǫ�'\u000fl�=\u001fC.�ҡ\u001d�R�6tq9:��#\n��֜�\u0018�E,��[Q�V��Jn��o��>Nit�h�Av<\u0013�._%�\u001ax�re8�|0���c\u0004��H�R���f�^8vh�\u0019\u0014�MY��/�>�dS���\"�G$���fޚj\t�:*뺾\u001c7�i\u001c��G>�B8�գ�˩ϩ�y27f9���x1��]�V\u0018�,>�#��\u001dwW����\u000f�eB\u000e�A:�%'�\u001e|�܏AJ1�F?��a�Ԥ���q2�|�]X�:�+�C�d����<\u000e<a\u000b<>fw9PP�I#K\u0012�\u0004��\u001c�f���+qTzH��,�;�\b����C!�7�F��\u0017 P�$�\u0003� o����Eh\u001b\u0004\u0003�M�tȔ��\u001a\u0013�xQ�� ��i\u0012I�p\n|�6%:�h��r�R�w?��?S\u0014q�^��p{��K}\u0017V����>\u001b��\u000eM\u0019�eh��>j��/b�(�Y�h�k&�2��˫;��~�j���F�mBk�ej�\u0017i\u0011d��{�r�n�*\u0018�1��\u001b<�3\u001f:{�/�ey��2���\u0012�\u001e��/�CzG3��NE\u000fD^�b��,k���\r�C�\u0017�hzk�J\u000b�_\u0010�f�%��x��>�$�BSe5�^��\\��\u0007Ӣ^2�+�h(�'�/�C�\n��ʌ���;���\u001a�;�䩉(��95\u001aG>X����r@�o��HT�Ul����',p|��\u0010\u001d9U&�\u001c屪\u0019N�q����\u0014^����gLL���<�$�X7���$ܳI���(�FRf�\u0019�7�\u001a�R�\u001b�I��2v�?\u0001�������\u001a�p�f��d�\u00117X��Q���#�3Tr�\u0013�\u001c�J�V]�\u001df7\tI\u0019�M\u001e���\u0000�\\�\u0016\u0001_���\r���-�@؛�lV\u0002\t0lV\u0002\t\f�\u0003bl~\fCP�\u0015��5r*\u001d1�@\r\b!�h\u001fc\n�lI�!�P�=X�H\tlq\u000fB�\u0015�$=\u0004�\u00144Ļ\t\u0006���\u0002�i��d��\u0019*$�&F��QAPQ��R�ggRȈ�Z\u001e6\u001d!�\u001dΐ��H�\u0004\u001c��g&X���g�81ד>y�i��\u0000�\u0016qfϷ�e��\u0012����c\u0017.�h��\u001e�]�<\b��6�$0[d�\u0002r�h\u0015$\u0016\u0001�T�r�\u000e��D�\u00100�*\\\u0001�1��0/���S�g?�+�\u000e�\u0019:��\u0006l�>\u0004�}���ǏvD�\\��߆+\u0002�|w\u0012�\u00040��\r:\u0018\u0004\u0004�c��\u0014�[\u0000\u001eCE����\u0013�@\u0005��.�nW�dt%/�\u001a%�[�e/���\u000eËu�i6��C6\u0002A�C94\n\u0000��\baz�m�h�t;|1\r\u000bw�6\nc7�\u0003%R\u001d\u0010n\tH�2d�o����\u000bs%�TOZ�\u000bV�t��O��կ�y��s������t�@Yn=ώ��4���n\u001b�\u0012\u0013��E\u001f�S\u001e\b�\u0012�p�\u0019�\u001c~�]�\u0011��\u001c\u001c�%���\u0012�����_\u0000��S.\b�?e)�q��<nL&���c��T,�\u0010_\u0001F\u0005�8�6˚\u0011F0�9\u0011�\u0002k�K\u0002�-(\tE\u001c\u0012Ι�\u001cR_���\u0000\u00104�\u0000��4���4���IB-����%>�)W1fg��<O@�ܛ�NY磿\u0014UY���s�zڎ{�Aϧ���b�暧L�>��0�~��Q�����g�=�d�C&|���ھ\u0011\\,R�e��<���\u0006�.nM����\u001eP\u000eϱ�TcH����ؤ�>�=q&V��\u001c[�(���;]�*�f�%�6��\u0002\r� #!M��h�JN�`�\t�eX\u0012�6�$���\u0000Ih(ʼ�[\u0012\u001a\u0011eL[�\u0002����\u0011$��\u0001��Dm�\u0005I������\u000fv֤�\u0010n�$��ī2h�/ĺ���X��\u001d\u0003�>�y��Z�֨7퓣ұ�8).��x���r\u00150\\��\r�H��<\u001b��dMX�H�\u0016�=��v����I��d>��\u00192�Q�P�\u0002�?�YQ\u001fa4R*z`�-�!�5�V�_���\u0003�\u0017\\\u0011\u001c�K��*m����\u0007(�Є��G<�\u001bcV�xt�i[-�\u001ca\u0007I\u00150�\u000e��d�N�G���A��W��en�ډ�ڂm|��\u000b�\u0013�\f��j\u0011\u001aYg\u0018�X0�L���M�;�\u001a�\u0019v1l� �c�\u001b��\u0003&���o;����\b���1��Q\u001a��ٟ���m����ɍ8�u\u0015�⊝���tl�\u000fK��Ԝo'~Dh�ɱ{\u0010��b����),�U��ʩ��Y�?ZN�9�N\u0015\u0019�Ϧ��\u001e1���Y[R�؎�\u0001��\u0013\u0005�\u000b�\u0005�\r��\u0003͊�\u001d���X��\u000fb@�-���\u00106+\u0015�C�\u0010�\u0001D�+�5&&�<\n\u0013�ǈ(V4I2\n*��/�Ӧ4f�TE�\f�=��\u001e���\u0007L,,!�\u001b�?#�ae\"D\u001c\u001d2\u0018���\"E�Y���Ԃ�\f�\u0014�%o�\u0015ݓߡ���\u0007\fV(����(kuq��S\"M\u0019Nv�\rF��Qv[��P�4A��5s���\u001a)qFwfD���\u0000\u0004��L��\tˁ��Os\u0005�\u0003x*v\u0000ItC)w\u000fr�!��`�����JH���\tI|��\r�\b�q�\u0013aabN�\nhi�\u001a!aaI�#r憔�`n��\u0004M\u0017^G�R+�%\u00119�;\u001d\u0016�M�\"(O����c$�O�=܃�\f�`\u0001o\u0019>{�� \u001c݈h�\u0016-�C\t{D�ac����<eh�'t2c��I���Gb���\u0016�G�dw��\u0002�F�\u0011�lt�匄1��4�dM�:d����q|\u0011&\u001cD�CF��Z��uLm�>\u000fQ���n��<[O���\u0019�����\u0000��]F\u0018���x?U����>���gq�q(�O�4ਯ�J\u0010K��z]��/��#r�d���J7en��0i1��ȗ�����e7<z(׍̸�����Z�8擒M��1�\u0015*�\u001e!�]�͟ԖY��\f�?\u001e��=�u\\x�k9�ǳ_�2�'��[�)���,\u0014�$�.Z��ԙ�%N�_ˡ��j/³��S[�OѲO4�a\u000e]�/��\u0000�\u0000\u0006��\u0000�\f���~A�Ӟ�\u0003q��&�p�4�F�\"�\u000be��'��5rÉ��.��\u001fuD�m����B��\u0007��8��Ɨ�������RӢ�>#@��ܙ�EYi�\u0010==7L��\u0004r�v\u001ad�8V�Dɲ(�KK��%��f�佉�=�\u0005���[)\u0000L\u0011_\u0002}�\u0007�\u001c\u0004�N\\\r\b+\u0015�bR)2Xv\u000f\u0003X.E�\u0001���S�\u001b�\u001f}v\u001ad6X��f���;=W��J���sN�\u001eK�\u0000r\u0007}�\u001fk7饂O��:8�G'+\u001e�ζ���$t\u0001����k@�Ȩ*\n1\"�\fcc�dш���\u0002\r��K\\\u0002��\u0005.\u0004�\"\\\n����\u0019D�n(,\b�D9\u0012H�O�\u0004��%ΑdR\u0019N�\r)}�\u0007&Itu�ao�Lm�\u0007�\u000bonF�\u0003K*��yY]�Eƅ\u0010��x�)6G._\u0001���Rg�\u000f\u0005+dY04�Er[�SA�NMS�����<��ǂx�sر��-��4���P�2ԝ�&��\u000el�S{[�\\Y���&O�����c�\u0013ĸ�f3��#��ǒ\u001e�B&ã�W��#=�+�Lni���В�+G��\u001a�?����O�\u0007��Tx\u0007\u001f�Q��쵨��\u001d���`\u0002��62\u0001\f�]��\u0000\bk\u0018B\u0010�C�WC\u0012cX�\u001d�{\u0012cP�\u0002�X�+�\u0019>Eb�,{�\u0012\u00051ƤHQ�h�E�D���$C�\u0011c��$v�\u0019I�Ą��\rH[�\u0012M��\u001a�JDiPH\u0012\u001a$R%��䓓���BY$��䵟$t�m��Fy%Cn��Y�ӸA���\u0006�R˿'+�:y�>W��mi��\u001aG3���1�C�X2|\u0002\u0010���Q\u0013`�#\u0002V\u0003�\u0015'�\u0004�`��Rv�\u001am5܋u\tH�\u0010�\u0002����Hd��@\u001e�0�+D\t�jT�D��$Ws��>\u0000adtȷ�\u001eN��\u0000�\u0002\nK�6N�!��t\b@�%�d:(\u0007�rX~�ȇ�)4!P��9qȥ:\"s�\u0010�'S�\u0018�W܊\u000e�QI�\f��P\u001b�\u001a�\b}�S�\u0019�\u0001\u0001�9p2�$v\u0003�X\u0001bБ]M���\u0000\u0013_#n�=๒�\u0016!+$�+c�$�b-\u0013�W��_�V���R͑���~\u000f �~N�E���C�a�¥\u0016�ԏ;��Yq�N�\u001eX�_����A��b��NC�~c<���\"��\u0000��i:�~�=�����/�4�\u001f7>,��\u0000#��<o�O����I�6II����W)\u0005\u0004��&kt����>\"��\u0017X�w&e�\u001d�\u0010Q������K���7�\nR�̗�6?M�\u001e:ڒ�\u0019r;\u001cb��t^���sX���;�z\u000fG�\u0018:�4��_Şo�Ĵ�9���i����ߔ�4:��\u0004�Ɵ�:p��;#\f�a\u0017���:�S麈�n\f�{��u���6{_E��G��\u0012�i�yvW/��}fK��R���n�K�e�/�nK���!�t�w\u001a�\u0012����.I�}\u0012<t�ޑ\u001eI/�\\�H�H�\u0018�@��JL�BC�)��D��\u0000n�\u0019�\u0006�D\u0007}ư7}�w�`\u0010��A��3`\u0003�\u0019�t3�\u0003\u0010��ܨ�ՊƝ\b}��\u0019�\u0001���#^�T�\u000e�\u0014_�VZ\u0013E�7�l~)�z^�\u0015~ٺf\u000e\t��Qk\u0016G�W�$_)����\u0016�f�M�M>\u0018H���z�,S��-��#/��r*d�V�a\u0011���f\u0010��9�TH��Dҍ\"\u0019qbSL5\u0005�c9Ճ��b5\u000eŸ��\u0001�\rƑ4�J�e���3�W�s)d�X��ԧ~Hg?����\u0000�\u0004�W�\te6�\u0016�R�^GǗ�3�ˁ�ӗ6sK!�Ɔ�5��P�R����\u0010�:t����C�*\u0005N)�\u00035\u0015�\u0019�\u001a�\u001c�gZ\u0019I�\f��/\u001d�)�\n1�\u0000ʙ�H�9�w)��\u0004�䌜[N p�fm��h5%M�j\u0019\u001e8��觶-w�I'\u0005�r�9��Ys\u001eyɥ%V �M�Z��D\u0016I�ɾ\u001bY��\u0006\u0017&��[�f���c��s�k��\u0015.�\u0011#͵x�r��E��u\u001c\u000e\u0012n]�MWgF�bh� \u0002��hH��V\u000b|\u0000��5��:b�\u0012��2\u0011\u0002\u0010�a�\u0002±�\u001b\u0015�\n�\u0010�\u0001 �A&\u000b�\u0005\u0012U؊=��-&M2H���F�%A�H(�A�?C��&��<Q\"��\u001f\u0001E�\u0000%���U\u001a\u000b\f=\\�/��7�\u001bŪ\u001f\rb�,�UJ̍F�z��Wb�[��^�\u001f�\u001d#K�\\�/��n�y2�L��Wݗc�P�`�E\u0019љ!7O��\u001aN��'\\\t\u0000m���\u0006�\u0005ς�\u0002s�\u0005'�\u0014�CFD�\u0004��1��\u0004��x�HD�n�\"�!)\u0011�|�h\u0003�\u001by\u0015��\u0000���\u0003�R�pۀ\tT���d�\u0000%���\t;�\u0005:b�E`=\u000ft\r���0\t�\t1_�\u0016�\b\u0019J� n�򑡌�\u0017�F�\u0010A�R�\u0000��#)�#\u001e=�\tn���b����\u0018\u000flf��\u0000\u001e,w/�\u0013\u0015��\u0000��\u0007�\u001b��m�\u0001b\u0002n����}�)\u0012)}�?�b�O�\u001a)3K�j�\u0019>e�=\u001f�t|ڨ�IT_��3�z]V<��\u0017g�~\u0015�1�.��qkvԚ<_�A��[��vz�K��=6�'%�_f�(�\u001cj\u0011I}\u0010�IF�3:��\u001a>�\u0007<�R�\u0007�')���HܞX�sj1^Y�~e�����xt�S�\\;8�˿�\f��<\u001a)8㶬��f�i�e��~Y����,�i�pg�G\u0017����_U�s�&�%����QN��W`\\���8��\u001dQ�f�,��g\u001ey�⛋�d3�m����[�\u000e_f�\u001aN�2�UV]���2��h��4�sC\u001eK��2l�R�\u000b`9���\u0001\t4\u0006�lb%�+_${�\u0007qHD��pe/\u0000��!\u0004�\u0003ȷX�1\u000flkb��v*\u001c@�5��\u000fi\u0002�r�\u0006Ƙ\u0005)�\u0019r�\t1�\u0005\u0006�i�&\u001cYJD�$K/�jEhr�,��q�\u001ad���\u0000�j�n��'�xGK�[���\u0000��CYrao��\u001e��\\����O\u001f�\u001a�\u0016�A\"�VG�pK�\u0018O%\n\u0010#���\u0019�U��l�Q����bǑ�q�\u000f,��@y��T�^X\u001e�����\f�eǛ���Q�(\u0007��O �\u000b��&^�����H�'�\u0013�9�Έ�$��Rv:l\u000e���Θ�Hȟ\u000f�DX�}��}?�\u0014o��\u001a\u001af�F�-Β�M.5��\u0007?\t��yOo\n�%\u0005��(�ƻI\u00152���x0_~�$��y�|\u0002��iʉ��\u0018Uv\"��\t#9\r\u0003\u001d:}�%�\u0000\"ɧ�\u001bY,g�\u001f2�d�!\u001c����4E8z�|��mJ�۳��4���\u0011�t麏(�Fȓ\u0016U��\"�ȓk��lХ��-�\u001b��'��ts=6MK�������{��\u00138��))4�\u00075�܎Ϯ�T�8�L6�o��\u0001H�>����\u001d���!\b\u0000g�(O��b��V\b��\u0015� �[�\u0000\b��H�o�,p�R�cH���Pl�\u001c$��R�\u0004���H8C踱/�\u001cq/��\nՔ�0�(��4/O��\rJ�\u0016I\fE��%�!�\u001aB\u0016V�\"X�-G\u0010Q�w\u0003�\u001e\u001b*�bP,N(\n�E�)\u00115^\b���yd��I\u0018�_U)dX��G.Y_G\u0007#��5-N���n��(��QK��X�.��rR9�8=-�~�;ev\u0016\f��F�\u0017@4�l\u0017�\u0006�\u0019M��C�Fħ`Jt+\u0010\u0019X\u0011w�\u001c��8J����`�\b@>�;�\u000eᑢ��\t�S`_{c�^\u0007b$LV\u0002b��$�\u0007L�>\u0007A`;|��g*Cy\u0003'\b\u0000K [�\"��\u0001.�\u0002F�w\u001dJ�\u0017�[��Y%`Ŋ@.�r\u0002d�{��!.�\u0001�Ɉ@\u00039\u0003cI{�K��\u0016�ƜhPB\u000165�]�\u0000\u0010����\u0006�\rmvd�n�l8ȑ�&\u0015�جT2\u001dn5<o���~��Y�xsOn)|��\u0013�-\u0019y[őӯ��.\u0015�.,�\u0016G\u0007h�\u000f�=ť�8�e�mx<˪��WT�)g���\u0006K��n\\����.\u000f������Q*Iv\u0013d;�\f��B*�\u001d��uy\u0012vB��4����t+ ��&�K���\u0005\u001c��4!���&�5ɛ'�kO?j\u0018\u0017\u0004����د�\u0000�\u001e�c\u0000�;\u0019�=�6�\u0015��!9/�\r²�d�I\u0000��`F\u000b\u0001��\u00006Ę\r\u0004-�2cI�\u000b\u0006����b6ĤՌ�$\u0012j��`��\b��(K�(�q*���E�3U/��\t����d�\u001f��vu}��=SM�3�\u001d����->�ذv_�7�:�\u001ew'\u001f�e�o���>�WH\u0019J��,�\u001d�(�S�ln�MD�O���M�-����/\u0013d�\u0001,��\u0000�`�pm�\u0000�ԙ�\u0006�\u001c��)�Ռ\u0012\u0018\u001a\n����\u0003\u001eI��h�u)J�ĸ4���F~2�\u0017L���2����6��-˟�����M�\u000e�\u001c\u001c\u001fv�\f����\u0019�\u0016�%�Jj��\u0018��I�?\u0007\u001cδ���]�rOlm+d�$\u001a�\u0002�\u0016�\f��H��yg\u001e#�k���j��Kg1Dz̘�A�i&`�\u0012,��*樁��'Ĺ1%���r�\u001d\u0016(�m\u0019H�\"�xW\\\b��>�&#*(��.�o���_���g1�^���Ӳ=Ǿ�6���j��u�-�{ױ<��|R<�\u0000X�g$ΈJ���'m��H���C0D+\u0015�|��o#\u0013aaX�\u0002�\fNR@��\n�ر��{\u0006\u001b�M�����N�U�U\u001a7Xў�$�\f��K$\u0017dG�F6��~��\u0002�\u0016�q�q�]P�/¢�?�Zq�\u001d\b���]Ɛ4�f��\u0003\u0017��D���\f�\f�o�vJ�\u0017����.\bg�\u001e�\u0019\u001fr\u0017/k\u0016Y���dj\"�\f��,�6�N�\u0019\u001aE��g<�,�L�:g]��\u000b\u001aX���Y=<|��F�����ԫ�<��Zj�\u0006\u0004�緔\u0014�e8θ$��\u001a\u000eR\u0001�C7�\u001b`'T3dr� ��N�����-�;�\tS\u001dJ�\nc9�\u0000%r\u001a�\n�' \u0001�ك\u0017LJB�\u0002D�\u0016�n�\\�\u0005l}�\u0011�\u0000\tI����A_\u0003B\"�\u0002��$2\\�\u0003�t�����\u001b����2��D���_��=\u0000`�H���rK\u001b������.��X�]�`�ġm:\u001d\u0007C��\u0012��\u0018��I��x�y,�R�\u0001\u001c��$�0cr�S:���\u001e<�)�\u001f�].�G�;}��`r��,�\u001e\u0013 Xf��Gq�&�ַ�.\b�]�I��b�\b�w\u0001�nM>H�s���\"Xf�ӣ�ͨ��\u000f���%�7�X\\Tc�(G7\f3��\u0017L�=\u001eIi�U\u0017��d��\u0000��q�`���^�c\u0014\u00143�P����\u0012B\u001cpu\u001a=&�\u0018���dx��\"��V$����mw:\u0015���I������\u001e�\u0000V��\u000fP�\u0005���m��Q���䚜�?�*��3��P��ႈls\t4�\u0000�L�2�iE�\u001am/\u00079��,Y�\u0019&��Y\u0012b�\u0007bm<\\�k@�.�\u001e�_d\\�\n��}8�\u001e7���'�SQ\u001e,�(�d��\u0004\u0006kd�%�\u0011�I��{X��8M\u000f�me\\S��H\u0005d��5��6�\u0002D���\u001e�n\u0018�M�Ӡ<�v\t\u0007cX)ЬV�=�l�O������C\u0019+��A�\u0005`\u0014\u0015�0lE\n�\u001a�\u00190�\u0002��p\u0001waD\u0004�,x&���\t���$+&�\u001d\u0004�:��Ođ�Z\u000fv\fo�(�\fr۫��$�k�9/G��\u0000�R�r��h�#��(ȏ3�'4��\u0003?Y��̻�Z�\u0019�_,��A�T:BGZFlj\u001d!!��\u0012\u0007hQ�t�\u0015\r Z\u0006�\t�*\u00180&��\u0011ER&�\u0014�,GN\u0012}#��I�^����\u000e�x�«-�l�h��D��9�˵\u0010<n�nt��Dr�\u001an��z\u0011�)G\u0014m�\u001a�ӗd\u0006i)\u0011��\\\u0018H�mNL��Pn����g����sI�S�������\b�Fm\u001a\"��I\u0018+�M��M��\u0006�B*�讲���2h�\u000b&i���\b\u001dD��\"(fWM��:\u001e��eo��i��4u\u001d6m�-��L�K��\u0000P²i����=_\u0016��K�='U/�Y?��:�^��7��fs�\u00156B�<��\u0004���\u0001\u0010�3`\u0014+\u001d\u0002I\fm�\t �F٥���H�M���_K�0JSt\\M!�gK��s|\u0012d�\\D�Z���$J\\\u001bǳm�#\u0017\u0004v\u0012f��5��h\u0004'*Br:!�y�\tIPS�r��+\u001c֨yK��Nt\u000b�$m�\u0003Η����hς��\n9\tf��E��iς��\u0000�e3;;\u0016^�,�)��J�&쫨��'�˒m��C+ɩǆ.���Ʊ�W�����\u0013��.\u0012�8&�\u0000*8d��i��$�\r΢W�6M�\u000f��\u0011�\u0006R\"�I�P\u000e]�w\u0003)��\u00059\u0011oV4��\u000e�X�D����\u001d�e %O�\u001c��\r��Ib�Gb��%�\u0000:b|\u0000\tXWH\u0004»\u0000\u001dI�?���\u0002D�r�C\u001c�ص�G�T�6��\u0001Z/�\\p���O�a�)c�\u001c�&�f�֋M�\u0014���\u001e�B9��5>�,r��\u000e���g�\u0014'���<�u�c\u001bƮ�v1��F3MͿ�X\u001by�^�\u001ah��Y\u001f�\u0001��6�\u0003Q�\u001d�,���Nw\u0006�\u0010g����qI��\u0005*)E���X���KjDy:��\u001e��Q84�n_�喱huY�&�\u0017ȊX��K��\u001au>?����i�3r��b��\u0014�߹k\u0007F��\n\r���t��Y\u0016^�)7D/���%���8�����]�sGұ�T����#�\u0010�\u001f������!]CR�\nGA-\u000e(�)Cj�-����Yd�]�P}�_\u0011�O[��ҕ���Gj����\b��AEm�\u0005����9&�����~\u0013�}CU/o<\u0003\rng7m�n�O�:��i2\\\u001a\fO$����\u0016v��\u0018���x*M�\u0012�������\u001b�8m]��\u0006:�iq�?���+��3O�2l=k�l��E�nC˦Ecr�E�����E��1IE�������qdypf�{�Z�d|m\u001d^\u001e�\u0007'/�/_�\u001ey�*vb)f��-fT���N&֋��sʽ���x^F��Q�\u001e�8�Q��\u000e\u000e�\u0015.�Y5E��,�+�\u0015t\u000e=\u0016X[�˺n��%�z�\\���ϹS\u0012\u0019�(�|\u0011�t\u0012��x29Eo�(̆�y!)C�*�\u0019\u0019��E\u001c�qf�L\u0013����\u0014uP�k���\u0004�4L�N\r�\u0016��\u001cV;@�l+\u001a�b\u0001���t\n\u0006R�4�-�nd~��;�(\u0003��\u001b��\u0000\u0012��$dǰ\u0013\u0016�X\u0007c�F�\u0012��\u0002O\u0003���\u0005\u0016;\u0012%�\u001d0\"�\u000e\"l(�,�\u0013��\bb�q�1\b�?����g�t<�Ӱ�\b�mD�B_\u0014z��9wt�;�D���|��L�� ���O>ZO�\u0014�9h�U����6�7nJ�흸�\u0011$L��i�\u001e�\\Y�A!�\u0004}ԆJ\u001f�����\u001fR�m\"�&�\\� y\u001f���2s4�l�I|�c��Թ'�$�l\u0014��H�ѪI��\u0016�0�j)$���ͺ\u001c�e�.G��Dz�Ms|\u0019Y�sF��\f�u�nf���rƏJ\u000eЗ$�ƓM�\u0007O�y\u000em�#�摪VO\f�x\nrܸ3�2�n�\u0014���Z�R�3e�dSO�ᒸo�36�m��lz�.�#6�L��$S|،�J�/�\u0013EX\u0018�ܓGE�\"�F&�;��7t�l�G��ȑ��u���<�+�K��u~�,���=�2�����\u001f�\u001egF6Xԙ^E���V��m\u0013�-�В\u000e0�㉗f��\u0019kM��ؓO���b�ɏ\u0014\u001e��&Ri\u0012��\u001cks�\u000e\\��\u001d�����\u0012�\u0016��L��Z�BX�ल\u0012C'�q�\u0018.E�\\���+�$�7S�z<w�*`Ƀ`9\u00199\u001e�j(l��VR�K�]ʲ�qnpr3&�\tȍ˖3�\u001d��rXi�ܒ2� O�؛..��[#�\u001eɲ�\u0014���X�,?�\rLwb��\u0013}\u00199ً���SGF����.�\u0013��\u000f��'N�l-�\b�>\u0005���IQ��\r��@�$E)�\b�q\f��pw\u0002�\u0000\u000f):\"rby>�l\u0000-��*v\u0004�#LTM�[��V4w\u000bq\u001d�\r`\u0014K\u0019S\u001d��\nl�/��\u0014I#`F���]/.��8�\u0007�\u0001C\u001e�s왥���8�:�/,�����?{����\u0010��\f\u0018�\u001d�1�\u0018��O��0^G�/���ԡ�\u0016ب�+��z�]�%(B[��1��6Ir�2v�������;�\u0018�z��)%|�+`�z����M\u001cY\"���%x\\`\u0004���v�\u0007\u000e�S��Vli����E���6�\u0018���A\r�A\b��s\u0006�\u001c`�\\Xsu�O�<S݆*��96i\u0018��1�2��j�Z��sFTC���\u001d;$�'<��]\u0007�\"�P�'ݢƒ�[\u001a]�������p��/�����?U\t85�\u0000\u0004|�^��3uKgV��Y����.͖u]#Q=~�A�\u000bK�raԹN2��\u0017�\u000f�Z\u0018کWV�ɡҚ��\\�x\u0016n����2(���,�/\u0016FҦ�l��0�\u0012R�y�{&Z�؜�)xDy�yq�\f�k���4���\u001f�DK�ɻ��e�<�����k27ٲΓ$\u0012��Yi\u0011fl$ޣ$��k\u0013�\t6U�KS�ʲ�'\u0015\u0019+�*��>\u000fnIW�fr�\u0014SR����O�i�侊HVR�?��?�+���6��\u0000���,D\u0018�v�\u001elQ���<\t(�ڹ�?��J�1�������Iѣ\u001e`���\"��3�e-�1+�l8k��So��Q\u000eH�M����&�quY(�+6t}Ez4�V�m��6\u0005O\u001ff٤eBh�qj1�\u001c��\u0019Y[.�\u0014��]_��Ŭ�\ts�4�u+II���\u00146����\u000fR���\u001cZ�(��Ts�\\�&\u0016hb����tiV� �k�9*/j4�_\u0016P�*�CE\u0011N\\��Rw`Y%\u0007�\u0017+\u0004T0\u0010�0�\u0007o��\u0012A$H!!��$\u0003\u00185�\u0000@\u0004�(�#Aŀ\u0012@24�R�\u0000$�rX:�(2Hw�\u0001>f�q���\u0000�\\:N\u0004��<���1A/'�����`_\u0010G>Vc��'�r��\\>K2�\u0005\u001c�ᓏә����4P���1�&��%�#�D���1paP�\"SC�f�\u0011L�K�C\"�J���3�\"��#\u0014�!X3n�V٬U\r\u0019\u0012�D\u0011�82�:q\u001a\u001aynh��vF\u0006��\u0000P��e�F�Z;!f�nolU#/W�{ݫ5t�R]���+\u0015�Y�ȁ���G=\u001c-|з�\u0014�\\�3gq��?~��<٪;\"\u001e�r�����\u001c4�nN��&ɚ7�r��b�i�\u0014dˢ��\"���G���k���\u0018ɤ\u001f�\b�d44��arW/\"\u001aZ�\u0007�>\u0004Ad�\u0015�FΗ�\u0019ZT��\u001a�\u0016璤�Z;�G;T\\�\u000fn����*�$w��7\r+Q�纽ғr:`y��e&G���aŰ�Tyk�uєU\u0010���b8�no�E�U\u0018�\u0018�*�,���\n�JTZɬ��\u0017\u0004Q�}�\f\t\u0013H\u00139e�\"D��r#R^\u0001r\u001b�ϓ-�e0�ȭa�\u0010�G2�f�9\u0013�|\u0014!��2�^�\u001e�\u001f��eΈ�B\u0019e#�N8%�Ι���9�� ��u;\u0006\\��9~M���ݐ�\u0003.�ɛ��&=�+��6Z\rp��ɉ\u0011d���\u001c��A6\"\\���Jf\u0016_��\fmq��6�\u0013F7V��d�t]�ey4�wts��i�{\"II\u0000�9'������3q��2J��'�C��ɡ��0\\�:Cn�\u0010lk\u0003zc9\f\u0007l\u001b\u0005��\t7\r�\u0001��\t�VD�$��ˑ�\u0004�D�4�2ʱ��\u0000�=.�$�{W�7�M.�\u001a�\u001f�\u0012屈����Z}'�5\u000e�|F�u�{\u001e<{q%�%N�N��#�m����\\�sܥj$�$\tY���\u0013�)4��o&�~��\u001f\u000e\u0018�v&�\b����CXĆ8#\u001c�>K��\u001fM��\u0015��\u0000y\u0016����\\�e(�:uT\u0016��\"�4��#O,@���7��\n�h5)�{[�2���QO�\u000f\u0016|xҿ�\u0015\u0002/��\n�\\�cK���\u0014y\u0006|���M��x���j5Yv�8�u�\u0019��#�6ptL����\u0017K��t�ģ-�r�LN����QM:�GWѿ\u0019꺌�Y�\u0013Q8rM�\u000e��mi?\u0015�cJy��m\u0006�>�Ұ�JYq��\u0016�\u001f��%-F�,��\u001a��WD���|�\u000f�o�^X#����-9��xH��ZΓ�\u0012x�u�\u0000��K�~��o\fL���\u0007\u0017Xb�.2^�N2�\u001ee��hw5\u001c\u0017�\u0000\u0005-OY�B\r�\u0003=\u000f7�z\u001c�Q�'U�4\u0011O�1�Lso��=\u001ee�z�\u0017\u0006�w����#$�q4w}k��c'�\u001a�9�~�O\u000b�q�z\u0018�Ts��2j�M�\u001eJ���~�_����U��yi�_�G\\Q�1��Q���r,����f��O���Tя�\u001e��-\"\u001b\u0001�\u0016��]'\u0006��\u0004E�\"�Hr%����5jx�eFs����QoE�y+�\u0016f����$��:�]�!l\\��*�\u001end�\u0016F;�|��[\u0013\"\t?{$�E\\����\u001ad��\u0019\u0012v�_���\u0006�c`J4�\u0006�����8�7�e�/Q���?��VF�R�TgD���P����W͎\u0019��j�H�rE$�\u0005�\u0016��{��N¨�>\tA6�\u0005_\u0016oOd�$�ٛ�Ӭi��RV\"��\u0011��$�L\u0010L\u0011�\r�䒃��VF��\u0003@\u0003�\u0018B\u0000\u0010��\r��\r\u0012 �`\"\u0012|\n�>��\u001c\u001d� ��`O\u000eİ~�E\u000eĸ׹\t�\u0002։o�:x>�H��?�\u0004\"�$y?C���p���z�]A}#�}�\u001c��M��:�ܳ�u�;<��ƌ��ʼ��Q\u0006Y�\f�pΥ��b���L�s�\u00193��@�\r7�K��o\t�-G�\rfo������1j8��<�3�\u001e�e���e<s�S,F\\\u0004�g;�0�\t��\r.Q�`��ɴ;\u0004\u0011�\"֞u$�L2�\u001f\u001b࿦���삳�3wG7���?|Z�'\u000ez��83\\��g�gn\u0019פ:�\u000e)���������(�6̝^%�\u000b�������h��d\u001d�d�����5�_�\u001a�E���ܫ�k\u001awܧ\tNn�\u0016�\u0018�w�8��ЊD\u0019qmI�b\u000f<�4�f:5t���kt�m�r(h��R}�]:��\u001d�]�̃�\u001c��k��sE)7&���j\u001a��\\\u001cV�$����ݍ\u001e~^�K�4#\u0017F~]D���\nn�\f��FC'�\u0012`!�\u00131Ȭ�-$-�ql%���ƃC\tv\u001e�l�s\u001a���$$����{�PHvo\t�Iv%\u001b�>86[ǆ� �5��J���}&�b��\u0014y��}V�\"�6���\u001c\u0002�I\u0005iO�%9>�\u001b�-3�xI�I�XQcL�J��\u001d�s\u0011/��Hd$d�\u001e~hw`g��6����è�7�Y�gkql��Le�9�OY\u0012d�|��$>��A��2G��V\u0014�A)6��\u0003e\"���!��+��#\u0002h%!쁶(Ɍ^\u0013�le+\u0019�\u0002A lx��@\u0004���5�_O�^�U�+�>������-�\\��\u0017U걎=�ҌWd�L\u0003���\\UER9�N�z�=���l��d崉1�PT�2�J.1\u0016\u001cRkt�f�\u000b@E�K�r�\u001d��Vh�D�������\fY*#o��\u0005\u0007��D�y���]����}�\u0011�\"Hɨ����E\tq�$y) \n\u0011rt�z:[�YW\u0012��{\u001e�+�*����zlR��B<}\u001d�KZxJ\u001bc\u001f�y��V����kuI/M6��|�Ѵ\u001d\u001e��2a��ZH�:V�O\u0018�|S�<+A���q�9E\u001d'L���O���\u0015��fE$Δ�T{t:�\u0005\u001b�!����4�b�<Я��l\u001a}\u0016(%��u�̙j?\u001e�'��T�\u0000��\u0005�\"UD}�=���~WӰ��d��9��֊0{.O�9~��?�J_җ��8��wM�e\u001d&���qœ#�\u0012�<:ޫ��\b�Q��9�O�ؚu\u0007g\u0019���£�1HΆ�6yR�l�����e�c���`��P�a��/4��\u001eK\u001d?�V~vR�F����)�8�vѼu���\u001e�Y$�'C��O����zF/�zV\fqz�F\u0005�1K�\u0000�i�ɨM��W�%��6�5x�\u0012�\u0000D���Y���I�u��p��������O����*9����KC���\u0001h���ӥ��M�k٧1�}g\u000e^c����3ԣ�5� =>��%z��v�=dd������(\u0010�+�>��\u0014�_$~�+h��AzI\u000be.\u0000�9\tO�6LZ��l\u0017ܒM\u0003C]���й\u0019�����v&�4�i�\u000b%�\u0001�A�\u0000$\u0001h\u001d�\rPdrcN���[(�l��<2^�f\n�<Y�$o\f�KF�l\u0011�Q�R��b\u001a��,��.\u000b�D\b$3U��1'Aŀ\u0012\u0015�\f@��LC\u001cIP�$2�p���Ļ��C�H��X���q�1/q\u00064X\\+%�\u001b_�i�^�<�{a���8���zxre}�Ρ�DK��~��\\\u0019��ܳ�%�����E�\u000b�\u001c�*��&IR*�w)�x�<� ����D�6U\u0007\tr[���3�\"\\34�)xm�\u0014]�.\f�4�\u001c\u0007E�҉e44�\u0002@K�&5@I�\u0012\u0005�\u0011]\u001a��\u000e�8��Jqd�撦m\f�\u001d\n%��\u0004��\u000e-�Kz\u0019M�6���b���P�J�\u0016e�F~�\u0012ɓ�w\u001fO����Y�;�ف�n\u0012i\u0010�w.Y�j�L����3�ύ��%M$y�\"��z(<���l�+�j\t�l9+97-�Ѫ\u00037\r\bx��\u00114ˤt\u001al���r�3��+C\u000bq��T�\u001d>��\u0016��]��z9\u001e��nsL�'�nE��7�$��˜i��4y��Nș#�\u0006�F�dcǺ\u001fk\n\u0010v\u0002h4�I$< �8�\f�Ɏ� Hz,�\u0017\u0001G\u000bfL�\neXĖ8�-CN�~\u0002���s$H�J��^\u0003�\u0012��\u001e]RI�\u0014�j'�\b�K�NZ�pT���_'�_\u0006k��X�k��u�E�g��s�?P�,��)eI��u��qd�\u001b��)��o�/b�~BR)�|�)��b�f-̂\u0013$R\u0018&M\u0019\u0004�\fXq�\f�p���$��J�\u0011�_G��\u001a�R�\u0005\u000b�Q�;5�AJ̭LvM��~6kT��\u0013�Ce�Y\u0003Ȓ\u0004v�o�\u000b�\u000e���ƿ���7�o#n�\u001b�Ied��R��q`\u0005�y�t;���F�fu\u0005��1�v��3໳sW���K�ôU&\u0000M���V�J1T��O$�9��fG<���m�_\u0005�qP�#9μ4�,8EER$�\u0006+�\\p��}��G�o�>x��E���\u001a��`\u0014T��\u001d��#���I\u0015�I\u0010\u0012l$�\u0014R���ڊH\u0001I�D�〱`˕�\u0018;4��\u00174���CI�f|o��\u000bN��j�\u0006�\u0003R͒.�\u0011��\u001a\\6��6V�,���,I�6��(u\u0007�{TQ����e{x+K>L��&N�Z��K�\u001c�U\t(�\u0000\u0005\u001dG\\�M�٦��sjm.�^����l͌�K6N�r��2�e�\u0012���fo����qi�~�NF�\u001f��\u0000�h�\u00049���2=YK��.2wܝ��5f�z��\u0012{b�g�\u0004�N��J�)Z�+���'+C����WQ�j\u0019\\#�gf��BW\u0019j�4�̍J|�5L,����\u0019\u0015K4�������\u0000S�\u0000�T�@��)A\u0011l����\u0007����Go�n�-A\u0002l����oU����l5\u0019id!z��\u0019[�\u0015���\u001fE�Q�M�o\u001dI�\u0002�\u0019|��U�<fЅ�.&��\u0015���1��[0QAP݉�M\u00038��F��#|���\u0002n�R.9,�D\f�C(��g\u001a�X���p���E\u0007�\u0012��h�8�����\u001f`��ꆝ\u0013@���˘��� �I�\r!1Q��\u001b�J\u001d���a�sm�>�\u0016ln2�OɳV�#\tv\u0019!�\u0019���\u00190�\u0000/\u0003�a!�\u0012\u0012\\���ɫ\u001e(8�\u0005\u0005\u0005l�\n,��%n��$p/t�/6�\u001c|_\"\u0007�;?���\u0000��A�\u001c��\u0012�+�J\u0018�W�@�\"�Q�'l|�\n�%v\u001eIZ |ؒ�Ċ|��f�\u0005�p�*�\\�3dE%�!�bi:D2bE\u0011�.Ip:d2���L�\"f��J����\u001c�:iv4��61�/Aب\u0018p��3�@�/��\u0013�c\"�ƺ\tH�x���Gt(�I���\"�4�vV��\rn��y2E�\t�\u0015�Վ\nF�EѨ��GM�Ӣ�L�����㤏\u00137&M�wC\u001aH\u0019��8SG9�:\u0014\u001e<�\"�K���4C�Ĳ�~W&X�:R<sW�q�]���\u001e;���葛��U�\u001cgP�<\u0019䫃�Ş3)\u0019�嵈N\n�\b����tx��#\u001f�mKKe���\u0000��r~\u0011������*쎼(����i9I�8��\u0004��\u000e��w��(�!�\u0016�\u0018|�7���\n���6<<\nZ�iv\"Z���\u0007軏\nI\u0016\u0014b�����A<����FSV��.8��+�U\u0015�QZ�#8�IQ�f�YuS���C���%\u000eFp���=$E'K�\f�,d�\u0005<��\u0004�#��dr�\u001c�02>Y\u0003o�qgt#H�ͻ\u0006���8ųDh%l(����0�*�M�b�%Hx��=�����hd�\u000e���8����h�o\u0015�,\u0018k�\u001c\u00114\u0017\u0007<�ϗ��(��BM.ƒ��ƜyF;#�q�\u0007h�sZN�s���Z=�����\u001alV���\n�>�*\u0005�)\fNL��&F�D�\u000eQ>5t�vA\u000eƧC²jԤ�1�\u0005L���\u001a-\u0005v�%Ʌ��=C�|&]�ڶ�8E�G�4�5\r(ŹI��Ƞ��c��C�\u000e�K�?���4_�McR�\u001ao蛯~7�E�c�Pu��<���Gt8�j�3\u001e6�c\u0004=ø�\u0006����2�h�J�n<��N���5j\r��*���u�f�2\u0019\u001eԛ\u0014b�\"��-ҸC���i4�(n�ԤmF\r�:.��Qʍ/�kMӴ�d��^���Sնŭ<RFFmNL�nr|�\u0014OgE>���E�\u0010M�����i�=��\u0018��\u0005�/%l��e���6ܤ�\u000f�?UP�ћȋ�\u0019\"_#�$c��O#e\\���F��bt]�uO���R�P��;����Y\u001a�i�P���D���s����I�J��d�i��ǁ/\n��\u0004բ��R����FZ�7�FV�\r']�\u0019#f�\\v�\u001c\u0014s`[[Hi\u0013$d��`8���L|pE���\u0014U�?�\u001e6Zq\u0006�IШ���\u0016�XJ\u0016��4R�)pG�46R�\t@�\n)�n��$��\u0003l�\u0006\u0006t���\u0014f����\n��~�\u0012 \tI 剥�\u0006ֻ�<'RTM�TU���\u001c�\u00124���&�E8N�T���<���#L,ҹ2��%�d�/Bv�$�)c�,E�*ƕ�#���(�\"��^�(΁H%\u00002��ZI�h��qd�\u0019��E&M\u0019�\u000bU�'�9E�\u0002K��\r\u000b\u001c�3N\rf�����H����:}��?�\u00145\b�P�r:��#\u001b���\u0012\t\u0003\u0016\u0012!�\u0010� \u0000�a�cD�(\n\u0012D��\u0002�$\u0011 I\u000f\u0007I���e��\fM\u001e�Y�\u0013��cX��\u000b��1�$�-�\u0019��\u0015��2�9�\nn�\f _b$i\u0012\f�J�;�r\u0015�w35!�b\u0019�\\��^r�\u0010\u0001�x�AAE\u001bC�/i�hi�e�}��y#h��\u001ax��<J�w�-���$3Ds&h\t\"~;\u0012聺#��4��\n�'6N;;1��\u0013��$v}\u0013Jҋ�\u000ek�i^L����\u0000J��b��9�\u0015G��Vj��Tbi�\"=>:��\u0014|��g�\u0018�@�\u0001.,��)�\u0000\u0004�T@�����]�k4%<K����8�Ѯ<�\u000e�'��zl��\u0011�G��ϗ|\"��\u001d���;8ޱ����Wvq\u001a���o��~E�����G-�\\��q�i\u0015�g�K+���$2ᝑ9$Ǔmw �%��dY\u0013�(�8��P��\u001aI\u0013@����\u0018� \u0011[t\u001cb>�H��(����:/�v ��N<\u0016T\u0007��\u0007��\\\"��i��lWf��l|\u0017\t��+�a��WPv�\\���Vx���\u000e�'�R�#D��\u001c#�,\u0012:���\u00060�\rF�H-��M�\u0018��8ǀ�-\n�v�\u0019\"V��hJ@�0�AArd���vI\u0004O\u0014\u0006(�,c�\u001cY]#ц4��Am$�G�p� >:e-V�d���:���m��W\u0006wR�z؛�&9\b|j]\u001cS�\u0004n&��O,m��*U�p��3ǫ+4��K$\u0003F�ٕ\u0003Tl��,\u001a)d}َ��&�Ӓ�\u0006\u0014V����ZV�뿀�\fy�c����O7�GJ�j�ˎ��}V=\u000e�\u001c�&��}[��\u001dQ��;\u0002��ΏYӰbˋ\u0012���5�\u00005�\u0018�\u0006��E8arN�3��u�k��%)=����J����>e�\u001e��x\\w���o�N\u001a��0ͥ�6���g;{Yn8咣\u0015�K�OM��\u0017��|\u001fY�~\b�K�f\u001e�A�U>�/�mCE�E�vW\u0019�Cg��\nx�_FV\\����6���3��\u001c�R��Ʃ\u0019�5\u0012���e\\�ĉ�~\u0006慡nY\u0016��^yk�!R��P�h��Q��\u000f-�\u000f\u001c\u001c����M�C\u0012~��\u001bdІ��$ �$�6�'G�\u0015H�\u0018�.�u�/�b8e�q�/()��EIi���\u0014�h\u001d�F�1Zv�XS\u0005h7����ig\u0017´Vqp\u0007Y�Ki�Z�\n嫲�d<j^\u00154:����:]\u0006�Ղg!�\u0012�.Q��5j1P��0�'K[�H�>'��O���\u0013D�[��ԫ�\u000b65|\u0015�\n5�a�g��\u001d\u0001FQ�\u0005\"̠6Ѥ\"\n\u0015\u0013P�\u000e����\u0016�'�-�t\b�ДQcb�\u0016��\u0001Ei!E\"yÁ�\u001b�&\u0014A(�\u001f��b���>ϢEE/EWa�\n�^P�4p��\n�H̎\t\u000e񽽙��\u000f=�/�ӏ\u0000��g4Z��|���.��\u0018:�k��#9\u0013�|����Ú�ɣ�\"h\u0018�ɜ@\\2U�TI�h\u0018��\u0007\u0017�1�x�\u0015h~\u0010�K�3MK�\u00194�\r�v(��I\u001c�4�\u0017\u0019/ٔ����q�&\u0019S�9pC</\u001f���\u0000NX�Ի�k�3�����\t��Ӳ|Ov\u0007\u0016B�\u0015cC��\u0002�\u001e��Ut/\u0003�$\u0012\u0010��\f� �\u0007\u0012P\u0004�����\u001c\\�/'C�:k��I\u0014��9J��>��žK�i.\u0002�9F4�\u000bd��&��)�=���6:\u001bc�\u0013�'d4D�\u0014\u0018�\u0007L�h�\r\u00152\u0015�w-�\"�Tdj��|��ɲvd\u0012`�h��$q%�5L��%�t^ә�t˘\u0019�d4i���\u0006fi��]���\\�익\\\u0011�\u0017�Y�\u001a2ԎR\\�q�t�\u0014�$�H��X�\u001d8Q�t\f)>Q���*G%�*\r\u001dV�\"ښg��Ev{\u001cuF�%Q&�ୃ*��f\u000e�\u0007���ҋ\u001e��I\u0013\u0012FeY]���N��`v\u0005�D\"%p�\u000bfM\u001e\u0017���33G�i�94U�m\u001fo\u0006c%ѕ�<�2'��ٱ\\]w(�2�θ3�~�������K�oE���1)S\u0016���%�c\u001a\u0007\u00048-����`��8/c�/�9ʑ�(����5��b�<O�%XO36Fz8�S�\u0018K\u001b-(�7`��I��lڊ�\u0011\u0006\\I.ŉ�J�\u0004縸͓$�3�b璼�R���3���Ő���3\u001e:}��y-K\u0019\u0015Sg�\u0007��N4\r\u0007\u0018�\u0019\u0005\u0012�ʂQT:�\u001d���� �7\u001e{\u0003(�&]��b�Ȣ\"LJ��\u000fs9�t��N�8�b(�\tb(�ʏ{\u0007q\u001e#�=\rG\u0004��.�\bw\u0011PE�5f7S�oNp\\�9�F\u0007�O��q�FOT��\\��GD%H�˅4q��$m\u001a\u001a�3�&�)��M�3̜5!H����\"�\b*��~5_&�љ��'\u001fJ;����F���`�#+U��z<����\u0004����L��|v�3����\u001d\u001dg��d�x�.Zf����3�t\u001d?K�rP���e\u001f�p�|f`~q�囩�<\u001b�^\u000f3��ˑ_��,���̷(t�FږG������Vف(f��r�x4qI��i�X�t�\u000e0��͡�I9�l\u0005Ӿi0��;��%�<���s;f����NN�Q\u000e�G�O\u0017��7�p����z�y+�\u0015��\u0018ڭR�]��%�By\u001dπ4�g�'�#sI�o�x5A\u0018���\u0011j\u0018-phc�$�\u0005�zt�\r\u0014љ\u001d+�؟\u001e�_sR\u001a~;\u0012�L��RVgL͆���\n�=<%)�$��s���F�܋X�/�Rq�\u0017-\"��8\"�\u0000r9MF�W���pVٗ�R��`!��%��_�\u0010K6\f��9A�2\u0001Bq|I�\u0000p�v�\u001c�>\u001b\u001a�P����eao\u0016�1�\u001c�\u001c�c��Z�<��H��K���I���t���W�51�I\u001c�AԸ��gY�{��:�\u0006ﱲ��f����7%\u0015(�5\u0011�M\u001b\u0018�\u00174\u0006��Lj�#��4�W�Д\u001b&k��\u0018��\u0006�>\t�\u0019s�M\u0001\u0003�+\u0012��K\u0014�\u0007\u001a\u0015\u0005\u0010I!F(�HQ\\\u0012�\u0000�Q��:�$\"۠��><V�E�a�\u0004�l_E��U�-\u000e��¢��g�\u001cq|���\u000b\u001cY�k�.m��Q��:%�j��m3\u000fV�)�C�mɲ'\u0016ݚ*FR��)�{�,��I1�$��\u0012�]��\u001a�����{�M\u0016f⛋�\\��D�\"�pk���\u0013\u0004ZD{X�L%\u001f�|\u0015\u0011���J�.�\u00045�w��\"\\���hl3��&�>>\r�宙��<Kl���r��k\u001e�M)$�����\u0017\u0019���$��d�D\\���\n�eeX�$4PI\n�AĒ\b\b��zy皌\u0015�=�\u0015\u0017�&�Z���ؙ���\fP�\u0015�\u001fD��M��Ƨ\\�[#�z�0$�<��]�)�I�\u001f�E�\u000f��~��G.̨�\u000e�r[P\u000e\u0010�)�\u001a��\u0000eU��E�\u0013�j�i.�Y1p�?*:��\u000f.5����L��£#\u000fR�8ΔP��I��x\u0004R\u001d\u0005\u0016\n}�\u0016Z4J�\"t�\u00182W\u0005KWܓ\u001b��}��i�4p��Ҿܚ\u0018���&��|\u0000��G\u0019:\u001a�\u001a��c�����3�&RP{������\u001an�:q���M$t:-E%���������r���#��c�Ǝ�O���M,\u0019���WO�9����s>\u000f��c՝�f�]�\f��vY�'!�v8�8�41��!� \u0015�<d�(��Wy�\\��.\n�]�ϴ�쌄�5�܊�3�EL���+�,���G���Y��\u0013�}џ\u001dKK�c���\u001b�\u0012��R�<u\u000b�\u001dD\u0019>'\t+\u0018��w\u0006�*�\u001dJ��x#\u001b�[ǉ?��3��ăz�x@��A�\u0012�\u001fb<��g|< ����2��6*�f�B���\u001b\rA_t\u001cTWv4��P�F�6\\sƗr\f����|n�|��SɆH��)?��l�k���m�zx���Ft\u0002\u0015� Y���X~�\u0012�\"��\u0004ԓB\u0002!�Ŧ@/�X׸h�$ƽÓ��\u0017L���j\u001d���$�<^S>���C`���\u0013q! B@4�T4��]�\u0011Q�\t�\u000f��VKi\u001c��I,m�;��>���v�3�����Ş\b�%\u0006�$�����N��k�\u001c8�߇��ٷ��8gݎR�I�N��e\u001f\t��\u0018g\t�x�RE����2Ա\\�O/����=\f9T#L�t�F\u001d?���p�5=ST�l���ɝ?L�Sֵ,��'ٝ�M���)E$���b�'���ry\u0016��\u0017��;�\u000e�)�n�^���2�s�i��i�魼$]X!:��\u0015�4ư�#�u=7.,�[_�rm\u0016��Tz�_�ad��㏻�H�s���\r5Gn\u0019)��4\u001c]�3\\�`tq��K6�E�ϫ�K��t:g�Quf�\u0000\u001d\u0019E�]?B�N�F�\u001d>�T_��)%E�ihTj���N߂�=3�4����\u0013G\u000f\u001d�Q\u0015\u0019�Ҳ=~Lz-4�et��\u0000�c�j-�Y�ߖ�I뵾�)V,|4���6��FwY�:�g\u001cM�\u001a�3��o,��\n��\u0016M>yc����K��I.�I7eG�0Nʙ5kw\u0005l���Wm�\u000f+^\u0011t\\����Qզ�ֹ\u0012��YdN��51e�.H�xg=\u001c�v.iu\u001bZ���v\\ficO\u0006�-vl�:\\��\u0014q����H��SЧ'\u0018[!\u0014�7�/o�KS��5�\u001f�u*�\u0012i�12C���Z�\u0007o�\u0017\u001a�Б_gq(\u0013�\u0015| ���\u0000(Ֆ\u001c_�\u001d?�P�\u001d\u000bk���F\u0015\u0001\u000eߡm�&�W \t\u0011�\u001fD�q\\�\u0018?\u0006��\r�}�f�$�L4���k\u001c[m#ACf3\u0003�em��`�&_�2��}��c\u0003Q���e���lv��>Ş�Ҕ��g��Qo�s���7M�˚\u001b����Ҫ>�����\bF�\u0015C�\t�\f��;��\u00100�LƗdC��Go\n��<M+!�-Q�H�hK��͢�\u001bk�V�A�:|������\u001a�\u001c���6e�\u0004}���7��)ٚӄ�|Q&,�p�_Ӓ�4I\u0004T��>�\u0019%���k�h�|\r8q�,\\�\u0014n$���_�疓:�y���t��b�����?.-���5o\u0016E\u0019���|SiQ���e�Ӧ��i�=\"�?S\u001b�Hϣ[�\t*\u0019v\u000e\nƊ��\u0018��\t\u0011b��s�ӱ�k�zq�2\u0019}\u0013A�[��:�R�((ERGo\u001f\u001d=��ȗT��i\u0001n��^�vb���C�H�X���ؔ�Ig�\u001df�\u000f:)`/�\u0013a��\u0000�:9�˚\\��a<ꍡ�/B �\u0004��\u0007+��;.[;!�##Y\u001a��9�_\u0012gI���s[����J4gϒ\u000f,��d/�-\u0010�cF�N��أE؂��\u0005\u000f\u0011�Խ�|�K\u000b�c��4h��vd�~\b*#�.\t���\u0012bQ%�\u0005ܽ�\u0017؋\u0016>��Q��h�uB4%\u000e\u0005N薸\u001f\f7H�̭\u001dx��%8�\u001d_N����Rj��� �T���G�:��m?�-��W¸E��<�ӣd8�C�\fQ�!�\u0002>l������#u�U�{O��g��H�5�e�26������%d*#Q<`'�\u001b#\r�((I���phe\u001a\u0000S,��%.\u001b.c�5�·\f�393��\tY�\rD�z���%Hw4yr��c.��r�\u000b��H��\u000fd\u000e���}ħ/���\u00140�a��\u0001|&i��!\f�\"�%�b.祇�y<�6��V�\u0002��G\u001d�C�%\u001b\rA\r!6\fU�.\u0010���\u0010\u0017D���>��dI�i��\\��\u000e�x�Y�(�9'����\u0005c.�\u001cF��$�}��\u001d\r:\bC��GM|�\u0005�'�O2�[���q����Ǚ�ڜ+$y�G�@�����\u0003�ꍍ\u0017L�\u001a�Ӫt�q(�̽.�.L_҉��:\u001d�<�����t��\u0016�Vj�4�*��<���\u001e;]�it���(�j��p�^\u0011\n��E�\u0018�%vs6uF4M�\u0012\\�-h�\u001fY[�\u001bJ/�]\u000bRʒ�g$h��\u000e58T�i����z�ɨ��p��uz)4��d�<r��5L1���9������xrN9\u0015>�.��{7m�o���֛V�b\\ND\u001d'GZhR�z�Ȥ�E��\u000e�O$�����\u0011{\u0016\t|\u0012�\u000e�\u001a*4�5ak�.<L����H��-!Y��]�};���\u001f��#�48g7,�t�gu�)fqZm2�K���\u001a�ӊ&S�OR�e\u0018�v���\u000b�^�\u001f�e�����wg��9VE_&��0�p鿢�y,5T����sK���p�z��8�\u0000j�Fv�{\u0016rI�r��ɻl�+g1�vA��\tG�ģ@4�� Q�\tZ��Q\u0013�H��^�?R\u000e\r�v]\r�c\u001f���n��ߢ���]�ݣ��8��\u0014�F���<_�R�)j\u0017������EY.K�\"�\u0004�CCEz\u001d$�\u0012P��#\u0007i5 k�hd{W�3�N��\u0015\u0001\u0006���\u0016O�?\u0001B\b���Ï�����Q[\u0014\u0012h���ܚFr7�!��c��\u000eG�f�9\u001bߐ�{�G����G���w4ĎL�#�O\f�<��*�ee�ߑB\u000bn\b�����g�\\�ib8TQ��pm#[��\u00003�\u0012]/�\u0012N�Fь�T_a�피\u0006��&v:^��QKzM�e�A>S�q�����Qw��\\�&���A�ρh\\do���+�\u001f\u0006�\u0017�Q�K\u001c��\u000e|\u000e(�i���s\u001d[O��K�!�^�\u0012�\u0017\u0019\u001cƦ\u000f\u001eYG�}\u0018r1�\u0000��������*��nX��x�qt�̢[���\t>�,|\"�\u0019&�'��\u0016Sj��q���\f�]�:(���j4�\u001c��d�Ǒ��L����T�b^������G%�1�\u0005Vg�Vkt�*�Ӓ૧�mpla��\u0005G\\\u0015�pM�j�0 \u0017��e~���q��S�s�٪�ߑz�\f��Gؖu��\\�j4j���8�_&Ls���\u001fd�Qh׆[}˺\\��9�z�{��jU�1�6�H�f��)gᘸ�qHyk\u00153�J�Ժ-jr��s�٫e�F�ri\u0019Y�[b�L��ܚ\"~@��]͒2C�!\t\u0001�GC_#�*\u00046K��1N�\u0011�8�ٓ5�eUE�,��\u000b\u0006_�WI2G\u001fM�-Qn\u001d��\u0012��1O���\u0012�U�'�²* ��e�\roL�'gF3gD�\u001d\u0006�.\u000ewM>xfދ/nO\u001b����,��[I�KO���r\u000e�\u000f$i���\u0005v\u001d\u0011@\u0010� \u0011�.IpS�7�\u00162J�G#�}~\u0013\u001c��2cĉ:\n2=Lk����&HT4_\u0001����&�����C!\u0005�\u0016�\u0012�!���z\\g�f.�H\f}�<�\u001e�<$�H�!&Aj$� S\u0015�l0&�`I���,�\u00032>̑�>祃���\u0005�u\u0010S\n/��\u001c#�C��\u0018\b\t6�dr�\u0000\u000b\u0014X�N�\u0004���x�,a.bt�x�f\u000e�'��G�Ǖ�,�����bg\u001aGX�@��EP\u0007\u0010��\"� \u0005����\u0012Q��to4��\u000e�\u001dxsdVM�4\u001b��GK�����\\�`�\u001cX�^\u000b�NI\u001ae��aA'o�U9G���\u001a�rE�)zt\"LR~K9\u001b�b���<qpNh��\u0011�R^\b,���Rڕ�CE\u0007\t�]�#Ņc��Zt�����m�T]�F~���\u001aX\u0012�J''���\u001f\u000f����K����%-$Z��n~�y4X�8�r���\u000b_��9�~6���'\u001f\u0001S���~��Q\u0013ӥ���t��.����8_���\u001ej���>��5��ɦk�\u0003������O �\u0000\u0014��t�P�\u0000��Z};x���������R�\u000b��cH������Ů�O�a��}��\u000b�������\u0016d�k�9#l��gK\u000f�\u000f\rx4e�%`�*3�\u0018]\u0019��C,mv4���P�8\u0004�Kk�\u001bigg<\f�\u001a\u001b\u000b��GuУ��q�+\u001f�\\Z�@�8N��5��Y��KЏ�Pԥl�Kn*�2�I�H�6�\u0019�UYVv쵝�Wk��\u0010�%\u0016;O�\u0001�����$P�r\u0000F�\u0002H�.\u0004�,hd��\u001b\u0019\"Lj��i\u0012|p㱫���m��\f1m�4rO��d�є�ttG��W��d�M�˱�uY�ڷ\u0015�\u001dOS��\f�99E�#�:���:}�e\u0018�<��ß[���\u0016ʚ��Km���\u0005t�\u000e�.g��w�L'*!�<��aˤ�,y���R\u0019�\u0017i���5��\u001d?����<\u001e`ٞ��͗��[u#C\u000bY\u0017�`��u\u0012�5ϴ���ʎC�����-���N�\u0014�k4��'q8\u001c\u0012�xZ|��~!�ٖZLΓ|\u0013�\t�Gv)\u0016����4�9���c����]GF�):8ޭ�v)E�L�O�:�q��CҬ�>N��R�\u001d�%\u0017�\u001b�\u0000�E=\f⿃?�i�\u001c�ipL��\u001c��Vg�]�\u0014�\b\u0014�\u001dN��\u000b�}�u�\u0004\nD�_�YI\u0015�\u0000KzH^U\u0007�\u001a�W\u0004��q��`t-\u001eMWXǎ\u0011r�����I\f\u001a|X����\u0012�M\"2?���$�\u001e�����8�A�\u0007��<�I=_��_�?J\u0003�3��\u0015\u0006�ߑ�J�\u0002�5�w�_\f]�P�^;��}��2�b���\u0013�jɖz%ǩ���=\u0019�\u0004�I.�\u001d�F:�޳�2��\r�D��hЖ���,����l~��C�x��\u0007\u0012\u001cD�\u0018�C��\u0010��GB���z�J\u0001�7*d��\u0010IrR!��\u001e,��n覶��ƽ���ʒ\u0000�71d�ܵ�/ٓ�'�k\u0016O�\u001b���>\u000b�wL��;�_���9\u001d05��6����j�|3�y8$���%���\r�S;�.�5����MSg\u0013�ַ\\�\u001amg\n�\u000f.\u0007����G4_nCS_&.�V������2�F���Df��\u0017���Q�^�<��o'b�_'��FY|dNC)\u0011��;�S\u001b��NE�n9\u001aA��rSS!)�sC$�;��v\u0002c�\n\r\u0012cO�\u0010,AprfG\u0018�\u0012�CcT�R<��g���\u0010̓j\u0019�3@\u0015В�\t'�;T�L\u0006\u0003aݠ_�h\u0018��\u0006�\"l92\u0019:=,.��r\u0002L$�l(��L�D�v\u001a\u0003\u00192J�L\u0001�\b䉫�k�b�a\u0006�,1}\u0013`��j8׃)�k�Ң���\u0017V+\"ˎ�����\u0007H�.����=��\\ec[\u0015�\fPlI\u0007d���F��F��$$��at�\u001b�5����u��$�zm\"�፮JZ�\\�V�\u001dq�#�s�ѣ�\u000e]�\f1�\u001a*tǿ\u001a.�8����\u0000��\u0005ɢ\\\u001e�Q\fc)�g\u0002qj�9٪4�c�\u0012x�M�UÒnqUǒ�t�e!�G��\u0003\u0006�ˀ�s����.b�\u0011h�M�\\٭�ɺ\u0015��Ǻݢ֗3�?�\u0010��\u001a�KK\u001d_OˊK�F��~/7�~�/\u0013�ꎫ\u0006]����\u0019`�-^\u0005���f8�\\\u0019���\u001b.�9\u0013M\u0010h3��M>\r\bSE&c;�15=;��ge��<��n�ȧ�N�5��\u0012�~�S��G����J\u0017(�G�i�8��J�x>��t��Œ.6���\u0012���t�t���'mQۃ�N��L�5�\tKN��g588I�wS��.\u0015�0��Mk\u001f��۶ݜ�p�\n\u0017�\u0007����i���\u001cS�EM�DY1��+g\u001e�#:(��.6K��.-<��pg\u001eʌl����T�C��\u0015G'�t������x*�\r#\u001a6J�\u001a\u0013~�#=�H���\u0019Y��\u001b)\u0019ٻ��3�H\u0019#\u001a�CXj<w\u0001��cJ<�\u001e�0\u0000\u0012\u001fhIp3�C(\u0018�X%]���\u001a��^Ү�\u0007����f��Zh-��u�4��d�\u0000�\u001d/�3��y6�Q��I{`٥�\u000b���ܫ~\u0017GtcH�߬���vWE·�u�#?���(?�R�\u0016�H��a3)J�.����k?����\u0019]�\u0005�3=�c_\u0002�P\f����g���oO�\u0019��3��KnTΣL�]??\u0006����'G�������Y{�.No���9JU�5��޷Mˊ|�o�Y��J�������\u0015\u0019\u001e�$���q߬��,�A�Y!.\b�\r~��$\u0017�k�8nrM\u0019U�\u001a�J�7ώx�+\\&\f&��:��\u000f\u0004�rr�[-|3X.�L���eѿ\u001bͫ���ʶ˕����g\u001b��.�\b�?\u0017k�\u0000�i_�%�8�<[��!�<�\u001a=�q�\u001e2��\u001f��4�1�����\u0007]���y&�l�˓�Vf�`�\u0019#��q��|�|��G)-'��\\\u001a7|ѭ�W|\u0007�O���\u0019��K�D�C\u001f�^�\u000eň���,L�̟���\tt����I\u0004�!�L{\u0018��˞î���k�_\u0002�о\u0016=���\u0011��E-\u0014i�N�c�]��\u0012O�<,v�k6��\u0011��Ҹ�G]�\u001c>\f�F\u0015�\u001f\u0014�m\u001cÄ�cF�L�U�EOE�\u0004�l�dG��\u0000!\n�K\u0018�Z���\"�\u0005�\u001e\u0011\u001f�&l�$�(&���X�ІB�\u001e�o�^ǧ�����Ԓm\u0005�F̝6�Rv�~:yAv60��K�I�}���V�>8��%���==_\u0005i��YJ,��'�w\u000eJ�ebn<\u0016�?j%��\u0014���\u001cU��P⻕'.\n�2:�2q��7�z�}ͽ\u0016��g\r��%>�K�%�9�aL���n�R�����s\u0003F�\r<n���$d�2���\"�\u0010|Q'vx~geL��y<��/i�����ݔ���(�h\n=\u0018�G�.�\u001aA(��:�\u000b\u0010�_\u0001!�@$�$�ܱ\u000e�ll���s����H�\u001f\u0004�\"L8�L�l�1����p{\u0019\u001a���\u0002�B\u0006O��X�@�\"Bf�9�xE4A��X�\u0006O'�����\u0011�\u0014\u0000\n\u001eN���Y�ؚ$8��h���Ip:�\"A�r6��X�G�]�\u0011[M\u000f��;Q��:1��ڨ�R�%�-J��nOO[\u000b��}���T�\f�:b�C�\u0005�\u0000$���$�q�cE�Q�H�\u0016�����\u0015|\u0015�\u001fGn1˚+�3�iG\u001eԪ��\n&sK�?�gk\u001a��d�n�R�4��yF\r/\u0006\u001fOO6k��gZ]\u001cn]��I�X���ۦW�ؖ<\rK�,�0��pM�t�\u0012��\u0015d�{e_\u0000i!\u0018N۶���\\ۉ�6,ig'��cK\u001b�Sܬ��ġ\u000bul���H�*;SQ$��\u001c_�\u0007��S\u0011A��\f$�}�\u0002��=W&�e\u001c�jJ�9����m^ڌ���2�;�\u0013�;��r�{\u001fu�[�����$g\u0012\u001c�\\^�v)3\u001b۩\u0017�$�F~<�:�,�*��\u0019�\u001bD�]����\\]OE�\u001c��\u001fٷ\u0019��y4?D�L���\u001e����$�\u0006�f^zɉ��>����������[�3�?!�7Q��)b��>��<�zf�[���\u001d\u0019K\u0013��}�l�:x�R��\u0000\u0007g�\u001el\u0012��BJ�Z�s�\u001f�Œ2��d������7H��9$�L�e�\u0012|�K\u0014\u0014\u001d.J����Z\u001d=/�\u001a$�\u0005\u000eƶT��l��\u0006WME�֨R�H��0JR�Gg���yF_F��X!\u001a�wl�c���\u000ft��eMO�22�{:)�sf�F\u000f�\u0010O��L�{Y��C��#�Mxs\u0019]�\u0016��'�ڔ�qe\\�\u0017S\u0017Q�d�������K�X��H�E7�\ti���A��\u000f�\u001f�\\$�Ez�=��I��\u0005\"�O�S\u0012\u0017`�\u0002|�2�\u001a\f��.�q��\u000fܑ-��\u001aZ8�y(u�q��ih���\f��˯�5����w�\u0016�j�����0��Ҿ\rγ��]\u000b�F/���,�a^\u000fB4����j\"�I�$���W\u001f�[E\n9�*f\u0013TE\u0018�!�W\u001bC��MF8�Fi\u0019$gm��:�I�QhTR!�\\d��t��\u0000M���I9/��z|Tt�׃X#�\n:��ѿ�j���u�g\u0002�4�V�9/��o�\u001a�\u0015t���RMx9y\u001e��\u000e��~3%\u000e�4�N���s9���\u001e�4�����dVJ���'F\u0016\\\nv�fs\u001dW@��j\u0011ᳵX�t���1動v.0tseVi~%o�i���|\u0017:֥c�\f0��\\ѕ��-\u0016�f%�E�,�2ds���v�90}2_p���^O�b�,+�Yel�m�V����i�\u000f��G��h�*�h\u0017�.T��\u00139�J����\u0011j�Ց��v��q�7��\u001d�u$g,��\u001dg㹢ƈ��Gr\u0016�gz�^�\u000f�ri)*\u0006M\u0014\u0016f:��E�\rrI�rQ�\u001b'y[ ��E� |��\u0019����JI4��<\"%�\teE\u0015��[>�n\u000f�m��;<)\u001dx���Z�\u0007\u000b.,_BX98\u001b:�e|p~{\u0016�b�!G\u001fb�\u001e��\u000eI\u0017\u0018��ZU*��ŧI%E}\f\u0017���\"v7�(\fZu���`�s\u001f�r�h�#jF.\\\u001f(��N�����h��Ar-�j�y�i�\u001cU\"\\�\u0011�)\u001c�dy\u0019G,��>̥�ɦ�l\u001e���t܎�wI��zz�e�P���4/ڍL\f�пj5��N\u0019�KH@��\u000f\u0010���^\u0011<�\u0015�r�g\u0004,��d�����pCgq�\u0007aY\u0006�ԅcؙ\t2-�E�7%�'�'EU\"|L�*���>�p%�\u000e7�,O'\"�z؝�\u001d��\u0003\t\u0018\u001d>\t>\u0001|�ׁ�t\b�0�]�7�s��\u0001.�3D�!��z8�<�쁡��$�\u001f'D|9Qg\u001b'�V\u001d�8�\u0016�d�\u0007\u000e�Ǖ�K��\u0016��pe\fR-�\\\u0019IY�\u001d2W\"=C�!n\u0003#�y�Wg��V�R�L\u0016H�,��9\u001a;P)nt����S����Q����+�4Q\u001c8�)S:��w��\u001c�tGY�_\bEF\u0014��\u001f&�IqVq\u001f�q�oe�\u001a�����\u0016�9c�n��\u001a�d��tM��n���2g7�3w͝OAģ�N�\u0011��\u0011Ƕl(�A\u0007��\u0015�G��⇹$yrv��t�x��$��\u000f�\u001e85\u0004�\r��c&Y>\u0007P,�\\U���s_E�EE���e�\u001c#x�2l4�/�q�\nC�r/�2U$\u0011\u0004����)5~\u0004�\u0012!�\u001a�=Ĥ\u0000_�fp\\�K\u0006�5����ɣ�ǰ�B�%#ZQ�^�\u0011K\u0014��䩇U��\u0016��T�\r\u000e��YDx�qt�4s+�Eq�pe�>b�2i?K+*|\u0001�\u001e<�q�M?�����2��\u0019[\u0002��W�M\u0016��E(��9n��\u0016�x��\u001e��*�\u0006�|\u001aG#F�?����\u0006q�p_�i�g��s_��\u0000D.\u0013}��\\�\u000fTyS�C\u000e��X��S��\u0016\\�\u0016�\u0005�r�\u001e���9u��\u001c\u001a}'�����\b�>�ȑ��^�eҿ\u0014���<m/��t_�a�\u0004���\u001d�ŏ\u0014}�\"��J�Dϐ��\n2}#\u000ez\r.\u0018�\fK��H��QT[��\u001a�^\f̙ZL���vz1�H�4 ��DQ��O�/�\u0013��\u0012t��*�\u000fO�w�?����Y��+E̹[|2�i��.2hZ�e��\u0000\u001b�N;�\u001e_����e�c��Y�+@�$%ݦo�<�2�\b��s�̸/|x)K\u0013�=GQ�Þ-8�\u0007��Lr��8;!ʾ��.7��1�e�\u001f�\u00165=/.\u0016�N�1����SM\u0019j�jh��?�/{F����O���*\u001d��� ����t����g�g�=\u001e�.\t�I����OM�ɋ��Cy\u0013�i�ԗ2��.�M\u000e\u0013_����J��\u0007\u00198���&�ǲM��Ν\u0017\u001d˿�R��3�\u000bF\u0000�om\u0012��<m�\u0017DT�\u000eV���\r\u0010�E\u00128;�\u0016,.|(�\t+%��yr���t󏧦IxE>��XW�5�.j�d�ōn��$��Q���\u001a;_�H�uz����gc��\u0000l��\u000f�=5tޅ�\u0006ړ[���uW�\u0016G��\f�iQ��U\u001b<�uu�_�;'*ƿ���[�I�}�[���4ƺ9%>�/&�p�5�vܰq��b)r_�\\r$k\u001e�;_@�=\u0017���̤�$t�K\u001aˉIwFFτzxc�<�J�El8�ʑ}��G�4앾\u0003Jb��Ey\"6�\u0012@m:qva���B�'�\u0015\u0002��*4pI�EB���/K�.��!V.h�c���\u000e�[\u0010��.~Iv�\u000bo�jKd<����'��\u000eĘ�I؆�#�l��|\u0003(}\t���&@�����1�><V�\u001eG.4�c�T�\u000b�Zg�k�ӧ���tj�j>w.]Y��\u0017G:��D�q8�?\u0006Դ�'�(�`���9v\u001f�D�L�_sF3�S��c����8�����\u000e�*Tt8�qܱ\u001c��11j-~��u\u001cr�8��y&�����\\��R��dkut߸��3�H|�_$1���u���0f���#�l�)U����W+#�Th�\u001b\u001fM���4\u000e�9�\u001cJͭ\u0016N\fr\u0015gI�t���vci2{U�8�}�rE#IIЊ�/\u00023Ժ<~Q��p��\u0004SG��ƨ������\u001eJ�T^�\u001eJ��t\\�r��Ac���\u0012��\u0015���Hd�C�ي(�\u0011\u0012$�鑑ti�T�P��\u001d���e�\u001eNeL����\u0012\u001ct�K;X,j\r�\u0006�S$\u0004�\u001e�\u0019�m�نE�\u001c�$R�I)\u0011���`���\n�$\rr\u001c�\u0006��H�\\d��R2'�!�Yj\u000e�\u0013��1ԙB��%�k\u001c�\\��TK\f�w!�\u0012���G)�ல/�z�\u0016X��\t�m�\u0016\fO$�\u0011��b�\r�|*R���Ņ�\u001d�-D}^LzL\u0014�y��U'n�\u000b]�唥���6�~\u000f{\u00165�4yYs9�穖�憓$�;�\u0015N͞�rƌrJǊ��\bn�L�:|#\f\u0011�Y�h��dv:\u0018/N?���%j��+��iE\"}7��\u0004���\u001e\u001c��<���k�-���#�$�%].g^�rG�)�vf��>98/ig\u001c�5��-5���W\\\b�h�o�2I��fL2�+K��5\u0012�\u0019o#�m�%X�\u0001\u0017�\t��km1?\u0000�bk�t�Q,��\u0001u�\u0003�|v���\u0010�n?���6�\u001f�,6��f\u0003ȶ�\u0000�&�� .-\\�ܓ\u001e�'M��Ӌ��λ�\u0016��?���Y>=N6�h�RMpƌ���\u000bd8&t���K�$^��9o[$\"�O���nT��\u0014�C��\u0000N�+\n��0�����.��FW�nwԗ�\u001e�������1Aq$��\u0000�1�h�ޯ\"��c���I�!�eG�\u0013�ͭN��(g��)\\�\u0016�rN�\u00074���3rl�8T|&���+��Ry7&�\f�Ցz�� БIF��;�qh����|�JIC��\u0002�dz��x毹\u0016�wk�hvR�;�C,�`����&�8��\u0014�ʟb-?�Y�N�D\u0010e��q�F\u000fQ��\r�$t*E}Dw)q��\u001c�fr�9�>9cN�\u001fQ��\nK����V�E;G��Vsd�\"���p����tY0C>\u0007\t��Ts�/��\u001a�Vt\u001a|�ǆt�s��5�����3�.\u0018�O�\u001c��{d�o���j���)�q]w�97,�d��a*&Q�\u001c\u000eM\u001e<��S3�����\u001d\u0006�G�M'\u001c�j����2�/�4�L�t�}�.`�G\u001a�\u0017#.<�\u0018O#�q��\u0010��PEl�Q�ŝ?�]\u0002Z�Tuڋx����\u000f�Ĳ��>�\u001bX���K�ip��Â*1��e�-*GN,}��QIp��~U�X4y��Z�S�d\u001d��7��[-F_��v��8b�gT�\n\u001f�`y���\r{WftZ�@~9�Z.��U)r��͹�أ���\u0004YwE-�\"�\u001d�:I�,<5��O�z���m\u0019�0�\u0017j���r�j�7Sƒ܎�,��rr��HO�V��=e�3�y�t\b�\u0006�\u001aC\r\u0018��c�BPH}�JK����9\u001ea���mCo_\"�/�K(�P�!�N\u0006Y\u0010�1|è���o_#n_!��Q���\u0010��ۃ@��q\u0005�܁��*%I&4c�{M\u000beH�/ie��s����\u0006F��\n~\r\\8\u0016�QKD�l\rm>+��G�aI�?S�jt�=t=�o�:-c[Y�u\u0019R��'٦J�������*b�s�]S\"��?��\f��.r��!���,�]��rk4��M\u001dKJ�\u0017B�\u0019��]����k[m&R˩���U��|��C��P���f��jI\u00181�5�\u000f�k\f{\u00199���\u000b|���B4x\u001aF;�<\u001d3KG���)�'����\u000eYC�ͣ��isqܿ�2㓟�d�LІN;�Ӊ�Q��qV#69\u0004F���\u000fp\u0012`n�\u0001��,2I\u001ew%v\f��ث�-Ή�!���J�#\u001a!���!�<r\u0012F,�#Q\u001d*$��\u0004�0��\u0002���S�}2�7�k\u0013)c�%�R�����Y��\u001a,s��G�b\u001a�\u0011 7�9��\u0014ٶ3\u0019�G6�\u0013��2;��pxy\u001c���'ل3Vu#�\u0018�&�\f\bǒh�`�c�p#a @�t7���DR\u0013\u0011:�\u001e9��E$��\u001a�\r+�����s�\u001c����ʔ�\"\u000e���8��j�m��7F6�/.�Ӈ\u0002Ƭ2�ۤ\u000e|��)e��\u0014��m��2�2��\\W)$���=���\u001c2����I��rJi�Xѿ��Y�x:�\u001b��}���bq�'Q��.\u0013<���G\u0014M|n����a�\\��\u0005)�E��L�Ђ�}��&�\u0012�,�\u001a�_�@�\\e]�c4�Οrߩ\u001aTё\f���q�%9>\u001d!~�F��%\u001e(hd}���R~�Ǝ�c���!��fRT�\u0016!��fn�'D�קߑX�3���1,��3d��並�\u001a`Xɑ�\f==˻\u0007\u001cwG����\u0000\u000en�+���9�\\�Em��\u001a,��6I{X�v�\u0014�\u00006��!e{{\tp'�\\��%�������\u0015\u0015�C�\u0011\r�x\u0000:\u001f`\u0001^�l�'�|��\u0016�G�\n�8��B��{\u000f�,�\u001d\u0011�l��C�,�7��\u0003�n�\u0015�G�\u0000NN1l��Z��I\u0012�fZ�����R��\"�ҏ\u0004\u0012i��M�xj��r�\u000b>�����x�t큻��B�˝���&Z������cK�\u000e\n�V^��i�\u000ez���F\u0004�R�i\u0010��&�l�\u0000��j�H=�\tc=˓#G�b��rlZ�ْ��)F�k4��S�����\u000eI1i2�.�I��rc�L�g\u0013\u0019�����������rK\u0014��\u001dƷ�C%�)Y��:d��{y;�r!%L�9.�0��,�RFNm>\\M��\b㪜\u0015H�]�D��\u0000Kڮ��ԧ�cM�9\u0014�ͷ\u0015L�\r�,G]\u0007\u001e�v��ɇ��d��\u001a�.���s\u001cqo�\u000b��_�\u0006]B5��-���i%\fQ�!˩�Ws+Q��\b��Va꺦\\��&z�\u0016���_�u��Ƕ\u000f�s�\u001b�OU�Z�Z�I���2Yr�ڹ}ѡ<��\u0014�I/�lx�0˖�#��!�vH˜�ɲ]F]��\u0004y5��LIYc\n�8C�\u0018-����\u0005ѥ�g�/\u0006�*z{9�2��:=2����i\u001ba�HY�p9魭�.���y�)O5#��M4���A�ǜ�\r�O2�#Yy�t�\u001e[�l��3�y+<��\u0017�>�\u0013�mO�[�ʋ\"�\u001b��\u000b\u0016���6��U�>��\u0017�X��ڟط���E]�ꯐ�=Ys�_#���ꯑ�aZ\u001a�.��#��[�[\"�(����t��ʎk,�̓\\�g5-Y�pe���&��^ǝ�w9�&��ܳ��;�\u001b��l��\u0013N&��;��G=��\u001e�[&��x|��Q�n�JFx��a�'FgPɽ����o�\u000f\u0007|\u0015#��\u0016�\u0005��\u000bc�ňHL\u0016�V2\u0019&>榗���\u001d�,\u0012J(��.�|��<O�HT���zg�����\u001e}��݉�@���c�gf)\u001a�<�ѫ�w\u001b�\u0007H��\u001b\u001d=J/�O>h���f�;]\b������2O�]�A�c��\u001b<�π\\�l\u0013҄�\u001e\u000eZl{\u0019�\u0010\u0012e�b��Y\u001e᷆Ɉ���͐�\u0007\u0016\u0016R�>\b�sD��\u0004��\u0012����'�.KxY�\u0006Y�*�y��=>4�,|��\"\fR%o����IH$�\u000eBLb\nR\u0013�E2W؃+�k\u00039�D\u0013dc͑�����3�DÏ$p_$�:\u0011�a�rJ�0��VR\u000b\t!P��\u001bz\u000b\u0018�\u0011��)'�\u0016a����)GaP�;M�{������\u001c~�}��Q\u001d>�lj�<���:�\u0004�MҢ\\ښ�vQ�=��g�t����&J�#�v�5b�d��\u0007\u0004�gN8\u0011�\u001a}.J-6Q�YҪL����a��ΣI�2�N�@�j�7E&���F�,^8��\u0019\u001d�h�Ά9}���<����SřF5d�\\���y�6F�ώ\u0018�|�܋\u0014b����U%D�\u001c�n\\* h���<*\u0016�^\u0019��\f�)_<\nʢ��\u001e9�<&U�/N\nMY.,���%��1I��Y���W���\u0013&$\u0003�[{G�\to�$�%UE�-)[(ac�Q�\t�<����)rR\u0015�\\[#�;�\u0017^6�v\u001e\u0018#\\�\u000bb�\u0017��&s��X�<H3AC���/!\u001b�5����\u0007�Q�օ�<T���P�9;�l9c&�ƶ�1I|���˖�M�S\"��jUGS�\u001a��=,e�\u000b@�R9<�\tU�G�HҪvuyt�*���\u001d'�\u000e\u0005Fi�ry�J2qh��t�\u001a��W;�,�i\u0019������05\u0018�:(d����raR�[Q������@�4�\u0019���)�\u0012)�ɡ���ƽ�u�ejbׂ�G$��\u001e�e�:\u0001�Qo�\u0017-��I߻��ee�Y������T�w�(�O��iD�Ђr�bmE\u0007\u000e1�Mw3�9%'K�Л$ϟ��%������r�&\u0019�qq��GgC�T�R�t=;T��8}+���7t\u001a�%�O�L��b�:�z�7��\u001e�&��9�S,��+�gu�Z��oW��;��0��-�j&�2&��r��tb��>�����\u0017�G(7�ʳ���i��\\\u0018�.U37[ћM���2\u000fӚx$�9���\u0000�\n�'��\u001a\u001a���ķ4�35\u0011ˏ�-\u001b�4$`�8����ͷ�\u0000!�X�jE\t�k�\u000b�#e���9\u001ayu\\4�G&iI�H\u0014�|�V6�C�\u0005ȣ\u0016�H�\u0016\u0016���m\b�P��,��\n�4[R�Z2~�pTZ�ߓ��\n�Nn-�����ҥM�\tQR��/�R�&�&EO����\n\u0012n/��j2�mY�������TK�2^H^�����Wܬ�s������\rg�T\u000bԪ2�~;��}���\u000f��\u0000F��%�oգ)��\u001b�\u0017� �y\u001a�\u0000�Lg�_&B�%�>�_o'�5�\u0000R���R�L�S�^��}�\u001f�K�k~�?#�L~�W������%.3��+R�G�Oٌ����z�K�\u0016���5<�,c�v����r�-G=�l��Tu��t�}M.��\u0000�0pgtN�\u001e>Ug��M\"�S�/�\u0017Q;�e��8l��'s8��+D2}�e ��dL��k�$���`���V\bC\u0015�\u001e'L��~\n8�O�H�Vua���Eh�Ñ'�'YWɒ��ل�}��̨�&lBDآ�ꊚ\u000bȑ���Ҝ���ȕ�8��6�N��\u0016�M}�4z\t�p�4�ᆟ\u001a�\u001f'�.��ቫ���ө>�؀��԰샺\u0010(\u001fK�\u0013pM\u001e\u0015C�\u001e+��q���H�Y;eZ�#��/�D91pg�\u0005\u0019�e���V\u0011��*\"��İ��$�\u001f��<=��\u0015�-\u0011�\u0011����x���\r.��\u0016�bLm�̰��oF�2J��\u000e�XdXO��c��\"�Y#Ԅ��X�D\u001a����!���|\u0010�ɮ3\u001cΑ\u0004ȼ�IX\u001bOG\u001c�\u001e>y\u0005\u0002H\u0001\u0005�$Wɲ��aE��iJ�q��\u001b)J�\tL8-�$\u0006,r��\u001aZLP·d�5�\u001b-\u0005�I�l��]�j���6A�E\r~��N���m>Y�\u0018���&��:M\u0019���\f�$ܛ\u0002?fS�]\u0002�e�;VËD\u0018��\u001b8�d:�\u001f�$U�F4��\u001e\u0003Q��ɔ�0`؈�O�\u0001�<\\pa��G\nH������g��k�����_��w\u0005]��qѽ�W)K���j#�Y��t��Zl���5DD�Ó���2��\u0014�\f�2u��\u000e�ə��\u001e���ƌ�%Ł\u0015^KX�F�T�#A����D� ܾ\u0005��j�S�n���`�\u0017�c\u001bvC���E�=��Ɔ�P�J��(+�i9r�\u001f\u0012v��ZB��\u00077E�i�#w�\u0016.\u0015���\"�\"R%�\u0007'�\u0016�d���\u0000\\�}�H�f\u000b�r�u��}�\u0001��ZB�\u000b.�6�3�.m�S:���Ҷ��\u0000$��ʥ�\u0015�?��\u0014�-�\u0017��BY����^���i��(���j\u0016XFMy\u0006�\n��\u000b��'��ӵ~�%j�(>,�D�yc�Wˆ�T]�aPj�1�F\u0006~��m\"��L�ָڢ�}\"�t��?�Ӈ���8���d�\n&�Rе�r��s3ɓ\u001c�k�\u001a��Ñf]\u0016rc��ӊf\u001fS�^�\u001b�\u001eM�:��rXII\u0013F����8��r�rS�L��Q���̚<ySS�fN���\u0019\"�4�/����X!/��>�'m\u000b\u001c�y���~7�s�QZ}\u000f<x��/k1|9��i�bw�BPNѹ��f�\u000e\"��A;��q�\u000f��~�\u0018�\u0000�{�b,qSVѥ�I8Ʃ�TQ�k��,����lN��+�KE\u0017�'F6�+����GU�Ҹ�R�lr]\u0019�tO�>�-BU�c�7ോ\u0015.{�P�#�*�|��f�|��lR}���4����\u0015P��\tM]�cs�)���o\u001a\r��\u000e��rS�:h�.�\u000eH�\b�C��%���NK�\\\u00130uߏG#����9�oF˧m�h�Z�*j1�v�\u0014�ы<���x##�g����hE�Ga��\u0018����fFN��\u001f'ls�r�6�~\b�ؙ��><n2�$h�{\bB����\u0012�4(.W\u0001ˆK��((pѳ�yi&bǖlt�^JB��~\u0011~M���i�\u000e����$��[�(�5Q����q�#��CgFn[��\u0013��4V\u0017'�u��\u0004�+9�\u0019\u0019�e�6��l��/�X��\u0012>fZ�\tA�1zo��c���B�\f�K��k��od���%�tOC\u001a�ȧ���D}�+푂�/���ᛟ�T7�����LM��\u0019��\u001b\u000fI�fF��\u0002�~�ʦ:L�zW�%�\u0001� ��|S'�{�KJ�\t��\u001e�P�{\u001a���\u001f�Y\\\u0012GL��'���5�\u000b\u0015\"\f��P��/勧�G*�Q�����6<�$l��/\u0003\u0002�C��\"\u001a\u0010�\u0016�\u001a�I\bw*\u001bp.���h��.\u0017l���\u000b{��\u0014[:����|�\u0000\u0007oѱ\\x��~?��\u0010�;ޏ��!r�\u0019e�F�_�K\u0003X�.\f�F�՛珂޿4c��/�\u001fji�����č΃\u0015�3�~DU�9vK,S��\u0011k!��[�4�%ĝ��+e<Ok-�\u0017#���,(��\u0019cL8ˁ��\u00184]�K\u0012�/N��c��4�0D�j��44M\f|\u0001(S%SQ]�op�$@༌�� \u0013�:\"QgF)$��]�]�%T�̙�㕅�HK�����\u0011�\u0012>�y\rq����\u001b@�r\u0010�:�x�%��D�6\nE�.\u0019N]�7�\\�2#ǧ�Oڙg\u000e�l�e�|2��ia��Y��:���\u0016�_gf<_�R-��x0\\q��cg�9ˇH��;������-&\\ͩ��&��\u000b�Z��yMa\u0006ȜG�&���r�[Ǉ��s;qa��<u�\u00161��\u001c+�J\t\u001cs�z\u0018���\"��$�Hz9۶z0Ē\u0002�x��pF�\tqر�#Ef\u0014%E\u0019J\b�Ǜ����MW�0�d�$ͬ\u0013[-x\u0014���Q�f\u0019k\u0012Q��|\u0016#�Q����ék'\b��ɸ�繆�vk���>�\u00116�5��2}u\u0015�\u000b����T�����i��\u0004�0�\u0016�\\y���\\\u00161͵�!Ĵn�v����<���4����O��r��)\u000e͘I����\u0018ƚ3p�w-BJM.��#6]^��(Ǟ�\u0010,ь\u001a�G�t�&�D2ܟ\t\"H�\u0011F9�M%ط\u0019��Q\u001e\u0013�pM�r���rwص���iЋp�M\u0005�\u0014]E�b�\b�\u0013�\\\u0006�\u0019ũ$�0d�j��\u0006d��~�s�����J��ҔZf.�\u0013���/k�IQ�%�Lф�Aٛ����\f��)0p, ∣%�\u001cd;3hl�c�SFN���*��Vͅ$\u001d�\"��x�Şy��\u00194�m&�\u000e\t4�K�z\u001e�O\u001c�����S���dn+�)B�=�7;�Z�ҬZ�\u0013�I��'\u0017�^Z�mY��r���>y�|�ٲrՋ>�W,��j��흸p�MFZ�ٕ<�{�E��9_��(J:�SQt��� ���c_�/�ȥ\u000f��Կl�[|\u001a84�'\u001d�N�:n�<�]��\u001d\u0018�;�y��v\u0018A�>�\u001d\u000b�O.�d�k�w�m,}%\u0014�}3��0I��oO��\u0017&���\u001f2�l�1q�d��\u0007˦U�ٷ�\u0011�n-\u0015r+�ɋ�q����'k��?\u0005��ܣWE\u001c�P�D�\u001a\u0010j1�G�7��\u001f!�o�\u0002m�D�\u0016ۋ�Zh�Ͷ�2hC�߷�:\u0019\u001c��<\u0001?�H<��Y��~\nI\u0001.=�/q���,�n5E�.8b�o�q��Q��Ҹ^��M��3��`�,���Qn�:q��C�)B�YUr>˒�y��[&�\fWjͮ�\r�S�F<\u001f�Y��[Y\u0017\u001cP��C�#�Q����gm�\u001709]�Έ�yٽ*c�O\f$�?AD���\r���/�\u001e+}���.b��E�j`�Ӫ�H��E�Q�N���.\u000b��\u001cј��v#��/��Ԛ#iQ��N,�aMtf�\u0012^#��Z4�\"��\u0003��6V�͖�[`��&�p\b['Df~�X�C\u0013IG�%\u001b�\r�X�բ�qѥ۹�\u00180�+��c�\u0014��l|2\u0019`\\��8!�U\u0002��1�铳76�ۮ�G,VA=;�o\u001c�\u0013���M\u0013L�=$��u2�Z�F�Kɴr�s�6r�\u0000����K/�t�B�ߡ_/�\u0015�\u000b�9����\u001b���gQ�\u0005�\u0012����\u0000���5�9G���\u0019h��γ�Q�\n\u001a\u0018�\u000b�\u001f����A�N�e�='%&�\u001d44q]�<4�P�r�\u0018?��O\u001eƥtv�o\u0016���1:N\r�Uw4:�IF)_\u0000��|4V�e�&�E�&���/\u000f�)97�L�r:!\u0012�Iʰ�\u0017.\u0018��X8�䗆 �N�O\u000eMaG\u0007\u0006X��*�\u0003N���S���H\u0019e�%W?�\u001c��[�=_�,�w3�64r��\u0003�4}_��S9dl(��p�\u0016B���\u001cr�c=?�)����nh�-�\u001c�k#�㬎���i\t�\u001c�R!S!FG>H��q�\u0013��=��_#�/\u0007=3�d)K�E)r)K�\u001b|���Ț�\u0006�\u001e<�\u0006ÊY$�O�.M������N�x[<�m�鴷\u001d��(�U��� �\u0004�����yr�\u0018{bc��+��v�\n\b�\u0012���g�I��}\u0014���mԁ��J5�\tT>�#\u001e\u0000|���3�y��\u0002�|�,��9��\r,'̗%�x�\u0015\u0014q�2;1a+a��T�*�C(�s���ǆ��p$�\u0014A��:��1Hh��}�\u001e�\u0018(�1.�\u000e�\u000bh�\u001a�\u001b\u0019:\r�\u0001���2\\2�\u001azl魦:tK�->�*3�4mC�&\u001c�H��*�W$��3q8橖�f�ԙ��{�E�Ж�q���_-�\u0012D�S\u0016W\t$�{O��4�F4�)MS�[ǒ�܆�S71�{->\u000b�l�g,�ÚOڋ�2�6$��ǩJ��\u000e\u0019��ٍ�&�p���%\u0012�\u0011g\u0016i6�\u0013m�ࡾ�\u0016�Mm�\"\u0019��v�.'�2�d��%�9\\��f�\u0018���?\u000e&tg�gI9JN�\b\u0004j�*�</��$��c�4��-n�K\u0007�Wq$f\b�\u0012�\u0018\u0019�\u001c��d��S\rK�gU��ka-.F���ŧ֧�fγO\rD\u001cfsz�\u0016M,�ƛ�\u001d\u0011v��:��YY���a��\u001b��\u0017�k�W\u0002\u001e�t\u0011��\u001a�c�T���~\u0010\u0013�f�ʜye]V\u0018gM>L�\u0000׭�\u0013b֥߁�*:�F/X�O\u001e9O\u001f'\u001f��YGk�z^�<?I9W�7�衑K.H��j�q�z�^|�cnj�/��Q%�]�d�\u001a��EFVz��a���\u0006+\fm���5�/�\u0000_/�\u0000Tpz\u000f�\\���W|�nC�\u0018R����=N5�ZE|����Ҥ��p�����LŗB�\u001bq�1CC�\r�/e�]����S���#6cW�J��k�ZY�l�yi}\t�\u0016���� ��)��F~�RԽ�Ϝ�)6�\"F�\u001b�$f�vG8)&Pҷ\u0017v���ɢ�El�]�@�\u0016߸��\u0005.�g�4�B��g�|QS\"�_ώQmӢ�L,tU��M�\u0011\u0004��,I�>�J1q�\u0006���|rI\u0019G�^�Dr|\u0014��L�]Z2��|�,d�N�e+�vi\u0010�1F�\u000eo%ܐ�r,�R�5L�ă\u0002�՛�\b��HCj5�\\�=�EE�g5E.�$�$�������NR���)Q��Vy\u0019�o���S�V25��T�6\u0007ɡ��3�ǓGO\u000e�yR)E��;\u0012Ð!\u0017E�\u0018��99\u0011�|x�ew��\u001b����}\u000f�u�x���>�W\u0014)\u0019\u001e� };5ޝ\u0011<\u001c��jf�!G\u000b4��W+��\u0015�\u0016\u0014e�\f(�k��\u001cu�%\u000f�\\�h͎\u0007�\u0017��h�\u0012��%���N�\b夻��qBPB��\u0017�O��\u0017�m(!�\n�Z��A'ᄺw�,�Ǎy$X��n\u001a���\u0003�\u0005�\u001dv:/I|\u0001�v=Q�~��\u000f\u001d\u001dx:\u0017�W\b\u001fK�\u0006�5F\u0012�߀��6��$�5iP�a�1#��.��^�lc�����x�P)0�;M���\u001bo�\u0019z�����\u001b]O\"�&�sQ�cn'������\u001e7_�\u000bq�^�O�i��;|�s��TB�4�W+�\nz�F\u000e�b\u001c_GL|<�N±�8���,rU@)R=(��>?,\u001c%�\u000e�\u0019�\u001dƆT4�\u0013��I\r\u0005\u0010�F���\n'O��ԅ�\u0007D��-��\u0000V�T�R�\u0015!n1�l�Ñ�ʚ\u0016⺑&\u001cr�*�fk\u0015�k���O��K6NxK�&��\u001at��_�U����\u001c>أ�\u0016\u001a��{\u0017uZ�>�\u001b�7�!��5�Q6����C�e8�s���1�k��a(�a�U\u0016�F�rC�GDq\u0011�t��\u001dς�q6˘4�S�N9�:#���ҹH�ǇlyC�6Ɏid��\u0016\u00028F��v�U�1��gT!��R\u0018[�N�\u0014tA�|\rV8�\u0014l�\u0001!\u000f�j� ����!�\u0013\u001d\n��<��\u001d\u0012�\u0012�\u0016�\u00075�\"t\u001a��oK����Ǚd\\\u001c�v-�\u001e��>\u0018�\u0013\u0019�7Q�\u0016\u001c�v�A�<rJ��\b*��H�\u0012���˘���L�\u0017\u001ePPm�I��L��dN6Yܜxf>�-Gi{\fhii嶹41�MS1a�Z之%5]�H\u0019}��t�i?��'�6K\t�ipQ�\u0017p�I5䵤�R���V�\u0010ɷ��4m�͹QM�F\u0017g=�3��40d��I��2k�}>^{\u0018�Γ�ZǝEW�\u0015\u001a�*\n9Q��;�c���\u0003S�\u001ddfj��K\u0019��,\u0012E���q�Z�L��q\\\u0001,���c�?�t�䔧���cIe���I�Bȟ\u0005]N8�ܓcLg=-t�ǇQwM�>���mǃ;&�JU�ƨІ�5��<u�ir����W܆x�\u001f�&\u0006Ќdtڝo�\u0016<Q|>�=T0�J<R8-4�aͽɺ.c��jWB�YbMQ�j:���$K\\ߓ\u0006Z�!�w�5*2���ɫv�D\u000f['ߓ5�_ �|����E���\u0010��܃p\u001b�-Jŭ\u0016\u001eN\nZ���c�Ô�\u001bS�j�\u0017�u\u001b�\n8���W`�\u001a*��#�>��Zc�pZ��S��`�Q\t�z~�S���nx\u001a��Ȼ��a\u0004�@��\u001d�#\u0006�\"�=BJ-\u0019����gQ�5�GU\u0014�ج�\u0019o\fj�r\f��zq��3J�A�q)�{��x'��G��᪉[\"੓����;3�N��V:!����q�QI2$� %6�\u0005&CE�c�Q~?��ʸvS�\\��\u0017Vլ0p_\u0006��͖J�{��d�5v��dr|����d�\u0007\f[=8Α�d�D��I�\u0016Ň\u001b������m&��g�p�����f�\f\u001cp�4�w�#O\u0006���8��Ł2��\u0007�/��H�\u000e\n�\u001e:8�ggZđ\u000e��5rK@3�햕tE$G\\�I�\u0001�\nQb\u0015\u000e�\"��-�w+V+%\u0012d[�\u001b�\u0016�i�X������\u0007����ae���J~�^F���\u001f\u001b'r����\"�s/�he_\"��Ԭ��D�TS�U�\u001aʄ�E&[R��Q]d�Hς(��\u001d/\u0000�I�aC\u0007o$��>D<\u0005@��$�\u0010���0�|��S(��~\u000b�\u001d�\u0012�\u0018}kU\u0017��x0g�6��m~_S,�(�z?�Q�vH�\\��\u001eI��G\u0017M\u0016qǋ9��\u0011Se[�����ׁ\u0013h��ƞ:�2�\u0005�H��\u0000'9�t��F�\"�ԹL��Z9a��A{\u001f�ك%*<Ϩq�[D�n�\u001b���-\r����ԑ1��\u001c\u0013\u0015\u0005��\u0002\u0019���%��\u001e�naa�4X�D�-�\u0005A�\u0016�\u0006<�X��L���WA�qK3㷒�]^-\u000e\n�Nff��C\u00167�\u000f\u000f�1�\u0019e'nVh�5�,���ysMܛEW�S��s̓�\u000f]�I\u0004�H�\u0018�3U܋\u001c\\��pO'-�OG���g\u001c�uc�d80͵K�_K��\u0005�O�L���b\u0010I\u0018�!�\u001cdQĒ,b^�F7J���ѓvl�CEqB�iY*T'\u001e9 �$J<\u0011��3�G]�F��F���x\bn�H�1�C*\u001f�)\"�\u001a\\+\u0002�\u000e]�\\w- �t�\u0019��cJ��`\u001b\u0015�\u0006Ƒ\u000eB��\u0010�&G&=I�\u0001Ԩf���\u0016�2������N��&�\u0019\"��9\u001d�pM���\u0014��.6E���!B5fV���\u0004��l9q�\\>Ng���\\\\J�p˴�\u0014�1�\u0000�<5�/c̸���.��0�̕��J��\u001a(�SUH�\u0014��g❤�8��h�h�T�%��]��T��rhN�2\u000bx2T˱μ�X���Y�a\b�Ǖ7�2�-��3!=��42ߒDj��Y,3�\u0006\\3�l�eUܪ\n4㑿$�-*2c���E��X�\u0011��|\u0003�7σ9fnUd��J�C-���\u0003�~Y]�TG,��P\u0016g�Ӣ\u00178��U�|� �V���+-f�\b��-�[NƜ�\u001b�h��Ձ������S`��\u0015�\u0012]�\u0002$�\"H$��EcP�$\u0012F�Q-��2\\���d�bd�4:�t:��vH�Qs���UTI�[%d�]\rDޖ^)2�L�>J1�ߑ�e�s��qTI<��*�ɽ��r;\u0001>\u0004j�9)�(eƮTY�*}�&����\"���\u0014�7eܮ�)d\u0016Ƥ\u0019��f�-\u0016��,�&�ݗ`C�\u0016�\u0003\fM�h���sM��Lq�$-.5�[�0���LΥ���ȱ`�>N_$����;q�G�ȕ:*c��ݲ��F�\u000fO�ɧ��H��h�6#��'FƏJ�n#��jE�r�i�9�M��\u0018�X��T\\�8�%\u0018jR\r��\u001c�M�Qi\u00178H�$�ew�TC<�g�E�M\u0015�eJݐO-��L�\u0018W�\"igVȧ��)r�\u0005\u001a�%ᓛ'�]\u0001�Hh�#\u000b\u001d\n��%@<�-,h%�?\u0002c3���\u0003��4^(�\u0011K\u001c~\u0004�픭��+�.(F�\u0007\u001cq~\u0007h�)�s|Yb\n_e�c�}�\u0018���%�i2�8���#.Ŝx\"�V$��'F�ExE�F\u0012�\u000b8⼤J��\u00197e�� �vI\u0014�I�BQD�\u0000,{�x�%�{\u0016p����+atC�zn�c+�jw��㱧�%\u001c8Z���js9[O�݉(���ʺ��i�Kt���\\�qm\u0015�p���I�\u0014Xޥ�\u001a�\\2�$���4\"��\u0019�z-z��EW�Ir�\b�.�{\u0006Z|3K\f���<Y*���HJ�6\u001cҌ�3LlR�Q��ӽ>yA�I�VGM��\u001dn�M/��\u001c�N2i�Gl$x\u001c�\n\u0012�\u0014B\u001a)�\u0012G\u000eI/l\u001b4�\u001c�24�f�o\u0016H�tZ@4\u0016�F$0�\u0006CL�\u0010�o����cAA���\r�N��^�R��xF����<�vI2�:1�\u0017|�쯒\u0013���7��\u0016-�)ѼaFdtӛ���h#\u001a�^��8#\u001eK\u0011�\u0015��F�7�\u0011i��~��[J�@b{c�\u0013c��1m�%AB\u0012J�6(�Q��(RD�j��U�%�\u001cf��b���E|��6�my`�\u0004�C.®\u0001L'غ)0\u0018\u0012A$��CH���\t\n��-\"�\u0019�\u001b�;�0蝄3`ɑ94U\t�6��\u0019π[\u0019\u000eV;`>\u0007\u0003#��\u000e@�E&;v��\u001d\u0011b�5��\u00119{�kFr�g\u0006g\u0019$�s\u000fP�9��Fd\u001d0��N���J�����\u0017o�ބ���\u001a�K,���7���\u001a:���\u000ew��\u000e��Iv\u001dyD�mv �j1�m��\u001d�c7\u0017\u0013XdR𷥟\r2�)Y��T�.�u��R,��O�.,�����|�}3��h�\r\u001a��2xΊ��Kٌ�e>;\u0005\t�!O��HH\u000b1��I,�v))�\u000fqI\u0001edWlw�*n\u001a�\u0013@^ǨA�Mv3��P�V�@]�G,g��P��\u0016��\u0000]y��\u0010���\u0010��I�4K��\u000e�\u001a\t\n�\u0012\nŸo\u0003%Ȭ��\u0011\f�;\rv\u0012lo\u0003�Z`:a�\u0010IѢd�42C�:4R\u0015\u0004��\u000bw���.c�\u000e��#9Hj$�c�C\u0019\u000f��) �Ȥ�\t�Dy&�l{\u0015\u0015`>_$\u00198\u001d�#�D��[\u001bF$9���\f��\u0013g��ʲ|64�%6�ܫ>I\"ܻ�F\t>M\u0013d�@i�>�=F�i�5j���!���k��u\u001ds�9S��ŉ��\u001eG#T^��^[W�S\u001d6dK;o�6-f��tv�ty2�nٿ�T\\�e\u001f��]I$?���^;*9�:���\u001dj��9/�/�/�J#����!��\\�z�]�1�_��Ut\u001foa�Gc�Ͽ�����s��\u00004t\f��i�q��g]>�\u0015�\u0015�u\u0015}�I�.���L�q�\u000f��\u0000GT�ɿ�I\r]�g%\u001dKE�\u001a���|\bq䳫Ū^Yj\u001a�G+�P��.`�Z��R�m\u001eA�GS\u0010�R�����W)��|w2�Y��f��pF�ٛ��]��R�\u000f�/�5\u0016RH�1�\u0000V����|��\u001f/�7a��g\u001eTs�֮9,c֪�3�\u0016h�ӣǗ��Ts�ת�H�ʻ�K\u000b�\u001a,�ߎe��/�\u0001kW��\u0000�_$|\u001f�&��\u0013�:�a~�/%�>�e�K�|\u000f�\u001f4M�>mΟ%��}\bZ�2�P�^������_��<TD��\u0000\n����w��ԥ\u0017-��3�d�Q+�[�ʓ�8/�RJݰe�E�W�;�\r��e\\�Sn�\u0018�٥�uYd���,\n�\u0000s��k��\u0014y�&CA䜩(�\u0011g\u0016���� /S���+%;!�>\u00188�du\u0011cve6ji5Or�$��q�s)�o�\u001e�\u0007�\u0014�\\R��ХF\u000e\n^�����\u001a�T�w\u000b�\u000e\u0014V҂��?��_ �$�F��c�X��0��G���&���u\\��,�\u0017���ji8�\u000b�A�\u0011���i�L\u0015���4\u001e�W�\u0017��s�\u0019\u0014t�[\u001eNlO\u0013�\t6�U5�\u001aE�\u001aJ\\�,���5����~�;f���L��~೮\u000b�X�\u00154<u\u001b��*�['J0\\\u0019JVj�s\f�rI���g:��&9�ɑi�{\u000eGٗ1O�\u0019�\u0019\u00161ʗ\u0004�i��/����Н�Ì��M\u001a\"x�Y\"M�ebh�\n)\u0006�\u00042a'H\u0012(IP+�;c'ɥ\u0005���G.��FRA���\u001c�\u0012K�\u001c�\u0015C�\u000b\u001bp�\u000064�a7vF�N�.Hi\u0012�F�Lyy\"���C�%�d|\n����4�܈��PK��o��\u001b\u0002�!�G��E\u0005\u0012$_�:W���\t]��\u0017&�]���ΙRz���\u0015͙M��<N\u001d#I�J�3��Z���9'�c��'�[���'Ix3%\u0006�M�Xі\\����s�\u0013T���c�l��9�\n\u000eqv���IQ�)�\f�\"��س�'���\u001e��r�ܯ��\u0019��Y�O\u0016���\"�%Sv[��W�3�Q&,�ydY�7!��U��ɑ�Τ谤ז;3h��\u0013c�L��k͒�\"*,�,ǂD�\u0010BI��\u0014:%\u0015�)�:v\u0014 �\"�\u0002�� D�}�4\u0007�Ke�w\t\u0003bD�\u0012���\u0015�^He��% \u0004�\u0004�V:`G��\u0002D�L�I&\u001cXX\u0005|\u000e��X�(;\u0006M&\u000e�\u0019�\u000f`���R\"�\u0014X��\u001e�)\u0002�\u000ed���\r��&Jd/2^D�J-��DS�j�����\u000eL�w\u000b4J��D�\u0015��m��\u0006L�s#R���Z#�w�\u0016E�S\bM'�5�C\u001e�-�\u001a�D���s�\u001c1r�ॗ�C�\u0013����U�/�Q�d�|�\u0018�G\u001eL��;\rL�\u0000[�d���8\u001dT�\u001c������~;�ݻ\u001cݩ+0? ���k��K\u0013Ty������\u0000s\u0016��0�mg\u00150���-�\u0000l\u001a\u0016� V;���_l[\u0018�\r \u00151_د�[X�2�&����cS�\u001d'�4��\u001c$�\t0�\u0016��RE/��6���?\u0003\u001aE���%���1���h-[�\u0012���\u000el*\u0015\u0002l����������BQ\n\u001al�����j%_��E�E�\u0015e����I\rlזR�\u0014b\u001a�I�㭟��K[*����\u0012\n���v^Z��\u0000��\u001d|��\u0014+��E�\u001a���\u0019�\f\u001a�䳤�\\Yb�o�3�I���ܻY�tl\u001e�.\u0014�KH�-����\u0000���\u001a�:��i�M\u0015�9��*6f�5Y#i3�$��ƺ#֥\u0016�RriӢ=FY�w&Ȝ�\\��vl�+jc;~�������\u000eg���Jr�\u0014b4\u0016x�-v\\\u000f���+��(���EnemFY&�\u0017H��.d�c�ڹ�\u0019���u���f�q��<�ڙ����F��t�\u0016$����[!:1jǏa\u000e�\fV��+\u0015����X�H�\u0012&�F�\u0015c�,X�b.N\u000bU��)y�r�0�yg\t.b��0�&�\u0015z��M��\\�:�N�~V-�1\u0016;,i�=�W�P�\u0006��\u000b�xgb<�ƺ3:��aF\u000eY[�����������mx\u0013:b�\u00050�Ea��`�tX���k\"E_S�BvHYuN�&9��\t��C�x_\u0001E&hb��g\u001c��3��4M�0\u0017\u0019\u001a\nvI\u0019>�8dO�f\u0012N��2h�.�qt\u0012�\u0004����\"NÊE�\u001b�\u0001��5\u001f�프���w\u000br!��\u0000�g+�6�n�!��!ʂ�D�L9p�\u001b�i\u0013���\u0019%�O�\u001d�C�Q�\f��V�\"���\u0019\u0016\u001b��77�6�\u0001�&�Dя\n��\u001d��~9�r��)J<&c9��a\u001b\u001b��<�\"�\u0006���\u0007��:kơ�z^-.$��_$}J\u000b.f��qO1�\f]\u001cF}\u000b�n�e7�e��\u0000��KE}�+D��Dy-\u0013>*����\u0000-k�\u001dt�����hW�P�E\u001b����3�C���bw\u001bf��9\u0014�飡��5�\u0012~�\u0015�E,�#h��tc����W��'�tKI�A��c�m\u001f��S�\b�;f�%]>�J[o��<�곔����&��m[��3JfM�Dr�HdW�24�ۏ,�\u0019�\u0011��2$Y,��˗e��2�D�v�*tV��%��)2I\u001b^\u0007�\u0014e�WV&\u0004��\u0000k\u001d�<R���\u0012Z\n<݅\u0012+�-̆2T�\u0015�\u001e��$�t�@��!PjI\u000by\u001e�n\u0018�'.BR�B�-�\b(�}�\u0016�Wy\u0012\u001a\u0019\u0013\u0001�7��\u0011z�g�\nƑ4d�y\u0012)<��\u000b�~DR�y�5�+��&�*<�\u0000h����\u0015��\u0002�5�]˹^r\\�\u0019ue\u001f4U��c���p-\u001d\u001b�\u0018~�QOW�ƹ�����R�Zm�2��4�tRDˣ��ԡ\u0005{�����}7N�[>��)+�@�>ܚF&2��E�oR���$�3�Z����dr�E'O�Tr�M�Ƃaᕶ�\u0001���a�+_&�щ��sG\u0016X��_�裩��v��pd�����\u001c���ya�NUŝx�薔�8�hy�?�k��u\u001d5c�㴋�+�\u001f\"�\n8\u00139E����\u0000B׃��\u0015x�\u0000��F��\\�W�\u001c����/���V��8�\u0015v\u000f�A���\u0016�_\u0001-\u000b~\u000e�:\u0005�\u001ct\u001fB��5�G$�\u000f�\u0017�|��t�\u0000��ӯ���\rq\u0011Ǯ�/��O�y;\b���\u001a��A�c�Dq���\u0017�|���\u0000��\u0000�\u000b��\u0000A�A���\u001e���\u000f��M���\u0007܇�$r\u0010�K�\u0000�\u000f�\tY�G�}\u000f�[��\u0000���%�G �{\th\u001d\u001d�z����\u0000/㰾�\u0007�#��\f�Z\u0019\u001d���C���>�l�Ahd?�u���v�\u0000�˧�\u0015�a��䣠��K���gZ�\u001f_�\rh)v�\u0000о�����WO����G�ɿ?�룡�\u000e:\u000b}��\u001fr���3:WF���k�:�$q鱸��M\u0006�8q7%�\u0019�K:[��+�KƑ\u001e�JnT�2�{�\u0003&y�nE)�����͒V\\\u0015\u0013�ȓ�j��eV��4#)��$r�r��0r.����Z��7t�Y\u0016�D\u0013��ff\u000b�bY�۹%�V�\u0014�쩊R��տ\u0000�$���0-;%ɗk{{\b�\u0006�N��!Yt�Ѝ\u0012$\u0012�����Hz� xa�\f4̤��\t\u0007.\u0010�-\u0010ĕ\u0007\u0010D�b��2�J�'\u0007\u0019.\n�VZ�q�\u0016�\n��\u000f����I�|\u0004���ث%�v�\u001dx����,7�w�aY06q�C\u000eپ\u000e�\u0016e�\u001bdV������bj�*=Q�IP/%phkts��\f�͎^\fY-\u000e��R��1i{����\u0004�M��5$W���}���/��ܱ�*]ٕ\u001d�Y><�=�\u001a��61I>ŬNI�1�g���乃4��Ѥdj���\u0012�;3#6��|r���F��mdk�޴���Q�W\u000f�\b�\tr���\r�.�yW4ZBl���\u001c�#s��I\u0010��[\u0014�!�j� �'5ܢ\u0018�d��ˑ��!��d��\u0005\u0002� %0\u0013a9 \u001c���J��\u0012�ϑ���\\\"lX\u001c���N��>H�81���8ܼ\u001f�=ne*��O�,:\f{i)y\u0003�����\u0016��,�Y\u001eME�ɳ�˒�O\u000e\n]�s�%\u001d�*�sm�e\u0007��~��ql�I\"�B�\u001d�!��$5\r2�hL����H��\u0019gL\u001a �\u0004�\u0003���%�ԉ&\u0005�3:��\u000e��ͥ���&�F\rɤ�'��y�[�f�.�MB\u000f��t���#�c�\"�H\u001e��Ν�.�5�5����̒�rn���N�E��S<�������\u0019��'������F�):2�N�#O\u0014���K\u0014�*,�3����\u001bqvJ��\bIR]�R\u0000'\n���A_��\"\\O�\u0013#��\u0005\u0007k�\u0019i���}���MP��5�BR�J�\u0005/�Yh6�s\u0006R\"�m߂J&SLm���w�\u0005���\u0005Ǒ$E,��Rͪ�S�(��\u0010�m0�\t�W6]ˀa������\\�$\u0019��?j����駨�\u001b��N�\u0015kr9�GV�H�m\u0019��e�~�\u001a���2u8B7�����5\u0017�ͼ�k������Z4�ճI��C&�&I=�l���\rF�\rɵ̙\u001b���U�$\u0017DR��(�|\u0000�I#)H��)p�\u000f�\u0013�h��H�+\"�\u000b�\u0013�C2�\u001a*�\r4)ڒk�-8�\u0002�t��\u0019\tN��L�к����J/�ܔ��2���pE��f��/�ל#��\f��%d�E?�u+6�BN�ٻ��\u001c܎���\u0007�c��x�W��\u001cIx%�\u0018�c�ͣz2���$th�X��qą�\n2֑|\u0007\u001d*�4�\u0006��\r�\u0019�ү�֕|\u001a;\u0017��\"RaE\u0005�_\u0003�*�4\u0014\u0010�\b{03�J��/�/�MA\u000b`�`e��Wa-\"�4�$3�)1\u0019�J���J��}F��\u001b0�\u001d2�\u000b��ຒ\n1\r�tP�*�\u0019�W���\u001d��tg��/\u0003�*�/�\u0012��)\u0014?J��KK�^P\tF����D\u001e\u001d2sJ��7\u0012����PV��H\u001c�\u0016-\u001eI�p�'\u0013�2�r}��gS��Ӗ4�,�z�{����Q��+�2B��Un�\r\u0019T�ܿ���7m\u0019�\b\u0015)&�x\u0006y\u001am_,\u0017�9R|\r�X㍺�Ͳ���Ri�\n\u001ag�)] a�J�K��I,pMEy%0AMm�_\u0005YEͺ�\u0016�\u0016��Zl>�Ek�YqA贻��U\u0014#J\u0013�\u0018m�B&Ψ�Q��?\u0003$#�\u0013\"9��&I.Q\u001d\u001bE�b��V�\u0019&\u001a\u0017�D�Z\u0004k\u001d�dRtj�Ft\u001d��G)}��]��\u0012��)\t��3\u000by.tm\u0018�\u001e;\u001az|�A)+2��qb��q;1eMQ\u0012�챨�a���\u001eY�u^��(.\u000e�O\u001c��~\u000b�\u001a�\u001d�Vhٟ�g��qJ\u0012i��Q�\u0017��:���,[�\u0012��\u001c�P�\u0013�)8��\u0013�1�\t~�er\u0014x,f�e��4D�MZj�SF:�5��\u0005\u0006�E\t.�Eؓ\u00164��f��P�\u0014Wb|J�\f�Ś2~�u�q�ǋ��\\\u0001I�Jm�GR��ek�I\u000e��\u001a\u0012�n�F�BފBb�ԩ\u0011���� ���)3;$�Zd/!\u001eF\u0005���#�|\u0002�傝\rnN�\u0005�\u000f)Y\u001f2d��Jo�_���θ!�CQ�:\u0018�.\u0011E�˒T�gC�\u001f�9���gU���t�[��a<�N>;~�_��>�K,~�:�QŢMB*��\"ŉ�\u001aH�ۓ�rO%����e�F�Έ\u001d��B�&��:\u00057�$*\u0010$;\tJ��Z\u0005�VU\t�G�MU��I.�P��tM�e�Ƚi\u000bo�\u000ey�\u0006)d��1C�m�2��0?4���,N�O����%)��n�|�_�\u001dl��Rˑs\u0004�%\fz<�\\#�\\e�\u001d��y��<��,t��q:M\u001b���sx��1r�m\u000ev���ˈ�\u0016nΟG-�ML\u0013�ai'�y��erH㚣ӄ�\u001azY{��\u001d\u001e\u000e\u0017\u0006�4�rɣ�%x��\\r&ZG�\u0007\r$���6��b��<\u0003^���\u001e�W`Hߴ\u0014�R�,o��h�\u000e����\"���1?k%ĤN�\r�#�dr��$�i\u0012|��r\tM$��e��K-.��P�2[�eu>��C��$��Y�\"�t�<��X�IF\u0012�\u001aC\u001d�,�t����U��\\\"�?�+��,n�g�b��4����\u000e�Y�ԟ(�|z��|9\r����X����A\u0018Q���\u0012\u001e�HtC5��\u000f\u0005BF�) \u0011#��\u001e8ؘX\u0014$�\u0012Ar\u0016�J\u0013tB��H���Ӊ\u001b���̤��@�-K\u001f\u0016B�fm�8�E%L��\u0001(�a\u0013\u0016C\u001e\u001f$�7�\u001d_\"M�'�(|��_�mӉNol�\u0017\u0012$u�\u0000��},ь������5��^���8��OW�9��c���Y��l�\u0004�%Ǐ�%�\u0003�I\u001c\f�\u0005C�(�4:\u0010\u0001�u\u0010�V�v+\u0006�AZ\u0011A`�\u0014+�\u001fQFܝ$\u0003%HtfC�he�X��.k�_��?܍���5i\u0019��E� (�\u000e�\u0016d��ru%(���\u0002|\\���Yb�\u0000c\f�.\u0001N�\u0006�d�(�5 �Ć\u001fq�;���\t\r�mԀy\u0000\tS�[�\u00051wc\u0002��*H-rp��$�cX�]��OS)BQ��\u001dXaՙM�Z��s�Ws\u0003R���M\u001a\u001a�C�Wfv�Y\u0018��\\�DJ��jNr� dJ�3�O+~\u0011\u0014���9�.�\u001c}�\u0012X���\u0004!�\u001cڌq��&aE|���B��q��V�]v&Ө��)\"\u001c�j\u0015\u0011EJ0���6IF)���\\�\rR��ȣ\u001eDQ���\u0010���¡Й獠R\u0016А�\\]\u0019���G.,����\u001a&CD-�E&\u0016IRel�\u0017,��d�R�\"��v ɖ�+���)[�\u0011i\u0017�2X;h�Ǖ�1r�\u001c����\u001f�w\u0014Q���Q�#���GS�#pvfܠ�=\bcN6O�h�\u0000�QӤ�����\u0007X����ٗƊP���\u0006^��,]�Y�����\u001a��\u000f\u001a9\u001dW�X�ɺ�'W��q�8���;\u0007Xb�RI��j2|h3ǵ�\u0017.4��ѓ=\u0006F�E�{�^��$Z�\"�~\u001b�U��\u000e\u0019��\u001c�~\u001e1��fk���\u0000\u0004��k�2���\u0017K�~�O�E�J�Qmt\r=R�\u0014��~�>͟7K�j��|\u001f�\u000e\u0018g�5(�{�S�c\u0013NP���q}S�N*qX��\u0000\u0006��&O�Wg���d���g_���r�\u00131a�\u00195(�o\u001c�s�\u000e,��G�\"�V�K�\n�.�N��ཌ�2�@�t-��O�˚T�\u0003RH��*�Z\u001e\bևEȼ3KE��\\�{\u001d\t�H�����)��1l���+&U�\u001d��M�V1�y\"�_&Ο���/dU��1Տ������\u0015^D���G��|ip�q��\u001d�U���:��!?O\u0002n+�K.YNm���.@X�2r�D���b,z\u0016�\u0012�D��R\u001fi:��\u0004�40����4\\X\u0018��Њ4%\u0012���\u0002X\u00062���\u0019y`��\u001e}����x*1rt���U��҄\\��H�-�R�\u001f�i�\u000f�4mu\u0018�5;�\u0019m��k4�\u0004����z�n\"N�x�Ϩ~:����a\b��m�1��\u0011�\u0014\fx\u000e�n*�\u001e\f���K\u00166�j!��;�C�2a�UؙA1�M\u001a}/B�(�&��J\u0012M�r�?�d��5M&v=+�-<��z�<�W\u001f\"�'���*���h�/rE�:t��-6�O�_��\u0017�\u0000%�Q�V�<i�k�ӆH��#�\u0014�Qmi!�]�Ơ�tM7�]��h�O�'Wӓ�$Pz9�tt�\u0016���ci�k�o�\u0007\u001f(m���ԑ��t�l�Q��c�O��$�tO,��\u0003\u0019�\u0017�[�Q�m���mo�k\u001d��\u0016re�w��.U��?6�G�E\\��۹.\u0007��fH�y�\"˨��0ru8��w\u0005-WUJ-�cX\u001f�R�\\�ZԱ�g����.K�H�����ɫ1279;gF\u001e;g\u000f#����\u0014Z���ޗ*�����cAW\u0007���y�#N��is�<n,��7E���\"����5��\u0005���3?\u0015�����T�(+A(��JQ��#�Qi�=\u0018MK�9G���d����,8��F��\u0018��A�I\f{d�cD�YQ*�%Q���^Ia����E7\u0016'\n�[�\u001fp��+&�;[\"Ʌ�h�(S\u001d���#6��aiX\u001b-Q���+�\tJ��CFvl{!h�<ƍ\u001c�Ԣ�Sǵ\u0014C\u0005:��\u0011Wh�\u001c[�k�[.6\t�Hm\u0014�e��\u001f��c�K�_1G�b[&����\u001eu��5��\u00067L��\r���߂6y�T�B!��Q�\r�H�7��\u0011!�a��$R����\u0012�1�_\u0006'�\u001dJ\u00184�a���h��u��i�����uR��n��z\\.*��8�\\��R(�fZ���ϖ͜~��+D:\\|\u001a\u0018`�\u001d�~\u0018�\u0015\u001e;�&���9�<J��N��\u0004���~\bqb�\u0006���\u0004⚦tb�gK���S�t_?\u0001�\u0019���,\u0019\u0014���\u001bq���Ivh�y�]^��p��c��\u0014d芘��\u001b��\"Rl��\u0017�\u0001'��`ݎ�}�\u0002\u001e/�l0st���s}�3���m�5�\u001b&N��j�\u001c[/�s��\\�|�k�\u0013��)\u0018Y�I���u/�Q��}NH�o�g���Ҥ6\\��mȫ���\u001d��2�\n�sn�i�G\u001b��\u0017�ϙ1�U\u001e,ɕ\u0016\u001el�\u001c)2�8�M��gnp[\u0017p��Q��Y%�c�ē\u0001咓I�)>H�\u0013Mw�\u0011Q%s��pp�\u001e���\u000e\\�\f�d\u0018rK+�RE\u0016�d�&�d\")��B\u001d\u001aPQ\u001e�\u0015�\u0015\u001ea��PĞ\u0000�\bi��\u0011d�A�{S$ˑErfku4��A_�2i\u000b>zM��u��]���^�H��z\u0018x��y�s��'˚r�d��-���3(˵�-Rm#�8�g\u001b�.A�Q6\u001c�<\u0014�X�q�E��U�\u0005��x5�%}��~?հ�ͪ~l�\u0016b\\z�C��)⌑ӏ�<j�d��1炔$���.\u000f(��o>��{Ge�? ����I?��|g\u001f\u000e�\\��:��G|�\u001a\rM&�k�\u0005��v�\u001cڵ��\u0019���V���6�wH�럑���x��j�^\u000e{G�5z�N,\t=��f���e�'�tL\u001f�nM�O��i0G\u0006%\u0014�f'�z8h�|\"�s�\u001e��g&W��o\u0014�,MpD�&<d\u0004�qf{\r*!ͶIۣ\u0007�i�eߵ&�\rFX�ӒTr]W��O��\u0013�k\u0006O�9�4�ŖMFՙ�t\u0018���\u001e#?\u0007o��5z%�$�G\u0019�ݥ�n��Έ��e\u0014V���}�7_�Q�5���\u0000c��]�U��Ȗ�j<8ӵ\u0015f�#2xc.�\u000f��\u001e�SΩ}���t\r>\u001ciF\n�h�m��L��ʆ\u0015\u001f\f��qE��.bŏ\u0014k\u001cR&|�\u0005D�&j���I5�p�i�W\u001eGQ�YTD�Î?�X�\u0003Hv*!����\u001f�t��D*!X�K\u0015��\u001d \u0012*�4\u0014q|�ÈQ�\f�b�BX�1A��\u0013�\u0000�I�\u0019`�'Ϛ\u0018���2u}J�8Μ<yd�\u0000���̆$X�8bN�l���y27�if���ș�a�F\u001d�\u001f#��:@�d�}/�\u001d�}��%\u001bM|��tp�g\r(J2j�L��\u001a?O�\u001f=�.͝P��\u0016�;\u0015�X��\u0011$�T\u001f���:v!�_��`���J?�6q~O��\u001ay-\u001c�{\u000f��`�/Qq�8���K��lr[�䍎���\rV�8&�[�g�'� �g_�i�ӏ'&N\u001e:}\u001d�yR���\u0017\u001exK\u001cf��&�XW�H�'�5n*0�$\n�:��\u0000��7��r���92�kr9\u001a��N'��Y�\u0000��\f���I�N�٤8n\"|�E�V]��<ѓ=t���G�U<��(j�\u0006��$�\u0018˓\"\u001dSq�\u0000Wc'?Y�T�\u0007_��fFH�Iٴ1E�c.D�a�\t�˖C<��\r\tpu,h��o�4���;R\fEj��v2\\\u000e�\r|\u0002ؚ\u001a�⭗1���E\\E��\f�l�J�54�NxRR�\u001b\u001aN��%\\�ʡ��i�9�Č�g^.\\�z\u0006\t�$%��0�G\u0017��9��\u0000�n�٧�벴��pd�|�q=\f|�?Y�l�\u0004�t\u0016,nQ�gt*�$���Û\u001c�Ph�\u0019G�u��\u0019���6��\u000e\u00113V����\u001a6�ұPѕ ��4��5\u000b+��\u0003���n�\u0012��cFrd���\u001c�M?�7�yd\u0013ʻ�ţ)H�->\u0019_4{�)fK�᫃U/\u0005\u0019�\u0016\u000bQi��\u001d�A�q�1a�\u0000O�\u0017\u001f�t���qw�\u0019�4�\"m��+\u0003���Q]��\u000fv(K�\tǁh��&4�\"]�6ON��@��-��!��\u0019\u0006�-���\\�EMGP��mK\"�k\fR���ʉ�8\u0016ʻ1u\u001f�bƚ�\u001bfN~����n\u0014�:��k�7�~��-�E��I���%GG-\u0016�W�E�\u001c�\u000e�����q�C\n����y<3��T�}�\u001c\u0013�k�<�\u001bU�)�YZxu:~e�TwÑ\u0019\u001co(�nb��YĪ�M��_���j����UѶ(�.��]��v��|\u0015a�\u0014���Ǒl���>���״\u0017����^�$��\u001d\u0006�\u001c5\u0018���<�G\u0017_�\u001b�em�F=˙4�RhX��ɪ8�$�\u0000C؃\u0016=Ҫ.��\u0018�����\u0016\u0005m�fk��Q{YՏ\u0005�ɔ���L�ƞ�L��k�6�ed�9%tR˨�۶Ί�\f�o���.9�\u001al����Nj�d䭢<���sF3�����Ź�U#+,�.�~j�b��K\u001c�qj��`ы-e:��Y���W�k�\f�_�=��\u001b\u001b7RQ�\fQivdY\u0015F�u\u001cx�\u0018�㒌\u001b��u\u001e�{�n�]\u0000�y�n\\2)dqv�#JJ\u0010�F��~\u0006�qd{��#�l����H#�ծ���B�)\u001a�\u0001���\")曔�}�\u0006�{�ǰ)}\u0005\u0016���F�3E|�ɲ�%�����\tS\u001cS}#)��[�P�Wɇ��,���\u001a�D��o��Ȩ�x�z�G��7}\n��r��\u000eS��\trz���\u0003v�\u001e�8��J��D��2a,��r\u0012��\u0013�l�9\u0019Z\u000f�X��%Rd�3O\u001c�2i�\u0010E\u0005\u001b�!�GM�\"�i�2��Wɱ��\u00000S�<X���]�>(J]�-bҷ��\taL�9��^K&�+��λ�-\u0012��\u001b���s��\u0014#I\u001d���8��Is�\u0019�����Kl��|K��\u0015懏.�\b�7(�\u001eڃ��'�>�t��Z�G=��\u0018����68�\u00139���ϒ\u0012��#��C��e�v�+w�蚕i�;.5'�\f�F2)�,\u001a_I���?&�G\u001cwY���9��y�9#�3)*F\u000fG׽&�\u001bR��L�<Q�]�����jR������?K�տj4h�\u0013�E��2TN��2�3���T[�\u0015R%�B��\u0003��\\�\"IF�\n+�\u0000`�\r �\nLz�$QADHx�E\t0��l�\u0018�\u0010�\u0014\u001a�\u0002J����G\u001e�8Eܾ�qcst�2f�\u0017l��$1F�ѓ��E�\u001f\u001ffn�]<�v�EYI���W\u000f\rG�\u001e6�6�$�5\u0013�۔� r�\r���\u0018���JnN�i�\u000bc\u000e1\f2blA@\u0006h,��Z�r�SF��8]λ�O[��|mK�\u000b�����6�#W\u0005�n\ta�����\u0015/��2Fm\u000e<_ ��D�&!�a��(b|c��3z;r�2�e�T�=<�џ�Ͽ�_ٖO\r1�t!H=���Nj7�*���L�\u0000�\u0000��K��h߂��C41ٓ��q�sڜoի;\f�Ӌ�c�\r\u000f�d��&F4�N1N����t\u0011$�����86���4Ce\u00167�5Ld�� ���\b�:D�I�ZtJ�C�\u001bPD��| ,9\u0000�\u0000��(��\u0007@��9cw\t4˚~������}�v� 4C�\tz��%\u001f\u0019�h�\u0000#�\u0019�\u0000S��͌]sO�-Ι�Յ\u001e\u000ey}?\u001c�:���\u001e��ϩi��r\"<�B2��5�¹��e�i����?���\u0000A���z�ԓ*�ֹɩU\u001c�u3K�\f��\u0015�g�\u0000�/�k�\b�9�{Y]旧����\u001fv͞��:�ԟ&s�tନ���\u0011�,��\f�$�����cn�\u000b7H��F�>�e�����g\u001e\u001b/���IFO�x�))+h���$�y\u0017�\u0017�d\u001crğG����z\u0006\u0005�,%�՘=?��:���Iytv�'>�I�&�\t�!�2/Ѵ2�zo�(�%�Eh�\u001d+�\u0000��\u0000��_��\u001f��|\\���\u001eD+�r��Y�K��$��gu����i�ÕJM\u001e}պ�n��E9|pV>\u001c��D�\u000b�o�O�r�28i�.ʅ�:fmZy53��\u0000�\u001f�zD�y��R|\u001d֛K\u001aQK�<���EB.}�\u001b\u000fA�������6%\u0014��_&��M\n�^���IZ�������q]�t�L=�\"��ǖ�6q�R��sax��\u0002��Mxb��AØ��Q�t�\u0019���7�\u0014���nu��\u001eI/؜b���\u0000\u0014�����&��Q�S��g�C�9w������:cɚ��8��8\u000f���;ܨ�\"qOr�����Y�/����i��\u001c��$tǐ�QG2��6�\u001e��̡):g;�r��Ņ����Ӧ���\u0012&����X��,��Q9׭�|M��t}\u001bS�Y����Q��4\u000fG�������ʔY�\u0015�sj��NVUɑO�_2�w|\u0015䦹����~\u001b,d��D/2��.GJ�d9�+�D<�V�\t�>,o^�b\u0019�U�~�$Ӊ��&�\nw��;+�(G$�u�\u00079_,ɱ�oS�Pi�G-���J[Q��'��C�M\u001dB�&g(��i�o�JiѦ�JQ��\u001e��\u0016<;��_\u0006V\f�\u0012�>��i�2˿�X�\u001d�&A����K�,�y\u001d\u0016m�\u0013�V���\rL��S!s��\u0004��0GB�P��Dz��t�iEY��\u0002\\ �\"��{ ��#vW��QM�\u001c��W�I�˽KU�Vad~�?���������ס�dR\\�%:#r�F�l�U#ȓ�ת�,u%dP�\u001c��\u001d�;�\u0019D�Ƅ�\u0001L�k\u001e0��M��\\Q�H�\u00169_(���\u0004�:\u001e�г�9�\u0018�\u000f�y��[����?Q�ɳ\u00066��t���rW�\f��?\u0015���^H{�GD��\u0004�uM�c���\u0017G~.\u001d����/:�Kj+��\u0000\u0011�i�(z��pÚ�2�'\f���O�K�h�)�?��p��.7\u0016�N��|�s�x����A���⍵ގwK�WL�I��qn���Y#A����4u�'Q_\u0005�KԽ�.���h��n���\u0014i#�x����+GJ��\u0013=<\u0012�v-Q��֬y���\u001d(��e��qdN�\u0006n�\u0006�I\u0019�>����<�mf�2o��̴����]7&=�<�q\u001f�M�R��c׵QR��p�tW����U*�#|}��\u0000��Z��9d�k=_�L��ҡiRH�^�&\u001d\\�fM4��蟈ux��qÒ\r�٣��r]\u001e~)~Gq��؈t��\u0019���_�aN\u0013^�'g4����6�(��5\u0003(��)\u0015��\u0018������$0R�Q�\u000e�\u0017��\u000691��q��(�\\�}�HQ�\u000biE��\u0006~��c��}\u001aÏ9?\f�\u0011]�Um��i\"\f�C\u0006\u0004�i���z�l�ܚ_\u0004\nM�v��|\u000f܏+/�}Q5u�^yn8����#�v��\"l�q�\u0017H��S}�)s�u5؂ę�3H�p�\u0004�\u001cc���%%�V \r��5��\u0000؉$��\"-��}V�ia��MT�Ng]���t�\u001f(�+j�G66�V\\eD:9\u0004��k[�x2�2�N��̚\u001d\u000e�\u0013�uشAC��ۧho�a�\u0000R�^\n�n~�\u000bF��P�+K��S|^\u001d\u0018���9�,\u0010��\u001a\u0010\u0000�\u001bD��4\u0005yǆA8Zi��V�\u001c��L\u0019��;[El�M4�\u0005���ڿ\u0007g\u001e[#)\u0018z�3�n+��\u001d.LJq���v�b��\u000f�#=$�\u0018!N��\u0006�%�F�5Hd�c$K\u0014�ھ\u0002����*(��[\u0010�E\u0018!��*�\u0002�@\u0005p\u000bK�(.)v\u001f�=!�\u0010m\u00004hj\bEY\u0014\u0007�/$�p\u0005\u000e��ڣg��[��\f���AW9\"'.�1�Ώ\f��N�Iv``��\b�bg&��Q\u0005e��\u000e9漲)�{\u0010�H��0q-=T�X�S����R\u0001Ks+t�L���\"�{\u000b\u0006�$�nN�ٗ)��E�5\u0016�ɞUA\u0014�Ե��'\u001b|\u0012�=�z�TRWɓnO�'c�v�P�̚�<�Vn�=\u000e<nH�8�\u001c1�jTi�朩\u0018�rK$RWf�G�NrRm�>�=�UF�\u0000K�nM��7��x�b��,pP}�5%Tk�#�4�t>��b��\u001a�Ya�d���-�\u001f\u0016�S�U���\u001a��\u0013cƣmy)�}Lt�Yɺ~\t��g'H�\u0019񼾚���\u001c�'\u0011ѵy2uX�ɻgp�Eǰ�ud\u0019�Bqi��똿K�u�Y�f�ta��?�����\u0011�\u0017�󞿉6�.˹����������i��˖��G���#;�u=\u000bU%�83�±�\r;Ǖ+�\u000f2�\u001a�\f�\u0013��Z�\u001c��uȳ+VN<�Ⱥ���p&�\u001b���j����I��z��U��b�=�W��U�:]f\t�$��\u001eL�:���&���,\u0013��5��Kɣ���U>\u0019�(�\u001a�N��\u0018Y7n�d)�tkf�ܜ��9\u0012���lN$JI����m�7mR��UH�h��쉢�\u0015R!�~\u00116��܄���2�8ԕ�s�_B�V+���w�mɤ���VM<�ժ*,�\u0003����\u0017��Yc\u0014�f~�O\u0004�I��g�ַ*�x�!~&Ϫ��}��졋T�\u001a�BySue�j��wb Y\u0012�؊EY���d�MB�7�\u0006�iRw���n��\u001e(�*:3�b̝VS+�d\rZ\u001a*�\rv>�\f5���]��};�:�A����j#\b�l����\u001fM���\u0018�[g��;�Tu:\\s�\u0006���\u0000�\u001f�A�g�\u0014�MY��=\u0014p�\"�QTsẹ�;x�M�\u0000&y�\\�\u000bK\u001d-ia�K��a�\u001bZ��]Y�R��J��lZ<q]�o�G\\��tx���<��K)·��#��=;?N��g�RL�o&\b�4��u��t��f�('��/\u001f\"�f2�<�񮅗�j࢞�M�{���\u0013\u000fN�\b�\u0011ܗ�O𞁋�c�����Ŏ�F\\�Oz�׍�X���\u001bq�g�H��RK�6�*%}N\u001fW\u0014���6wFH�5Yo\u001c��.t<�x��\u0005^���)J5��?A�Ly^��q�Hz�$b�SD/\fW4�^X�]���j�\u0012�+R�\"��Q�\t�έBN�\u0017�z�5W�2���f�i�Y���D�j��\u0013�u�[�g=�N���nƭ�-�\n4���BX�rn�g{е�S��+�i�䚝B��%g��-\"�h1��$m\u0016B����\u0006c��%]�,��Ǆ̝v�.�*2�muG\u0011�:\u00145}CԔV�%�\u001d'\u000e�>�e�^�\u001ce&�zl����Glrʺ9�\u0012)8%\u001aJ��Yc�Ŵ^�(������4�~���k��\u0000��\u001a�sb�\u001c��#�����\n\u001a��.)�f��_�94u��\u001au$��X��9�W(qe�\u001a���((�\u0006�k_\f��8�[W���Z�&�9pΆ9ԕ&\u0014y�a�8��\u0012���1�Ezy\u001b���sM�6��KY!�b^��s\u0019rO\u0014��M\u001e�\u000f�\u0019�5��sx���'�a�Ԓ+��\u0019y$My;�) ���\u001b�.+�FP\u00166�9\u0013\u0001�)�[�\n��\u0019\bTX��F�F�=�\n�\\�\u0001s4C�����\u0002��{\u0012� S\u001dMy\u0000��\u0002�d\u001b�\u001dJ�!zE���>'k�����R:g.\nZ�,3�n*����\u0006�h�k+���G�!&\\�X$����\tuك]��P���wル�S\u001e�4��q�ߚM���t\bz}:\u0014�̲\u001bb��hj\u001d;�\u0006I\u0016\u0003\\\u0000�#`0h\u0001�%ْx#d�\u0011�\u0005�\r�6�����R���̨\f�i�n���\u0016Xæ�pr�\u0014���=|�/%�����,�����Z��%ˡ��cƻf�x�'�L�\"J���~3��<0�Zsiv/e�;P�%�I�����p_�;�sU�rQ$����t=N)����A>��ƹ�:#�\f3�FO��\u001e��C\"YE�MS\u0002�:#$գ�Ɲ\u0002�\u0005��Z�\u0014G�fÔP-\u0015d�˱\u0019+�\u0005\u0000�\u0004j\n�CLI\u0000Ѓk�\u0002EX\u0002ٿ��(�.\u001c\u0018q��@��zD�'>y�M0��h�W�$�q�6,Ooa�>}��\u0005?�訔=9N�@�i?r4\u001a⒢7����\u0003S7&4�\u0010�{6)[�V�\u001cW!�\u0013�3��d� �;L��i��\u0014qq6�\u0012��֋:h��\u0015�z?�T���Vp=>\u000b~���\u0000\u001bu��y\\��=\u000e2:\u001d\u001e�0�F�Oΰ���J[SH(C<��2<����GQ�V���\u0011�_g���\u0016�8߲_؉g͊^���D��u��i�dO\u001dL\u001b�8��YcOs�\u0000�^����F8Sj�4ؗ\u0014wp�p�s��oȡ�'���x�\u0015�,�����t;�(�]���!ᗭ�r�#�j�PQ��R#�5\\\u001a.����u\u000f�PΔ�J/�E̖��\u001a�m�/�=6�G�~U\u0005�s�}���<R��t\u001f��$���\u0000m�d�1���\u0013��\u001dQ�wl~��\u0018����t�'\u0003Ϛ+�6C�:\u001c�eJ����n����\u0014�ȳdUDAvX���\u001d\u001a���\u0010��ACsl�X⡵.\bs�F\u000eU�<֎��\u001f���kp�d�ܗs�z�\ti5\u0012���\u001e��ǻO�\u001f�8��4ߨ�\u001c�U(��h���\u0000G'��q�dg��'�����\u0016�fn9�n��\u0006ߢ\nڙ\r�y)2ML�MĢ�N2mw\u001aFlՄ)r�3���ܡ\f�[��$��͕D�#+V3ɺ2�\"�XF=�+e�G\u001e)8�X�]�:�����Ύc*q�l�r������+pm#�\u0019�4d�#�,i���Sq�2|7�6\"+�s��2u\rv,\u0018��Gu�\u0017�]�2u,�U\u001b\u0010�=�<}�l���n&q�O&��t�K#X������4�<�\u001a�\u001c��H\u001aT0�G�\u001f\u000f\u0002~�\u0015��~\u0005�'�:�\u001b^ȳ��\r�H��𳤭7N�D�2�P�X1��;�\u0006�:}>8%[QkyCQ���\u0016���*���͙�\u001fG�\u0012�hՆJ���z���G-���^�#7/\\�:���&i�;W��}�ܣ'qg\b����h��u~\u0015��5��\u000e+óҴ�#G\u000b�1�~e�\u001ce�\\O�����H���J#O\"�,��\u001a�=ɔ�3�\u001c�Ck�\tE�H�ɫ�\fr��o�����\u001f')��2�ۋfwgZU���:����Q���4߸��j�}� �F�,�����]s�����Y)����[��-flY\u0016�k����\u001a\r\\sErY����ͺ7^p���R62u���i��3�˟\u001c$�S?SK��\u001c����ҩ\u0018�z̝ԛ\u001c�:;\u001dgX�7�\u0000���u����5�Y�m�I�3S�[��ٴWfM�oj���ܬ��]Jܗ\u001c�\u001emD�.-\u001a�\u000bP��낶rNJ��&�2�ΊSȜ�|\u0015�=鲼���gEQ;\u0017r��vT�z��؉��}���RFrf�=U�Yb\u0019\u001b�3\u0005I�%�6Z���SV�\tѻ��'*f���.�9�6�F���,�Y�RvrJ\u000eͶF�u�X��^�ۿ�'��b���2�αf�Q|\"���jG?&���\u0019gp�,ӆM�RO����yh����<j7��0v�>jQ�Q���L�\u0013�%��b\b�A�\r�\u0015��4(�\u000bt\u0016\t��@JM�)\u0002�\u0001C>�s��J}ʙswV1��;\\\u0004�U���\u0016*�\u0014\u001ac�P1c�\u0001n\u001e*�\n,\u0000��\u001d>9��\u0015�G-��H\\%�\u001d���N��\u0016X��׹\u0016�����^�^Y�\u001d6;4X���a�㨌$�����p�xHm��\"dǾ\b��$!>FHB�\f\u0004D�Xdo�)\r\u0000�\f�+#�fK(Z(,��q�g$�N��X'�18��W��.�*���3��.���⌻(��[��\rj�����3�%g3��������4�\u001d;M�4\u001aƝ\u0017��^<���GV��i?��G�O��7�g�G\u00168�.�\bj��\u0012�v�^\r\u001e��j�Z�Kəҡ5������,㗧��'��7h�PZ3W�t�.X�����s\u001dS�i^�\\|\u001d�&��^U\u001c��X�,S�p�7ŖJkVy��i�^�\u001b�q�\u0017R�\bvL�Y�y^m~y��2�?I��-����,� (`�grg\u001b\u0019��0Z-2@\u001a���b\u0001!P{D�\u0000#���\u0014HƢ�H=\u001e\u0017�Q\b%ݞ���\u001cX#\u0014����/�Y5o$��+���q�%G���ި�x\\v�\u0000&G\u0015H�n�ˊ1�\u0001�\u0018��tz?\u0019Q;�\u0013iwD�\u001aO�����_\"\u0005��U�$�GQ\u001b�4�}�*���=�eBx�U\u0017\u0018���8���nk����M\u0019�\\u%H��\u00198vit�\nYTk���h�]���q?�h��W\u0014����\u0000�h֞.M+���I.��<iY���PڽD�\u001b84���P\\}\u0011�Z�����t��'T�(��n�eb�uJȵ]?M�>�/��:\\ϗ�A9�\tJ���\\,�Q\u0012�����BQ�\u001e;��o�t^������k��I��\u0013\u0016_B2Q�Y2i\u001d\u0010V���!��s�\u0000�r��\u0016���Ld\u000f\u001aF���pe$��jc/$�\"�ᚦN�\u0013NW\u001aE��=�y$�R�\u001a�\\*1���\u0004JZ���~!��+��\u0019\u001f�>\u001a\\�X��D�b���5ݮ��e�����>8�j��K\u001e\u0015\b���8�Qb�\u0019;e���4S����g��^su�\u0005ǲ�}��^\u001f\u0007%�$\\a�8��/Qn���\u000fWU)O��u��f|������e8�w4�\u0000%�\fZ���s��'V-N��S�.�\u0015�$�h͔�����\u0014�\u0019\u0013�P�E��H1j'�|Ƀ�\u0004�\u0019\u001d�#�\u0015�r���*,�r{\u0012O�)䓒�.���E�\u0001F)+e}[ݎ�I\u0019�$�R�\u000b<V�]ˈkf$�S��z\\/&�\u00168�e$��M/��\u000b]�.(�q�L��\u0018�I\u001e��4kG�t� ��M�\u0000\"5�<{Wd�F��ׄ�U\u001e\u000b�?�����H�:��3���/\tQ�s�lHr΋\u0007��n�j\b�'�k�h�juxR�\u000eK��WI�\u001d\u0017KŊ\u0011��<��|1�n\u001d���[�g\fK�/�7\u0018�w}66ʺ�Z�nR�05:�Nn��u-Z��3#'�3����\u0012���Z\\˄I�wĂ���r�B+d��\u001d��eq���\t�\u000b}�:�8cN=͒�D�=K��R��k�5���\u001bg\u0013�>�S�K\u001c�mvF��P�\u0016����\u0012I�^��\b�\u0014��9.�Ԝ�ۗ\u0005^�ԥn;�H��j^W܊m�*��I��JN��*NN�tB���\u001b$���HF�ܬ(���pN)��\f\u0012�Iw\u001d:N��\u0012��i\u000eD�[�4�\u0000�i�#��r^\u0019pfRff]\\��I_\u0005�'Ry`��gj�Ԝ|w+�=�W��[0٦m�F��ȓW�લ&�b�O��R�$�K�W�SW�%@�N\u000e�\"�y�H���b^�k�aysl]�,O���o,p��O�h:f\u0012GY�C(��f�q씭���oU�c+�cQ��|3��\f�.@�/�5$����\u001aE\u0012�'��MY>�Q�6V�\u001bnD0�L�3��-���u\u0011���\u0000\u0006_�/Kk|w!Y^�D8����T�J��.��4*wS*b���U������\u0013\u0012DI�(���\u001e9?+�n��V����o�'�C��\u001e�X�\u0000'���#�ʿ&vjo�\u0012�;\u000ek�}���_\fvd^�5��Qz��\u0013�T����G,�~� ��*�C,��|\u0015r�J�\u0018�re|�sgW܇Q���3��\u001b���b:N�&��u�+t������e\b\u0005\u0010�`R\u001dp1\u000e�\t!\t0$:�g\u0014�Mp:c�cFNn��Z��UóN\tR_\u0003���TP�M$��\u001ffF�B\u0013�\u000f��\u0003�R\u001d��`.��̍\t\u0002\u0005�et��\u0010e\\\u0013\"�]9n�A}����,:Lw�i��,�\u001e�2�h�~��˓\fc���\u001f'���L��+M#W���\u001d,��n�dr�1ϩ����pG�Myi�Wy��|P�%Q�T|���>�b�eI%\u0018�E-s�qFXմ˲�l\u0016��=����кTit�l^�\u001c�\\��#�\u001e��hr�s'\u0016K\u0014���O]���-�|yl�\u000fR�g.N:i�x�_��o�di�_�b���Ih�p�fB��?\nw�3�p�+L���J\u0006Gz�8�\u001bC\u0006�\u0004�;\"��PC\u0017b\u001a�aP�,^���Iwcѩ���5�Olyd�j\u0011re�\u000er�u\u001f�����Q���K�kl�E�c� ��\t\u000e�]��Y��M���u�D1�\u0005��M\u001c2�d\u001c4�/��\u001f��Ԩ���\u0013O�4#��.62�.��uQ���+T�e\u0019��@�~�gc��w%�N,��\u0000�q(��H��q����6iڪ2�X��\u0018��;�zTt��\\���}\u0011��;�\u0017�v:�fZ�sO\u001b����zT��Y\u001cZ}���!�\rM�\u0003G�Xp�\\**k����$����×.�μp�L����$�YC�/J�\u001ci��s�+�m��9r�N�O��XS��1%ǳ��G��ϯ�\\���7ݞ��*�L�\u0019�b��%�\u0006}Z�|���\u000e;>��j�\frr~\u000ezZ�Rw�g��R���c��!�E$���۾C�k��y^����\u0019�pĕ\u000eJ��6�vl��P�����r�Ǝ�\"mS�M\u001dOK���x6$�!m�3�Rق&w�}NZL\n0t�k\u0017H�\\�F�\u0019��i�����\u000es�,�&���-����G\u001e��y6�\u0019&�Q�[dR�ۓ!�]�S��Q������â�y�.Y\u0014u;ܔ\u001f(�,��R!��\u0014T���).�'U{a8���hj2m���s][Q%\t���\u0012:a\u000f��u=]��\u001b�h�ϑ�q�ٿ겫�\u0000S(��;�I\u0016�M\f�\u0000CF\u001e�T���\\�+��\u001e\u001c���w\u001e��sx�����'&ܹ\u001c��e���#6�\u001d�Q��L�\u0018���\u001f�7ww�\u001c�ܛ�R\u001aE�3P��,�5�&¯\u001d�dM�He�D1_g���-A�5��)�[8\u0018`��E[=���\n��<1Q��K�)\u0017�\\���*n�U��݈�\u001d�\u0019�]eM��ugc���9\u001c��\u001bY8\\\u001e?\r�y����n�3c�a��3t��[7:]z�g�\u0006x\u0013]�7���uؓ�=+��f�\ry���+\u0014���(&�;γ�çž*4p�E�OK����^�K�П�VˑK%�rl)5vx�G��e'�l�RN�!�=�!��j�CL<���ɟ��E�SM�~\f��$��,�e�\u0000Ƶ�K���Rgc��FX^D�c�Q��#ϓ��u+�%��\u000e\u0016��\u0019?�n���3K�EE&׵��E�m����\u0010Q/{,F�pe%m>@Y\u001bC%Ͳ�\u0013%�\t�\u0006�[��_��,��/��d��.[����[�7��\u000b+^�\u001f\u0006�FR\u000bQ�2[��\u00189��y'\u001b�lf�=�0��Sʚ�F�G<�,��\u001b�H��wFV�u&���v��D�K�#�H����↏<1x?C���\u000e��G+��T���%�Q�ب�CGU���u��˝F[��1��(�囚����q�\b6`���s��0�\u001e{��MJ^�kE�r��iZ��l���PU�Vƞ�4���-�v#�`RV�9R�����!�42b��\\\u0010�\u0012K����-�duf��m85\u0016duh�C�F]�.�����($�\"\fm�j_\u0004�\u0012\u0007i�c��\u0017\"�3M����H�\u0011L���P���$��V�m\u001b+S�\u0012$��Ws\u0007אK<�h57\u001e�?$SԪ�d-L�\u0001�Y˳ahZ�S���(fն�2%\f��/�Z��N�U�\u000f�4K�\u0018�\u001cR�Fs���:,OQ��:�y=\u001b�~\u000f/��ɝ;��(��.��꺛\\FM\u0013�:��^L\u000e\u000bcg\u001cvc�R�*\u000b�\nHj�c��B\u0012\u0010�\u001d\u000e��/\u0003�\u0002��1�\"H(\u0007C�]ĕ\u00031�\u00019*#B\u0015�\u0000�\u0002��`>�� lw؍�CCL���D�j��<��L�\u0017��A�z������5V�;��t��X�\u001a(��X�O���\u0000�G��\u000eT�o\u000ex�\\;d�����>\u001e����\u0000M.Q�ϊ'Ⱦ՟]\tX�/�\t�K\n�-VOK\u0013�5��.H��y��\u001dwS,��ӷ\b.���2,�����\u0013tX�?�i58kfܩ~���b����G���6�bx���+��a.�i��\u0000\u0012Ϧ��Cr9mN�6\t5,mQ�X3����y�J픥�\u001f�$��\f\u001a��3L�i�F�Z\n�|�H̚\u0002�AP��k\u0019�@\rAP����\u0018A�Q�Vۤz���\u0000�z\u001a\b��\u0015�dV�G!�\u000fF�\u00001�~�X^\u001c|���\u001alqņ8��b�\u001e/��Z�\"z�O���Fb�󶇏F�\u001e��K�\u0003�x.G��G\u0017L�\u0012�=6�\u000b���\u0000\u0003NJ��+bفk\u0016<1�\u0000��\u0000\u0004�\u0017h%�\u0015bJ�K�l\u0004�-\f�_�\u0007$���Y%?��1����$�G�A�<a�\u0004�SN�H>]�|\u0019�1-\u001e�ϴd�.-�З�Q\u000e�\u0016\u0016�j1J-p�\u00144��˃�鵴�����6�0�7/N�7��ݦ\u0006�����N���w�c��d������[��隇\u0019*�-*\"\u0019\u0016EgM�����V�I:|�n\u001d[k�QkO��NVZ-#C��\tc��M�:mL��m����zd��l����\u0017\u0012��6}J]�\u001c��͎k���m�LT4l�Ե;�ɩ�է�\u0011o�9,Z�|��Uz�S�40g�i框5�r\u001f���gɎx��\u0014�\u001b\u001ame�1��'C<�2妄�ΡN̿�t�!\u0017�,\u001c_���i.J��F\n���\u0000ɟu܍q�����[U�fj2�t�\u0019��\f��\u0012o�d͡\u0010p�e�+�r����.�$��E\u001c�Y���.,�\u0011i>\u001fr�4��ͯ��%�\u0018\u001dwZ�`ȧݣ[$b�J\\y8o˵{���J�\u0012�n�H���vY����� Zv�\u001e\u0011lg+�e|ܱcN�>��P�\u0016�\n��REyDQTN��p��yeQL\u001b\r���[wR5#Ҳ?\u001f�4�W@�mLw��r�'d%#\u001b\u0006�$�\b�4�}\u00036e\u0017(I/<\u001d�\u001e��ŉB0\\\u001a8a\u0018�B+�\u001f �9.���#��p��=\u0012Q�<j\u0010�ԕ\u0014�b�$�4��\u001d�ͱ����ǭ��,�� ��M!\u001b����H�\r|S�����nI'�w\u001a�JP|\u001c�Tó%�c���՜|�6����7:6%�<\"��\u000e�\u000e��k��\u001a=���ϛ�*=7�Ώ\u001cJ\u0019%\u001d̿�>%�\u0019xH��^�<mX\u001f�/S��rUK��f���zX\u0012���\u0015-�k�-��\u0014T[T�Iw&�*~�fUѺe��}��{cH\u000e�\nk��$I�6R��jf�:ڑ\u0006�\u001ai�\u001fI��3���G/�\u0005�g'�ɺ�}/����7�>����QG\u0014��hr9�e���h��\u001a�W\u001dǹ���y�e(�+\u001c�'��N�6��G�w�I\nR�\u000f�*6L<sQ\\�E�5ƒ+E�R��x\u0016l�N�����|�}Vܗo\u0004Л��პ0I��h��\u0006�E]f5�R�C�\u0014߯�cDb̸�қ�L�\tZ�Z�w6�����#4I�2��M\u0018 #�bh�\u0014��\u001a��ܭ��^h���\u0006�%=Jܻ�\\{dϤ�:~g\fɦkg�o�Vbi4�%%(��Cl�Ļ��\u0018~\u0016y2�L����\u001d��\u0007��J^Q�t��y��dv3�)i����g�R:x��N��[Ԓ�(��/4�{�6�p4��s��n_�=\u001fE�ǃK\fj*�x<�ͥGb���zfuw�_ث=\u0004��Z=RZ\\S��_ة�����ڑ�̪H��覗fg�|�P��Ytm;�%�t��_�jm\t�/��u\u0018e�,�(�L���g�u�Þ�V�1K�#��\r\u0007/�%��O\u001f)(�y��ܝ\u001ee�K<�ڬ�����$T�)S�z�O�OC���\u0017_F�t�!\u001d���ۂe��\n<.�<o\u0007�:̱�JH���'S/݊G�F\u0011���D�ڴs�ԙ��q<�\u001f�e�\u0000cE�7�4�\u001e>�LLNڧ�O�?�.\u001c\u000e/I�f�\rz�I|\u001b�\u000e���$�b\\yh�J�1�I?Y�qF>\"<��\u0000��\u0005���\u001e3\u001d?��5����=�����k\u0002��u2K���\u000b��^zJ\u0006u\f��*\\���<\u0012$�A0{�B\u001d!���f�\u0000\u0003��bk��0\u000b�\u0012\u001e\\\u0000P\u0002!\bH\u00047��a�fE ����/H䬊H��IP�����\u0013'��\r�:��\u0014��G�j\u0011��}O��ˏ$��|Y�}s\u000b�+G��壧PR������R䫢Ȳ�D�Ͷ\u001e|�\u0018�rω}D���E�����(�Sn�����a��wF/�\u001a���Ú�\u0018q��%�#+Q������\u001a���>V%j�c���o���\u0000���&�Y9;rK�\u0000��V}+��\u0015\u0013��U���u+N)�ɗ��Z]dep���4���Qn>\u0012�g\u0001��\u0000\t[d���G_���I{�����߹rV����ܐ�_h��ʔ=92qa>�\u0002ɆP���4{\u0007S�[I��x��G1�?\u0006�\b����x;��\"�g\u000eN\u0014�q8z\u0005�Z�I�����A�K�Z�Q�\f�~3�X�}#H����5��x1~�J�ǎS��U�zG�_��\u0006�N�\u0015>��f�,pl�\u0018��u?��}/�G\u001a�Y\u001f2~M��\u0003�\u0004���|�L�$�g�b��h�>\u0019\u0004��An_$rf&��\u0012t\n�^\u0007cErR\u0002hdm\u0012FL�\u0014�*ɕ\u000e����\u001d�J�Wr)�>݁DV:��=J߅��!ğ�ٗBB�j�Q~\u000eע�~$�9��\r_��v�\u0000���=7\u000f�J]����Ӷ��k�n�����������[��v�U��k�n�1E�x�Q���g�6�\u000f�Ug��rvz�Q��>b�|��G�BQ��.�:�9\u001e��y\u001a�\u000bFڅ�܋��rC7f�\u0003K�J.3�\u0003e���\u0017'�@�,�\u0003\u001ad�ɶ퇦�zyԛ�2�m�\rD��P��\u0018zҖ�\tO��Y���\u001e�ʹ:�c��w\u0013wK�M.EBGy�^佮Ǟ�����j�r\\�ܗ\fk�e\u001b5^�w{ �++��c�\"�l���D�'v\fx\u0003�R�\u00076F��j�76H�����\u0006\u0017\bJ��\u001e�\u001c�9\\��:\u001e��Ϫ����q�L�J��s�,����\u0016K�\u0004�����\u0017��qN��\u0000\u0006����8c�HŲ\u001eT�tpx:nY{��\u0017G˳rL�\u0018��\u0010I(E/�7���I\"~R��}\u000f.Y��gKѿ\u001c�\u001a�X��t��C\u001f튿�%Rk�%尳/&�\u001at���\u0000\u0001C\u0012Ľ�H���\f��'q��{��c\u001b�4q\u0013��Ȓ'`�ɢ}k���k�.\u0006��\"�c߅G�J�\\�d��#���iG��\u001f�i/�g\n���\"HEmr]�U�D˶yK���n����&ѹ\u0012\u001c�c;ܭ\u001f+�Z�v��i�+�Ri\u001bߋ�GW\u0016�\u0010봪9�F�:{���zx�\u001f9�ä���:?P��\u0018��\u0000�*9z&yE�\u0000��zN��:��z�3,$���ǰ��2m��Wٖ����U�Cfy���N������ѵ\u0006�\u0006IYK\u001em�I�5ɟ�їD����!˩�8�\u001ar��Y-��E@NJ�ޣ\u0017<��f\u0017_U�q���-�����x�M+w��\u0017�ŗ���Ǥ�tΧK�Y��\bO�����ℱƤ,��>5�N��\f���\u000e�b\\\u0019�u���Z#��\u0018�\r�L�\r$�����ſ�W���\u0012�9�_$\u0012���Fm��&׀a�v4�x�6�>�E�&U��=�KrS�u���\u0019��[�\u000b#�h`��H��!��*�\u0007\f���J�\u0014VĽL���Ծ)\u001a}\u0007@����p��g��jt�\u0012Q�G���\u0007\u0015�.h��ij*1T�:�*�=wt}\u000e5P<y+��鸑����/w�2X}<�UM3g����L`�x�,�����Tt���ܙ3�VX�\u0012���$G��\u001d>�\u0018�j�dx󕳹\tpG+�$�cm$\u0019]�hĞH\u0004� R\u001a�Z[~�`\u0000P�\u00060$\u0004I0��\n�xǐ\u0018Q\n��'.\u0000Bc\u0000�7��\u0000Ly��.��/���E�>\u000f9��[��o����\u0000�����\u0000�2X��\u0017��G�4�\u0000(�x\u0015pX\f�:C\u0015\u0014\u00005`�D�5EP�n�\u001c`\u0000D!\u0002\u00040��f�\u0001���\u0001�@K�\u0002\u0018\tv\t�$�i\u0016V̉:nyb�F1�[�\u0003�p�͸Kr�\u001c��K,\u001cY�\f�\u001cԑ��?j��\u001a~�ظ�)E��r_��5�\u001f��^�ϙB\u000e�c��g\u0019����\\~Rɍ3*:��5\u000e\u0012u\t3��\u0000\u0013��4�����\u0019O�\u000e��P�a�������-.��\b�=/��7&���Vs�~�\u000f�xﳬ�\u0000\n��u\u001f���y��U�����Z=0��Щ�W\u000e_���e!K�\u000f8�%RU�\t�AB(\u0006�\n���i�g�i�0k.8��FF��.���ͯ�\u001b�\r\"��3�8��sZ/�4Zl��S��t8��\u001cTa\u0014�%\u0015��)�J�\bB0�\f��P�J�\f���\u0018�kc�@��\u0000JW�\u0015�j\u0016\u001d�/�!\u0006��-��B�\u0003��$\"W\"7.F�_q�=�w\u0015���(\u0002�\b�T��e���zI�6��E>Q>\u001c���p$������\u00123�����܊{S�N�\u0015\u0018��c\u0001���9��1�;_@�m��$\u0016V�t�Z��J�[�tl���(���\bym��$�C<�&<��ʩ�\u0019��g{���}M�l�:��Y#-���\u0000�*3��][�E��/U��M��i���\u0000Q?�4;3c)�N�M]\u0006��R�T�)�P\u00141dO���:M6�]FF�-jI+Vr�\\Y�7�E�>�Q�o�\"Yэ�&=r\\_$��,����N�S��g\u001e�\u0018b��M6H\f:i~�,G\u0004\u001fq<��\u0019M��\u0001ٜ��\u0000\t?O�� �\u001cP\\$V�C��Dɳ\u000b�Ҝk�)I�W�F\u000b�f\"oQ�\u0016��W�~\u0005�\u000b���e�,-��*o��P�}\u0016�!�)��\u0007��\u0012&��/v-hU)ʸ�b����\u001f\u001aUf�cr:��dջ\u001c�>��\u0006��RT�3:�\u001fV�s�Ĩ���O�~��d���\u0011G\u0003zXmb6й�nW\u001fN\u0003\u001b���\fr'R�㗇lQSW��Ki\u001990�M����,�zx�N<�\\yug'+���ї���\u0018﴾��\u0007V��8M�sڜS�ϵ�<\u00198���\u0017jϝ�%����yW�'\u001f��\f�*d���l�\u0006��3�\u0000���\u001cg�\u0010`~�߂L�����F���D���m��\u001c��1E�p�r)�W<|����\u0016�}�ک8�R�d\u0019Z�.&R��\u0012í�qGI�3EAl|��L�ř�/�uo#Q�O�(=MX�i[\u0007�n\\v\u000b\u0016�C�E$�.\u001f\u00044l�[�$��!o�G���$��Đ�Y�\b�\u001c��w$\u0012�e\bQ[�%���H\fK���2(+�-\u0010�5��3+�Ϋ6�%D�_\u0003!�W�T$�\u001b\u001fd��\u0013@5�\u0014=�U��A��a�Iv9���rj楊-�;M\u0006\u0007�Q��k�х���q�K\u001e*H�\u001c+$i������h��\"�r�T�K��kW(�[�c��WA\u001d\u001fN��\u001a�>]�]/@��NY���\u0007g\\�\\.�\u0017#6���\u0014�!\"���\u001dI�Tl�-&4��\n�ہ\b6��\u000b��\u001b�\u0018\u0013)$3h����X\u0001`\\\u0010n�\u001e��H�Ƌ��L\n\r�\u0019�LK�\u0012� @JDWvK(�EM0\u0001�-���\u0011�R~��,זw���ZL��G�j'�$��=\u000e\u0004m�����Q\rr\u000b$#�s�H�\u0001\u001f��;�R\u0004:�3\u0015�Z\u0001Xϰ��f�\u0018\u0003@��� G�'�\u0016Ɓ\f�-�/\u0000�\b���\b��\u001d�9\u0015�P65�`\u001a\u0006D9#�3\u0001�D�\u001b�j�Ԭ�u���O�}>��3O$�_�r�q�\u0017K�#S9��6��pg�v<�Rg\u001f�<I�\u001b.Y��<�%r��(�Dq$��c�\u001ckX��e77g_�\u001b�X��b�n�\u001e����疗����M'�\u001e�\t)c����g��H4ԏO�4֡I�\u0001ʁ��l�OD�w\u0000z��R�F��1�2�>�WRa�0\u000e�0�$dU��{�\u0000D��\u0013��)�7&\u0003�m�kDJO�Qd�$\u0017\u0000� w���\u0013�\t\u0010z�/P(\u000b1C�+�b�\u00142}�-�D;����H.\b�?��c\u00011�_c6��\u0007M��RK�[�w\u0013@:\u001d\u0003�x\u001bu�\u0000\u000e���F�H�S�\u0000��|���Y��@��ŀ\u0016v�_�)�f���̣\u0015_D^����\u000f��\u0016G.��}Ұ\u0017H�'�\u0013z��oY|�[\"\\zM4?��H�\u0018~ȤTy��y���{��X��e�>�\u000fW��\u000b�HCٗ%��\u0000,������<ʻ����ȅ�\"���7��\u001a�,�'\u0004{�^e�\u0003ʐ�@X�E�\u0014�Z�3�^CT\u0016\\yP\u0012ʊOQ�C=B^CK\u0019rz����\u0011FY���''�/�\r��\u0000Q�P�u.; ��\u0018\u001f��\\c�?=����ΜPK���\u0017\u0018�@�1a�͑��D\u0019d�e�\u0007��&���t���\u001bFP�r�\b��a�E�\"4�\u000b�Ȩ��P|� ������\u0015��9~=���\u0017�ϒp�:����L��K\u0004�\u001f�z�|<2�ևP�⑝4m\u0019���\u001a�2�\u0006��ˤ�\u0014�\u0011�CG���/�\u0014�>|�ibw�\u001bb��89�hMlq9d�6Q��gO��\u0000\u001e�铓��_'3�/\u0016G\u0019&�;S>s$utI�+���\u0017ૉ{�\u000e�b�j|P��{��˶Tƕ�dQC���\u0005_S��⻯\f�k\u001cd�h�!�u\u0018���[\u00141K\f��\t��;\u001b3�d�^\u0019�˘s�~Bs��+���\u001cR�>\u0004�4N����a)[�?R�Q�/w�\u001e\u0014�o�X��YI��8���Ha~Ȼ|\u0019=G;�5��\u00173��\u0017\u0015�N\u0018��¶R$�*RJ��zN��\r.G5�6t}\u001b.X���\u0013&�Lp�G�c��ܚ��(�:.������\u001a;^��1�1��o�\u0019J=\u0014?\u0015�_�Ĝ�ik�^<�y1�;4UF4�\u0006��t*1�ώ�\r��\\à�Jy]/��\tdk����Z�b�\f\u0011ۍR�\u001cfȜ���:E��5.\b`I\u0015�X���\n��!\t!��A�MP&2?\u0004VK>́��V+\u0004!�qd�d\tУ��B-*\u0005�\u0001eU�\u0007�]\f\u0010b�4]�\u001d\u0005\u000e̿�r�\u0017N��l�g�gS��o�x��g'&���\u0002\u0015\u001b<\u000e~K���[�1X\u0017�;�<%b�\u001c�e&4\u00019P\r��kC�\u000f|\r�k\u0015�\u0000+\u0005��7�\u000e�Rc\u0015�X;���\u000e�\"6Ǔ�G|��\u0002#�^\u0001}�v;\u0004f3\\�\u0015AcP�4�Q\rGdi\u0014��E�.Q^�A!���\b�V�is\u0016'�Qj�svQ��\u0011[R��\t\u0014RtSѽ�S�g�~?���8'�<_\u0012��뿄6�\u0000\u001fƟ�]#���o\u001d��\u0001�f��\u0000��$�\u0000��ǲ�cU���\u00006\n�j?!E\u0007\\\fDt<P}��T4\u000b�\u00193�7A@�\n,\tv\u001a���\n\u0004\u0014�\u001c\u0010�U�iJ���:�\u0012\u0002m�\u0000,^�)��zâlюE�\u0017��L�U�gI��\u0016j���U|���ߩ\u0015\u0001���<s/�%�\u0004�\u0003\u0003Y�_�#�u}���}��=�\r?�!~�|�\u0012ԑ=W�\u0001��\u0011�\u001d�~�\u0007�bZ���Q&Գ/�\u0019fI�L��\u001c����\u0017�S\"y��g=A\u001b��r�\u0003W�_\"���d<��\u0017�!Af�ԯ��s%f�\u001df_#�,��O�\u001c�\u001c�^N\b�O�-B�?�\r�:3t:�aBؿ�43��Ji�=pƐYifb���TM��\u001e�\"߬��VV�+�5)2W���-.��!�jM�<��\u00076��1�Q�+'����B\u001d�dIph�?�e�\u0010R솑�\u0018�4��\f#�ŋ\u001cUZ�7���V�:�ȒOv\u000b�uc���I2�!�\"^\u000b��Gh\u001ah��\u001ar�rm�\u0000\u0006�̓\u001eF���p\"D�\u0001�܃����Q�4\u0004�\u0017�\u0011<q�\u0000j%`6\u001a&R�%�\u001a8��\u0013�\u0014�H�<2E%�=\"'�o�E��\f�q�M\u001c'��\u0000����m*�\u0000��m�\u0002Qܩ�\u001bD]�\u000f��f�e�rE�e]�N�c��\u0007\u0006�O-�K'��c��_|c)&�\u0011C9��/���(�O�G<i�Zk襗\u0014��t\u0000\u0014&�\u0010�c�AG\u0013K�O\u001c��\u0015\u0010�U\u0011G�-�\u0016!��'�Yf\u001a\f��_�\u001a��ϔ6��*�5�rO�\u0019_�$��r�1Aa��\u0014��K�;��kG�gsKkW�ii�\u001a̩mm�\u0000\u0002)#��\u001c�lG��&�6w�_Ĥո��\u000f��7sHi\u000e�>�􌙮�$�\u0000�SA���5�o�\u000fK���8�J\t2�\r.<_�(t�H�t\u001f��4���sO����e�\u001a�R�\u0011J�p�_@bÎ\u001d���DJ�\u001e!�-�ձ����\"1\u000e�n�C�\u000e� �\u0016\b�\u001frD@�C�`;&�I�\n�\u001b�e\b��\u0013ew���H\u0013M�F��_o\u0004^�}�X\u0013&��d\u001b��,\b��Pš��f�K��5��i�nX`�^L��C[?WO�O���\u000e1⎜8ԕ��?!�t��'���f\u0012�\u000f�u2��s�bn�r\u0011��?\u0007B�\u0013��d��\u0016�:ͧ�H�$�E�����\u0005Ԗ��㌟�\u0017�����X��$�TNiG�Є�\u0016q����z�����}�$���<�ݶ�\u001c�o\u0004u�>w<��؜��\u0017�4��ٹ�V5�5�\u0005&5�1�cB�wB��\u0002���=�Ƅ=�+\u0007�\u0014����\b�D�\u0000��aЊ�\u0000Т�\u001d\"����\u0010�`���K�)dE\"�\u0019%I��d��ϓ��r��\u0002�.\u0005s�'��%���ST�'��-3�kqcK�I#ڰa�\r><Q�F)\u001egԦ�(�8\u0011{t&�h6�>|�Ȝ{�*4O]ŵ0\u0019\u0012�{$pT\u0003C\u0010,k\u001e�\u0000C6G'D�\u0006E��tC&E)�+�V��\u0005cJM�W�o�7�)F�\"\u0016���!��c\u0000%*D/ Rv\u0003��\u000b�Cz�u�O\u001f\u0000\u0000��^�\u0005š��\u000e�G,��y.HX�w���\f�ڱ�E��\u000e�\u0011��\u0018�D�J�:\u0019ʹ\u0002�����h\b��\u001b��e\u0012'\u000f��\u001d�\u0000cn\u001fc^\u0006��\t0�2AÁ\u0000\\�(1(\u0000\t0��\u000e�\r\u0012C�*\"��\u0017�\u0001d��dO*o�q���z\u001e��H\u0002�\u0001��v�D\u0006A�(ęA\u000f�v4A%Ql��7\u000f��ɛ�\u0011���ŧ���\u001d������6�s�3XF��\u001cv��^���\"~\tt\u001a����\b��V�Wz*t$�&�v¨��T����ȶǂ�a��ez�EQ�\u0001x\u0011\u001e�J\u0010\"4���0rV]B\u00196=��\u0019��e؊�[T�\u001b)\b+\u001e2\"�У �\u0016\u0012���\t�\u000bx�\rE}N�\u0019�I4M�\u0006�\u0015\f��t-6T���\u0000c7S��\t�m�:u ��T\u0016q��C\u0015r��\n?�bO�\u0000�u��w\u0012���Q�sZ��B\\�_����i`�q_��O�k\u001e��:=\u001fK\tZ��\u001f�4�~�KRvĻ\u0006��\u0015��w�Z'Ŏ\t7�a ��\u001a�l\u0014R]�`���t+\u0012A$4B�]�WC5�\u0014�#v\u0003\n\u0016�iS\u0017!�T\t��t\u0015\f�P�#��,6��a@I\u001e�Ď\u001c\"H�\u0002\u001d\u0002�!���\u0018,\u001a$��\u0010\u0011�N�h�Ð\u0011\u0014�\f���J\f(i�\u0010�\u001bAF<r\u0012M\u0000�\u001c�\u0000\u0011'��\t����r2�ɵ��_S�=Zo�ʎkQ��\u0014�;0����K�,�<#�J�\u001e�7J�Վy9r$�\u0015\u001f.͑�u���G.���Rn\u0019$�G��I���q��U}�\u0005���\u0000�����\u0000��\u001f���<��>�\u000e�\u000bw=�X�i�xe�4PvF�@���R�Ƒ\u001f�G�X�\t\b\u0016�\u0010\f\u001f\u0000�$�%���\u0011\bp\u0015\u0003�j\t���\u0011��G��\":\u0015\u0007�[GC\u0003h��B��\u0000TET\u0015\rEx\u0002\u0005�\u0007m%�\f�I� \u001as+d��l�*�Y3�F��ˑ9��з�!��m��둚D�Ý\u0013�SYZ��Vzt��\u0017�s�\u0010ɟ\u001b���\b�Ԭ��\u0000���G�����0{\u0012.�I\u001eb;��%!��:�\u0000���;��\u0004\b�:�\u0002k�\u0018/�2W\u0011!�\b%\u001a+d�%�$�\u0004�\u0004��њ,�|\u00118�\u0005���'\u001b���d^�cC)�l^�.�,u��\n^�!l\u0005�G� z_\u0002\u0002���\u0001��]�\u000fK��.\u0006$eN\u000e�\u0003��ia��\u0017�,fc��x�f��\u0003ĊN����^\t!\u001f���^\u0001P\u0000ص\u0019E|\tǂHƅ%�$���\u001eFQ�,S\u001bo�#��@��\u001b\u0017�koн>;\u000f`)8�\rQq�_`�\u0017�¢�Ib�V�/\f%��C`H�h-Qn8��91q�\u0004rl\n'x��\u0012��씊�6�\"x*D��J�\u0000if8_��\u001aEdI\u0015�ii��X>��\u001d\u0015R\u001d\"���\u0018�\u000b^\u0018�\u001a+$>�������\u001d>L�҄[\b��ፚ/�u�.�\nt�s=.0��0�\u001e\u0014RG\u0005�\u001baz����勨��\u001d��76��\u0018�G���w\u001d���Qϕ�\u0015�C���^��.\u000emrȵ��Y��Y�BU-B��\u0013Ue�\u0005(�F\u0004',9\r<\u001a��w���~\u0015�\u0013N�W�7,�P���C>E�\u001d�W�\u0011�(�M\u0007�\u0013b\u0011�\u000f\u0003/Rt\u000bdr�!\f�\u0006�\u0002�!�p�\u0012_\u0002\u0010�\u001b\u001a�\u0010�\u0001�Hw��\b`F�~B�'b\u0010\u0001:\u0006v�\u0010�\";c�\b@0��\bB\u0010\u000e�B\u0010\u0000�B\u0010�`�0�\u0000�\u0015\b@0Eb\u0010\u0000\r[\u001dDB\u0000\u0012�\n1k��!�\bB\u0010�+\u0010�\u0002\u0004B\u0001\f0�\u0000!�Ҍ��� @x/�y^n����\u0000�4ak\u001f)\bGn?\u000f+���Ľ�|\bF��\u0001�xe\u001c�u(5$jt=VN��e����.y\u0010���c�M.��(\u0016!\u001d�\u0019\u001f�D!�B\u0010�@�\u000b�B\u0002��P�\u0000Ǯ\u0006�\b\u0011\"Q\n�\u0010�@-�\rB\u0011Q\u0001�iv\u0010�@\n\u0006n��0 ���OQ���\bH\f���\u001aL���-�E\r\u0013b�]ɣ�)�Єd��`k�'�?G��Ow�Ok=�\f��\u0019E���G���\u0000G���>\u0007B\u0011�#�\u0015\u000fB\u0010\u0012ơ�\u0010�bh�q�B\u0000!�\u0018B\u0000\u0015\rI�\u0010�\u0001�\u0015pW�\u0010�\u0012D�c�\u0010�P\u0013G\bk\u0007Є\u0005\t��\u0014�\b@H\u000f\u0018�\u0018�\u0005\u0002��\u0017��B\u0000\u0001��\u001a���\b\u0004/�p\u000f�R\u0010�`KO�\u000b��!\u0000\r�\r�\b@�\u001di��\u001ct�vb\u0010Ɖ#�_\u0001-\"�b\u0011 7�>�\u000fIO��\u00003��\u0013Ē\u0010������a��B\u0018\u0012��ϒu��@\u0004��\u0012�\b@\u0001lCzv!\b\u0010�.\u000eo�,�\u0007O���쎩\bF���3��\u0015�G�~=�1���EI�dNsPB\u0011܏��%\u0018t_��$���\u0005,{��9\u0003�'U��H�ͪ�9lO�a\b��ߧ����gS�sEb�b\u0010�%���ݟ��"},{"_id":"images/wechatpay","data":"����\u0000\u0010JFIF\u0000\u0001\u0001\u0000\u0000\u0001\u0000\u0001\u0000\u0000��\u0000\u0017Generated by Snipaste��\u0000�\u0000\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001��\u0000\u0011\b\u0001\u0004\u0001\u000e\u0003\u0001\u0011\u0000\u0002\u0011\u0001\u0003\u0011\u0001��\u0001�\u0000\u0000\u0001\u0005\u0001\u0001\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\u0010\u0000\u0002\u0001\u0003\u0003\u0002\u0004\u0003\u0005\u0005\u0004\u0004\u0000\u0000\u0001}\u0001\u0002\u0003\u0000\u0004\u0011\u0005\u0012!1A\u0006\u0013Qa\u0007\"q\u00142���\b#B��\u0015R��$3br�\t\n\u0016\u0017\u0018\u0019\u001a%&'()*456789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz�������������������������������������������������������������������������\u0001\u0000\u0003\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\u0011\u0000\u0002\u0001\u0002\u0004\u0004\u0003\u0004\u0007\u0005\u0004\u0004\u0000\u0001\u0002w\u0000\u0001\u0002\u0003\u0011\u0004\u0005!1\u0006\u0012AQ\u0007aq\u0013\"2�\b\u0014B����\t#3R�\u0015br�\n\u0016$4�%�\u0017\u0018\u0019\u001a&'()*56789:CDEFGHIJSTUVWXYZcdefghijstuvwxyz��������������������������������������������������������������������������\u0000\f\u0003\u0001\u0000\u0002\u0011\u0003\u0011\u0000?\u0000��(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�\n\u0000(\u0000�\u0002�?���9�������_�O\u000f\u000b�t���(£�����?\r�\u001f^x��\u0010��~=�!��'▯�i\u001f؟\u0013�%�O\u000eG��CÚ5����\u0013T��~U��0\\]�8\u0007�9�\u0000\u0011G�u�\u0000���Y�c����\u0000?�(��.��\u001f/�k7�y�\u0000��@\u0007�E\u001d�\u0000\u0005��\u0000���\u0000�f��?�\u001fh\u0000�\u0000�����\u0000�|���߱��\u0000C�\u0000\u001f�\u0014w�\u0017_����\u00005��<�\u0000�}�\u000f�g�\ru�\u0000��~ן�Qo������#���./\u001f�/���~\u001exk_�\u0000�\u000b�����\u0007�|+�c�Ht�쿅�\u000b�F�y�Z�\u0016�{���]j��ϳ��Z[��\u0000\u0007��\u0000\u0005��\u0000���Z�c��*��i�7��_���+���\u0000\f�߆�~\b�g�(�٧��ؖ� �%������x��߉�W�}��^ ��\r���%����j�����B\u0001���\u0000\u0003�G�����\u000f\u0016����G�>)�]��\u0000�z��{[O�k:߄��OT��%�\u0016�V�j������[�ÿ˷�(U#P\u000f���8�����`��&����\u0000�P���\u0000\n����o�\u001e\u0013��o�!�\u0001�ϕ�x��V�[������o\u0018xe��\u0015�+��4g��ٛK�\u0019��\u0007�/�\u001a��\u0000\u0005G��?�\r�y\u000f�W��.��ae����-��߇_���\u0000��?�G�&_�I�\u001fx\u0013�c�c�\u0010_\n�\u0000��W�?�/�%_a�v���\u000f��\u0000���-/�\u0014��\t��\u0000\u0005\n�_���\u0007���\u0000�E�V���\u001c|E�</�\u0000\ns�\u000f����-{�\u0007��\u0013V�?��'�+񧈢�^��\u000e��>\r^=*\u000f����0�\\�Kp\u0001�h���\u001c~)|g�\u0000�^��?�WĿ\u0014�I��?�i��⿌�a����\u001f�g�� �S�x�W׿�\u001f�4�+��w������ҴK\u001d\u0016\r�\u0000f�ӡ�U�\u0000�w�E\u001d�\u0000\u0005��\u0000���\u0000�f��?�\u001fh\u0003�:�\u0000�`��_�R��(����c����H���c��\u000f��\u0000\u00144O\f�\u0000�\u000b��\u0000�^:�>1�\u0004𮙮l�.�[��\u0010\\��A񯉬?�.�Y�y����q��{g��Z�zg�\u001d)�\u0000\u0005z�\u0000���9i�٧���i�B�\u0000��\u000f�\u001a���]�¦�\u001d�\u000b�[Ķ�\u0010u�\u000e\rK�C��O\u001cj�\u001b4�;{_�闶V\r���j�\u000f$�\u0001���\u0000\u0004\u0018���:��\u001f�I�\u0000�K�����s�\u0000\u000b'�gĤ��|k�_�F|\u001f�����\u000f�;��\u0000��;�\u0000\u0014�|?�o\ti���\u0013𶅥ħA��_�~�}��J����\u0003�\t�����?�-o�������e�O�G�\u000b�\u001f\u000e�h���\u0004�n��\u0000\f��&���\u0015��į\u0013x��W����'P��\u000f��#O���v�}�]�>}���̒��\u001f;�Q��]�>_��o���\u0000���?��5S�\n��{�\u0000�I<c�ki_��Ǐ�\\�\u001f\t<3�'P�{\u0007�*�\u0000�\u001f\u000e�\u0000�\u001f���V�ēy�\n>\u001d�\u0016mW�J\u001f\r���rjQY��u�Z���\\\u0000|��\u0000\u0007@�\u0000�f?���N����\u000f�_�����\u0000�?���\u001f�\u000f��(�\u001a�\u0000�?�\u0017�\u0007ۼu�|g���=O\\������� ��O��\u0013�\u000f��=V�G��3�V�|W�����\u0007�s�\u0000\u0004����C���\u0000�p��?\u001e�5x��\u0013O�\u001f\u0016>\u0001�\u0017ƿ\u0010<W����\u000e�\u0000o��Y���KS��𞓡xkJ�D�7��]\u001fM����ZļP\u0007�\u0015\u0000\u0014\u0000P\u0007���\u0000�}�\u0000��U�أ�\n��K~͟�'�U�\u0000\n����?���\u0011�_�(�ٿ�_�\u0012���\u000f�\u000f\u001bx���#����~,����?���On��ޭ��>�b-��{[H\u0000?\u001c�(��.��\u001f/�k7�y�\u0000��@\u0007�E\u001d�\u0000\u0005��\u0000���\u0000�f��?�\u001fh\u0000�\u0000�����\u0000�|���߱��\u0000C�\u0000\u001f�\u0014w�\u0017_����\u00005��<�\u0000�}�\u0003�\"��\u0000���\u0000���\u0000�~ǟ�\u000f�\u0001��T\u0000P\u0001@\u001fɯ�\u001e]�\u0000(��W��g���W\u001f\u001b�\u0003�{�\f��K�↓�\u0000\u0005#o�\f�\u001f|Dm\u0013Q��\u0017Fo\u001dx3Þ-:@�m�iS�\r0��n�l\u0005�7���\u0017F�����x�\u0000^�\u0018�%�\u001b�\u0000go\u001aM�����?��?\u0004~![�\u001a��\u0005������\u000e�_\u000e�����j��o��i\u001a�z~��J�7�f-�7h$p�@\u0007��\u0000�_�\u0001?������t�\u0000c�\u0000�]P\u0007��?�\u0011W㇏4\u000f��\u0005�&�1�-�L�[��Ꮗ�\r|Q�.x���\"�Jү��R=\u000f��\u001a����U��\u0013KԵ{山��4�>��p���ʀ\u001f�?�\u001eO�K���O�'/��|8�G���\u001a������.�V�O�|+�]N�L��W���4��\u000bI����K�;K���V�{�[i�3$\u00112�w\u001f�d�������\u0000���?�G|\u0016�\u000f�+�߳����]r�\u0000��2�\u0017�wž%�Z\u0017�<C�o�^\n׵�I�����{�[U�.��\u001a\u000b;k{HZ��C\u0015�\u0010��b�\u0011@>~���\u0014��\t��x�A�?�/۷�/�~!j~(��\u001bxgᏇ�\u0000i?��^.���\u0007��o\u0002h�\u000eӼb��ψ-�?��j�O}JmM������\u0002\u0001�ߌ<\u000fைZ3�s��\u000f�<=%�\u0017��x���O�tg��,ַO��V��-sl]�\u0013�\f��c\u001b)' \u001fŗ�\u001d_�#��3/�\u001f�\u0000\u000e����<�V���\u0000�u�\u0000�\u000e�#���!����\u0000\n��\u0016�(�\u00062�cǟ���\u0000�S�o�U�ؘݫ�\u0003��\u0000�\u0003���m��bo\u0015|=�\u0000�������������׊<;���)^������\r��MK�\r4�\u0000\bk�6��Mϥ|C����\u001e��wR��o\u000b\\k�o�`�emB�WT\u0000�+��ߵ'ĭc�\n\u001b�ii����\u0013�G����Q�h��5�|\u0018���\u001b����\u000fo~ �v�\f��ke�}�'?���i,`�ͯ�\"m\u0016]1�b�#6�\u0012�\u000f������/�C�2�\u0000�He_���G�i���/����������S�\u0003�\u001f\r�g�\u0004xz��>.Ѵ�G�g�>+xSG�{��\u001e��ڞ���]x�R���\\�������mcp\u000f�����;�\u0000�0~'�A��\u000fس���-�ߊv�\u000e�5}wG��<i�\u001f�~=��\r����=WR�l~\u0017�\u0017~ ��0���\u0000����Wq�!5��\u0006+�\u0017��+\u0000\u001e��w��W�b~��\u0000����_ٳ�T��h\u000f\u000exo�uִ/\u0010��\u0005�\n�G���hZԿ\u0012�A\u0016��j~\n��e��rX�\r�X�M\r���\u001d��bur\u0001�Ux��_����\rC�\u0017��Q�N��>(�\u000f�F��cĺ��/��׃?�(��񝐽�}���\u0017�\u001f�\u0000��O�\u0015�����M�����\u0006�\u001f�\u0016��3\u0000����\u0000j��#���\u0000\u0004e�q�A�\u0000�8u�_W�\u0000�b��I�K��g���S���*�Y�a-��\u0012����ky-�e�eǋ�1����\u0010\u000f�\u0019�E�W�\u0017�\u0003�?����_\u0011�4|Hխu\u001b�+�\u001f\n�\u0015�?�\u001e3Ԭ�{9u\u001dZ���\u001e\u0014ӵ]j��L����P���H��!��ᣆ7p\u0001��?�gG�}�Y~�~9��/?i�ُ�����<g�?����\u0017_\u001b>\u000f�@�[o⛍\u000fX��.�\u0007�f��H�����]2MN-8ܽ�j6Mr\"[�\f�\u001f�g�K���\t���\u0006��~ڟ\u0016�\u0000a\u0001|R��v��h\u001a?�7�O��\u001c��π.5�\u0010Yiz��e�CP������\"��Ukaug\u001bh����۹��PU\u0000�-?੿�I\u000fxY|/��\u0000�(_�\u0013�CҴ�\"]3��\u001e���I�>i�v�\n[�\u0015����:_�����\u001c�vֶV�U�0H\u0014\u0001�|_�G�ً�\u000bC�/�)��K�O��\u0000\u0001�\u0000�>\u001d�=�|x���=s�ÿ�{K�q�xj/�}���:��t�|5i�G��T�̩b�_5�E\u0000�O���\u0017�'���\u001bO\u001f��\u001a�\u0013�\u0006�.��Y�Z��\u0018�!xOᧅ�|M�YjZ����u�\u0000\u0019j�6�q����6�i��t��\u0016z^�s\u0014\u000f\r���\u0001��'����j-?�:����C�\u0011����\t^X��*Ծ\n|S�?�\u001b\u000f\r_�pOs����~\t�5�4��B���{+{� ��\u001by��\u001d\"vP\u000f��\u0000����9��G���f��e��\u0001���\u0000�MO���}��\u0012��\u0001���\u001b���kii�\u0000\u0004���|m�\u001dx��È������|\u0007���ž,�.����(�K�c]�u{Ш�ut\u0000�Z\u0000��\u001a��\b\t�\u0000G%�\u0000\u0004��\u0000ç�\u001f�\u0000��\u000f�k�� '�\u001c��\u00123�\u0000\u000e���\u0000˪\u0000�����\u0000����߅�/\u001c~�\u001e\u001a���>�3F��<)����΃�/�o���\u0013�i�f�u��G\\�]���Yk��V���s�W\u00171�Ea��ג@����H\u0001�L��^�\u000ex{�_�X\u001f���~\u0014дo\fxwH��mt�\u0007��]�������x^O���^�\u0005���\u001ed�'�m\u0004Q�wm���\u0001��T\u0000P\u0001@\u001fɯ�\u001e]�\u0000(��W��g���W\u001f\u001b�\u0003��\fh�\u0000�?�\u0014���_�������\u0001���\u0000\u0007|�c�U�\u0000f��/�\u0000M��\u0000/T\u0001���\u0000\u0006��ra/�\r|u�\u0000�^��@\u001f���\u001e��\u0000(����\u0000���\u0013�\u0000�\u000f���\f��2s�Q��P�\u0000��k����\u000bP\u0007�Y@\u001f�=��σ~\u0001�\u0000�[~\u0019|t��u{c����\u0014c��\u0016|w{��O��6~\r�s�K�0�=Ն�j\rΥ{o�h����[�=��\u001d�@�\"�\u0007�=�\\\u001f�F\u001f�*�\u001a�����\u0000��\u0001�\u0000\u0011p�\u0018�|i�\u0000�\u0007��1@\u001fϷ�\u0015\u001f�*���\u0000\u0007)~њ\u001f�\u0014\u0003�\tc��\u001f\u0010�\u0000f�\u0000\u0006�)���Ǯk�\u0015|I��\u001b�,_\u0016>\u001d���>?�6�\u0007�<\\b�.4�\u000e|Y�l���k�;����X��a>\u0000?=t\u000f�5#�\u000b\u000f�m{D�>\u0018|\u001c�A�~����[��㯂.�\"�<?y\u000e��K\u0005�sy�\u0013Gei3�\u0004<�\u00164��P\u0007�7�\u0016#�\u000eE�\u0000�\\~�_�MO���d�\u001b�\u000b➯�_�߂4\r\u000b��n��w��\u001d�n�\r?�\u0007�<Cr��֡\u0012��F�f�}\"�9\n�B>y\u0016�?$�\u0000����J��_�0_������\u0000�\u0005\u0000��\u0017\u0017�\r��\u0000��~�_�T�ڇ�����\u0001��[�A�M�\f\u001f\bj~!���?\u000b�\u0017C�_���o�Z��4-JU���|O�\u001dj���\u0003�6�Ay\u001f�#�\u000f�����\u000b=�\u0000D���\u0000���o�0�\u000fٟ� o�\u001b��\u0000\u0005'�\u0000��K>\u0014~�����\u001ah_\n<%ோ�&��xk�υ�W�E�\u000f���tD�E��kˈ��/��X�[x����C@\u001f��\u0000\u0010��r��\u0010��\n\u0007�\u0000\u00054���\u0013�w��|\u0017���\u000f<%�'x\u001f�&�}�ω�\u001b�^�\u0017��/�\u001f\u001d|c�Zå�\u0012%�Œh~<�����<�g���O�k.\u0000?�������_���\u0007�\u0013�~��e�i\u0012~\nx���^<�ѵKmwL�׼=z��p�j�%�u+x�H��ؘ�\u001c�\u0000���E��\u0000\u0004a�\u0000����\u0000\f\u001f����\u0000?�r7�\u0017[�\t��\u0000\u0005,��<\u0005�\u000b�V��?\u0011|G�?i�\u0000\u0000|RԬ|W��ľ\f�c����\u001b�`�֥s\u001e��F���G���C�+\u0015>t�M<�6[�@\u001ff����Ao��+�\u0004�\u0000�\r�\u00007?�t���3���\u0000�W���\u0000���Z�?����������П�/�a]&�?�ހ\n\u0000�\u0000N��2��Q��E�\u0000��x��\u0000Y�\u0000�p�\u000f��\u000e\u000b�\u0000���\u0000�A?췟�C|)@\u001f��@\u0005\u0000\u0014\u0001���\u0000����o\u0005��|\u001e�\u0000�q�?7�\u0000�Ə�\u0003�\u0000�M��%�\u001d�\u0000�/�?@\u001f���w���;�_�o\u001f\u0002�\u0000�ٮ�\u0007��@\u001f���l���'�\u0012�\u0000���_�e��\u0001����/ٿ�ϛ�?���\u0000hz\u0000��\u0000�'?�\u001d�\u0000�\u000f�����\u0000�;�\u0000w_�R_�:��\u001f�N��g��k�\u000e��\u0016.�\nj^\u000fӦ��g�A��\f��\u0019�oß\u0007�AYb���\u0006�O.�,#�j�L������Z�4\"�[B\u0001���U���'��\u0000f��C�\n\u001cn=\u0006{\r;�g�\u000f�<�(\u001f�ޡ\u001d��v�\u0001�\u0017�\u000f�W���\u0000��xR�Hc�\u0000�o�\u0012�F^%��\u0000j�\u0000a2\u000f��\u0001�N�\u0001@\u001f�G�\u0000\u0006d�\u0000�'>\"�\u0000���^�\u0000�S�\u0012�?�ω�\u0000�M~!�\u0000؍���0j\u0014\u0001�!�\u0000�O\u001f��������\u0003~��>>��]w���گ�!��߆��}���K�|Rn���:߆��Ve�Z�@�ޞck�q渄� \u0007�H�\u0000�\u0011���/\u0010� �j�\u001e��گ�q�|z�����ρ���?��É��M�\u0013�W��č�\\�Q�]Ef�\r��\u001bJ\u001aU����]�B!b��@\u001e��\u0000\u0005��\u0000��4/�#��O��\u0000\b�o�WW��\u0000/ş�W�\u0011�״�v\rcУ��N�ფI�\\�4��j/#i��^�풪� �+\u0014�\u0003��#��g�#g��\u0000��zW�\u0000C�\u0000bz��kk���:���|\u000bqqe��Ƿߵ��f<E\u001cWS��|\u0016��\u0011�(�g�4��q$1`�E�\u0000\b�ƒ7���3(�\t\u0000�\u0006�\u0000�T��~\u001b�\u0000�����\u0003����ػ\\�1w�\r�@�\u0012x���Շ�-���'�uO\u0015��xn\u000f�^\u0012���4�M��5�qh�\u000b�\u0015���p\u000f��\n\u0000�#�\u0000n��4#�_�o��G��v����\u001e��{��⏉Px\"��qԼM?���\u0015�ڗG��\u0011|lУ����\u001b���՟�\u000bH�P\u0007ɟ�\u0003w��\u0000�$�\u0018�\u0000�T�� �\u0003�s�\u000b!�\u0000\u0006�x��\t\u0015�,xW���k�\u001b�ŷ��7xS���7O�%{��{9�Q��^._\u0010��s�OƱ�\u001d�x\u0005�\u001bL\u001aLMpڢ\\��E���\u0003���\f|�\u0000�\u000b�}�\u0000�]�'�\u0000�o��\u0003���\u0000����9��G���f��e��\u0001���\u0004�\u0000�\\�����\u0000\u0001�\n�4\u0001�6�\u0000P\u0007�t�����/�ϳǿ���\u0000��\u0000\u0014��p_��o�\n\t�\u0000e��\u0000�\u001b�J\u0000�\u0000f�\u0000(\u0000�\u000f���\u000f.�\u0000�Kx+��3�������\u0001���\u0000\u00064�\u001f�\nm�\u0000a/���\u0000Ii�\u0000�����n��\u000b�\u0000\u0005,��o�\u0000i��#[��l>#�>\u0010𿂮-�\u001b�D𿆼24\b�u\u0006��隷��\u0012ݭ�%ܿk��m\u001c�\u0010�\u0010��\u0001�\u0007�A��\u0000\u0004��\u0000�����\u0000���_�s�\u0001�?�Q�\u0000\u0006��:?`��{�o�k�?^��/>)|!��Eׅm�w�3�Z��%���\u0007�7��Tj�N���A��EмW�=��V�0߭�Ù����\u0000�\u000b�\u000f]�\u0000�i~��\u0000�|�\t�\u0000�\u0007�C�\u0006O�\u00199�\u0000(�����5��Q�\u0005�\u0003�\u000b�\u0000���8�����\u0006���~\r�\u0007�^��?��\u0000ڏ��9��\u0000X�\u0000��\u0001�-T\u0001�M��_�F��#�\n�߶���ڧ�\u001d7�\u0014\u0002��g����e�xK��\u0000��~;\u000f\u0013�\u0000o�\u0000mx;ş�\u001e_�+�\u000fe}��?�f��}��1}�\u0003�\u001b��\u0000��~5���\u001b���'?�\u0013b��� �\u0001�o��\u0017�U��~Ӻ\u0016��C�\u001a|M���x��߈��G�\rsᆗ\u0007���>\u000fxNM7J�ó�[j\u0012��\u0012�1^Aof\u0001��\u0000\u0007|�\u0000�V���^\u0004�<5�$&��]J��Z��|!��i~#��G�\u001a�y~.�G\u0005��^Lm��\t�9�;�\"�F\u0000�������߱g�\u0011\u0013�z���\u0000\u0005S����\u001a��5�\u001ch�>>�K�|k�ׇ|o��\\�\u001e��|6�\u0013�\u001e\u0015��\u0000��\u0013��6\u000b��\u001bk\u0012[����G�=I,�^�H���p\u0004�\u0000�t��_�7�\u0015C�����=~�:7�]?�~\u0011���o�J��w�<K�_\u00107�|=�[ূ�\"��5�\u001fx��m\u001d��:��Y��\f�^&�2�G\u001d���\u0000~U��\u001f�z\u001f����\u0006��\u0000�[Ĵ\u0001�QP\u0007�z��\n</���\tY�\u000b�o���a�_��'�¿�\u001e/�B���\\���\u0000\u0011g=\u000b�\u001a��5�ͥ�����V�v�}��7��݈f���\u0011�p\u000f�7���\u0000�S���ng����*��\u0013�\u0000Q���~�\u00075\u000bx\u0013�Zw�\u000f�\u001b�7��tO�:���/\u0018>��_\u000bxW�ֳy}\u0017�<C&�<\u001e)���S[{��/a���\u0000���\r��\u0000����\u001f�V�\u0015��z/�G�|\u0019�l�\u0007x{�Ʃ����z�\u0000�����ڗĻMpko�x�ŋ}\u0012E�-,�-�X���ّ�\u0004�!\u0000���\u000e0�\u0000���ܿ�J��g�o���3h�\u0001�\u001f\u0002x��Y�W�M^o�>\u0001�'����o�>-|n�M�Vz����\u000b[C��\u001b����ri�O\u001d��\u0013���E\u0005�\u0007���\u0000\u0004���� �՟�O_�g����\u0007�-�$�d�\u000f��\u001e.��u�xf/\u0010�\u001a[�]�����:�ݞ�%Q��O��J��k�<�\u0007�C�\u0000\u0004��\u0000���\u0000ॿ���\u0014\u0003�N��~+x�_��s��\u0017�<\t�\u001b�\t|-��X�MW�\u001fj}\u0017S�����Y_\u000f)|��4��Ӝ���\u000f�7�\n?�\u0000\u0004����\u0000�?\u0001�\u001f���������\u0007ÿ\u0013�\u000f�Z|�\u0000\f<I�x[�-�\r�o�\u001e\u0016���u�\r���M%��\u001b�-sh�ts�t�R��i\u0004�N\u0001���L��$���\u0000\u0004���\u0007��ڗōGI���\u000f\rx�ŭ�Wź/�/\"�|+�jz^��<�/��)\u001d��[j�F�)�ye\u00112K\u0010FW\u0000�\u00005��:{�S��d�+�k�\u0000�W�-@\u001f�S�\u0000\u0004��s��\u0000�?�F/�o�'�\u001fQ���\u0014����?ß\u0012ˤ\\�g�G��\u0000\u001b�ʞ\n�β�]��אZ�)�jw-es5��P\\����tS\u0013\u0000~=�\u0000�\u001b?�I\u001f�\u001a?l/�<�\u0005�\u0000�;@\u0007�A��\u0000\u0004��\u0000�����\u0000���_�s�\u0001�e�\u0000\u0004��\u0000�d��_�Jς�0�\u000b�2��K�|\u0011��Z���fo�^&�|U�����\t�7��qY_��\u0019�\u001a@�<\r��6rXO:^=��v��\u001c0\u0000�'�\u001c\u0017�\u0000)��\u0000���o?���R�?٦�\n\u0000(\u0003�<�\u0000�ɭ�n���^\n���{�\u0007��}�v�I3�\u001f\u000e>6��#Vm��\t�\u0001#�E\u0000�\u0017���w����\u0013�\u0011���\u0000�\u000f�%�<��vџ�i�?��߅\t�����\u0017���e�&�����\u0012����T\u0017GM\u001a��,�\"���\u0000�\u0003�\u001e��\u0000\u0005i�\u0000���C?�,h��o(\u0000�\u0000���Z�\"��P��K\u001f�3�\u0000��\u0000?����V��H��\u00143�\u0000\u0012����\u0000��<k�w��s��\u001e\u0019�|\u0015�G~�\u001f�g��\u0006���\u001e)��'��?ů�>\u001aҼMm��:M����\u000f��#�4�-r�J�5m6\rZ��+��5MF�'[{ۘ�\u0000�\u0000B\u001f�2�����\t��PGwmql��gkn�q\f��'�)\u000f��,���A\u001b��A\u0019�4\u0001����z^�q�\u0000\u0005�����N��'�7����iq$o�ٿ�❮���\u0018\u00158'\u0004\u0011�P\u0007�Q~�ڎ�/�\u0010�������K�?��\u001a���K�\u001e��_�B�4Kn�+�Zv���%S!��\nX�?���\ro���\u0012�}�\u0000���s���\u000f�G����3�\n�ɫO����\u000e<;�\u000b�sk\u001ae���^�/�<i���$������\u0017�fnmZI\u001a�D.Ā~��\u0000���7��LE����\u0013\u000e���\t�~7\u001f�x|n?��������>\u001b\u000f���\u0015���~\u0002'���:\u001e\u0003�\u0000�������\u0000�W���\u0000\b��&~.���\u0017�$:���>��\u0000�h�\u0006�'�\u0000���>�g���\n5��������H���\"�6��2~�\u001e\u0002���+�kL�k��\u0000��\u0000\t5�\u000f�\u000fN���J��\u0011���*�V���b�V�Bӵo\u0011k����7���5�\u0007���\u0000\u0005\r�k��<�\u0000��~��\u0006�s�\u001d+�\u001f\u000f�\u001f�x�O��|!�\u000b��o�\u001e\u0017�Ə�Q�Ѵ?\rh:%�����Z]�0Zi�n�kmaei\u0014PZ�\u001c(�\u0000?�\u000b�\u000e+�Y�\u0000���\u0000��0E$ҿ�\u001f\n\u0004�$i$r>-�<$* ,�\u0000�\u0000x\u0004�\u0007�m�\u0000\u0006Z�����\u00157㤗V7�ѷ�\u000f�Q\u0016K�i�B�����X i\u0011T�Uf\n\u000eHV8�4\u0001��{E�����\u001c����ҧ�î�����*����B\u0015�h�N9���4\u0001���\u0000\u0006��\u0000�?���\u0018����\u0000�����W�u�G�ψ����g��-���\u0006<i�\u000b]:O�E�B��\u0000� �/�<!�x�R:o���\u001fGҿ�of�\u001e���\u0016�]���H\u0001���.�\u0000���ݾ\u001f�\u0000���:���7�k��\u001a'����Q�#�g@�%�~�\u00174��O��7����\u0011�|+�>\u001c���\u001f\u0006��6��L0xJ��6z<^\u0019��QhV�jiH��\u0003�h�\u0000������\b���\u001bhe���%~υb�7�B\u0017�\u0007��\u0010��b\u0000\u0004�\u000e\u0000��?\u0007��Ǜ\u001b�?�?�Q�wguj$�o��#76���n���pC*.���v\u000f\u0019\u0019\u001c�\u0000���\u000fN����\u0000�\u001f\u0000������`O���om4�\u001c~�\u001f�3\u0014-\u001a2�\n�J��08�\u0014\u0001���\u0015u\u001d>��\b��\u0003Z�����A�%�\u000e9��.��xd]\u0006]��\f��F㺺�\u001d�\u0000�?�\u0010��S\r�\u0000\u0004��\u0000���O���\u0007�\t���\u001eh?���\t����?�g�O�?\u0003�}}�b�1���\u0000��\t|@��\u0017^x^�\u0000�7�}GP�.��\u0003j�6�q��jZF�}y��t�}������\u0003�gj�|��\u0000\u0006|~�\u001f�'�'�[���?i�\u0000��\u001e�=j�\u0016������Z��o�\u001f\u0010>'j\u001e\u001d��/\nx��S���ߏ��n�I��������N�\bng�\t'Gx�*\u0001����\u001af�s�\u0000\u0005�����暈��ٷl��\\K\u001bm��~\u000b�mt���`T��A\u0007�@\u001f��\u0012�\u0000���\u0000�O�\u0001�O\f�\u0013������\u0004x+��/��\u001d��\n~�?\u001f<=�o\t�WÚm����\rxk@�<ii�hz\u0006��Y��z>��ZZ��f�kmeeo\r�\u0011Ơ\u001d\u000f�=;�\n��\u0000I\u0014�\u0000���X�џ��P\u0001�\u0000\u000fN�\u0000���\u0000�E?࡟��?�g�\u00007�\u0000�ӿ�?��O�(g�%��\u0019�\u0000��\u0000|[�\u000fş\u0016�.x��?\u0012~+x��'�ψ�.����_�> j�$񏌼M�y1[hx���!��u�b����A��F��&\u0018��6F�\u0000?�ʀ\n\u0000(\u0000�\u000f��\u0000k_�(g�[�\tI�(k��\u0013�\u001f\u0002���\u001f���\u0002x�kd��?\u00066��(m;�\u001fH�8ћ�>\u001f\u0017_h�9�-��3��\u0000>:�\u0000�������?�_�Ǎ����\u00009\u0014\u0000�A��F?�H\u001f�/��ƿ��{��\u0000?� ��#\u001f�$\u000f�����_�d���E\u0000\u001f�\u0010w�\u0011���\u0007�K����\u00002_��\u0014\u0000�A��F?�H\u001f�/��ƿ��{�\u0000�\u001a\u0000�4�\u000f���\u0007�;��\u001f\u001d>\u0002x�F�������׃�s��x4}~�E�uO\f��\rB���m����d�u�G�\u0016R�\r\u001e�`\u000f�����9�\u0000���������\u0007�(\u0003���\u0000�\u000f��ڋ�\n��\u0000\u0004����#X�$���j�?\u0005�$j^\u0015�|oc�/\u0016/���s�McQ�4�3[��'Bԭ��y��Y��u�����n�Wc8\u0007�?\f>&x\u000f�Gß\u0003|\\�]�m?�\r�%xWC�|[�}�i�%�t�5m\u000b[��T6�?cԴ�{�>�\u0019|�W̉\u001b*\u0000;�\u0000������?f_ؓ���_������\u000e��\u0018��\u0000\u000f�\u0015��j�M�񞭢���Zw��\u001aN������D�u\u0018����\u001aU��VO-$\u0000����m��G����k�&�m���\u000f\n�/_���(ּ 5qi�x��N�V�K����4�~�&�s\u0005��Q�\u001f�*��e@\u0007����?�GO�)��O�\u0000\u0005y��~<�ϟ���/�_\b<v�\u0000\u0002\u000f�<y���ѵ��ٟ�σ��f5\u001f\u0011X�ĳ��\u001f�t{�:�/��>/|[$p\u000f��;�����\u0000��\u0000����\u0019W�ů�_�[����\t���\u001d��ߎ�\u0018��\u0004���\u0005�+�x�-]�\u001f����\u0019��';7\u0000���D\u001d�\u0000\u0004c�\u0000���\u0012�\u0000�<k�\u0000̗����\u000f��d��(��O�u���N���\u0000h�\u0003|t��mk�^�����\t<7k�uh<?5�\u0000�Ƒ���R]\u000bWK �wXM�\u0004�7\u0000s\u001f�G�\u0015#�\t��\u0011�AѾ\u0015~տ�\u0017ÿ�_\u0010�C��?�\u000e��_\u0016��N��x3U��C�?�\u0010\u001d'C����u�xS�Zt{�I��*�t+\u001f��\u0001�l�Qo�%\u0017�\u0014G�����\u0000j�\u0017�F���$|u��h.���C�\u000f��Ã��\u0000\u0011�\u001ex���h\u001e*І��iz�ӵKo�ۋ�:��o��t<P\u0005��&��\u0012��\n\u0017�\u0004�ݿ����`���\u0000\u0011�\u0002��?��ſ\u000f�M����m���ï\u0001�h���6�4mwU�\u000e�c�E�}�N���]�=\u0000�g��\u0000\u0005P�\u0000�|~��\u0000\u00115\u001f�����M���W�m#�Z���/\t�M|D5;O\b�\u001a���jZ���\u001e�m�;=W�z\u001d��.\u001ao7R�+\u0013&�@\u000f�\n\u0000(\u0003��7�\u00173�\t-��\u000f��\u0014�H���\u0010xK�\u001f�/\u0019x���|+����\u0000��3�O\u0005�w�\u001b�O��\u000f�xb����6��_i�g�x<�g�2��\u001d����\u0000\u0005��\u0000�h~��\u0000\u0016|7�+�v���\u0017�V���\buˏ\rx\u0017�k�q�k\u0010�kAԼO��ju/\u000fXY��t\r\u001fS�.<ۨ�������Q\u0018\u0003���\n\u0000�����\u0000\u0005��\u0000�Y��\u001f\u0014|g�W�W������?����\u0017�|\u0017�/�έ��_�׿a�6>\u001b����wm7�.fM��ϐ�\u0000~��\u0001@\u0005\u0000~v�\u0000�N?ॿ\u0004���\u001f����L||��?\u001b�#W��ᯅ6�?�\r'�Zϊ���S�x�^�����~3�.��<\u0016�\u0011�b��5�/R�{%��x�ym�?�\u001f�Z�o�<\u001ao����\u0013���\u0007\u0007�\u0013�?\u0017X|_O�X����Tߵ+xj��m��~\u0005��\b��z*~�>0\u001e.>'\t��j�\u001a\u001a2k��T:@\u0007���\u0000\u0005#�\u0000�x|b�\u0000�_��:�����\r<g��7�~\u0012�����mS�:��_J�\u0017w\u001am�W�0���u��[����7В�6d\u0010]\\\u0002�@?lg?�4S�\n\u001f�M~Ͽ\u0003h�\u0000\u0003�x��4o\u0005�}�C���?���\u0015��ㅧ���\r|N�~��]\u000bO�\u001d���\u0003Zҭ��-3Z��խ��cU���9�ԯm�;�@<����\u0000�\\?n��'���o������I�Wß�v�\u0012��&����\u001f\u0018�?\u001a�\u0011����\u0015�w���c���\u0012Ч{}g��u���\u000e���^�\u0003\\]$\u0016w\u0000\u001f�_�K_�%�Ǐ�+W�?\u001b�\u0001��<k����.�\u0017�}S�\u000e��|d�<e�xr�ÚG�<\u0017໋\r:��>\u0006���&�&��*�\u0018.t�[\u0006���$}F;�����,�S?��?\u001f?��_\u001a<\u0003�7����\u000f\u001dx��'��O�\u001a6��kY���O\u000f�x��\u001e\u0010��S��|\u0003�Ŭ.��=B���/,���n��;�o\u0000\u0007�!�\u0000\u0004��\u0000��?a\u000f�'�\u0000�\u0013��k��~.�\u0015���S�\u0017�֏��?ĺ�Ï\u0007|\u001c��\u0015�M⯋^>���w�&���=rx��|Uakxo�?�2j0^G\nOl��N\u0001_�N�\u0000�Y�\u0000o\r3����o��5~����O��~\r��SxZ/\u0018�d?\u0011��ŧ�\u000f\u000e|i�@�L����f��gNK\u0016�ZhG]\"ݼB�~u \u0001���\u0000�H�\u0000�\u001f\u0007���\u0000�>��S�t�Ŀ\u0019�\u000bN��\r6��K����|c=�\u001am�V~0�w�4c�۽���G�R�5h�\u0016�\u0004�P\u000f��\u0000����Z�ُ�\u000b\n~>\u000f�����\u0000�\u0000�;����?�<?��B���\u0000���\u0000\u000b\u0017�\u0011��F�\u0005���\u000b�_a�\u0000�g�l�\u0000jdy\u001flҾ���\u0000:��@\u001f���_��7[���\u0000��~�~\u0014��~\u0000�Y���\u000f��\u000b�z�/�K�\u001f�\u0007�~)��)��>\u0017���\u0012__��x/�\u000f���Ѧ��\r��kQ_=ս�Ma\u00041��r\u0001�/�Ŀ\u0006�K�\u001a���\u0000�?���:���\u000f\u0015��?�/Ï��6��\u000fq��cX�a��\u0000N�5ۿ\u000b\\��w�5+�6��H��I�V��k���\u0016���vx�\u0000�o�5��&G�\u001b����\u0000�\u0007���\u0000�%@\u001f'~�߶��\u000f�;/ᎉ�\u0000\u0004��\u0000�~xsǿ\u0003>3|\u001c�֗�ix�ſ�6���\u0005|1�>\u0019�8�<M�CZ��\u0014�/ǯ\u0015O㫿\u0014~�^\rԴ�\u000b�\u0000\u0007��\u001f�@�|Mqw�K=F�J�5�\f�����w�\u001a5��\u0017��\u001f�P�+Ŀ\u001d��Tx�\u000f�\u001b�Z��ek�����'��m.��Ε��ߍ���\u001dj�ĲkZ\u0005��\u0016�6���m��m,��wm-�@\u001fd�\u0000�k�L��7_ۻ�\u0000\b\u000f���\u0000�J�?�\u001b������k���\u0000h_��\u0018��t�\r�[���g�o���v\u001b;}r�C��u�\u0000\u0015i6z�\u001a}�a\u0006�ka�����c����x�%���*��\u0001�\u001f�N��#���\u0014������K�\u001f\u000e�\u001f�\u000bƚ\u0017��A�k�\u0014�/\u0012�>\r���?��\u000f\u0014j�_^�K¾3�㹹�Ӧ��m�\u000b���x��[hK΀\u001f�\u0007�\u0000\u0006��\u000f?j?�$\u0007�k\rs�����\u000bǶ�\u001e4\u000f��W���+�\u001f�z�ƙq��Q��y�?�W�_\f�\u001fGm\r�~0�WM:l�������;E�ݮ\u0000?���=[�R��\u0007��\u000b�w��O�O@\u001f���\u0010��-?��\u001f�OK�\u00034v߲�Ë�T\u0000�HtV��\u0006*���\n\u000b(�2@�?�ύ�\u0000�q_�m�\u0000\u0005��I��\u0000�%���������������\u001f��5���o��\u000f�O\rx�š?��O\u001f�\u001e\u0003���\u0017�:w� �$�m����O����4����\u000f��\u0000c��K��\u001a��GT�\u0000�����&�{���ğ\u0005j�����\u000f��Q�'��(��F���xⶇ��WƟ\u000b�\b�^\n��>\u0005���U����\u000e���~\u001bO\u000f^�\\�7�X\u0007��F��\u0000\u0004��\u0000�u���������$�\u0003�C�\u0000�~��\u0000\u000b��_��/�\u000b�φ�}�/�?\u0015.<sm��\u001f\u0013��\u0000\u000e�^6�\u0000�@�GÍX��>\u0015�7�4(R�Y�w�\u001b/\u0010�\u0019t���[K���\u0000\u000f�����\u0000�D?�\u001f����\\�ў\t���\u0017��\f���N�|���\u001d'�>7��i�}/�\u001f\u0015>*���Z\u0006��;]'��t�mz�J׭-�{}3X�t�u\b�#�ԯ��;�@>��\u0000�.��?�'�\u0013��\n1�7������P�wï�:_ś-s@�a�����oe���\u000f\u001c�>�[I��_�O\u0007hSGk�����Q7�!�h��n�[����p\u000f�r�?\u0007��?�p���\u0000\u0004���������U�I����;�I�|cҵ_�~\u0018�a��n��z׌|o��m?P��ů\u0000�q��~\u0003ծg��I��[\u000b�:H�\u0019.$���\u0000�\u0000-��*\u001f�Q�/�s����?j߅�'��9�\u000f��\u0011?�/���=\u001bO񆛧`h�W���/\u000fk�&�m�~Ѧ��4�{S��x��\u001b�ƀ\u001f�\u0005@\u0005\u0000\u0014\u0001���\u0000����o\u0005��|\u001e�\u0000�q�?7�\u0000�Ə�\u0003�\u0000�M��%�\u001d�\u0000�/�?@\u001f���T��6��/�\u0015+��Կj߈_���߅�#Լ\t��\u0002I�_\u0006xc����\u0015��m�-�o��[F�77�x�q\u001b\u001f)\n(��h\u0003���\u001f�r�\u0000ǿ�\u0017�����\u0012g���W�\u001f\u001e�7���0h��O�\u000b�X�7��g����>\u000b�\u0007�;o��F����\u001aT�A��F��xZ��:���(�m�[���@�D\u0014\u0001���C�b�\n�\u0000�C�\u0000c���\u0000�Ǎ�i�\u000f��\u0017��i��MW�>\u0015��u\u001dF_\u0006|F���kW��p�t�y}��]:�\\�\u0012��y#��Fh\u0003�����\u001b�[�\r\u0013��\u0000\u0005\u0005��|c���\u001e5�����\u001b�?\u000f�9���\u000f��\u0017�ڗ�˟\u0018隇�V=Z�_�վ\u0005h�$\u0016WLt�ӵ�Jy\u0007�`� \u0003�D�\u0000���X~#�\u0000�^~;|9���3�G�~\u0011k\u001f\u000e~\u0012��%�м\u000b��ƛ��~1�o�WV���ٮ��{�\u0016�ٴ0���{H\u001c\u000f1�\u000f��\u0000�\u0000p\u000f\u0016|kտf��%߉�h�\u0007EӼK�|\u0001�����z7�uy�mt�V�W�<���N�u;�2/-��V�A���{B.b��Y >j�\u0000���\u0015'�\u000e^���\u0000\u0005J���/�K�\u001f�����w�5/\u001d�7�o�\u0006x��z��\u001d�g����KMrF�6׍z�q!\u001ej\u0004_/�h\u0003���#�\u0016����\u0011��ч��/�\u0018�\u0000�\u0007�!��}�x�E�\u0000�w�\u0015\u0017�,�����G�~����\u0000\u000b?P�w�3��\u0000fY��\u001el�\u0001����B��)ߏ�\u0000ି����\u0000i��\u001f\f�\u001f�_�~=x��\u0014>\u0019�F��j�<�g��\u001d��Ķ���Z�5��]\\x���hP��!��d\u001b�J\u0000�qm��;\u0017���+�i���&��(�\u0012ּ'�������8Yx�P�w���\u0016��i\u001e4��\u001f��;�\u001bi\u0006�\u001e�5�\rBKhG����j<�\u0000���\n}�\u0000\u0006�~��_�\u0019�G~�^\u000e��>5��Ŀ\u0004�%�x�I���|%�]?B����i�\u000b�o��iq��\"��^��\u001a؇3A\u00127��@\u001f���\u0012?�\n��\u000f�\t\u001d�H�����i���\u0016��\u0019�\u0013�/�+�\r��U�4�\"�I�/�~\u001cx�}n��@d�}F���ō�0H~��ڍ܎<ء�\u000f�#�O���\u0000�ߺ\u001e��Z��^\"�d?\u0012~�:����<'�&���:\u001f��=j�/�r��Z���$���a��\u0004�lv�$Z5��R���\u0000!��W\u000f؏��N_�(W�\u0007�\u0019�\u001b��\"���o�m�t�\u0019x��M�u�g�\u0016\u0007�?��\u0000\u0014�~�e�\u0005ӡ���|ow����\u000f2���Y$�\u0001�~��\u0000�f����w�\u000b�V���>蚯�߂�\u0000\u000b�'�z6��χ���F���\u0003�^+��,f���3YX\\��Z��p|� �\u001eS�\u0016�\r���\u0000�H_��l��u\u001f�+��?��:��>%�\u0013��~\u001e�?\b�/��\u0007��\r��|s���^��j:ǃ\u00155�.�=;ē�lv��O{m\u0014WY���?X�\u0000�߿�.����,g��j-\u000b��߆�\u0000\u0007��\u0007�|&մi�\u0005�x�Y�^��&��\u0006��-M|B������W�6�4�yp&8H�\u0003��\u0000�����\u0004?���?i\u000f�_�G�_���>\b�s����<\r�\b�\u001aM���\u001d�H��\u001a��ξ�y\u001e�sy�&��X\"?f[m6�D\u001el�P\u0007��'�\u000eC���\u0000\u0004|�G����?\fg\u001f��\u0017�\u001d~�7ڏ���\u001f��;�/�4o\u001ax�@�\u001a��g�_\u0011�>\u001fu��5{��ι��\u0014YG'�\u0010�@\u001f�\u000f�a�N��\u0000��S�+���4\u0019���O�\u001d#�\u000e��_\u0010]^�h����yZ~�w�\u0011}ok7�|�-H�`m�\u000f�������\u001f�;S�ן�M\u001f�G�~\u0019��|\u0005��A����>%|\u0010�5O\u0017��S�G�\u000b�7�6����3ǆM\u001a-\u0007S�~<k\u001a���+��\u0015����\u0001�..�\u0001�m�\u0000\u0005��\u0000�6|.�\u0000�<|E��|\u0015���\u001f��0Z|m�W�|Q�^��E���q�\\xC]�4�k]9<>�\u001c��G�K,�s�G�1\u001f��@\u001f@�7��\u000f�\u0013�\t��\u001c|(���\t�/|\u001a����\u0017?\u0010.t�\u0018���>7�u�U� |I�wěս���]:\u0015���]s���\u00032ZZA,��y(\u0003�6�co����5�!~ʿ����i�\u0019�h/ٻ�o��kÚ<�7ZO��o��\u0000\f|/��KD��oI��Ӵ��~k\u000b)�ɹ��\b���Y�\u0003���,\u000f����\u0000�&��\u0013��G��O\u0002�o�G�>\u0017�\u000blt�\u0000\u0007���\u0000T�4\u001dQ<�[�\u000fo^��F#P��,�Qq�Z�H\u0012]Z�\u001c��g\u0004\u0003��\b\u000b�\u0000\u0005����\u0000\u0005����B�>���\u001b��\u000b/�?\u000f�#�-/P�'�<S��k7^$�\u001d��=��\u001f�\u001d����+E�'�\u001ecH��@\u001f���\u001e��\u0000)4��?���\u0005�\u0000�\u0001�G�\u0007��@\u001f��@\u0005\u0000\u0014\u0001�/���\n~���Pτ6?\u0002?k�7\u001f\u0013�\u0017i�5Ѿ!��r�ƞ:�$�x���f���:�־\u001e�����m���Y��I�>�9�\u0012�Z�5����y��\u001f�\u0000\u0004������0�Q���>\u000f]�&��4�\f��2�|H���\u000b�zO����#|K��I��_\u001ax�0ю���oS�\u000b�ie�p\u000f���\u000e1�\u0000���\u0000�N�`_�)6��>~ʟ�E��o��?\u0006�\u0014����\u0017?\u0006�\u0007x�H��\u0013X�kW�۾=�q�o\u0010����\u0016\u0016�j�io�\u0016�B���\u000e\u001e7���W�/��\u0000\u0015��\u001e/�,z���\u001b|]־;x���h\u0016\u0011j\u001f\u0014<A�\u000b�\u001e��#_\u000ei�e��,��U����l�{}\n\u0005�[�X*[(\u0007��E?�\u0000\u0005��\u0000����\u001b?e��r�\u0001���\u0000\u0004d���4���\u0000���_���\u000b\u0007�ؿj���\u0007�\u001dk���}�]3��\u0019�\u0007>��Þ<�}�G�k���s��\u0014x�U����\u0000\u0016|{��\u000fj����n\u001fZMJ�G�T�4��\u0010\u000f̟�:\u0003�\t��$�8�l��\u001f\tcφ\u0017?\n�\u0005�_ٗK���M\u0016��\u0010�|����~)�M��ڢ�\u0011�S��Z�_F��i�\u000b+�}9M��[Qsqq4�\u001f�=\u0000~�x��\u000e+�\u0000����\u0000�7��\u0000fo\u0015��zf��_��\b�߁^%��\u0006���e�>\u0017����^\u0000�<8�!��\u0015Z���K�\n^��Z�����v�_[jQj\b�J\u0001��@\u0005\u0000�\u001f�\u0019��\u0000(����\u0000g��{�\u0000UO�J\u0000�\u001d���\u0000\u0006�� �5|p���\u001b�'�[��A��O�}k�ό�T�\u001e�h�\"-WǾ צ�6��&���VӼ9��ֵ<�cL�t�M&\u0000�g����V\u0010\u0001g�\u000e1�\u0000�)���L<'�\u0000�s��\u0000�G�\u001b\u0017�\u0002�ʟ�Q�����\u001f��\u0000���?�~\u0018���}�KE�����}�)-<q��a�\r�M3X:�ï\u0013�S[�K}\u0007��%�:mΣ6�1�\u0016�{).�짷\u0000�~�\u0000���i���\u0000\u0006�|c�A�;�\u001c�����\u0010�П\f�4�Z𾧤h�\u001f��?�}/�:��������?O���-\n8�1���q�<?��z,�\u0001��O{�f��\u0003����j�_��ǯ\u001e~�_���a��\u0000Ɵ���\u0007ƞ-��~\u0016��Z��w�|=�\u001f\u000fl�_\u000fxgN�\u000f�<+�i������������5\u000b����?�kD���/�_�C�#��\u0000íY4\u001f�?\n����\u001f\u0012|\t�>���ɣx��߲$^'�Ƭ�V�g��i�kz]��i����x!6��w6�K\u000b�\u0011��J��(���\u0000\u0005����\t�\u0000\u0004��\u0000���T����\u0000cߊ~\u001b��\u0000�|q�O�\u0007Ï�\u0017:ǈ�\u0014xGT���;�����\t�7������\u0013L���K�e������V��O�{Y@>��\u0000���{H�\u0000�j4\u000f����F[S�'k����/�ߴ\u0005�=��\u0006�8�>\u000b�x#R�qk\r��)/��O\u000b\u001d\u0006��_��\b��\\j�VH��u\b��5-\u0000?\u0000?�)�\u0000�._�\u001e6��\u0000���,�\u0000�\u000f��$�\u0000�!�3�\u0000�߲G���}��߳��\u0000şڳ���aᯍ�\u001f>%��b�����ƿ\u0012�ek��\u0011��\u001f\u0004|4���\u000f\u0000�]/�x4\txcC�->垝n�-\u0000}I�\u0000\u0010��\r?��uq�\u0000w'�S_��\u0001�=�\u0000\u0005���~\u0000���υ�n_�$G�g��i�\u001c�m��������|[���Q�1�\u0007|B���\t��h}s⧁��Լ]��:����Ö�%�]\u0011�,5{m;Tխo�?��\u0000۫�\nc�h�\u0000�J<A���\u001f�Wū_�����\u001f\\�<\ryk������^#���5�g��m�\u000f\b��F��M��O�C{=��c��\u0018�\u001c\u0003�i�\u0000�\b�\u0003�\u0000�����\u0012��k���\u0000iٳQ����\u0016��\u000f\u0016��\u000f��\u001e�\u001f\u0016�\u0017��>|N�G��|=����\u001d�Տ�<3��\u001fO-��\u0016�v֦���_\\\\\\J\u0001�kg�\u0000\u0005��\u0000��~��\u0000�T�O�&���\u0012��_�����~A�\u000e�'�Q/�߂>!��������_��\u0004�{/�\u001f\u0013|:��$�\u001a7½\u0007J����_�v��}NKc��#�ק���\u0000�\u0000E����M�\u000b�o�\t����L�*o�_\u0006|{q᛿\u0015xN\u000f\u0013�����S�?�\u001a?��<��\u001f\u0004k�\u001c�-��|G��W�\u001a��]-���Y째��\u0003���\u0000��|3�_�\u001bi�����?�#v��\u0000���O�k�\u001e&�g�]�5\u001dK��O\u0016�/�Z\r��|5�Ť��7\u0016�o\u000e���j\u0017w���f�G��\u0004������#�@?��ۃ�\n\u0005�X�F�(xo�/��2���_\b�\u0007O�c�k��\u0006��\u0014��V��\u001f\u0013x��Hm'�υ�'�]<:��Axu\u001b�>}NE�[io\u001e���\u0018\u0000?�\u000f�#��\u001b��\u0000\u0004���?���\u0000��\u0000�\u000f���_Լg�w����I|w�~;~��\u0019�Z��%�\u0006����|)�SD���>�ck\u0017���*��1��W��3\u0000gt\u0000P\u0001@\u0005\u0000\t�\u0000�z'�\u0007���^��\u0000\u0004�O�_\u001b�/|\u001dO\u0013��\u0000��x�~\u0016|J����\u000bh�?�x�\u001b\\_\tkZ@՛J\u001a��4�~.\r��o������0\u0003���?f_�)W��f>:�\u001f�����_i��I�u�Ǥ|(������_\u000e�\f�\u001d\u001f\u0010��\u000f\u0016A<�\u0011�\u0011I��]�L3�kx<�0\u0007��\u001e�&��_ڻ�_�?��\rռ9�O\u000f~О\u0006�?��\u001f���ך>���Z_�m/B�G�<a�O\u0010Y��隦�{\u0005����Z�����\u001b�?Q��X�\u0000���\u0017��\t��O[�\u0000�K��Z_��\n|,վ?�i_\b���;�{���%��x�?�)��\u0003���\u000e<\u0011/�&�?\tE�M��\u00126t��z����V��\u000f�}�c�\u0005�h�\t�w�&�3�\u0018�P>\u0011��Rҥе\u001f\u0010|1��?j�\u0001kw�$�vz��5��_\u0007i7�ZT��v�{.�=Ė�]��ܼ&kX\u001d\u0000?�O� f��/����wG�\u0000����'�\u0007�/}��PԾ\u0013i�W\u000b�\u0007�W�����}�;]>�\u0000�ݗ��\u001e>��N�?��ս�׆�\u0007�\u0018[��(_�j-aT\u0003���\u0000��~�\u001d�h\u001f�)g�A��\t��\u0018|Z���\u001dx�Y�yq�[��i�:���O���?J�=��@�d�\u0000\u000b�m�G�����v�M���x�E�\u0014�\u0014���\u001d;Rh��=J\u0018�?.���^\u000e�Կ�߰7��\u0000�\u001e\u0015�����\u0000n��g��7�G�t8���l�h\u001f\u0002�$𯊼7���\u0005ͭ�\u0012^�\u001a懫�<SD�V\u0017���,D\u0003�\u0015����'\u001f�<C�\u0000\u0004��\u000e��\u0016~��\u000f�>7�ƿ��Y���߲���|U>\u001a��\u0000W> ����G���qУ�۝e�O�$f\u001f���(\u0003�k�\rF��|9��_���/�)G썢|9���?�o�)|>���\u0001�xC��\u0000\u0015��Ι�B�\u001d[�{�ǿ\ni������&��\u001dc��|8��\u0007���G����\r��ދ4�\u001f�\u0007ǯ�\"����6�1���?io�GK��,tI~\u001c��\u001f\u001d5�k�\r�՝�w'�5?�\f��'×�7�#�!�u�\u0015OnuMOIѼ?�\\���=��mE^M%ݴ����8�\u0000��_�$��/�K�\n�*�˘�\u0000��\u0016� �*�(��p8>�*�\u001amN\r-[RM%����\u000f�c���\u001b��\u001b�I�Ư���\u001f���\u0014���\f����^���n?�\u001e*�Ƶk\u001d�7����\u0006�k�j0Gumou\u0014W��F�\u0010C:(�$eq�'~I�vߖJV��v\u001bMn���V=w�\t��\u0000\u0004(�\u0000��*�3�������ⶕ�\u0016|0־\u000e��_\u0013~'Z��@>\u0012�\u0017��\u0015�+譬dдe�Umg�\u001a\t���S�v�{\u0007��h�\u001d]-�Z�\u0000���\u001b���T\u000f�'�����'�G�?\u0006]x\u000b�'��ŭ+��\u000b��뗞!�o�\u001fKՍ������n<ضò/,��@=G�f�\u0000�U�\u0000�/�\u0000e��>\t�\u0011�\u000f���z����\u0002�\u0011�;��\u001a�\u000f�����_�\u0012_\u0016k�0�>&�޽�_�mt�_x��M�����<?g�h��i��t\u0007�>>�\u0000�\u000e�ğ\u0012�|m\u0006��W��zw��{?�\"�>\u0017x_����O��\u001e�o�\u0005��\u0000�V��\u001b�>\u001eZi���{J�]�����\u0000\rGo��jl\"X�]w_x\u001a�w�\u001b��\u0000\u0004��\u0000�~�ў\u0019���\u0000f��\\��R�f��\u000fJ\u0016�W��w����5�}�H�úy�f�/�\u0005���?&}��f�&��?Gp?b~)�\u0007�\u0015��=\u0012��o����\u0018\"����r��ÿ\u0007|@�B�S[D�&�!�n����&��6)%���kgh�\u0006Ao\bB����k�\u0007��\u0000\u0005��\u0000�\t�\u0000�7�/�\u0001���l�T�?\n>(��\u001f�G�}_�Z\u000f����_�7Z��_\u0005�R���}o�^\u0005𿄭�u�f\u0011j_b��9n ��<?�i\u001a;�\u0014:u��\u0003���\u000f|6�\u0000��j�\u000b�\u000b�|\u0000�\u000f�\u0015�Q�+y��>�w�\u0007�-�a��.���ǝ*o\u0002��*�O\t��Ǉ�>O\u000f�i�\u001f6ĭ\u0000zO�*��8�����\u0016��\u0000\b�۫�\u0000��\u0001�\u0001���W�\u0014K�/����\u000b�\n��\u0007������\u0007����Oú?���㏉�\u000bC�j��G��o\r�\u001a.��D�7�\u0006��,>\u0016��\u001a%݌#ı�\u0017^*��A�M��\u0000q�����7����F�\u0000�n�7�\u0000�e\u0000�g�\u001cK�����\u0000\u0005x��>\u0005��\u001f\u001a>,��\u001f\u0004�\u0019�|\u0006���\u0000\u0007~\u0003|F��\u000f��\u0014�Ŀ��\u0015x�O\r�=�{�xw�Z\u0014��\u0000�5�gĚ��zE�j�����\u0017�}F���P\u000f���7���:k�C\u001f���v��\u000bয�Cj�\u0000�I�\u0006�mվ<j�\n�\u000b�T��� i�;�����P�Х�����\u001b�/���}s�K⫟\u0015K'�f՟Wv� \u001f��\u0000\u000f\u0001������k��I\u001f�����\u0006�k�\u0000\u0005\u0016�\u0000���?��7o�j���|:�|Es�\u000e/����\u0005�Xc���>�`�4\fG�<\u0007O]NKk\u0015�hM��S\u001f�\u0000:?�u?�\u0015\u0013����|�\u001e~�����\u0003��?h��(\u0017��{q�\u001bU���b�Ϛ��)?�\u001e��1�|O�������\u0017�\u0000�w\u001f\u000e�u�\u0002\nI��o�d��\u001b\u0017b�����\u0003���\u0000�\u0002�\n\u0000�B�\u0000����%\u0007���\u0000\u00056�aۏ���V��./��_�t?\u0011\u001bT������\u0000�4�\u0010��\u0016�\u0014X\u0017Ǿ'��j��\u000b��\u0011�\u000e�/\u0005�أ\u0017�\u0003wi�\u0000y\u0017�\u0012������\u0000����'L�\u0000�y�S|{��\u0003���?\u001fx��ާ��þ\u000b�Ɲ6\u000f\u0002|N����f��7�3����SM��闯.�\u000e����b\t�Z�<��\u0000�M��\u0010��\ne�a�A|Q�\u0000\u0005\u0016�\u0003�7@���N~�:���k�\u001d��\u001f�^\u0017ԼM�=�`��7Ɵ\u0000�����'��\u000f���\u0000\u000e�A�k3xW_�4�\u0014is�6���\u0016��3Y�\u0001��t\u0001�G���\u0000\u0005\u000b������\u000b|1�������8�{�\u001f\u001f�|1����x#ƾ;���Z��|K�=1��\u0002�>!�-b�D���tu\u000b�H�#{D���n.m��\u0003�����(���\u0000\u0005%���\u0005|\\��~!�_\u0011�\t��٣K�s�=[S�?��\u00075����)|L�4�tzg��\u000f\u000fjWq.��=\"�_ZZ�b�r��pg�x�\u0000������A��\u001f�\u0000b��_�i/��\u0001��~�_�n7�\u0015����\u0015G�?�9����Z��\u0003�\u0000�@�\u0017�w�'�����:���Ꮖ�h�\u000f�\u000e�����/�\u0013��w\u0016�\u0015���\u0017G��f�.$Ae\u0005����\u0010\u000f�\u001c���\u0000m����\t��N������k}�\u001f�\u0016>%��\u0000�n|C�xK�~4��^�<�\u0010�փC�f���n�RZ̯r�\rmo�\u001b�c\f��6\u000f�\u0000\u0005Y���\u0000�\u001f�\\��\"P��~*j�\u0000\u0013\u000f�-3�\n`~#�\u0000j|8����\u0000�\u0017�\u0016G쫣�!��}�\u000ekh�\u0000�\u0005�7�'�`�\u0004n�?�,��\u000f�\u001f�(7���ߌ>\u0005�\u0003�w\u0011xZ���~)\u001aTs<v�:ޱ�/\u0011�3^�@��q-���m\u0005��+���^�r�j���\u0017���T�l�,Uf����c}�[Q�\"�'\u0015A�qZNQ���i�7\u000ej�������tgW����|�].X�VN�?z��];#�a�\u0000\u000f[>��\n;��m�äiw\u0011�0𽾩掘�&+��G5��U��l.}N�}����y-5�H�\u0015E�8�>�f2�%E��sO]�+�\u0000/�'�^\t���>���Ů�t�i�]z[d��E�V_���_�x滴�cAyv�\b$�K$V�ǅ���N\u0017��\u000b\u0013IT�V�lEJ�1j��9a����U{�҃�m���>[F�6;\u0019,eU;J0�}�n\\�2��W\u001e�瞺%��w��q_�]O�*G�?m��/�?\r|\u000f�+����\u000e���D�}�Z�me�\u0011i1ͥk�\u0010��D�Wm�G�d�O���\u0015��ޣ����\u001a1����ԕ4�h�wIAj�˪�woGd��h�Z�~_w���\u0010y�<n�y\u0001�\u0013�K\u001d܃���s��gn\bU\u0015�N��>~t������m��k��\u0017�6��:�\u0006�X�^@r#�ɼ1\n�� �\u0004a�'8\u0007iP\u0006s©F.q��N�m�6�W���Ȟ�O.��]��f𷊯4[�-F����-.\"�\u000b�����\u0007\n�g\u0004\u0010�\u0018��\u0006P\u0000'$�U��Q�ou��[������)Z�7���d~�~�\u001f�S���ψ4\u0015�{W�3��e�k�/l>��\u001f\u000e\t�Yl�(�\u0018.\u001e�8a����).���\"��m #��[��M�0U\u001d\u001a�nϖT���N-%ki���h�(�\u0018��\u0015W4��{[e�������Uc�.������\u0007�/��\u001dԭn����s�G�����.\u0013O��8,�]-�]�n����$VU�.-^7\u001e`5�}z�l�s��\n�rʱ����Z��Z�nV����޺���R��i��-ޏ��\u0006z��g�/\u001e��?�'����Px��?ſ�����M��\u0000K��M����\u0013x���\u0011�\t�m.mSS��Ҵ�.��{)u=J����]�/�`�f�~�\u000f7:Q�w|�\u0016��5'\u0018��RL���\u0000��\u001f\u0004~#���N/���7ƭ\u0012\u000f\u000b�N�7�\u000b��\u000e���Zj�O���\u0010h\u001ak&�g\u0006����KG�R\u0006R\u0016�K�����2������}�\u0000���\u0000���\u0000�\u0017Ư�����o�+ľ'���o�6>\r�'���\u0005�p�����\u001dK��\u001d��߈<\u0001��bI�n�+�[X��ɗ\"�?@?n?���]�\u0000�s| ��:���<�>\u001d�3�|}�|2�5�7��1����2��?\u0013x�K�\u001bG�>�����>��\rz�\t���\u0016�H&�I�\u0003�w�\"��\u0000� �����\u0000\u0011����\u0000�e@\u001f�i�\u0000\u0005����\u0005��_�T�\u0000�K����<Wy��_\u0011,>\nA�?\u0013_�k�~\u0011��%�o�_�^\u0006�\u0002���\u0000\u0016�z6�b,�K�^�\r�n.��[�S5��M \u0007�{~�\u001e\u0003�?�?� O�����6\u0011�3���\u0000\u0004�9�?\b��Y��j>'��_��\u000f�6\u0012�\u001a���}�wz��in���6�v�!��x�G�@?���!N�\u0000���\u0000ѬxK�\u0000\u00127�w�\u0000�@\u001f���F��>3�\u0000�i>\"�j���\u0000\u0005��\"��~\u001e���\n���\u001f�:φ5\u000b\u000f�s���~\t�n�U�=2�J�\u0011s�\u000fT��VZ%���z��i��]�����k�x�\u0003�\\���?���\u0014��_��4~�\u00105\u001f��\u000e�!�\u0003Q�_�k:��|i�I�<i�xs�\u001e+��\u0013J�΃��V�(�?\u0018�\u0017CP���O��\u001e�;����� \u000f��\n��\u0000\u0006��\u0000�Y�\u0000k\u001f�)_�{�E�\f��|7⿄�\u0016>(�\u0000�M�o\u0011]�q�#ờWG�\u0000�k@Ӿ�6��?\u001fiz��\u0000k�������k>#\u000f��tf\u0000�\u0000J�\u0000(\u0000�\u0002�\n\u0000�B೿�l���\u0000�*�����\u001e\u0014���\u0007��I��\u001bx\u0003�i��\u0010�2�\u000f��\u0018�<\u0019k�[Ϩ�����H�ho��V��<\"2\u001eG�0\u0001�\u0019�\u0000�ys�\f���\u0006�\u0015k��\u001f\u0010n�\u0000d/�\u001f�^\u0004�5�&�M\n���\u001f\u0001�\u000f�z\u001d����^K�K���)<--Ŝ\u0017S^��^F�Ip�38\u0007���\u0000\u0004��\u0000���\u0014�D�\u0000m\u001f����?cψ\fu��\u0017�6���η�_�~#��\u0013࿆�2��;�h�>\u0010�.�E������\u0011_@`��+�2G\u000b��\u001f�_�]?�%\u0017�?௟���\u001f����\u0000\u0018�;�OQ�\u0007��\u000b�5ǉ�K�=K�\u0016Z������O�\u001fB�N���\u0012{{����\u001a�޽̑$Zt�\u0018\u0019�\u0012H�?̟�\u000b\u0019�\u0000\u0004��o�\u0012\u0003���_��0���ύ��\u0000\u0011�\u0010Y|\\��\u0017��#��:�K���<\u001a�,�\u001a����sr�xFk�y\u001d�Q4W��!\u000f\u000b;�~��-��O��\u0000�O/�+�}��<E�\u001d|C����\u0015Ҽo�_x�E���\u000e��x���� C-��}��N��l��Y\u000e�\"�}9�k9.\u0014�J��\u0007����\u0000\u0007��\u001b���\u0000iO���q�?a\u0014Կh\u000f�?\t�\ti�)����mN��W�\u0015�{�x\u0012�_��m�\u0011i>�i�ϯG��X�um5�6�o\u001d�/\"Ƞ\u001f���Y��'\u0017���\u0000�>��(xS⎇��VԾ%x\u0003ǋ�/\u0010�n�\u0000�ZtV�\f��.&ӛI�uM\"妾\u0017��N/\u0002Bc%�p�\u0007��\u0004�\u000f<s�\u0000\u0004h�\u0000���\u0000�(��?h\u000f\t�t�\u0000���?oa��\u0000�/�mc�����\u0000 ��u��}��[_�?����\u0000�hZ����\u0000e�\u001f�EǛ�}�?(\u0003�\u0013�\u0000��x�X?mo��\u0006�T6q��o��)��2$\u000bqoy㯉�\u0010������\u0000����-6$�G��B��\u001e-Қ�,\u0006\"���0�����\u0018��o�\u0000%���f}\u000e]�P����J7�S\u0011:�z/uӥ\u0015f�jPwKT����߱U�_��x��\u0017k^kvу��\u0014\u001at2G�\u000e�Rd����~\u0014FK.�*���b��[E\u001aT������;\u001f>y���F���Q��٘\u001f�S�����\u001f�3����vlu�3�\u000f�,���fY Ե�>M\u000fOx\u0019Q�\\}�Q�m�t1�3$���\u001b\u001f�f��XxQ��u�B�i�ݜ������o=O;������\u0017Z��0�̲�M��-$μ�H�\u0002��G.��\u000b0��X�\u0003����\u000fd�Q��o����n���.�[\\�k_�^݊6�\u001e����M\"�\u0016y$�[}��i\u0003�JF�\u0017\n����\"�)��g^\u0012��6����z+�T��\u0018j?X��Թw��}��~���\f�\n�����z~�j$�F��.mF\n�-���\u0012�\u0018���+G!e#d���7\u0015�t�E��Q+�>����G��ru^\u0015һ�i��k���eѧ�]-u<p�q�����\u0012��y��#�l�8ܛ�\u0003\u0010���\u0004\u0016��\b\u0019���J\u0017pS���읓Z-����t�|�X,<�JJ�-���\u0000?S�|)�\t�`�������\u0015]�e2�c$�/\u0000�w\u0003������Qt�\u0016�%+5�+l����מ�JI;��Ѿ�W��|�Z��Eόw�:��~7|6�/����Z��|\u0007�;���i�\u001b~+x\u0013J�N�6\u0002���\u0016� �����\u0000;�\u0000<�(ƎeR�9b�\u0014iSQW���4$���c+]۽���zq|�m���=9`���g�\u001f�ƭ��N�\u000f�\u0005������.�W��'���i�D�xv��-6�\u0000��~\u0011�o�|R����\u001b�.����\"���+���\"���\u0013�\u0004ȍ\u001b}�WS���Z�gK��Ww&��ۻ~{�2N2i��\"���{����\u001b�A�\u0001|W��Z�[���>\u0010`�x^ ��\u0002\t\n[$\u0003�1�w�\u000f_�O��K��?mOٳ����%��'�G�\u001d\u000b�\u0015�\u0000���R�D�|Eo�����=Z�����y���k;�M��s@\u001f��\u0000�\\O�8���\u0015��B�����\u000f�s�\u001f\u0005�O\f�|�w�Y|Y�O�\u001a\u000f��.�/��~\u0012�B�L�<1�\\Euw7�m�c�k��(��h\u001d�\u0011�\u0000���\b��\u0000\u0004\u0014��\u0000�\u00163��\u0000\u001c�m���/��\u0000\u0003��!�\u0007xZ����\u0001ּe.�/��gV���}+�Z\"X�d�;�,SGp�4���\u0010�\u0000~��\u000f\u001c�\u0000��\u0000�\u0013�\u0000���\u00007�\u0001�W���\u0000\u0007*�4���&�\u0006�\u0000�9�_����u�/�K�\u000b���\u001a��\u001d/�f���g�>&�\u0019�\r\u000f�[����x6�·ڮ��x�U�/���ιy�Xi���Sj�\u001715ۀmT\u0001�)�\u0000\u0005��\u0000�8x��\u000b\u0015��\u0007��\u0006�q������\u001e?�g��u?\u0013x3U�:�>#�햇\u0015�����hoe-�ڛ�'�Y�Dq\u001aƤ\u0016 \u001e��\u0000\u0004-�\u0000�R���\t\t�,|K���a���\u001b5\u001f\u001e��\u001e!��o�\rxOR�}��e��:�c�t�fӵMc[����\u0000\\j\u000fz�1��jP� W�y$\u0000���\u0002�\n\u0000(\u0003���\u000e\u0005�\u0000���y�\u0000�X��^\u001d��?g_\u000f|-�/�uo�\u000b�?\n�t\u0007��I�d��<%�\u001b]�.a��'�/\u0002�k��y�-1-._Y��;yoR[\u0019�\u0019m�>H�\u0000�m�\u0000��O�\u0015���ź���#�3²|\u0000��\u0007\u0007���o\t����|�\u0014!��'�O�ǌ~#�A7�l�\u000f�O쓧6�-�������lm\u0000?��\u0000�\u00006��)\u000f�\u001dU�\u0000\u0005\u0019�S�Q~ݿ�ǆ�\u0019��7_\u000b~\u001d�s���\u0000f�\u000fV�>\u001b|Y��ǀ�/�\u0019�3ӵ\rOU���a���t\u000b(�n�\u000bo\u000e��j�K��h-J�(\u0007��\u000e~��\u0014�`\u000fڛ�O�w�[I�F��7��׊��/�|Gҵ�o�wrx���(�{�\roK����'�]$Z'�u9셗�4�\u0016�\u0015��5ŴSZ\\\u0000F�\u0000�\u001a/�\u0015g��\u000f�-�\u0000���o�\u0000D�\u0000~ �O?੿�O�\u0015��\u001f�>7��~\u001a�E�\u0017|=�gk�D��9��\u0016xg@��姊|M��u;?\u0017x�Ƿ��\u0007S�^�\u0013��jv���+8���\u0014�\u0013�~k�\u0007��\u0000�J��J\u001f�\u0013w����=�\u0000ֆ�w@\u001f�\u0003@\u001f��\u0000����'�\r��\u0000�o�\u0015��\u0000YW�\u0000}��H�ğ\t�\u0000ho��\u0015���\u000f\u0002�OW�?��1��n�ķ�:���F����濧��ymc{\u001f�=����\u0017K\u001cF���Q�`7+iu<3�#�O\u000e�� ˔~�,%\u001c\u0006\u001er�S\u0019��ԕZx�t��O\u000b����$��ڎNQo�D���\u0004���iJsS����\u0019r�A���i�.��^˽�3����\u000f�E�o~\u001ek�$յ\u001f\u0011[^�,>\u001f���KU�..mPGak�Ii�hW76�֭$�5֛\u001aq\u0006ߴ�(�g�7\u0007a+�U1\u00151Q���.\u000e�\\K\\�\u0011T��jS�Д��s�����Տc\rÙ�i\bb�Q��j��5�ԧ\u000eT���J3�YE���+��O�?੟�5��\u0019�\u0000\u0004����\u0003|5\u001e�k��#R�mܚ�\u0015���/�h\u0017V\u001a�ͽ߇4��m�����5�^mmv��Z���B��}�\u001e%�gG\r�P��\u0019d1PU��g\u0018ץ�\u0019TW��B�O�~��G[EX�\\'R8��,N*\u0014��WX�5*T�R�x��AF�GJW���6��yJ�_�\u001f��\"x���ԼQ��A��\u0017��\u000f�!/�o<m�&�,5��Ǣh�\u001b��e���-�6f2\u0004��U���\u0000��s/��0T*¤1o\u0017u\u0007B�S����GX���S�d��>5d9��q��)�J0u\u001d_q%��ݤ�R�IǕߚ���?�g�\tg��c�W�!�Y��_\u0004xg\\��;\u001d�2˯j�Y�Aag��YK�[_-��\u0015�-�H/DK\t���;��^9uJ�Wr�)�)8U�(JKx�Vףz|�k\r��xH*�Εd�'��V\u0013���w���1�~����b�\u0000\u0017�\u001f��#�\u001e1����&�䳱�Mv\fIicm�\u0001�J�ƫ4�%�߹TgYV6�a\u0019YѾ?3����\u0000ա�(SjV��J�mon�#�r�5z8_iQ8N������8�m��ֻ�~J~ֿ�����\u0000�\u001a��5;?\u0016]j2gWӭM������t��\u0006�\u0005��cϒ\u0015l=�;��\u0004��ӣ���Rt'J�?vМ��\u001fW�On���S���\fEj�Bt���:J^�խ���z|��mN-c���֕�Y]hڕ������7\u0010J�KFb'�*]�k\u0012�Si\f��=��O\u0011��zue;�ht�e���m~��1[\r[\u000fYѪ�jG�OM\u0013�~���?�\tQ�x��o�u=[�\u001e���\t�\\�\u0017��\u0019�i�\u001b��X��۟�\u001f\u0010�<w-��l���;7ԭ�\u001bH_OյD�i��7��@�\u0000�q\u0017\u0011�u1taJ�*�l\u001e&jj4�̢�愜�e\u001eh[��6�e��a�'5�5\t�\u000bJ5(��r��D���8JQ�����(�.ދ�����A��\u0000\u0012�\u0000�\u0010�j��\u000b�1��&��\u0000\u0004����-m�A\u0005մ\u0017��+�����Bkx�`��\u0016�RЮŻ�o\u000b�\bI��\u0012\u0001_w�x�b�\\\rjw�k%̬��Ejm5������fx\u001cF[����(��\u001c9�e�\u001f�R�X4��8�=Svz����\u0000�n���\u0000�N\u000f���\r��?iω�\u0013�l-+�\u000f�\u001f��\u000e����;�\u0012�\u0012i~\u0013��<Ac���}\u0003N�>\u0003��T��#��h/��N�\u0013�/%?5{�\tW�\na�\u0000\u0006��8�\u0000c��\u001f����>\u0017|M��5o�_\u0004>\u0010x���\u0011�|m�'�.��;�gH�?٠���\u001b�G�u[�9�����ˆ�e�x9\u0000�j?����&��/�*���������\u0017�O\f�\u0013��w��/Xj\u001f\b<A�\r��O\u0013�k�\u000f�\n�Z]_���~;�$�dӼs��uk\u0016�\r䗐��E�C\f7\u0010]\u0000A߷����\r\u001e�\u000fÿ��L�m+⟅�l�\u001b]���V��ͷ����i\u001a�\u0000�{�\u000f\u000bxn���\u0007�~\u0000Yi:U֝��N]f�[ӼGusy\u0015��w�\u0011E4\u0017\u0000\u001f\u0001�\u0000�h��U��$?���\u001ao���\u0012\u0014\u0001�k��\u0000�\u0007c��\u001f�6��\u0000\u0005��/��hk_��\u0000�_��;�\nǯ�/G�-�g��K�^\u0000����|/�x:��e�\u0000�-�\u000eC�?R�I�����\u000b�\u0017E���K�Ƿ:ʷ�\\\u0003��\u0000���\u0000�s7���\u0000\u0005\u0016�\u0000���\t��~9�:��4\u000f�_\u00134�����������\r\u0007Ɩ��\u0013������+T�'Ư\u0018h��ϭxgO�Q\u0017^\u001f�i��.�k[�\"��\u0003���\u000f��\u000e\"�\u0000���\u0000mO�$�\u0000���\u0007���_ٿ��\u000b����Ꮜ:���/\u0004|C�7���F��G�߂�4��\b�Y�\u0016�\u000e��O�4y���I��K��\t�Q�\t���@?\u0003?�4_�*��\u0012\u001f�[�\u0000\r7����\n\u0000�\u0000Q\u001a\u0000(\u0000�\u000f\u0007��e�\u0000�����\u0015����c��\u0000�~7|<��\u0016���_\u0007|B�-��\n\u000f\u0013i6z��������u\u001b+-gU���\u001f4p�ܠ�C@\u001f��\u001c�q?�\u0011�P��m����\u000fm�FY��W\u001f\u001d!��O�+��*O�o���6��K�񫿂��������<\u0017�zЏ�?\u001e�?|?���G���W�\u0000\u0004���ş�;⿍~3�J����A�񷏵���\u0010M�h���\u001e������\u001a�O�iR�.���\u0007Z\u0000�\u00002��+o��O�\nS�\u0000g��]����\u0000}\u0013�\u0000\u0006��\u0012�K�F�_?c��\u001f\u001d>\u001fxc�¯\u001a��\u0018a�g�|g�ū�k�\u0011h���ſ\u0012i1�zt�\u0000��]?^Ѵ�Z�?���\u000bi��\u0018�\u000f�\u000e�\u0000�\u001a�\u0000� ��\u001d����\u001b-&�\u000f�q��\u0012\u000b����,�\u0000��h\u0000�\u0000�\u001a�\u0000� ��\u001d����\u001b-&�>[���\u0000����M�ٗ�)��i\u001f��\u0000�.�\u0003�������-��?\u001b�\t|W�?�t�\u0017ƿ\f~.|(�M��\u001e|6���\rb\u000f��>(�_��\r\u001bĞ\u001f���톭��]G��(\u0003�s�\u0000�a�\u0000�?�P_گ�\n��τߴw�y���?�[���\u0000\u0018u�\u0004��Ʒ����t]?G�IԞ���mw��4�m/X�F#�\u0000����\b�$���߄�\u0000\u0019�a����\"���%<{\u001f��\u001fj�lW^%�p�\u0014t+/\f�D_\nj/��-|c��:�Hׄ?��ck\f2|�(\u0003��\"�Y�4\u000f�Z?���t�\u0017@�ᔞ-��խ�n�S��_\u0014ɠhz^�kci=ޣ%�:n�{w���ip�M\f��E\u001a���<q��i�YO\u0007�����*�W�,\\jT�S��\u001b\tC�ӅIN\\�4�U�~�i\u001e�[����VXj����E:\\�0��S�s��QII]��\u001a��i/ٗ��\u001e,����&��o\u000e��Zզ���\u0016�7c�R6�Le�W��,L�qc��'.T�vo�X\f�8Z�Tp��P��K\r\u0018Ɲiͯh�e\u001b�{��Nko���ù�+)U#(G\u0015��\u001cT!N��t+Q�� ��%hԼU�k��σ|?����¯�_����X�\u0000����<1���F��]b]\u001a�[�T�\u0000��ó�g��-���\u001am���%��c�\u001d>Hf�\u0005�(ZoK�8g*�a\u001e\u001e��)�rL^?\u000f<v>�\u0017*�,\u0004��]Jt�N��Z4�}�U\u0019�Tk�rݮ�(�s�p�\u001b��|��/2�e��\u001e\u000f\u0001R�����58�\u0003��ZS��Нu[�7V2�/���O�O�?�\u001f�o��7��(��w[�w�\rgŞ\f���t��^\u001a�%�j�{\u001d�w3h��4ך~�w\u001c��u��\u0004\r\u0018���\u0012�}�w��9��n\u000f\u001b�<g>$���F���rņ�:P�:��%O�~�\u0012u-8�P�Mƛ�ߝ�|s��������!�p\\?$��<.g,n-T�14�[\u0006��Qxj�4��)Ft�s����\u000f�\u0003�g���_\u0010~9x#V�߉�q{�\u0000\t\u001e�\u001e�wi\u001e�k���\\Iu\r��\u0006���s4�\\\u000b�Է�]萋�d�^fw�b1�bj�\u0012�\bEsӧ\nvP����դ�+{�Y]��C��9\u0004>���R4�Q�V�Z�U$��]INVW�#wȭ\u0014�����ϋ5o\u0010�p�V�s�]��jv��@�MԤ�����ͬ\u001a}>�\u0002��u\u000e�,\u0013DV[yϘ������}^�iR����gyj��KN�{�[�}�<�5p\u0014��.j~�Q��׌]���}�t{��_\u001e��\u000b�<c�ߋ\u0016�x���\u001e7�����ڈ��n�/ST�X�\u0015�-o\u0013��\u001b*�/��D�\u000f�\n��f<]�̡\u000fh�ǖ1�J�!��K݌Tb�'�M�\f��h`jO\u0013N5}�4��ʵ*��m�y�m+�ݞ�=��\u0000��\u001f\u0012�\u0010�\u0000b|n�Ѿ\u0005���\u0000�_��}j4�^\u0015�\u0016���H���w,4�\u001c�m�º|\u0017�Z�\u001a����WO%����Z�#��/��\u000fk�nZ���8�'ν��X��)B8'G\u0013\u001aS���J�<]I{\u001ak�U�)T�Z�Tb���8����*��#��p�\rg�3�08H�+�1��05�1��s�|\u001c\u0017��8�*���a۔g:��=�~.��\u0003?�u�Xm�O�s��\u0014��_�.\u0012\rV��Mm:/���\u0012�ǅxF��e�euc��\u0015�ў��_�lu,���\u0019},Uh��\u0012S���=����{XBn��r��EI�I�ٟ�\u001c1<Ne�d��ʌp��^\u0007\u0007W\u0019F�壋�\u0018}f\u0010�X(ƿ:��5�˫?���'���%�k�\t�����9�4/\u0015�\u0017�~\u0010���\u000f\u0019xV��\u001b�\u000fx�ºǏ�!�OĞ\u001c��\u0001hn��SJ��K��X�)�!p72�ӸN���\u0018\u001aKh�]��ō��E����q�a\u000e,ͣNJQO\u0005f���\u0000�����������/��\u0000\u0006>\u001f�G�O\b�~\u0001�q�\u001d\u000e��^\f�g���Ӵ\u000f\rh\u001at~U�������[\u001bX�HaO�\u0017�_D|y���\u0000\u0005��\u0000�<�\u0000�C�\u0000��|o���\u0003�z�\u0000g?ڛ����<w�;�c���ρ�\u0000\u0010u?\f��3P�ýr�@�/<)�j:F���\u0013��~����O@�o��?#�i��\u001ebZ\u0000�?i��C�����_\n��G�߉�\u001eu\u0003�����\rC�O��Eu��;X����,��.���������\u0013�$�&?tP\u0007�%��_�J��'/�/�\u0000\u0004���~3�}���\u0002|Z����G��^&����\r��>&�����\u0017�c�:\u001aj\u001a��\u0000��t�\u0003G��0��llm�_�1@\u001f�ď�(G�����+��`\u001f\u000b���\u0000\u00184/س���Q�\u0014�Ǿ\u001d����\u0016^��#ѿe�\u0013����-�|\n���\u0000����N�Qko�\u000b_\u000f��4^\u0019�=4~�h\u0003�!~\u0006�\u0000�+����\u0000�?��\u0003�7�\u000f���/�?��\u0015�X�Þ=�G���\u0017ĺ4> �u\u000f\u000e�q�j0~�\u0004�4-WQү\u0002�\u0000����\u0016�\\�\u0007ߴ\u0001�_�#�\u0000\u0004���?l\u001f\u001ai\u001f\u0011j\u001f�W���O\u001dh\u001e\u0017��V�⯈�\u0010��\u0006��xN�V�5�O\u000f�^\\��i��ǈ5�F+a�-֧y(�V�\u000f�'�\u0000���%�i�+�\n��l|#�;��\u000f|8�e�_����\u000e�G�,#��=��+�\u0011_\r���J���ݭ��n�'�ӏ2i\u001b�P\u0007�VP\u0001@\u0005\u00005�u?���B����M/\t|2���\u0010|@���\u000e����]�˯\u0007�6�/�I�\b<3�x\u000f�冥�˧���e{��v�7$yq�j�wJ�\u0000�3�\r\u0002��k���L�\u0000��E�W���\u0015�\u0003��\u0006�\u0000�\\����W�:��\u001b�1�Z���_\u0012��58������t\u0011�\u00183�s��y��� \u001fί�\u001d��\u0017�\u00163�I\u00134k�\u0000\f��,팔\\�3]���d�8�\u000f�d�\u0000�I�\u0013�+�������߰_��̊Y��\u0003�\t$�2I<�y'�@\u001f\u0012�\u0000�͑��C�۱�D��E�\u0015��B���A�H\u001c2�FA ��$P\u0007�:~����1�]��W�}�0�\u0019������\u0007��|e�x[ᧇ�\u001f\u0013�Z_�l�M'D���lt��h4�5}wFӥ�u\u0011�ޥg\t;�@@\u001f�F�ʿ�����\u0017����\u0000�o��\u0002|e�?\u000e���\u0007�_\u0013<=�x_Xռ36����k�6z�G,�l�����-�\u0003\u0019����;�a@\u001e��s�\tc�\u0000\u0005'��~\u001bxc�\u0017��\u0000ؿ�����Ɛ�\u0017\u001e\u0013����\u001d��\\�ǈ`�u�C����V�i\u000b�ݥ����Z]�F�E{cs\u0003|�0�\u000f�u�;Y�5mW������躍���iw�$7z~����e�X^@�4W6�P�oq\u0013���\u001b�\f�@\u001e��\u0007�u���Q�B��W����_\u0019�%\\�\u001a��oேz\u001d�|I6��$Rjڔzu�=�Y�$е��vD�!cȠ\u000f�G�\r����l\u001f���\u000b��\u0000�ڳ�x���\r~#���� �◄�_\u000b\u000f\u0016�\u0000�!�+|M>'��\u001a�q��\u0000�\u001f�I�:u/'w��4�\u00003\u001fh� \u001f����\u001e\u001e��-\u0016���:�uɼ\u0013��[]i�&���Ai\u001e��M��ͼ\rk��,3�Vo:\\Jd�E\u001b�cV�>!�\u0005�WZ\u0011�)�*w[SX�W+�K)Jw���̦������eN���.�j�Tp�vI;��O˶�k\u001f�G��\u000f��%����\u0017�\tמH!\u001a7�|5�=\u0003^D�JA��|;��Pk��%��e��N�\u000f%��,�(��~+9����O\u001f[����Kۖ��Qn*�i�}v9�q+\u0007����\u001a�\u0000Z�j1p��$�3�J�qi��\u001f$�ן���\u0013#�W��~\u0011k�\u001a�Y��#�'������CJ�o���\r\u001böv����\u0012˛('�m4�b�S�D�f��H~�$^E�Q\\����a����\u0017�W�iҒ��R��H��\rM/�;;F�N\u001b�s\f.W��q��W��Щ\nxj�\u0010�\u001a�|��ӫ\u0005d��Q�i�W��t���q�H~�_�\u001f��\u000fH�\r�O3Ѿ\u0010Xj\u001e1�������\u0000�\u0005���-vv\u0002;�o�g�\u0000��[�2�\u0018/m5;����;{�-Y~��\u001a�i�5�5O���Oݨ�\u001bFJ;�.[������u���\n��\u0018�\u00167\u001b��Ҏ\u001ex:�',\u0004'�r�R�^�8*�cJ�j.��WĹ�����\u0011�`��,��\u0013i�hI`���\u0010�Լ����;�ti()��rTcɫ��WR-5NZ$�����\u0000/#�p��Ǭ$ܯU%R�gN�ѻ%i_�k��t�K�����{]\u0017�梗V���\u0013�Ew��jUv�����c�\rϲ[v��'��G\u0001U�6̲\u0018��ӪԥJU\u0014��Ih�k����g�t�r�\u001d:\u0014yg\u0018�wk-e�m\u001a�]�}\r/�\u0012�R/\ti���q\u0005դ�|2���e�\u0018\u0003l\u000e�k\f�̀��\u0011�\u000ecF4\"�I�-BIuN���͝X\u001c�2���.3�%�}}4�߭ϒ|{�\u0000\u0005e���3�J�\u000b�Ms��\n���\u000fm���-�][P����x,%��\u000b��[#���\u001bf�'H��In\"�͙$�<^i��|9��`�j��G\t\f=\u001cJ�E��0�T�t�J\u0012Pn\u001d/k;]\u001f�U�n\u000f�\u0011c3|ߋ(�X�֦?\u0017���b�\u0015B���\u0005��ν�M}��G�>Vݾ9�W�o�^\"�\r���{����T�V�m��OW�[�����\u001bP���� T\u0013��ӕ\u0002u\u000e�(P�\f\u0007�8��8��k\u0017��\u001eT��iƛ���8�Y+t�ޫs��5,�acO.�ƾ\u0012�n��ER�r獥��W��SK�ٟ�?�?��/��\u0010\u001b���\u0003�W�O��Y�&��>\u0003�g�t[9/5�\u0011���\u0017��\u000e��\u000f��0\u0003=����wv:n�\u0004k��\\�@�|�q_��W_!�U{�b[�/\u0010�C���`��Ng\u0015�X\u0016�yv\u0011�}ϫ?���\f~\"|\"�\u0000�V~ş\n>(�;�>\u0005����ٗ�~\u0017��|O�Ϧx�þ#��d��G��ۀ�\u0016����G5��$G8a��\u0003���\u0000�8�\u0000�%��?\u0006�ਿ���/����-�\u001f��\u0006���-�~3�g�_\u0010�~\u001b��i���j�Σu\u0002��X��|٦!\u0017p�Z\u0000�\u0000O��#����d�\u0003X�L��~/�:�\u001b��\u0000S�-��t�\u0000\u0018|I״�\u0000\f�7�*�4�[VӴ\u000b}B���MR�L�u��{Uo2Km2�U\u001ba|\u0000\u0007�\u0000�r���\u0000�,'�/�[Ɵ�K-\u000e�����/\u0000|H���\u0010��\u0016��GI�w�/\u0017���Z���o\u0016]�un\"�5\u001dwL��K�2�謗V�\u0017R�\n��\u0001��/�\u0011#�\n��*�\u0000�;keQ�/�O\u0013�3�\u0000[c�4\u0001���|#���|]��\r�x\u0017��\u001f\u001a����_\b�\u001f��Ze�^3���e�y<\u001bw�[�\u0019��q���őI�K�2��5TkR�h�\u0000Y��nG�\u0012��\n1�6�\u0000�^�\u0000f_�?\u001f�\u0000c�\u001f�'¯\fh�\u001e`�\u001f�|{��^�|-�M����\u0000\u0013|=�G�ꗰ����zivBF\u0006k��x\u0013/\"�\u0000�\u0000N:\u0000�\u0000>o�;7�\t��u��\u001f�P/�\u0010�e��_��?\u0003h?�׃<\u0019�x�ᗂ5�\u0013hzg�,�5�x���?{}�E$0��>��j2ڹ\u0012���e1\u001b&B@?���\u0000\u0004D�\u0000��1%���_��\u0013ԟ�^&$�I��\u0000�]\u0000\u0014\u0000P\u0001@\u0005\u0000�g�\u001d��\u0000)��W������6k�\u0001��_�I/�Eg�\u0013[��+�E�\u0000�\u0005�\u001a\u0000�?��\u0000���\u000f�(\u001f�\u0013�����~\fk~\u0004��Ŀ�Zw�kO\fk_\u00135ME�=��\u000e�����\u001e�u�O�\u001e\u0019�j��\u0011ԭ�M���6�S��\t���I�m�?��؋�@���\u0000\u0006��M�/���\u0000\u0005\u001cּ\u000f���Ǐ\u0002_~�\u001e\u000f���]��\u0012>$��\u0000\u0013<[�\u000f\u000e|h�u�\u0011��\u001b|5�;�f����[�w�lou=7�\u001a��\u001e���X<5s���:��\u00017���)|E�\u0000��~#x[���\u0000�p��\r�=��y�T\u001f���t\u000f�OQ־\u001b�BԾ\"�\u001a��z�W�Ɠ�G�ߴO�o�\u001a�\u001a����(5\u001dS�z.��ݞ�l�\u001e����R�\u0000?���$\u0007�w�;�\u0002�\u0000�r~�\u001f�'�]k��\"���oG����gᮩ�k>\b���_\u0016���9�-O��\u001a�~�u\u0014:?���{ƿ�ޘ��P�C\n\\[G\r��\u0007���w�\f��\u0000��������\u0000\u001dh�\u001baK}#Ɵ\u0010�k��*�R����\u001dF\r7�~$���\u0018o����-�����$�����\b�Y\u0016+��\u000b+\u0000~��\u0000�\b�ۿۛ�\t��}h��/��߲���\u001e��\n~$�\u001a}'�\u001f��,x��\r�x��L�L��N��\u001f\u0001�ͧ@�r���\ts\u0012�f\u000bK�X(\u0007�u�P~Ɵ\u0014>5�H?������u�\u0002X�3��l�\u0000nH>+h�������^�_ৄ>\u001cx\f�?�4�\u0000\fj�\u0016��^��^�x���Ğ\u00166\u001aT���\u000b�ݼ�P�i~վ,��>4h��P6��|=мA>�匋��\u0013x�8o��\u0003I-��YN������̌^5oǸ�\u0019S\u0003�X\fD#�\u0014r�-�S�7\u001e�\u001b�);�n���{Y|9�5ެ���\nn�k���{���?�:\u001f��\u0019��|d��\u001c/ï�j�v��#��\u001b�}����,c���9{�Y]�oy:���r\u0012b��\u0014@\u0015E���\u000fF�w\nu��R�T\u001a��q��R��Ms��6k����^r��ݽ-[R�:m-S�6�wVG��\u0000�\u0000\u0005�������'mH_�xSÚ\u001e�fb�ml�d��O�8#�%d�[�so\u000b�s\u0003�KD���c'�py>\u0012���\u0010��\\�K�;_X��饿3秘ΥZ��I��n\u0010��urwwn�����_\u000f��?�\u001f\u0012�\u0000���\u0000�\u0017��=x\u0015�\u0000�4\u0004ԛÿ\u0015|\u0011p\u001eX<c��Z��n��>�6��\u0010��O��mCº��*���Z���n�m.��\u001b\u000fj�f�\u0015}>ַ��`+E}�:|��^�Z����������\u0000�\u0014��?�������o��\u001a]jV>7H�׵=\u0013_��׋|)�ZZ�O\u000bx����/t{�-.���nC@�q\u001d���\u0011\\�w'��R�W�;��iZ��.��������x��U^�|&\u001f\u0001��*����-,M\u0019/��f��R7|��RN�T���\u0000�/���}c�\u001a�����\u0016��l��k�\u001f\u0011x��V��-�A\u001c�w��^H��/\u001ci,K�X�Y0ž\u0007�3'\tN�9�5%�-:�����{��t~���ܮ\u0018X�YfZ�\u000b9����NVk�%\u0018�泓]:3�����~\u001b~��\rӾ\u0011|;��U�n��ͧiZ\u0015������\fS�\f�yv6�J\b�H�ȣʅ@!�&M��󊑝dᅇ/��-#+]�O��wN�\u0012���o��2XU|ѫ����ҷ7,��RjQ䊺I7wn�����M���\\�5�~�[�[X��Ե\u000b�\u000e\f��ld���*��H�$G\u0012�\u0000���w\u000bN�:K\rF*4�B0�R�T\u0012��w{�ޭ��{�-������k�έz���F当oM4]\u000f`�!�S|\\�\u00014��\u0007խn���n\u000e��[ͨi\tpLl�\u0010-�ݍռ�\u0011�\u0011]G\u0004�&牥eu�|�!˳Y��\u0014�\u001a��Ujn*���,d�\u0019�\u0014����d��e<C��\u0016�\t�R��3�m�\u001b4���Mn�'�\u0010��}��_�%���/Q��L�<N>4M}e\u0014�<1^i�\u0000�\u001f�}\"塑�s\f�i�<*��9V7�GV��*˿�p\u00142�g?��֓I6�שY]&�Ҩ����rg9��|�\u0011�N*\u0013��)E6�tp��;6�i�+�]�Ͽڇ�\u000e��\u0000�u~������[�?�\u001f�3X���[�.����Z���\u001c�\u0015Լ\u001d}�跋euu�j:��\u000b��j�IyX5�ơ��.��ɒ�&�k�<��������\u0007�\u001c~��\u0019j/��_�5���\u0003�\u0011�x�źO�l4�S���6��}����~���gF�ԟ�_&\u001dG_ҭ�\r��<\f���\u0000�\u001c\u0017�\u0000\u0007\u000e��\u001f�U�ؓ�?�w���������|7�G�\u001b������?\u000b|9�Y|3ះ�\u0015�)ei}ௌ�\u0000\u0010�i5�u\u001f\u001c�\u0013Z[M��c%���$ڔ\u0013�mov\u0001�\u001f�nW�\u0017?�G�\u0000�D�3���\u001b�Jx\u0007�����_\u000f<O�Y�\txG�ωl,l<%��\u0000\u0011iZ�Z��9�������k�^����uHd�'i�u�9\u0000?���C�\t]�\u0000D7���\u0000�U�?�QP\u0007�'�?���������\u0013�\u0000\u0005u�g�3�Z�f�ڏ�����\u0014{���|q㏊�g��'�w�ߌ\u0016_�߅<1�\u000f\rh_\u0005<K�m?⥇��Ma�x�BѾ#��\u0014��lWv\u001aw��]\"8u��?�������M�\u0000\u0004����\"�׿\u001c4\u000f�^&�i����6Z���H���{�|y�\u000e�?��I�<W�\u0004�W\u0011��>&��ԍ߉,Z\u001d2+�����8l�\u0000���\tg�\u0000\u0005����\u0000�~8���\u000fٳ��\u0000�\u0015��g���4\u001f\u0018x���g�>\u001b�kM��<C��h�Phsx\u001f���{����d��+�=6\u0004�(�\\�!1(\u0007�5\u0000\u0014\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0007���\u0000\u0005a�\u0000�e>\u001f�\u0000�Tk�S���\u0017�q�\u001f�z���\u000f\u0004�\r�\u0017��$�|ec\u0014>\f����R]j��^\u001f�yo��i-���nc\u0001f�v@\u0007⾳�\u0000\u0007O|E�\u0000�]�\u001a��\u0013O�߱ǂ�0h\u001f�O�F��&�>,�?\u0018��\u0007�\u001f\u0013���j�O�\u001aw�\u001dW�v>\u0000��1�����\u0010�������m���\u0012i�j��[�Ԡ\u0019��\u001cO���G�Ï�H_\u0013�\u000e���f��\u0000\u0007}�_�OO��\u0002��\u0000a�\u0013�����,�'�\u000f^�����U�}ͷ�\u0018�\u0005u�\u0010i�\r�4�>�����dע�o.`��ݶ��d�jR�Z\u0000R_�F��$������\u0000\u0000~%�\u0006��ƽs㕟��7�\u0017'�&��\u000f\u0003\\�W7�\u000b�w�N�\u000e����đ]�\u001c^\u0011��_=�\u00124��@m����\u0001�e�\u0000\u0005F�\u0000���#�\u0000�<o\u001f�\u0003�7��\u0000c\u000f\u0004|P��\n�\tӭ<w��f׼/�x�|[���?\u0010d��B��{�[���\u0016I�\"ũ�\t�K�h�v�0\u000f\u0007��?��?���[�2~�\u001a��'�\u001f\tX~�?�'��7�*����-Z��6�\u0015�$xo��>!�Ҧ�ic\u000e�s�ï>�\u0006�-�W��-��V�!�\u0000?�o�,��\u0014{]�\u0000�W~�Z��a�߅ZG�MKL���\u001f\u0001����\u0015^x6�h|gu�[˩\u001dj�D�\u0005�K`,��l4�K�0��-� \u001f\u001a�\u0000�\u0004฾/�\u0000��\u001fڴx��x���_�g\u0001�0��?�\u000fS���%���\u001f�}��G\u0018�����\u0000�_o�y?n�w���gپƟh\u0000���\u000b��J|X�\u0017�\u0000\u0005\u0003�(�\u000f�Ѥ��߳��I=�����o/�(�h�n���7\u0003P��,l��=�lS���G{\u0015��\u001f���\u0012\u0015�\f<�X*P�M��|T�^����n}�\u000fS�,\riU��x��Rz�\u0015J��t�m�3���\u000f�_�'��x�@�\u0015����\u0011ki��\u001d�u1c\u000f���\u001f:�}\u000bP��[�O��Gώm\u0012��\t��*�\u001aGm\u0007�t\u001e\u0007\ng��s5��R���%\u001a�l�6���i/��\u000b��ʤtk��Ǘ4�gR����\u0000�'k{�Z]����n\rߴAq�H|_�ƚN��x�\u000f\u001c�Vz���F�yf�j\u00068�I\u000b$\u0012�\u001cw6s��Aqkq\u0015ռ�C*J�\u0000��,�\t��:�*F�*���8��(I]]o�[���??�euiʧ�rs���\u0006���zh|��^+��`$��\u0004m��\"\u0005�\u0018�I\u0001�\u0001�$\u0006V\u0019-�]r�\u0016��m-\u0016���mt]Ս�4�MK�5�+��ik����䏲�\u0000���\u0000�O������ ^9��'������_��n�iZ��ɚ;G�4�\u0016]>�HK7�%ż�Z�(h�p\u001a�{8Q�\u0004ݜ�h��=t���\u0000���|m\\6&<�\u001cSjN7v�����i����\u0019�������\u0019����a�:���z��\u0015����U/,��m�HI\u0019s<a\\\u0005\f$\u001b@���YC\u0019^ՠ��w|�KT�I���t�I�~�[����\u0013���.�����K^�W������[��/�_\u0017�t/\u0004� �ǌ�w�K/\u000ex?��e�ֱ�/\u0011�Z��v\u001au���b[��WW��R\u0018��G�q�\u0004\u0012?A�����ҧ\u0007\u0018��W�J)Y_e����$~W���\u0017��V�G-ZR�n�u��m�\u0000\u000e����\u0001�\u0000��?\u0005�\r�M7��\u0000�\u0014��\u0017� �\u001c�lzƩ�O�\u001e/\u0005|>�E����a�߈�M͞��\rV�\u001c\u001dG�\u0011Mg�\u001a\u001e�v�[ê���\u000b�xj�cOX5N\u001b:������m����l�#0�p\u0019N\u0013\u0013�fX�6_��Suq8�ejx|6\u001e�w�V�YF�\"��Iw?R�?g��7��0���~\u0007~Ǘ�MT�K믇7\u0011o\t�U�^O�W�G��\u000b��2j3x���W\r,�/&��\n�\u0011eP��<}\t�Oz\u0015#8�Ӛ/�뮧�8ϥg��\u0003����x��\u000f\u0013J~�o\rS\u001b�é_����x�\u001dH���:��$��_�7�_�\u000f���\u001a�m�!����\u0000�\u001e\u0016��%φ�?��\u0000�M�\u001d\u0003A��5�\u001dx��\tn5]^�Ok�\u0012x�W��\u0000��.\"M(^�\u000b+;\u001d>���\u000fF�*�.>҅hV�W���Z=�kh��G��5��-�X\u0005�p�\u0010��G�I�ɳ\u001c&aF\u0013w~Ϋ�U���ߚ�U\tŧ\u0019EI4����'�\r\u0017�g�`~׿\u001d�kMO���ׁ�?�\u001f\u0015�ߊW~\n��#��v���:���>�m�\\|F�n5\u0018-�|���N��@w\u0018\u0010�[�DL���쿧�ڟ�O���KV��4ߏ\u001f\u000e�����3Ӵx5��\r��y;�Km\u001a��\u0000K�R�\u000f$m��P�I7s2�?͟�\u000b{�\u0000\u0006�x\u0013�\t\u001d�\"�G�����Y�ߍڇ��=x?�Ԟ\u0011�~\u0015h�\t����G�>%x�My5}?��#�k�9|\u0005\r�X5�q�\u001e�,�s\u001b[$s\u0000(�\u0000P\u0007�M~�?\u0013�>\t�\r�d/���D> ��G�\u0000\u0004��\u0003�>�@��}>�[��\u000f��?\u0015C�O\u0014\u0017RXéI������ܽ�L�$\u00132\b�\u0003�@���\u0016���r׈,����>�\u0003���3�ߵ\"�k��Ǐ\bx�\u0000R���\u000f\u0007?��\u0000i7�\u0011eoe�Mk��\u0006ӵ��5���\u000b�I?���Zk\u0013j�%��iep\u0001�\u0006�\u0000�\u0018?���\u000b�\u0000�9�F���\u000f�ߴ��>;O��>\u0019�eޗ��5Ҽ\u000b\u0016�\u0017��۽r;�{�;��%{�.��ۼ\u0012Cj�*\t\u0004�\u0016�\u0000?�\n\u0000(\u0000�\u0002�\n\u0000���������\u0000�s�?<3���Q������'����޳�xC�\u001e6���~\"�g��gU�]\u001fŚf��G<��\u0019�%K�\u0017p���E*G<��\u001f�?�E��\u0000\u0005��\u0000���}�\u0000���G�\u0000��\u0000?�,\u001f�-��\u001c_���G��?���\u0007�_��~9�����_�ڕ���#�?�_\u001a�U���g�������> x�R�_�5\u001bm'K��M���u�Z��\u001d?O�����E���(#DP\u000f4�\u000f��\u0000`��(��S�\u0000\u0004���⟍\u001f�?��o\u0002|@����\u0000�����x/9���v��?\f����-/��V����>��\n�o���H���I�\u00173��\u001f�\u001f�\u0016\u000f�\u0016���/���#��\u001f�bh\u0003���\u0000�z�\u0000�!?a_�-/�u�[�\no�\u0000\u0005\u0004�i�?��\u000f�M�x�Z����\f|I����\u000b�:�ß\u001f���ׅ%��\u001f��w��\u000e����\u0007�ׅ4���t{(�nlf���]B���P\u000f�?��\u0000�l��\u0012\u0003�Oſ��\u001c>\u001b|\u0005�֏�\u0017���o\u0004|U�\u000e�w���\u0006�i����牴�\u0017x[Q�ҵ?\u0017\\�ڝ�����\\ͧ���e{\u001cMmu\f�K\"0\u0007�'���\u0010~ο�P�����E�=WƟ\n��M��\u0017��?��G����|/-��5�ּ-��z�Go%��Ke�\u0010\\\u0006\u0002h�*�\u0001��O��$��K�\u0000\u0004�?\u0016��u���>\u0000?\u001c\u0007���_�߈�7�����+_�L�\u0000�\u0011�/�&Zޱ���\u000f�O�O��\u0000g}���l��~w��|�\u000f��\u000e&����o|0��bD_�߂m��M����[�l���RE�\u0010\u0012\u0015��R�\u0002d�W���3�,\u001a�>�JMy�N)>�4>Ӈ\u0012�\u0006��u\u001d��^ʆ���}��v�E��^�xe�]G����\u0017��\u001d�om\u000f�>\u001c��u\u001d\u000fU�\u0010�o4���L�X\\�W��tR�%R�:�2���jSS�5w%%�^�[T��\u0000�Ϡ�iJ�����I�\u0000�}S>�����\u001f\u000bo\u000f����\u001bc�\u00154O��\r�%\u0017������Mw�\u0013Ö�p���'Ԯ.]��ޕn���\u001a��o��-ޓs,P\\iw�g�¼Y_%�O\r�T��qUSu\u001c\u0013���&�Z*?��^�\b�k)Ai%/�Ͳ꒨��5�wJ5!~���k;uM�\u0019������\u001f�����G��\u001fx.V���\u0006��Z�\u0016���Ew(���b\u0011Z���Q!\u0011�ˮ�]߸��U��V\u000b0��9oJ�%4�j�ɹ+$�m鮷�+`1t-*�z�կw\tZ����V������zf�'�<O��yo!����z¼Y\u000fo0����YN\u0015�h��3��  \u0019\u0007q�5�p��R~�z���eK���\u0007\u0014�ջ{��k�]�馽?�\u000f�W�4�<\u0003�_�06Ю�z�}���ǧBU�j3\u0011%АFY�C��ո�8Zrj�V��௭�W��Z��\u000f_9�͵�\\����{Y��WӪ[k����\u0000\u0006����\u0015��������m��N��\u000e����\t\u001e��\u001b�2���\u0000\u0013-�Au�\u001f\u0012�L�$�Ğ\u0017�~�e���{�M;�>�3��K\t!���j\u0010��]�oh�%�w$|�3�3����>*��_\u001fu�~\u0000���|\u0003��\u0000\u0011k>\u0019��|>n\u001a_\u0018��\u0019\u0017cV�%�\u0005$֯������9^�M��+;e�..���n ͱٮcS\u0001���\u001c=IS�\u001e��jӦ�yU�����!wd�*�o�3�Px��>:x���y�\u0015q��\u0017��\u001cvQ�p�T楞�2��?�sLN\u001e<���J�'�4\u001f���ң�jK\u0013Z�?�\u001f\u000f�\u0012�M���1��\u0000��\u0004�?�|G\u001c�\u001b�+G�n�%�Ydh�M^V�-�x!�\u001d&��&�����iP������b*�*T*�WI�\tY_���\u0015��g�\u000b�wǜq�ˇ�[����4�^t1x|\u001e_��ԪS���ԔaG\u0002��Z��u(ƒR���h�\u001a�]���'_�,~&|\\��t��Q��3~��\u0000\u0007��|I��֍��~+��;�^\u0019��f�i\u0010[kz�ۙo<=q��l�>�\tN<;R�|f=��+��¸ՕH8���k�\u0010N�y��_<%ta�/\u000fa����\u001b�8�����/gR�|#�<E\u001c�\u001f�S�b��ƙ��\\�,�IC�EG\u0013���<\u0015g��*�\u001c�\u0000����\u001d|\u0015�\u0000\u0004����i���\u0000\u0010����\u0013|\u0017��\u001b�9�����\u000f�����������\u0017�7�4�SKMR�÷ZƝg|l'\u0016�孪ﷶ�[�?L�Սz\u0014kC�N\u0015#�$��뮫��?ؾ\b�̿��C���*����K�ೌ5\u001a��J�x�(Ƭ��g\u000frUp�\u001c��\\/\u001fiJVmj�\u0000���%?�\u001c��\u0000\u0005g���\u001f�����㟂|C���ƿ\f�3�Z%��\u000f��\u001f�Լ?�}��v��֋�;-WM�O-6�X]Aq\u001e>I\u0006Ml}I��~��\u0007���\u0000\u0005 �;��\u0007���\u001b�x�ᮃ�\u0003F���h�'�|Q���|c�h^'�晨>��-OI��\u001d'�\u001a�\u000fa-�Y��1�,-5�\u000f\u0018\u0007���\u0000�п�K�\u0000���\t��_�J���\r{�Z/���\u0013|A�k}w��2�䚎��\u0012xcN�&��񎱬O�$\u0016���rCd�E;H�2;Ƅ\u0000,�\u0001������U�\r~�\u001a/�y�|n�d\u001f\u0001�?�\u0017N����\f?�O�\u0013�P�#Ҿ\u001e���A\u0012��W�澏��E���-�j�N\u000e��mzL�\u0003��Տ�N7��\u0000b�\u0000�#�\u0000���r�?�j�?���9��\u000be�\u0000\u0005\f�\u0000�k~ۿ\u0006�\n���\u0000\u0015�/�O��0��|'�G^ҵ���\u000e�sus�-W���\t��\u0011�.�����[ɢx7@�]>\u000b�죒�[��g��y\u0000?��$?�\u0015�W���\u0000�l~ȟ�w�\rn�ğ\u0016>-|/�\u0000���\u001a杢i>\u001c�Ե��I5�;Ϸ�4;K\u001d'N��\u0016��\u00166�C�/�{� \u001f��\u0000P\u0001@\u001f���\u001d��������%σ�\u001f�g�w�_��-����O���o�>\t�/�|G\u000e�e��\u0000�\u001d��.��]3V����.o�m�o��ZA=�Rʒ\\B�\u0001�]�\u0016?g���\u0001\u001bAO�\u0003�0|\u0017\u0014���\u0018O�\u001f\f�i��F�)�\u001a�h+�\r\u0013G:��'U�Ʀt�p,\u000e�`.��yo�\u0000x�\u0000�G�\u0012��\t��\u0000\u0004����\u0013K�\t��_\u001b~¿�ǌ<e��ؗ�Y�7�<[�ً���<M�\u0012k�\u0004<\u0011��~ �\u000e��x\"�Uֵ�gR���5][R����/�'�����i$`\u000f��\u0000ཿ�L��b��\t+�]�~ʿ�O������ZW�#����}��~\u001d[�_�w��>\u0014G�\u000f�C��s�$�J�\u0013}y5��F\u000e�\u001dm]os���@\u001fʯ�\u001bQ�#x\u0017�\u0007����?�Uoً�\u000b�\u0004j\u001f��\u0000�to\u0003k��Po��?�~\u0012^�[���\u001b�+J��GxkL�u��i|\u001da�[�>�G��L�\u0019��MŴGK�՝\u0000<c�\u000e��b-3��������?em?ᬟ�֓/�\"���~\u0011�x\u0019�r~,�SK�<D�\u0007c�@o\u0015�\u0001t%�� u��C��\u000b1@\u001f�7�\u001b��h��_\u000b���\u001f�7��&~�?�Gï\u001c�ÿ\u0016�׼\u0019㿎�\u000b|#�\u0012[��\u0013�֧e\u001e���\u0010x�O���.���-B�/,�k�\u001b�[����E#�%����෺��\u0015��p��\u001f�ચ����\u0000�C�\u0010M�ϭkߵ���\u001dK����%����դ������\n�<\t,�%�I�\u001b�\tI+\\\u0017ѝ�\u0000����?��\u0017�\u0004�\u0000�'�I���\u0000\u0015~$�\u001b��?\u001e~\fiP���W�|O��űiz������\u0017��#�h��v\u0017�\u0014k{f����cE�9\u0002(\u0000\u001f�w�\u001b)�U�F�\u0000h��+o��i�\u000b����>:�\u0002�Ɵ��_���\u000f��\u0013�\u000f�z]g�y��'���&\u001do�Z߂��5_\u0017h���?�([v��\u001e�\u0013h~n�`� \u000f��\n��\u0001�`��<��\u0000�7��\u000f\u001f\u001b�i^\u0007��ψ�3k�iZn�ak�x��\u001e%���E�olmu\u001bI��.�g}\u0015��P���O�\u001b[�.ne��\u0007�2<�\u001f��c��_X�(}^�(ʜg\u001eIԩN�}���n��$��\u0016��Zrq�L�2����ר�T���i8��\u0018J/�K�K�-6��M�����,l�x.go\u0013J�\u0019X���C�%���5�e<��Q!\u000b�z�W��\u0000�9��\u0000������\u001d��\u0000_\u000fj�o����.\u0012�m�����ik��N�=s���+�~|\u0002�P�\u0017�>\u0004x�T�oJZx��W�׆ ��t�4\tc�O�H��j���O��\u001f\"Ky\u0011XM?�,O�N\u001a�\u001a�p��֍�\u0019�P�wMt�켼��-��UX8K\u0015NZ;7\u0019���>K�����8�O�I�\u000f��LWڟ�\r^�]gODմ�E43|E�&;�5�Y/nl�\t]\u001d��\u0014sq\u001d�2H�\"��\u001e\n</����\u0000\"lLd��\n��ф���8պj׾��z�a��>\u0016J�qTj���#9+rۑ�F+��nV��|\u0011�s�\b�a�\u001e��]{�h�u\u0019�m����xj=#º��l�\u001a+X��}_O��\u0001��&��X�|�D�\u000f�K\u000b�6\u0001�ai�uav�\u001cEz8�m?�W�8�����Cӥ��&\\��a0��~ڝ)S���N�5%���{k����{�\rr���\u0019�_�-�3�:�������+O\n��F��_1���hu�\r�Q���u��5mI���$r��r}F]Ĝ��\u0016?�\u001e2�a����0����/z�z-%�U8�[x�x��]���N�\u001b>��i˙�Zu1\u0014��Q�*��\u0000��+Z�g��\u001b��\u0000~��\u0000�N�\u0002~ԟ\b?h�\u000fh\u0016>\u0017񏎼\u0003�\u000fᦿ�޵����/���\r���S�a�\u0000\u0012���\u000b��1$�;^�.&m�S�\f\u0006i[3�͉��\f��4��1�\u000e�7;�P�B�nuO�<i;��\u0017\u001dW�c�ӏ���qџ7����p���!V�>V�+��ݭ/��7�\u001f�\u001f�w�i�{��早h�\u0010������\u000f\u0014����z�����;y\u0015�nR9Ci��1JQ/��\u001d>F�����'%�%QB�5R��\u0018zֺ����_����;�5m����x���\u001eslD%��b�<T�ǅ�YS�N�a���T�r�E)��V�K\u000b��N��\nԫѨ֧�_�\u0017�\u0015_�g�\u001d2��\u0003�/a�\u001fI�\u0004q�x��\u001a$�����:�͡�Sxu�+k\u0014�-��K�(��,�e��u�$����8�.�^2����R��9b�7������^�i;��~��ӛ�8�\u0005_)��$�xe��)S��g8\ba�\u0013����<d�c�P�\f\u0005\tԕNJ��l�q�*�_���?�\u001d+K�\u001f�|G��M���o\u0016x�V����\u00136���Ωq�4�!�k�˻�K<�����$�}�\u001f+\u001fm��ӧ\u0005:؊�Q�Rs���\u0000N�vK��M��g<S�a0\u0018\bc�\\�<�)��P��b��~>�!vߵ�Z�j�Nu%�+�Nr��~��b�\u000f\u000b��\u001f�o��\u001f\u0000|H������w�~\u0006Z��do��~!|F�7�t\u0004�\u0019����C��u\rGS�o��bX�\u001d.魢��d��o�r��<.\u000b\u000b����ф\u001b�K_�o3���!��G��\u0018p/\u0006c&�cxw��ܻ\u001d8ߑ��AO\u001d�﫦�u+F�z�j-�ݏ�|\u0013u�\u0000\u0004\t�k��\u0003ǿ\u000en���\u0000�υu\u0018u\u000b���3~��\u0015�g��k|��T�<E�5����0no&�N����q�*��a�9�\u0007�����>7x���\u001f\u0005�\u0000i?�_\u0017�Yg����~\u0017�_��ߏ�Ek�Y�YX��W\u001a/�<E�jPi6����is��l�p]j\u0016V�̲�@�\u0000\u0004�|\u001f����\u0013��\u0017���L�\u0011@\u001f�\u0005\u0000};�\u0012�z/��l��\u001b�~$�4�\u0010xw�?���=\u000f_�5�>�V�u�\u0017V���K\rWH�4����Դ�J��{-CO��kK�I����Hdt \u001f�g���\u0016���\n��J���o�9���\u0012�CУ�\"�<y���{�I�?\u0019��j�u֏�ǥx���\u0011ҵ�>=OI����\u0004���ot�˫+�%���8\u0007�\u000b�\u0000\u0007�~ѿ�/���<~�\u001a������7��[ğ\u0019�#�\"�>\r�P��\rG_Ӭ�\u000f��Y�kW�\t�4;�V���G�����x ��h�Y\u0018�\u0000���\r����\u000e~�?�o��\u001b�\u0000�Z>(~�?�\u0017�\u0003�~�\u001e)�|_�\u0000\u0005\u0013��\u001f��\u0000\u0018�����\n>\u000e��7��%��Һ���[\u001f�v�5ּy��>�w\u0017���N����Kuկ��e\u0000��|\t�i�1>\u0017xGB��������\u001dx\u000f��_��\u0019�O�>;�Ͼ\u0011���t�\u0000:[��h^\u001b��\u0000���\u001bH������V�y�K&��;\u0010\u000f�h\u0000�\u0002�>L��?n_�k�\t�����y�<�$�Y���G�}g�ை~=�_��ޯ��\u001f؟\f�%�?\u0011G��?Ú�����\u0013L��~U��3�Z�8\u0007����?�T/�c�\nO�~��\u001f�_���/�v_��?\u0012\u001c�4�����\u0011�<?�������\u000f\u0002�����\f�)΄55���Ƥl�债\u0000�o��?���\u0000�T\u001f���ݧ�\u0001�(~̃��;�\u0011k�\u0014��a���=�\u001b���5,\u0010�v\u001f�?\u0012>+�?���).`_�I�%����\\N��@?�[�I�\u0000���\u0000�(�\u0000aO�[�k���j�ڡ�\u0017~ӟ�\u0007�_�_�\u0017�\u0013��|\u000e���n>\u001e�q�\u000f�\u001d\u0003��o\u0004�\u0019�:�C���-\u001e\u0016�ׅ��\u000f�\u0012_\u0003��ľ\u0011�>�����W��l�\u000b�\u000f��f?�/��\u0012c�����Oٳ�o��[�/Ɵ����\b�a�\u0015�I�C�jo\f�_\\񦶟�x����<)����^\u001c�u-ڶ�`�?c�\u001d�Oqkk8\u0007ƿ�t/�\u0003�[�E?a�\u0007�c����\u0007�_\b�՞\u0017���\u001f\u000f\u001f\u001d�4����;�\u0017�_\u000b�k_��\u0014|c��\u000e���|W�X�\u0000gX�w:��o�LV/gk{qn\u0001�+�\u0000�.\u001f�]o�1��\u0000ę���� (\u0003�������6��\u001c|y�7~ў\u000b\u001f\u000e�4|2�Ѭ�o���?\tx��\u0012��\u001e\u001aѼ_�G�\u0000\t\u0017���\u0013xSR�_�|A�j\u001b�r�;���塾���\u0010\u000f�o������#ߏ�o�_�j��vگƿ\u001ai�\u0003�\u0006�g���i�\u001f�/�^#��ǀto\f�G�|\u0016���<Yym�m�붾\u001e��>�u�A����\u0001��\u0000��?��+�z�5u�\u0000��\u0000�P�n>*|\\����Ŗ�\u0013>0�\u0017���\u0003�W�����\u0000��ď\u0014xC�)�(�o�ɬ����Z[���@?�o�!�?�mq��[�\u000bT?ጇ��>\n\u000f٨�?h��Y\u0007�u?\u0016��0��z\u001f\u0007�\u0000� >:|,��'����\u001f�\u001f�E�\u0000��\u0000�<E��\u0001���\u0000\u0011G�\u0000�\n����\u0000\u0011����\u0000��\u0006I�\u0000\u0007A�\u0000�\u0011�\b��¿�x��O|�g��\u001aO������W׮Tã�_^�\u0005���K�A��Z���\u000bke��<�D��\u0001��\u0017�\u0015\u001f�\u000b\u0001�7V����\u0000\u0005)�\u0000�`|(��a�\u0006Hڇ�\u000b�H�\u001f����¯\n���f����,�K�\u000f\u001e�D��1��ހ�\u001e\u0017���{o\u0016�&�=�V\u0016WwP\u0000u�,�\u0000��|=��t�~\u001d�\u000f4\u000f\u000b�\u0000�H?k-\u001e�?\u0019��\u0000�o�����-�\u0017����.tO\u0016�U��\u000f�\u0011�?�^\tկ�?��!�Q�(�\u001f�x���\u001a�\u001e8��l�;�+�����\u0001\u0017��\u0016_�]�ׅ�\u000f�#�\u0000\u0004���⛅�\u0007�_�>\u000e���Ug�\u0013�\\1���x���\u001f����0x{�\u00176�.���%�<A��:��Y��\u0016��3�s \u0007����\u0000\u0007��|3���#x#�<�\t������C�/�W_\u001a�G��\\�e�x�j>\u0006�έ��{�\u0015x\u001fA��O�G|s�o\n[��I��ҵР��|�;�{��?����\u0000\u001e��\u001a~�?\u000b�j\u000f�O��?мY�=x'�ߎ$��G�<\u0013��\r�ψ^&yu+��f��7guz�_O\u0012H�VFycV,�\u0003�m\u001f�\u001e\u000f�\u0007@�m��t_\f�\u001f�k��^�:�\u0011j�,m\u0010�w6�G�˪�ٍV��\u0019��.n\r�\u0016VS���bXG���+8�B��4��u'QG���\\Ti�Y)7y_�V��s�Dx\t���-�\\�\u0017�ar|\u0016Q�i�Y�p0�gR��%z//ʫM�8�֫\n��Ԩ�~┥B�����P�\u0000�\"|\u001a�QY�ό�\u0012�t��%�֝�B���\"-F;;\b�\u0005~Q�N���\u0012�\u000f�.\u0007��rb�q���Tg/�5/g\u001b_����6c?fׇ5�s����0�a\\��\u001e�\u001f+�U���\u001f�F�\u001e.�\u001f��/U#��<3�\u0000\u0004��\u0000�Cx*�\u0000�_�_�\u001e\r�m=��=����޹\u0016��\u000bQ�\u0017\u0016�}շÿ\u0003h:}ψ�����\u000bI�>\u001d�;R�.\u0012�a��D<\u000f{+�2����:�����έ�oF�\u0015\u001d\u001a��\u0018�*������E�\u0000\n�\u0016����y]lψ�\tS|K�ʎ;4�NzN�\u0007��\u001c._\tŸM�0��T��j�-���\u0000\u0005��!�\u0000\u0005��\u0000����\u000e�q�\u001d~�0���\t��{\u0011�\u0003�_�ƿ��\u0002���k�\r\u0012\be���\u0005|S���_�~\u001c�����g�|%��\u0004�{_�ƅs�\u001dGOMS^��\u000fh��?�π�\u0000\u0002�)��?\u0018�\u001d�\u0002�#��M~-|W�5���\u0003�O��\u000e�o�{�Z��\u0000���۾-մ\u001f\ri~w��\u0000�zֱ�XǏ��Ǒ�\u000f�?�\r��\u0000�.�\u0000�K?����P_�?\u001c?l\u000fٸ|\"�_�~ʟ\u0011>\u001bi~'\u001f\u0018�\u0002x��^5�~&�\u0018�\u000e��b�0���O\u0010���\u001f�~ ��Ѹ�bҠ�\u0007��o������\u0003�_�>\u000f�K��\t�\u0000d��g��^\b�\u000fႀ?��س�\bg�\u0000\u0005J�?d��(\u0007�?f\u0001a�$xkX�\u000f�bk\u0016?�u��\u0017F��sѯ|+�R���\u0000\b\u001d�ū��w&�᝴�%�\u0000�F�����m���xf]}�J`\u000f�h���?�Jo�k㗄?f�ُ��o�\u001a|wo�K�\nx4�\u000f��|\u0019��\u0007�|1����2�E�\u0003�\u000f�|)c����\u0007U�v�:�����+s}=���\u001f�_�t��\u0013w���\u0000���\r��<\u001d�\u0018�\u001b\u001f\u0018�G��⿏<K�m8�D�U���\u0017Dּ!�ize���*x���:��o��\u000f�i77�p��n �\u0016Y\b\u0007����\u001f�\u001f�k�\u0000\u0004����σ��7���?�|\ta�3��\u001d\u001e;�k�\u0003��\t��A�O\u000bX�_��\u0000\u000b�c�m\n���|#�\u001b\u001f���N�V��?�SXGgwcqr\u0001�����\u0000\u0006��^�j��\u001f\u000f�hO�߲J���\u0007�M\u000f�\u0012O\u0001���\u0017������\u0017��z�?�<c���'�?�,n��>����_��<�)�w\u0000�\u0000e�\u0000(\u0000�\u000f���\u000f.�\u0000�Kx+��3�������\u0001�E�\u0000�\u001e?���\u0019�ֿ�%��o�\u001f\f�\u0011���q��^_��g��\u0016���\u0011$�\u001bH�\u0000�j��B4����_���2\u001dB����M�\u0003�2�\u0000���N�\u001f�\u0000�-�a�\u001f�S���\u0007��\u0000\u0013<O��N���<Q�k=j�A���Wzuť�A��Z�\u0002��l�nY���L�4\u0001���\u0000�E?��\u000fڋ���\t�q��Z_�O�\u000fJ��ď�����5��;P�>!��M;Þ+�w�~(Z�n���I}-��]6�4��f�k�g�S\u0001\r@\u001f�G�\u0012g�����\u0013��\n\u000f�;���=�w�<�/�7�\u0000\u0010��\b�F�K��\u0016��3�E��\u0000�6i���3[鱵����MB��L���.\u0012-Ӵj�\u001f���F��\u001cљ~�\u001f�S|-�\u0000��\u0000\u001f�\u001b��q�\u0000Fe�L�M��\u0000�t\u0001�=�W�l�\b�\u0000�A�\u0000��W��O\bx��^\u0013�ѫx\u0017P�<%�۝2��Z<~\u0014�W�_\u0000]G�\\h�\\i�����.��ͬ�\u0016���$��\"�\u000f�3�g�\u001b#�F~��\u0007�ઞ4��~\nx���wm���\n\t�φ\u001e\u0017�<uk�\u0017x\u0013�|�H��u�\u0001xv�\u0000V� ����u�\u000f�F���Eޥu\u000e�\u000e�wo5��vK$�\u0003���#r���\u0000���\u0000i��)~\u0016��>f����#\u001f�\u0000�=d��\u0000\f���\u001f�7��\u0000ᢏ�$_�G�s��<+�\u0000\b�+Oퟱ�\u0000�)�\u0000\f��?�H?������ItO��;ȿ�>f�\u0000�#l��<�ٛ�\u0000\t�����\u000e��?�e7���\u0015�c�\u0017\u001f�?��q\u0006��\u001d\u0017Y�\b|7�@M<:f�m{$1\u0017�\u0002\t$H\u0019\u0010�\n\u0019��\u0006M\u0000X��q���O���\u0000�a�?�[�\u000e�\u0003���\u0000�+�*\u001f\u001d��~*�A��t\u0001��{�����o�\u0000f�����-\u0000|]�\u0000\u0004��\u0000�Z?io�(��q�w����M|\f�}�\u001f�����<!�\u001d\u000f�מ#�?�_�Q����\u0000�\u001b�\u0017J��$�~����N��Ӿ�\u001b�T�m�ʊ\u0001��q�\u0000\u0007\n�\u0007�w�\t�\u0000��֟\u0000�.Z|g�?���\u0000�Q[|j���\u001a�\f-�'�^\u001eo�\n\u001f�3��\u0007�m�8|Wr�,��;\u0013�\u0013��ku�:�!�\u000f|����\u0000\u0005[�\u0000�z�g}\u000f�����qxw����~\u0002C��?��p�7���/N�;{?\u0000|6���\u0000ů�~\u000f��M���\u0005�_i\u001a�hw~9\u0016��\u001d��6�jl�\u0016\n\u0001��n_���\u0019��3�\u0000�/���^P\u0007�?�\u0007�K�/�;��\u001ag�\u0014s�X��\u0000eO��\u0004|5i�\u0012�\u001f\u000e�\u0000h\u000bmW�\u001e0�<g��T�>;j>4�.�\u001dC��xkQ�?h�\u0000\u000e�v��W1ꫪxsX�x\u0016�[\u0019$\u0000�\u001f��\u0000�\u001cq�?�\u0000�\"|\u0005��%\u0007�O���\u0017���\u0000�&�m�/�����c�Zw��g�O\u0004�t;�\u0012�f��z���m�;ɤ\u0013[C�ZA~�\u0002%�_�\u0000�����\u001b��@�\u0000�\u0018|u��*����\u0013���\u000f����o�@����}\u001fƺo��m�xGwڴ\u001f\u000b�x�L�����w���<ڵ�\u0016k���\u0017�\u0000���#r��?�̿i��)�\u0016�\u0000��>Y���\u0017�_�xN�ᯍ?���c�%h�\u0000�-����:?�\f�\u001e\"Լg�|]���f���j_��Z�X�6�\u0010���\u0013Tx.$���kex�B\u0000?�?�(��3�O�&���W�8���_\u000b�C�oo\u0000\\�~.�m��g��Q~ |8�ě\u0015������k\r?�ֺu��!@���\u000f\u000e�\u001a6 \u001f�߀��ه�\u001f�K�\u0005~�w��Ǜ�\u001b�_�\u0007���s�}w���V��Z/��g�jo\u0015�k&����~m^ٵx��\u001a��YchE�R�?���#�����&��\u0014\u0017���\u000b�\u001e(���?��o�;\u001dK�>\f��l�E����\u0013������ks�i��\u0017�(���\u0013̥�-�HwLѩ\u0000���7/��������\u0000�o�\u0000.�\u0003�-�\u0000���T�\u0019�\u0000�]?k\u001f��\u0000�/¿�\u001e:�S��\u000f�w�����\u0003�\u0005�\u0000��\r^�W�~$�R��Ŭ�\u001c���M6k?\u001fX�E\u001c�-к��fA\u0013��\u0001���\u0000\u0004��\u0000���e�\u0000�w�\u0013���d�\u001a~�_\u001e�i⏁�\u000f�\u0000�\u000f�|S�{�����]�\u0000n�:����}WV��b��(��u\u0012I�F�\u001bJ�\u0001��4\u0000P\u0001@\u001fɯ�\u001e]�\u0000(��W��g���W\u001f\u001b�\u0003��\fh�\u0000�?�\u0014���_�������\u0001��P\u0007+�\bi�\u0010|\u0011�/\u0001k3�Z�\u001e7�|!���A\u000e�o���H�ѯ��庶����\u001b[�d�����\u0004�ci���4L\u0001���\u0000�\u0014�\u0000�K��8/���\u0000\u000e_���\u0000п@\u0007�AO�\u0000\u0004��\u0000����?����?�\u000b�\u0001�����J����\t'�T�\u001b�\u001b�:���\u001f��)�\u0013�~Ӿ+�Z�Ɲ{�^ �\r��o>#|A���Z]ׁ�\u001f�;�aїM�:[��W���{�\u001bPh$���\u0003�[�\t\u000b�\u0000\u0006���߷�\u0000�\u0013��j��~0�d���1�#�.���C��\u0017�_\u001c�\u0018�|\u0011a7�~-x��Zz�Zw�>\u0002x�^��m#º}���<G����ג����Ain\u0001���\u0000�G�%�x\u0003�\t\u000f�yx\u0013G���I�W�\u0013���s�I\u0004��Ɲ�ُ�:5�������K{-��R]Ioik\u0003��46�FV%\u0000�\u0000+��!7�\u0013����\u0014�\u0000��ѿe��>)����\u0000\u0000j?\n�$x�}g�\u001e��]\u000f�\t�x:�L�M���\u0000�^\f�抺t�{(���\u0007��V1owlC\u0016\u0000�\u0000NO�%\u0017�\u0011K�\\�\u0000�>\u001f�M�6|A����C�����<M���_��O�C���F?�\u0002�_���n�\u0000����\u0000mj�\u0000l���O����Ϸ\u0000~��\u0001@\u001f�\u001f�q���O���\u0000�a�?�[�\u000e�\u0003���\u0000�+�*\u001f\u001d��~*�A��t\u0001��{�����o�\u0000f�����-\u0000T?�k�����\u0018�\u0000��������\u0000�\u00000��+���\u0000g��*��_�>\u000e��5?\u0017|\u0012�\u0000���N���m7Ķ��~\u001c�|G������e�����K�t}N�D���[[}V�N�����$�;MF�᣹�\u0003�s�\n\u001d�\u0000\u00071~��\u0000�R��s��\u0000�W�\u001f�_�w��\u001d��\\�n��k\n<\u0015�E���K���J��P��/\u001chq[\\_�C�%Ǉn�����kY�.\u0010\u0003�ؠ\u000f�/�%��\u001c-�e�&~\u0001x��t���\u0017~̞6�_�~0k�\u0000\u001a�MW�G�>*k�(��G��\u0017�\u000f\u0003^��\u0017�\u0007����I�@�I�s�\\��\\h�Z�j7z���[Miid\u0001�]|\u0014�\u0000�v?b��+g��\u0000�\u0000�U?h����\u0007�?h\u001f�W�v\u001f���\u001f\u0005�\u0016�\u000f�\u001c��\u0000��i\u0001ֵM#�:\u000f�~\f|D��+{��;\u000b\u001f\u0010�@�F�\u0015�+q��I�@\u0007��\u0000���8����\u0000���_�{�\u0000\u0004���>\u0015���\u0002�\u0007�q����\u0017�o\u0019|\u000b��\u000e|_��<[��GS�{���\u0000�?Ŀ\u0006i~$�����Ğ\u0002�V�\u001e��􋌮�\u000e3�\u000e\u0006�\u0000�wc\u000f�%\u0017�O���K�{���Ox���$���\u000f�~�I���\u000f�:�\u0000�b�߉�\u001f�V�]�����>\f�>��\\�P�.�\r�����\tes��6�<��\\Z\u0000~=�\u0000�*�\u0000����\u0012\u001b�?\u0017�\u0019�8|8��<s�|i�\u001f��O⋏��\u0016���\u001b�>�\u0000�Zf��i��\u0012x\u0013�Ë{kI��{��MF�T�I�\u0006�{dY#�\u0003����?����'�\u001ce�?���X/�W��\u001d�\u0015~�_�D�$�~ x\u0017�\\�'��\u0000\u0007|\u000fѠ�\u0007�k�r���;ÿ\u0016>\u0019|i�儺���\u0013�{U�#k_\u00125���M�y�&���X�p\u0007�?�\u0005?�\u0012���\u000b���\u0000×�<�\u0000�/�\u0001�\u0000\u0010S�\u0000�.�\u0000��o��9���\u0000B�\u0000\u001f�\u0005?�\u0012���\u000b���\u0000×�<�\u0000�/�\u0007���\u0000\u0007\u000b�-�\u0001�\u0000�%�\u0000l\u000f�?�����/��7�w��f�\f�cյO�\u001a���\u0000\u0013[x�Y���g�7V\u001au߁�\u0005��K�B�K�\u001e�q\u0005�Ώw�.�s�K&�-��ֶ�\u001fЯ�\u0012��\rO�\u0000�}~��O�\u0000�w����������\u001f��\u000e��/�N���\u0000ǟ\u0004��\u0006�ڗ����y\u001e\u001f��\u0017���n����l\u000f��> �'�V�N�H�\u0003���\u0002�\n\u0000�M����D�����>\u000f���@\u001f��\u0000�cG���\u0000���\u0012���\u0000�����\u000f\u0010�\u0000����?�Q����\n}�/�߳\u001f�_�\u000b�\u0007��O�\b�Im��\r�xB}2-s_����5\u0015�Z�֩{�_�o\u000bL\rш\u0018Ǘ\u001a\f�\u0003���\u0000�n|F��\u001f�'��%�k�_�o|]�\u0017��y�5|A���\u0015�MCľ2���\u0006������Y�kh�������\u0017+kmon�\\8�\u0018�\n�\u0001��\u00001?�u���Q~���ω�\u0000�w�?\u0013|\u0013����k�\nx\u000b^�7���./�/\b_|\u001c���\u001b�\nt�t�^�ZO�xoC�\u001d�����Ӡ\u000b0�Ȏ\u0001�d?����S�ܾ7��ď���7��6��\u0015��\u001e\u001e�\u0017�`�-�t�\nA���:-�hZV�lmSW�5[���$�m��c\u0011�\u0000}3�\u0013�\u000b?�\u0000\u0005B���\u0012x;�G�/�\u0017�_�?�^\u0000��-|\u001d�m\n��SiZ\r���j�'�b��U�~�{�kz��/�/&\"{�B\u0014�$h\u0001�|E�\u0000���\\>-�>��¯�߷\u000f�_\u0015�=����\u0013�>�煵\r;�ia�O\u0006x�D���4\u000b�����Y�\u001a&�}�\\��ͽ��r�\t�,�\u0001�7�\u0000\u0006��\u0000�c�-��;�t�\u0000�n�h\u0003�F�\u0000��ࡿ���\u0016��O�� ��\u001e0�\u0016~*��W�\u0000\u000b\u000b�\u0011;o\u000e��\u0000�S�\u0000\b0���\u0000�\u0013�����l���\u0000��Ŀe�'ٷk���v�|�\u000f�����\u0000�\u0003�������7���T�[�\u001f��:o�Y�/��>-�<\u001a=��m�=\u001b����_L�\u00114=3I�6�z��5��٭�s%���d\u0011�\u0000B�?��Ҽ\t�]SO��o��\tx����0���,�kۋi�:�\u0017�h�E\f���ܤdP\u0007�h�\u0000�,�\u001f���\u0014���\u0000��a�ۛ�����\u001b�'�о/ּ+����m</k�o\u001f�H�G�<c��z�ǆt\r\u0007]�����\u001b��xΝ��Jnt�U�hL�H\u0001��\u001f���\u0012��\t��\u000f|D�>,��?����\n|E��\u0019��=�<U�{�\u0015�j\u0017�\fյ�\u000fx�Q�&Mw�Z������)��FF��.\u0004�U�I�6�$\u0000�������\u0000�o���\u000b�������\u000f��~\n���\u0015�⫿\u0014[�h�\u001e��n5y��U�u�\"\u0006��R���-<2��J�H\u0013\n\u0000?�\u0003�\u000b\u0005�\u0000\u0005\u0010���\u0000��\u001f�Q�'�\u0007�\u0000�z��>1��?c�~\u0010|\t�\r��o<%�U���;��O\u001e�&�Ś'���?�%���\u000fƞ0��~�y�R�\u0005�Z���m�`\u0000��>/�\u001f�\u0000���5�\u0000�E�O���S�$�:�i�\u0016�\u0000�8�k�M���\u0005��Wĺ�Ǎ{�e��*j�\u0000\u0012� ���h��_|A���D�åǥ��Y#�KL[�\u000f���\u000f�\u0017�\r)�\u0000���\u001f���n=7���\u000b�\u001f�V_\r</�\u0006����+��\u0005�xn��Z�Ÿ<A5��u�\u001d��Ht\u001d!.>�n\u0014\u000b\u0018|�\u00112\u0019\u0000>^�\u0000��cOً�\u001d�\u0000��|\u001b�Q�(|\u001f���O�~!��~\u001f�Cּ+�i���?P�����ޣ�\t�]�5{�yu��Oút�\u001d�[\bt�r�,�4�\u0000~|\u0012�\u0000���\u0000�U>\t�\u0007���߅�����\u0000\u0005�'�\u0016���+�\u001e\t�,<\u000e�V��[&KKm\u001a�K�\t��5�6��+\\]�9RKJO4\u0001��?�Q��%\u0017�\u0013��\u0002���\u0000j\u001f�;�:��|\u0001�\u001f����>\u0013x���\u000f�^\u0011��eω~\u001d��B�?�O��X<A�=gE���ϗ�MKJ��;ϙn�`\u0003���\u0000j��*��\u0014/���s��#���\u0000jO\u001f|i�q�x�M���?\u0014Y�N�N��~��k�&����\u001f�t��wi�x�\\��^��Z���g\u0011<`\u001f��\u0001�e�;�\u0000�c�\u0000�߲w�/\u000b|\u0005���k�\u001f\n�\u0010�*Mz_\u000bx\u0017��>\f�IѤ�?��_\u0016��m&��}KPc���\\յY���@���b��\u0011Ā\u001e��\u0000\u0011\r�\u0000�h�\u0000� \u001f\u0018�Y���\u0000��\u0000���\u0000�x�౟�SO���\n��6|\u0007���\u0000kψ�\u0000\u0015~\u0011x�E��q�o\u0003x�����:��\u0019�\u000b�+�:\f�2i\u001e\u0017�oմ�\u0010h�f�\u0007�y\u00103�Ʋ�\"/\u001b�~���\u001f��u�\t�\u0006��|Q�$|r�_����\u0017~ h\u001e0��+o��O���W�t�GN��\u001a���D����-�f�8d.�;��@\u0007�\u001f�@\u000f�_\u0007��߲G�?ڏ�\n��M'����\u0000�����'�/\u0003|M��&���\u001c�=��\u0000�\n�\"h�\u0004�����\u0012қI����\u001d��\u0019.t��\u0003y�K����\u000bp\u000f�\u001f�)��\u0015'��\u0000�\u0000�u~޿���M�\u0014~Ӟ;��?eo���\u0017� �\u0005>\fx6�·^\u0018�}�\u001f�\u001d\u0017Z��Ѯ<G��s\\���WWԯwj:��Ǜw �\u0004E\u0000�\u0000V�\u0000(\u0000�\u000f\f���9��?��m�u�Q|T�C��ǈt�\u0000\u000fZx��_�<)��\bM�B�R��4x5o\u0018�X�O����ڵŕ�Lo&����\u0018�('*\u0001�\u0006��\u0000\u0005g�\u0000�Ch�q��\u0000�B�`� \\�f�i�w�\u001b\u0001q��\u0010��\u0000d�L^o�$�G�n��>�nl�V�?૟�G�Z��j��P\u001f�\u0003S�(���C���\u0019{rcO��{�\u0013�)D�\u0015݅�\u0005\u0000l[�\u0000�_��V�Ckk�\u0000\u0005\u001d��-�m��\u000b{k�k��0[�\n\b�\u0018c�j�\u0014Q\"�G\u001a*�\"�P\u0000\u0002�&�\u0000���\u0000�(��$����$�\u0000���k�\u0003;R�\u0000���#5�R�X�\u0000��~����r��R���\t�C\u001cʏ\u001ȃ]x�TYBI\"\t\u0015C�wPp�\b\u0007�?\u0001�/�ǟ�7�u\u001a~�\u0010g���\u0010�5�</�x��\u0006��\u000f��\u000e��8��\rV]\u0007R�|+>�eg�Ǧj�n��}���-���ɈCq\u0013�\u0007�9�ʖ6Zo�\u0016���Ӭ�l,��/��\u0005���V�����~\u000e��( H�<��0D\u001b�َY� \u0019��O��'/���������hό��_�3���o�c�O~�\u001a�+|h���/�\u001f��\u0010�\u0017����*�/�^9���\u001ck�\u001d�����\u001e\u0004�uO\u0015���z֡m��+�\u00167���y\u000e�\u0004Ө\u0007��|\u0005����?\u001e� A��\u0000�h��?d�_\u0013��u=Z��\u001f\u0006�*�+�w�%�4č�}B\u001d\u001f�Z���m�r���\t\u0001��dC;(a�\u000f��\u000f����K���m��%P\u0007��=���Po�\u0013��~9���\u0000fOڷ�\u000fËO\u0011��r��_\u0004�\u0017�O�-�Wac��jz5έ��&�J�\\�ӵ=\u001a���I��6��|�F�On�\u0001��\u0000���W�_\u0018x����y�%�\u001f�~\n�u_\nx��^.��.��o\u000b��E��Nּ?�\u001d\u000bT��Pҵm.�\t��\u001d6��\u001b�K�d�x�De\u0000\u001f���Aߊ_\r~\n�\\?b�_\u0018<}��\u0000��\u0000\r�\u001f�\u0013ķ�+�E�xO�\u001e\u001b���a�6\u000b�s�:�՞���M{ie\u0014חP��WP@�e�\u0014��O�>\u0017�\tE�\u0000I$����'�\u000e�_@\u001f�7�\u001cѢ�W�\u0000��~�?��ğ�%Ο��ۛ�ß�\u001a���%x��*�]����\u0005���ǚֽi�_\u0018k�\b?�#�t?\u0013\\x~��V�Iծ-�\u00194��kĄ�K\u001b�\u000f��\"?�M�\u0019����L\u001fُ�h�\u0000��|y��?fo���|d\u001f\u0017>\b~�~?�\u0017�\u000f�~\to\u0018~�?\u0015�{�A��\u0003|NԴ�\u001chg�\f�S��\u0016�c�sO�:��u�\u000fj�o��_�M \u0007�/�\u0014+]�ߊ��\u001f�\u000f��\u001b�h����G�\u0002����5�\u000f]�j\u001e\u001f�|7����5�4-[C��y,ot}GK����.줒���h&�v�ш\u0007�����v���\u0000�i~\u0003Yj�\u0016Z���\r?h&����\u000b�gh�\u0010���g��$��\u001c\u0006BP�`\u0018`��\u0007���\u0000\u0007t���\u001fǏ\u0005~��߱������\u0000��S�@��\u0006\u001f��ᗋ�Su��j�O�$�ܾ,O��EԶV��XkK���\u0011'��R\u0016��+�\u0000S�\u0000�o>(�\u001a�\u0000�u���\u0000\u0015~\n�U<w���5���S�Vx�⏃~\u0018��:���_⾽�kZ�E�;�~\u001f�燼-��B�E�\u0000��O��\n����+_���A��'�<Y�Zܾ���B\u0001�y�\n��O�/\u0003�o�w�C�ǿ\u000e�a�[x��~;�|>\u0016�\u000f��I�]�f���?\u0010iQ�i���s\u00102�gs5���I\n�@\u001f���U����\u001d�����߶\u001f���-�ן�w�\u0013�C|g�'�\u0003|\"�\u001f�W�7��\u0000�\u0015�&��U\u0016�ٞ\u0014�\u001f��#�j�&�W�o��>Ǥh�m��ǖ�T\r��\u0003��~:~��\u0000��\u0000����?�_���H|\b�\u001e��\u000b/\nXx�����\u001f�>����\u001b\u001dOT������\u0007Lӧ�ot�\u0017X���c�k��4����h�'d\u0000���\u0000��\u000f\u000fh\u001a�����MgC��w����Y }OL��xU�\u001d�Vu����Ʈʥ�\u0015\fUI\u0004�@\u001f����ۏ�\t��?�@�>\u0013�s��b߃�\u0000\u0013�2�T�\"�{�+���\u0005��B�\\�,<A�>��\u0010j�\u001a�������ƞ�V�\u000b�2���\r��\u0011H�\u000e����?���'w�E�\u001b��ÿ\u0016x3��w��\u001bx\u001bƾ\u0013�����\u0000\u0013xc�_\u0003�M��g�>\u0019״����4}gJ��մm_N���������y!�9\b\u0007���\u0000��\u001f�o�\u001b���\u0000�G�\u0000Y���\u0000�O�\u001f�I~��~��c�����#ඃ�mN�L�������\t�F��j�V��j\u0016:\u0005ύu\u000b\u000bk��[)#��\u000b\u0017�x��$�Dl\r\u0000|Ǧ�\u0000�[����4\u000fm��\u0000�D?`�*�IL�[鿴��;\u0018\u001evD��x�|U\u0014m+G\u001chde.R4Rp�\u0000\u0007�E�\u0000�p�&|;���\u0000\u0005b��>'|%�τ�%�9���\u0000�_\tx������\tx�L�\u0000�S�V��\u001a\u0017�4[��/T��M��}���h��e�v�`\u0000?چ�\n\u0000(\u0003�5�\u0000�˿�\u0012�\n�\u0000���=�\u0000���u\u0000\u0007�\u0000�K��\"��m�\u0000\u0005q���s�/k�\u0000\u000548�\u0001M��\u000f\u001b\u000f��1�G�\u001a��'��$�����߀�j/�\u0015��j\u001bæ�c.��qw��m�?X��\f��+7�\u000f߱o�\u001d�\u0000��\u0000��\u0000�\u0000�3?���?~ſ�w�'�\u0000�\u0003� ��\u0000�����\u0016�\u0000�����\u0000�*�?:?�\u001f�@��o�\tM�W��\u001ei\u0013~��ׂ�u�GL�G�[|&�׌<Q���W�~0���>!�o��84u�|\u0013�G-�:���^�c\n�<SK=�\u0007�'�\u0000\u0006N�;�\u0000j\u001f�=\rs�\u0000Tw�j\u0000�B�\u0000��\u001f�N\u001f���\u0000c7���f߃t\u0001���\u0012>\u000ex����\u0000�P���}�\u001dƋi㟎��O?\u0014�\u001c�e׈�.��\u0000\u000f[x��w��}��\u000e�k��V:�펋\u000e���ɪ^Zi��յ��5��ܨ��\u0000\u0014\u001f�\u0007�\u0013K���\u0000�g~:��O�\u0000�Z��/\u0017~Ξ\u001d𿈾\t_h�\u0000�\u001f��߈�\u0000\u0014��\u001f\u0017a���ŷ��w�O�\u001a\u0004�\u001c\u0013i\u0017GX�\u0017Eui\u001bB��\u0017��\u0001�G�\u001c��\u0000\u0005���?�k�\u0017/컠|i��\u0000៛��>9�\u0000����\u0000\u000b�S�_�����G��\u001b�ߍ~���\u0000·�\u0007����~���g�g�'�(\u0007�\u001b�\u0000\u0006d�\u0000�'>\"�\u0000���^�\u0000�S�\u0012�?\u0016?�\u001f�j��\u0014�����?m/ڳ��3��m~\u001a|Y����o�,�C�?�\u0015�� ��<Y�x�N����/�ڞ�k�&�s\u001cwVV����W���P� ' \u001f�\u001d\u0000\u0014\u0001���d����\u0000g?��\u0000���\u0000+��tO��W���\u0000���_��\u000f�\n\u0000�\u0000F�\u001a�\u0000ʽ�-�\u0000�5���ėt\u0001�b��C/ۯ���\u0013��\n-��������V�i��\u0007|V�5k/��&��\u001f\u0016I{�_\u0000�^\u0019�\u001a�K�<E�m:kx�\u001dB\u0007��]f\u0007��I,Q�H�&\u0000���3?�$��\b?���\u001a\u000f�\u001f��h\u0003�'����>,�\u0000���\u0018|5�\u0000\u0005\t�\u0000�i��/�\u0002�\r|5��\u0000cO\u0016i����|/��q�g���<c�\\��t\u000f��\u0017�-\u0016��r�?���%���]x��T��-|Ee6�mi��j\u001a�\u0007���\u0000\u0004���|y�#�\u0000�;�\u0000f?ٛ�ׇ/�!�\u0011�\u0003�χ�0����{��b�]�4ym�e��-KK�o�t擛{��'O�E��c<P\u0007���2�i\u001f\u0000~��\u0000����N�T��-�\u0000ÿ�_\u0018|9��\u0017��;N�ռQq��_h�Lz\u001e���\u001d����Wʂ�V����p�\u0019\u0000�����8+�\u001b�\u0000��~��\u0007���\u0000f�\u000b���7�|9�Jx\u0017�����o\u0001x3�\u001e\u001bo\u000b�o��ş\u000bj\u0010[j\u001e\u001f���\u000b�5wԼo�����q[Ik\u001d��^�$1Cp\u0001�\u001f�\u0000\u0006>�\u0005���\u0000��\u0013�\u0000�7��\u0001��l���\u001f�(G�\u00147�\nU�A~�?\u0002�]�2i\u000b�(X� ����_��;�<_\f�\u0004�'����u]+E�Q�m6�d�|+�K`m���>���\u0013\u000by��\u0010\u000f��Q�3�����\b�}�<���E�����%M���\u001a�xn��Q��ϋ~\u0017�����\u0011�h\u001a����{}�ͬhw�iW��f�usb�Mqai+��`\u001f���\u0000\u0006��q�do�\u0017�\u0000i\u001f�fo��\u0001���\u0000��?�IO�{�\n��w�h�\u0017�ǭ�\"�5��?\u0012�i��\u0000\u0014��s�^#�>��\u000f\u000bXh�1���s�~3���n��k��m���\u0012�����\u0000?͗�\n_�\u0000\u0004������\u001b|\u001d�\u000f���>\u0017k^6����+���s�ĺ��<?\u001f���\u0016�����__x��^\u000e��X][��̓ZE��[%��\u0013-���4\u0016�\u001f�߲7�\u001a��\u0000\u0005 ���f��/�?\u0019~����\u001e\u0018�\u0000���6~6���\u0003G�U���������/�\u000e����}�N�>U��\u001f�co;s2(\u0007���\u0001@\u0005\u0000&��yw��[�_�y�\u0007��\\|n�\u000f��\u0000�1��@�\u0000�So�\t~��K�O�\u0007�\u0007�\u0016\u0017�\u000et���?�f��&Z~���(tχ^\u0004������\u0003s��Y�Ɩ��\r��\rE�c�\u000b\u001a��� ���sw�\u00166��p�\u001f���\u001c���\u0000H��?�/o�\u001a>��\u0007�\u001f�L\u000f�:�W�\u0000��~�_\u0001�c\u001b��WM�C\u0007ƫ�\u001eY��X?i\u001b�\u001dK��B�\u0016���JȞ\u0014��_�SV��o\u0007.�T��M�\"�\u0006�5ɵ\u0016w\u0000\u0012�\u0000���/ٿ�ϛ�?���\u0000hz\u0000��\u0000�'?�\u001d�\u0000�\u000f�����\u0000�;�\u0000!�s\u000f��\u000f���\u0000������o��\u0000���m�\u0000\u0007��\u000f>\u001dx\u0007�\u000b�\u0000\u0004��ue�7��+���[����mM|3��h�Pk!�8]�3z,~�mE�ȷ2�_h�g��\u001f�\u001f�W?�9�U�\u0000��~Ǻ��y�\u0017i�\u0000\u0003aԾ!x\u001bǿ�[~�W?\u0011���\u0017q}p4��F��/�u�u/��7���m<�E���(\u0007���B�!���\u0016��Ԣ������?ᛇ�\u0013\u0017�~\u0010C�[�\u0013\u001f�\\'���\u00003������\u0007�\u0011�\u0000�Uɷo������g�?�8}�\u0003��S�\u0000����\u0000��w\u000b�\u0000\u0004���\u0013A�{���%��[�^��y?fk�*o���\u0000\f����=��Ǩ�b����z�������&�+����#H[�H\u0003�P��>6I�l~Ŀ\u0003>?O��o'�A�;x3�<�\u0015�V>-O\u00057�_\u0002��\u000f�ǭ>���\n�gX6�~�V�u!n%6v>o�\u0018\u0007��\u0000\u00104�?��-_�\u0000\u0011\u0006��\u0000�b�\u000f���A�\u0000��j�\u0000��6�\u0013\u0014\u0001� �\u0014���_�G?�?\u0018�\u0011Y~�7_�\"|Z��a�!�����|-m\u0005��+��`h�E�\u0003�\u0010��A�}���P�(f�?��'��\u001f���S��57H�\u0000��~ܿ\u001cm;�ۛQ�=?Ɔ�n�|8���-�y\u0017�?�^|\"�\u000f¥\t��>9x=�_�d�2�O�4ﰶ�t�.Ř��\u0000�����\u0016����#W�7�R=q�L�\u0007���?\u001a>\u0016��\u001fN\u001aC��>\u001f~��$�돤���4�Ն�/�N\u001a��,���\u0017�b/>@\u000f�h�\u0000�I�\u0000�>-��?����\u0000������\u0000\u0005!�ǆ>\"x��A��B|B�L>\u0003�v��ų\u001e\u0017�Ş\nK��\u001d3�&s�\u000bo����!�1�\u000e\u0001�t�\r:\u000f�$�W�\u0000�A��\u0000蘠\f-O���\u0000�?�\u0013�\t��|3��\n\u0003k��\u0015��$�ǩ���\u0000f\u000b�\f�|Iy>\u00027�4�\u0015���?ǫã��4���{x�L{��1�͚�\u000b�k \u0018���|n�ygwi�\u0000\u000e��#�U���g�5��l��x���\u0000�h]�wn۹s�du�\u000f���\n\u0000��?��\u001f�_]C�\b��O�~\b���,�hu����\u0005��MJ��D�\u0000\nφO��moH[\u0014���g�1��@k&�ܵΘmM��Aq����~��r��\u0000�#7G�\u0000Ľ��\u0000�h���\u0007��x�\u0000�ѵύ�\u0003�3|\u0017��\tϥxj?��\n>\"|/\u0011��[y����?����F��Jo��M\u001a�iK�}�t��������ډ|��?#�\u0000�Տ�N7��\u0000b�\u0000�#�\u0000���r�?�3�\u000b��\u0000\u0005���\u0000�7|2�\u0011�\u0012��w�����O��S��.�*M�|8�\u001b����5\u0014�����#�\u001b�u�chm4�\u0000O8\\ͻ�P\u000f�[L����\u0000��`�(���\u001e_�'���)O�W\u001f�-3�i�PA�<\u0010���~#��n�G�?ɢ˩I�@���5������D�\u0007��[[m3J\u0000̼�\u0000���/�!E���H�\u000f�\u0012������_�\u0014ݿ��ώ�\u001f\u0007�~' \u0003ſ����\u001f�_\u0013��{�����)<{�q�!s����\u0004 \u001f�\u0015@\u0005\u0000\u0014\u0001���\u0000����o\u0005��|\u001e�\u0000�q�?7�\u0000�Ə�\u0003�\u0000�M��%�\u001d�\u0000�/�?@\u001f���w���;�_�o\u001f\u0002�\u0000�ٮ�\u0007��@\u001f���l���'�\u0012�\u0000���_�e��\u0001����/ٿ�ϛ�?���\u0000hz\u0000��\u0000�'?�\u001d�\u0000�\u000f�����\u0000�;�\u0000!�s\u000f��\u000f���\u0000������o��\u0000��?h_�6G�\te���\t������τ�4E�s��_Ŀ�\u000f����\u0018���\n/��\u0017������M�ֈ�\u000b\u0005֒�&���})�\u0011Mf\u001aќ#\u0016�\u000f���\r���g�\u0000�(��\u0014KC��?im;�\u001a��\u000b�\u0000�?\u0014<eqi�\u000f\u0013]xOY:߅,����\u0013W��y��\u001e�o>�G�pT1\u001bh\u0003�??���\u0000�Ho���\tT~2��'D���~;����\u0007�'>;����X�q�\u0000\b��_ۭ��\u0000�<��X~$�o���m���dM�\u001f���\u001em�\u0000)c�u�\u0000fQ���\u0000V�Ǻ\u0000�+�\u0017�\u001d\u0007�\u0000\u0005X���\b|%��>\u0018x����ß��\u000f<%���ֺ���\u0017Wխ�+�\u0016�@��ԵY�\b��ocӬm���DG��4���\u0014\u0001��\u0017��\u0016O���?�b4\u000f�YP\u0007�\u0017�\u0000\u0006��v?o��)����G�\u001f�Q�/�\u001a���\n~�~:���[x+ᮙ��U<c�|Z�\u001d��:y�K+��g��E��\u0012[\u0006A\u001c�\u0012Z�\u0016\rj��?�\u001a\u0000(\u0003��?���r��\u0015\u000fS���r�Ǘ^,�4~\u000b�>9��f��\u0014�A���O�����\u000b��M|_���O�$hWX\u0011y�{��/x�@\u001f�\u001f�\u000f�����\t��Cxc�����\u000f\r�\u0015|#�x�Cѯ<Y��o\u0014�a�\u001d\u0006��z��h�r�\f�ɦ_�%�� 6�\u0014�A*\u0005\u0000�\u000f�\u001b\u0019�\u0000\u0005����\u0000�\u001e-��4��]�{�Y|\u0016���-O���\u0000��\n����Z���]|�RX��\u001dE$�º@�I6}��vM�{`\u0003���\u0000�տ�)\u0000���\u0017�D���\u0001�\u0007�\u0000\u0004��\u0000�e?����\u0007�\u0013��P���+xK�E��\u000f��\u0000|+�\u000f�Wz'�-gFѧ�&��Iwy.���a$6\u0016�2�\u001d�r2F�(lP\u0007���\u0001@\u001f���\u001b+�\u0000\u0004d���\u0000�\n�\u0000j�\u0016��Z\u000f�]cX�E�\u0003ᯇ|\u001a�\b����.�\r7�\u001e\u001c�6����\u0005������Z]��Y\n�P:(!�\u0000O��\bw�\u0011�������}��\u0000�V�\u0007��~�\b|\u001b�>�ܿ�w�O�0j\u0016�\u000f~\b~�\u001f�W�\u001f\u0002[j��j����~\u001a�_�</\u0006��ʩ.��E�h�1�_ȉ%���p�!\u0000\u0003���\rX�\u0000��~���/��?���\u0017(\u0003�0?���K\u001f�3�\n��\u000f��\u0007��4\u001ck\u001a\u000f\u0012k>+��~\b���a���.\r#P{�+{������X�p�\u0014��\t'\u0014\u0001�b�P�\u0000j�l/�O\u0005�ß�J��\u000b�?\u0001~3�&�?j�\u001b��\u001a�H>2x���-񇍾\u0010�\u0017�w�5�,.t�\t�\u001b�W��A�G\u0013�\u0006�o�_��MFE@\u000f�c�����'��?�\u0007�\u001f�c�=ލ}�G�\u0007��\u0000�)�߇�t\u001d\u001a}[�>�Lߧ���K\r�\u001fe��Ǔ\u001c��þr�P\u0007��P\u0001@\u0005\u0000&��yw��[�_�y�\u0007��\\|n�\u000f��\u0000�1��@�\u0000�So�\t~��K�O�\u0007�O�\u001d��3�g��\u0000��'�\u000f�>\u000e�S�'�\u000f�V��\u0012�}��\u0012h�wk��ksj����^Y5Źu\u0013�'2DYD����4\u001f���\u0000���\u001b�ǟ�4\u001f\u0010����\u000f��6�������-w�A�o\u0018|\u0013���?\u000ei����ԼA�_��2дM=n�f��V�}��5����^��Z@n'�Muq\u0005�{��4`\u000f��\u000f]�\u0000�i~��\u0000�|�\t�\u0000�\u0007�C�\u0006O�\u00199�\u0000(�����5��Q�\u0005�\u0003�\u000b�\u0000���8�����\u0006���~\r�\u0007��|\u0015🅼{�$�%�7�|7����^3���\u0007�?\u0018xC�ZF��\u000f\fx���\"�g�h� �߈�\u001dZ��J��\u001dsI�����#R����->�����ki���?�o�8��{�\t�\u0000\u0004��\u0000�k������>\b�#��h;\u000f��\n|\u001fc���F�q��\u0000���\r���S}���o\u000b��K�=��;�v�\u001e�\u00146��k�4Z�iڴV�Gm:�\u0018P\u000f���\u0000���\u0000�T?�%_���&\u0007�\u0005�\u0000�\n�?�O�7.O������<a��\n�/���[��:g�)�\u0003��\u0017��\u0000��o��\u0000\u001d~6X|'�|\t�W�σ��\u0019~�o�\u001c��>ҼI�/\u0019jz\u001e�i���l��oķ�\u0016�_jZ��\u0000J�g�\u0012��\t'��^$ѿ����O\u001d_ú��\u000e��k�g��8�躆�q\u0000����KO\u0001�cu��l�q\r�\u0013�m,\f%I\u001a2\u001a�<o�\u0018��\b!�\u0000F��\u0000\u0004��\u0000�=�\u001d�\u0000�?@\u001fG~�\u001f\u0001���?\u000b��x��1�;�\u000b�>��w�\rCG�u�ٗ�_\u0001</�۟\u0001\\k:\u0005橦j����.��\u0012�Jo\u0010Xx^����V���,�\u0019�#7��{ \u0007�c�\u0000\u0007f|o�\u0000��|,��e�3�*���k|<�n��?k\u0017�0��\u0000e�\u0000\u001c|q�o�N�\u0011��x/<Ik�S���u�Ғ�\b�54{�\u0011���c\u0000\u0003���7�\u0014�\u0000�\n��r��\u001e2�\u0000���\u0000�E�%�M3���^\u001e�7�Q�Ih:���K}B���N��K�O�X]Z��y�����6�1n�h݀?ӟ�?������\u0017�f��s�?\u0014?g��&���\u001f\u0014>\u0007�\u0013��!���\u000b�f\u000f\u0019|Y���sƾ\u0002�Σ��g�Z���j>0�_�_\u0016x�R�/�C�M}�]sķ��\u001a��Z����\u001f\u0006�\u0000���L������\u0012��7�e/�\u0007�p�OƋ?\u001e�\u0013�A�\u000f���-�5����]6���m�A\u000e��|;�=��a���亃X��u�m9��5�H\b\u0007��\u0019O���O\u001f�C&�����\u0007�\"��\u001f�5Ǥ��o\u0006��±�Yk_\u001a��=9��6�o^�nm��-�F�n 2�\u0012�H\u0007��\u001e��\u0000)K�\u0003�\u0000f\u0005��\u0000Z'���\u000f�c���R�(��O\u0006�w��_�����\u000f��\ni6�\u001d🀼\u0011�N�l��7�Z��i���\u001a\u001f��tm#J���V�n�coi\u0012\u001d�ªq@\u001fX�\u0000�%�\u0000e?\u0015��\u0000\u0005&�����f�\u0011?�'���e���\u001c�\u0010j�[���_�#�\u000f�'�\u001e\u001e\r�\u0000�l������\u0000ĳ�y�\u0000�@\u001f���\u0000\f}�\u0000\u0004\u0010�\u0000�c�\u0000�F�\u0000����\u0000���\u000f��\u0006I�\u0000\u0004���4�\u0000\u0010i_�\\�\u0000���������P�N��F��\u0017«\u000f\u0012���m��k��\u0006�B��.��{��,�u\b�&���x�tI]X\u0003��\u0000�?f\u001f�8���w�\u001f�C@\u001f���\u0007�\u0013��\t��\u0013�Z���6h_���m㯊�:�\u0003��\u0000➏�kI���\u000bx���1����~-�n��\u0017L�՟�o|C�\u000f\u0018x��w����Ŗ��޳�kWq�\u0010_�_\\-À�G��\u0000���\u001dh�\u0000\u0014>\u0007�\u0003���9�/���P�\u001f\u0010�\u0016xO�'��\u0000\u001b�kZ]扬E�x�~�����6���Ig\n�i��v7\"[[��p\u000f�?���\u0000�s��W/�<?�'�\u00004\u0014\u0001�����\u0013�\u0019�Q���\u0015�u�\u0000\u0005����\u000f���iO\u0013xO���\u0000�\u001aO��)|pҾ\u0006Z|/�K�h>\u001b�n��R������M�����ڞ���Q�J\u001f\u0017j�4���u��rI@?�O�,W쥯C�\u0000\u00056��\"��?f�e?g���G���\u0003����\u0014��s�\u0011�\u000f�x\u0003�\u0015燿�\n����7��/����_��͠\u000f�S�\u0002�\n\u0000�M����D�����>\u000f���@\u001f�7�\u001a��\u0000\u0005@�����o��\u0007����ି\u0018/�f�~\u001c�π>*���\u0012H�\u0007\u0007ǔ�c!�g�_\u0019�����1��a�\u001d8�i)��ص�6�\u001f���D��\u0000\u00043�\u0000����\u0000��~�?��h\u0000�\u0000������}z_�\u0018/ڧ�\u0000�m\u0000/�D��\u0000\u00043�\u0000��ҿ����\u001f��\u0003���\u0000����?�N_�(O�7�K�\u0017�{�HY|c���?ڿ��\u0011�A��o�\u0019�\u0016�w���\u001f\u0019�3y��K�?ß\u0007��+\u000e��\u0006����7\u001a��@\\Gd���sۀ~������\u0000ڇ��C\\�\u0000�\u001d�Z�? �\u0000��\u0000�A��+\u000f�y�\u0000\u0005W���h����J�>#|\u0019����2��O�!���?xj-r�@�!���Z���x�⿇|Ka�?\u0010�\u001a��WTѬ�f�76�5���\u0013\u0000����\u000fk\u001e\u0011�)�{\"�:w�<1������=���6\u001aƋ�=#M���͜�\u0016w\u0006���x\f��\u0013�JŜibev\u0000�r�\u0000���C����>\u0005�\u0000��^�\u000f�\u000f�����\b��\u0000\u0005)���\u0015j\u001f\u001b�d_٢���\u0000��+ƚ����\u0000\u0014��Q�%�ķ񎅥hZ֫�\u001d'�'į\b�5���m\u000e��åɦ�/�V���ou\u0014\u0000\u001f�a�\u0005|\u0012���o�\tq�+��_\u0012|-'��0�;��~\u001a|+�_VеI4o\u001e�?\t��\r��\u0003kZ&��xn��5�%�:���^i3\u0014����+1\u0000�\u0000)_�\u001b�\b\u001f�\u0000\u0005k���\fx������\"�?\u000f�\u000f|2�-u�\u001c��o�_�߈�д��[O��n_E��ŭ�w�]WU��\u0011iZ=��n\u0004�\u001a�\u001c��\u0001��\u0000�\u001a��u�ʟ�O���\u0000��Ə�\u0003�ſ�߆~$��~ |2�|Oq�\u000f\u001f��/�q�|d�\u0005�3B\u001aWß\nx�\\��\u001f\u0006x��_�i�iQ\r1�羊���\u000b�\u000f�;�\"u�\u0000�\u0019�\u0000���_�`�j��q�\u0001�n?�^��s�o��\u0000\u0005e���\u0000i\u001fٷ�Q|K�+�\u001d�\u0007�\u0005��\r\u0003�^\u0017�[\u001e\u0011���\u000f�\u0013�;t/\u001a�~\u001b�=��w��1��'�OE��KX\u001b�?�i�\u0016�s�|M�\u000b|D�o�\u000f�s�9���\u0017Y_\u000e|>�_�T~�\u0011<w�\u0017�Ե4�|\u001b���~\u0011�/����tk=GX�\u0017K�4���Ҵ��J�@`�����(\u001c\u0003�Y�\u0000�'_�!��\u001f^��\u0000�\u000f���\u0000�\u001d@\u001ft~Ŀ�T��;�\n3�|Dҿc/�v�\u001ao�\u0013��gP��\u0005��ߋ\u001e\b�\u0000�z��3�v�\u001b�����?\u0006C��\u0000iM��i\u00154�5\t-~�Z�-�{f�\u0003�8�\u0000������\u0000�Q�\u0000�(?����7�}�6^�c�k���\u0000�_\fu�\u0013[|M�-ര�΍���\u0000��-\b�\u0011�#�?[�{m\u0003�~\u0019�\r���>�(���\u000b�.�o��?�+\u001f�6[�\u000b������~�\u001a�6�7V��S\u001f�_���V�Ҥ�ɲ?�\u000f#�\u0019����0�X�@?���+_�\u001c\u000b�\u0000\u0004���?��߶w�o��\u0016���\u001f\u0014�\u0006���>\u0002�_\u0006h�\nM�Z��~ǧ&���Z'�����|\\�ڵ��c��\t��\u000f�\u0002�\u0002�?Z�e��!w�\u0015S���#��\u0000�;�h��u\u000f��\u0005�}/���`���\u000f��j��K�\u001aς�B����⧆�Mg���o\u000fk\u001ac\u001dGE�[��7Vf��kk��?�+�\f�\u0000���3�g\u001f�?���\u0013��G�9e��/�7�_���+���b_��\u001c5˟\t~�\u000b�\u001d��\u0000��;�a'��3��Z�k�O��T��_\n?��?�-[�ڄ��W�|M�Mo��\u0001�\"P\u0007�߶��\u0014_�3�\u0000�vxo��/��~4[|\u0018��čsS�߂�+�\u0004|J��z֍a\u000e��Y-��o\u0006�����X�\u0014�}N���P�\\\u0013K*�\u0000\u000f�4�\u0000��o/�;�\n\u0013�u�\u0015���\u001e�Z������_�~\u001bk�$���\u001f\u0005���]3�\u000f��\u0013�h�L���?\u0007�7/\u0006���\u000fߛ�=:�L�j+o\u0015��[^An\u0001�E�\u0000�\u001c��_�H��w�\t��\u001c�\u0001���^��\u0003����X���!/���\u001f�\u0012h:��$� ��\u0013�>\u0014�G��{P?d�����u{�lK���\u0012DP\u000f�f�\n\u0000(\u0003�3�\u000b��\u0000\u0004����\u0000\u0005X���=�3|\n��\u001f\u0002x�H���O��\u001a�ŝC�Zg��м-�O�z\r��7\u001e\u000f��S�Ou��>[H�IK6���i�a�`�p\u000f�[� ��\u0000���\u0000�����\u0000�W�y�\u0000�\u0001@\u0007�AC�\u0000\u0005%�\u0000�����\u0000����\u0000�\u0002�\u000f����\nK�\u0000G+�\u000f�\u0000�_���\u0000�\u0005\u0000\u001f�\u0005\u000f�\u0014���W�\u001f�\u0000¿���\u00008\n\u0000?�\n\u001f�)/�\u001c��?�\u0000�ǟ�p\u0014\u0001�v�\u0000����J����I\u001f�g�\u0017�Ϗ�;�M��\u0000\u0013�D��\u0000��X�5O�\u001a��5M\u0006�A��u��\u0000���jSx���\t�#��P����k�]Y�;�G[֝��\u0010\u000f��\u0000(\u0003���\u000b��\u0000\u0004����\u0000\u0005A��u��_����\u001cx#�:��?�\u001e9�]���m;�i��:�R�Q����^\u0017�~�/�\u0016�1d��5����s\u0000\nX\u0003���\u0000�(ि�r���\u0000�\u0015�\u0000\u001e��P\u0007�E�\u0000\u0004\t�\u0000�f|h�\u0000�Q���*��~;x���<g���~9��k�|%�|W��b-\u0003�\u001e\u000b�i�->���>\u0012�f���\u0017�\u000bԦ��=&K%���hof���\u0003��?>?�߲O��n��'��3�%|.��!�o\u001e�j�~���\r��>�֬�!���8��\\�����=f\u001bg�Ю���4MBSu,\n�$M$р\u0005_�\u0005\u000f�\u0014���W�\u001f�\u0000¿���\u00008\n\u0000?�\n\u001f�)/�\u001c��?�\u0000�ǟ�p\u0014\u0000�\u0014?�R_�9_��\u0000\n�\u0000�?��(\u0000�\u0000�(ि�r���\u0000�\u0015�\u0000\u001e��P\u0001�\u0000\u0010P�\u0000�I��a�\u0000�+�<�\u0000�\u000f�?�\r��\u0000�\u001d~�_�G�\u0014~����\u0007�;�O�+o�\u001a\u0007��+��|\u001b�<�ϥO��Q��y�ɯ���\u001ex\u001a8a���\u001az��N�Qy\u001e��]%��\r8\u0007�\u001b@\u00155\u000bw�������͝ͺ3�b�мj[h'h,\u000b`\u0013��\u0013�\u0000�w�AC�\u0000\u0005%�\u0000�����\u0000����\u0000�\u0002�\u000f����\nK�\u0000G+�\u000f�\u0000�_���\u0000�\u0005\u0000\u001f�\u0005\u000f�\u0014���W�\u001f�\u0000¿���\u00008\n\u0000��?��߰����''�\u0013��/�{���\u0005��/�W�\u0016�u�\u0010�5��\u0005�\u0000�/���\u0019� |GҗI��G��+��֚?�l,�\u000f�hVA5+{��ͪ�w8\u0007���\u000b�\rW���]�\u0000\u0005X����a���N��]��(G�k{/\u000b^x��\u0002��\u000f\u0000�_�}��;m\u0002��\u001f�s�u|a\u0017�nSN��/\u0011͢�iZ(��,q~@?�J\u0000�v?��\u000f�$\u000f�\u0005�\u0000\u0005y�G�8�?���!|\u001c�}�|\u001c���\u001f\u0018����\u0016��m/N�t�\u0011xf�D���_�^\u0007�̷��ڼ�)}ma\u0002��b�Y\t�\u0000)_�\u0005\u000f�\u0014���W�\u001f�\u0000¿���\u00008\n\u0000?�\n\u001f�)/�\u001c��?�\u0000�ǟ�p\u0014\u0001���\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0001@\u0005\u0000\u0014\u0000P\u0001@\u0005\u0000��"}],"Page":[{"title":"about","date":"2024-07-22T06:29:48.000Z","layout":"page","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-07-22 14:29:48\nlayout: #about\n---\n","updated":"2024-07-22T06:32:43.257Z","path":"about/index.html","comments":1,"_id":"cm7ll5df30000mcuy3a5sa83t","content":"","length":0,"excerpt":"","more":""},{"title":"categories","date":"2024-07-22T06:29:46.000Z","layout":"page","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-07-22 14:29:46\nlayout: # categories\ntype: \"categories\"\n---\n","updated":"2024-12-27T14:35:31.717Z","path":"categories/index.html","comments":1,"_id":"cm7ll5df60002mcuy9e091adt","content":"","length":0,"excerpt":"","more":""},{"title":"tags","date":"2024-07-22T06:29:47.000Z","layout":"page","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-07-22 14:29:47\nlayout: #tags\ntype: \"tags\"\n---\n","updated":"2024-12-27T14:35:49.148Z","path":"tags/index.html","comments":1,"_id":"cm7ll5df70005mcuy9i2l9efk","content":"","length":0,"excerpt":"","more":""}],"Post":[{"title":"Ant-design-vue中icon的使用","date":"2024-09-17T12:22:45.000Z","_content":"\n# Ant Design Vue中使用icon图标\n\n[Ant-Design-Vue的icon官网](https://www.antdv.com/components/icon-cn/#-Icon)\n\n使用前首先要安装组件包：\n\n``` shell\n\nnpm install --save @ant-design/icons-vue\n```\n\n点击对应的图标，会自动将图标名称进行复制<SnippetsOutlined />\n\n例如关闭：\n``` html\n<CloseOutlined />\n```\n\n<div align=\"center\">\n    <img src=\"Ant-design-vue中icon的使用/01.jpg\">\n</div>\n\n\n但不能直接使用！！！需要将所有大写字母改为小写，删除掉Oulined、TwoTone、Filled，并且中间-拼接snippets\n\n调整为 <a-icon type=\"snippets\" /> 就可以使用啦。\n\n或者另一种可以直接使用的复制格式：\n[Ant-design-vue的icon图标](https://1x.antdv.com/components/icon/#components-icon-demo-basic)\n亲测有效！\n复制格式：\n\n``` html\n<a-icon type=\"close\" />\n```\n\n<div align=\"center\">\n    <img src=\"Ant-design-vue中icon的使用/02.jpg\">\n</div>\n\n进阶官方文档参考写法：\n\n``` javascript\n\n<template>\n  <snippets-outlined :style=\"{font-size:'14px', color:'#666'}\" />\n</template>\n<script>\n  import { SnippetsOutlined } from '@ant-design/icons-vue';\n  import { defineComponent } from 'vue';\n  export default defineComponent({\n    components: {\n      SnippetsOutlined,\n    },\n  });\n</script>\n```\n\n或者我的写法：\n\n<div align=\"center\">\n    <img src=\"Ant-design-vue中icon的使用/03.jpg\">\n</div>\n\n<br>\n\n<div align=\"center\">\n    <img src=\"Ant-design-vue中icon的使用/04.jpg\">\n</div>\n\n\n\n","source":"_posts/Ant-design-vue中icon的使用.md","raw":"---\ntitle: Ant-design-vue中icon的使用\ndate: 2024-09-17 20:22:45\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n# Ant Design Vue中使用icon图标\n\n[Ant-Design-Vue的icon官网](https://www.antdv.com/components/icon-cn/#-Icon)\n\n使用前首先要安装组件包：\n\n``` shell\n\nnpm install --save @ant-design/icons-vue\n```\n\n点击对应的图标，会自动将图标名称进行复制<SnippetsOutlined />\n\n例如关闭：\n``` html\n<CloseOutlined />\n```\n\n<div align=\"center\">\n    <img src=\"Ant-design-vue中icon的使用/01.jpg\">\n</div>\n\n\n但不能直接使用！！！需要将所有大写字母改为小写，删除掉Oulined、TwoTone、Filled，并且中间-拼接snippets\n\n调整为 <a-icon type=\"snippets\" /> 就可以使用啦。\n\n或者另一种可以直接使用的复制格式：\n[Ant-design-vue的icon图标](https://1x.antdv.com/components/icon/#components-icon-demo-basic)\n亲测有效！\n复制格式：\n\n``` html\n<a-icon type=\"close\" />\n```\n\n<div align=\"center\">\n    <img src=\"Ant-design-vue中icon的使用/02.jpg\">\n</div>\n\n进阶官方文档参考写法：\n\n``` javascript\n\n<template>\n  <snippets-outlined :style=\"{font-size:'14px', color:'#666'}\" />\n</template>\n<script>\n  import { SnippetsOutlined } from '@ant-design/icons-vue';\n  import { defineComponent } from 'vue';\n  export default defineComponent({\n    components: {\n      SnippetsOutlined,\n    },\n  });\n</script>\n```\n\n或者我的写法：\n\n<div align=\"center\">\n    <img src=\"Ant-design-vue中icon的使用/03.jpg\">\n</div>\n\n<br>\n\n<div align=\"center\">\n    <img src=\"Ant-design-vue中icon的使用/04.jpg\">\n</div>\n\n\n\n","slug":"Ant-design-vue中icon的使用","published":1,"updated":"2024-12-28T10:14:40.340Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5df40001mcuyc73i6q1s","content":"<h1 id=\"ant-design-vue中使用icon图标\"><a class=\"anchor\" href=\"#ant-design-vue中使用icon图标\">#</a> Ant Design Vue 中使用 icon 图标</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW50ZHYuY29tL2NvbXBvbmVudHMvaWNvbi1jbi8jLUljb24=\">Ant-Design-Vue 的 icon 官网</span></p>\n<p>使用前首先要安装组件包：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> @ant-design/icons-vue</pre></td></tr></table></figure><p>点击对应的图标，会自动将图标名称进行复制<SnippetsOutlined /></p>\n<p>例如关闭：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CloseOutlined</span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><div align=\"center\">\n    <style>.qtkwtlgifwbu{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/01.jpg\" class=\"qtkwtlgifwbu\">\n</div>\n<p>但不能直接使用！！！需要将所有大写字母改为小写，删除掉 Oulined、TwoTone、Filled，并且中间 - 拼接 snippets</p>\n<p>调整为 <a-icon type=\"snippets\" /> 就可以使用啦。</p>\n<p>或者另一种可以直接使用的复制格式：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly8xeC5hbnRkdi5jb20vY29tcG9uZW50cy9pY29uLyNjb21wb25lbnRzLWljb24tZGVtby1iYXNpYw==\">Ant-design-vue 的 icon 图标</span><br />\n亲测有效！<br />\n复制格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-icon</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><div align=\"center\">\n    <style>.mtxdfsexzizi{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/02.jpg\" class=\"mtxdfsexzizi\">\n</div>\n<p>进阶官方文档参考写法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>snippets<span class=\"token operator\">-</span>outlined <span class=\"token operator\">:</span>style<span class=\"token operator\">=</span><span class=\"token string\">\"&#123;font-size:'14px', color:'#666'&#125;\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> SnippetsOutlined <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ant-design/icons-vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      SnippetsOutlined<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>或者我的写法：</p>\n<div align=\"center\">\n    <style>.hrvctmzdrtby{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/03.jpg\" class=\"hrvctmzdrtby\">\n</div>\n<br>\n<div align=\"center\">\n    <style>.bjyxyutqfwyy{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/04.jpg\" class=\"bjyxyutqfwyy\">\n</div>\n","length":677,"excerpt":"","more":"<h1 id=\"ant-design-vue中使用icon图标\"><a class=\"anchor\" href=\"#ant-design-vue中使用icon图标\">#</a> Ant Design Vue 中使用 icon 图标</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYW50ZHYuY29tL2NvbXBvbmVudHMvaWNvbi1jbi8jLUljb24=\">Ant-Design-Vue 的 icon 官网</span></p>\n<p>使用前首先要安装组件包：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> @ant-design/icons-vue</pre></td></tr></table></figure><p>点击对应的图标，会自动将图标名称进行复制<SnippetsOutlined /></p>\n<p>例如关闭：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CloseOutlined</span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><div align=\"center\">\n    <style>.qtkwtlgifwbu{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/01.jpg\" class=\"qtkwtlgifwbu\">\n</div>\n<p>但不能直接使用！！！需要将所有大写字母改为小写，删除掉 Oulined、TwoTone、Filled，并且中间 - 拼接 snippets</p>\n<p>调整为 <a-icon type=\"snippets\" /> 就可以使用啦。</p>\n<p>或者另一种可以直接使用的复制格式：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly8xeC5hbnRkdi5jb20vY29tcG9uZW50cy9pY29uLyNjb21wb25lbnRzLWljb24tZGVtby1iYXNpYw==\">Ant-design-vue 的 icon 图标</span><br />\n亲测有效！<br />\n复制格式：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-icon</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>close<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><div align=\"center\">\n    <style>.mtxdfsexzizi{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/02.jpg\" class=\"mtxdfsexzizi\">\n</div>\n<p>进阶官方文档参考写法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>snippets<span class=\"token operator\">-</span>outlined <span class=\"token operator\">:</span>style<span class=\"token operator\">=</span><span class=\"token string\">\"&#123;font-size:'14px', color:'#666'&#125;\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> SnippetsOutlined <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ant-design/icons-vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineComponent <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">components</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      SnippetsOutlined<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>或者我的写法：</p>\n<div align=\"center\">\n    <style>.hrvctmzdrtby{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/03.jpg\" class=\"hrvctmzdrtby\">\n</div>\n<br>\n<div align=\"center\">\n    <style>.bjyxyutqfwyy{}</style><img data-src=\"/2024/09/17/Ant-design-vue%E4%B8%ADicon%E7%9A%84%E4%BD%BF%E7%94%A8/04.jpg\" class=\"bjyxyutqfwyy\">\n</div>\n"},{"title":"FMRI2TXT:非侵入性语言脑机接口","date":"2025-01-20T03:43:47.000Z","_content":"\n### 文章阅读记录-FMRI2TXT:非侵入性语言脑机接口\n\n一篇在研一初期阅读到的文章，发表在《自然神经科学》杂志，它以一种“神奇的AI读心术”的形式，给我与朋友留下了深刻的印象。研二寒假闲暇，将它简单整理下来作以记录。\n\n德克萨斯大学奥斯汀分校的研究者开发了一种基于GPT的语言解码器，它能通过非侵入性的MRI/fMRI收集大脑活动信息，并将思维转化为语言文字，准确率高达82%。这项技术有望为失去语言能力或无法外部沟通的人提供一种新的交流方式，同时也为认知神经科学和人工智能领域带来了新的突破。\n\n<div align=\"center\">\n    <img src=\"FMRI2TXT-非侵入性语言脑机接口/01.jpg\">\n</div>\n\n#### 背景补充：\n\n大脑解码技术可以通过不同的方法来实现。这其中主要分为三类：侵入式脑机接口，非侵入式脑机接口，以及用于研究神经元活动的大脑解码技术。\n\n侵入式脑机接口是一种通过直接植入电极到大脑皮层来记录神经元活动的技术。它被广泛用于动物实验，可以帮助科学家们深入研究大脑的内部机制。\n\n与侵入式脑机接口技术不同，非侵入式脑机接口技术不需要在大脑中植入电极，因此对于临床和人类研究而言更为安全。fMRI (功能性磁共振成像) 是一种常用的非侵入式脑机接口技术，它通过测量大脑中的血液流量变化来了解神经活动。EEG (脑电图) 和 MEG (脑磁图) 也是常用的非侵入式脑机接口技术，它们可以记录脑电活动和磁场活动。fNIRS (近红外光谱成像) 利用可见光外的红外光谱来研究脑血流量的变化。相比于侵入式脑机接口而言，这些非侵入式技术具有相对较低的信噪比，无法记录神经元活动的细节，但这仍然是理解大脑活动的有力工具。\n\nfMRI是一种可以捕捉大脑在行为过程中血氧水平变化的技术，它可以反映出大脑不同区域的神经活动。通过fMRI，我们可以观察到大脑在听、说、想或看语言时所激活的区域和模式。\n\n然而，fMRI也有一个很大的缺点，就是它的时间分辨率很低，也就是说它不能捕捉到快速变化的神经信号。对于自然语言（每秒超过两个词），这意味着每张fMRI图像可能受到20多个词的影响。因此，要从fMRI图像中还原出连续的语言，就需要解决一个不适定问题，即未知数比方程数多得多。\n\n为了克服这个难题，德克萨斯大学奥斯汀分校的研究者利用了一个先进的AI语言模型——GPT-1。GPT是由OpenAI实验室开发的一个基于深度学习的文本生成系统，它可以根据给定的上下文生成连贯和流畅的自然语言。研究者将GPT与fMRI图像进行了训练和匹配，从而构建了一个语言解码器。\n\n\n#### 实验设计：\n\n<div align=\"center\">\n    <img src=\"FMRI2TXT-非侵入性语言脑机接口/02.jpg\">\n</div>\n\n首先，在实验前期，研究者让参与者在fMRI扫描仪中听或想一些故事，并记录下他们的大脑活动；\n\n然后，在实验后期，研究者给出一些新的故事，并让参与者再次听或想，并记录下他们的大脑活动；\n\n接着，研究者将这些新的大脑活动输入到语言解码器中，并让GPT生成多个可能与之对应的词序列；\n\n最后，研究者通过比较GPT预测出来的大脑活动与实际记录下来的大脑活动之间的相似度，来选择最佳匹配的词序列作为输出。\n\n研究者发现，这个语言解码器可以在不同任务和条件下都表现出较高的准确率和可靠性。\n\n无论是听到、想象还是观看故事，语言解码器都可以生成与原始故事含义相近甚至相同的词序列。\n\n例如，在听故事任务中，原始故事是“她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小木盒子里”，而语言解码器输出是“她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小盒子里”。\n\n可以看出，输出与原始故事几乎完全相同，只有一个词（木）被省略了。\n\n在想象故事任务中，原始故事是“我今天早上起床后去洗澡然后吃早饭然后去上班”，而语言解码器输出是“我今天早上起床后去洗澡然后吃早饭然后去工作”。\n\n可以看出，输出与原始故事含义完全相同，只有一个词（工作）被替换了。\n\n在观看故事任务中，原始故事是一个视频片段，内容是一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始交谈并走向公园里面 ，而语言解码器输出是“一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始聊天并走向公园”。\n\n可以看出，输出与原始故事含义非常接近。\n\n研究者还发现，在所有任务中，听故事任务表现最好（平均准确率82%），想象故事任务次之（平均准确率75%），观看故事任务最差（平均准确率63%）。\n\n这可能是因为听故事任务中输入和输出都是自然语言形式，而观看故事任务中输入和输出之间存在跨媒体转换。\n\n此外，在所有条件中， 主动合作条件表现最好（平均准确率79%），被动合作条件次之（平均准确率72%），主动反抗条件最差（平均准确率54%）。\n\n这可能是因为主动合作条件中，参与者主动配合语言解码器的工作，而被动合作条件中，参与者只是被动地接受语言刺激，而主动反抗条件中，参与者故意分散注意力或想象与刺激无关的内容。这表明，语言解码器的效果受到参与者意愿和态度的影响。\n\n这项研究是首次利用非侵入性的fMRI和基于GPT的AI语言模型来实现连续语言的解码，它为认知神经科学和人工智能领域带来了新的突破。\n\n","source":"_posts/FMRI2TXT-非侵入性语言脑机接口.md","raw":"---\ntitle: FMRI2TXT:非侵入性语言脑机接口\ndate: 2025-01-20 11:43:47\ncategories:\n- [深度学习]\ntags:\n- [脑科学]\n---\n\n### 文章阅读记录-FMRI2TXT:非侵入性语言脑机接口\n\n一篇在研一初期阅读到的文章，发表在《自然神经科学》杂志，它以一种“神奇的AI读心术”的形式，给我与朋友留下了深刻的印象。研二寒假闲暇，将它简单整理下来作以记录。\n\n德克萨斯大学奥斯汀分校的研究者开发了一种基于GPT的语言解码器，它能通过非侵入性的MRI/fMRI收集大脑活动信息，并将思维转化为语言文字，准确率高达82%。这项技术有望为失去语言能力或无法外部沟通的人提供一种新的交流方式，同时也为认知神经科学和人工智能领域带来了新的突破。\n\n<div align=\"center\">\n    <img src=\"FMRI2TXT-非侵入性语言脑机接口/01.jpg\">\n</div>\n\n#### 背景补充：\n\n大脑解码技术可以通过不同的方法来实现。这其中主要分为三类：侵入式脑机接口，非侵入式脑机接口，以及用于研究神经元活动的大脑解码技术。\n\n侵入式脑机接口是一种通过直接植入电极到大脑皮层来记录神经元活动的技术。它被广泛用于动物实验，可以帮助科学家们深入研究大脑的内部机制。\n\n与侵入式脑机接口技术不同，非侵入式脑机接口技术不需要在大脑中植入电极，因此对于临床和人类研究而言更为安全。fMRI (功能性磁共振成像) 是一种常用的非侵入式脑机接口技术，它通过测量大脑中的血液流量变化来了解神经活动。EEG (脑电图) 和 MEG (脑磁图) 也是常用的非侵入式脑机接口技术，它们可以记录脑电活动和磁场活动。fNIRS (近红外光谱成像) 利用可见光外的红外光谱来研究脑血流量的变化。相比于侵入式脑机接口而言，这些非侵入式技术具有相对较低的信噪比，无法记录神经元活动的细节，但这仍然是理解大脑活动的有力工具。\n\nfMRI是一种可以捕捉大脑在行为过程中血氧水平变化的技术，它可以反映出大脑不同区域的神经活动。通过fMRI，我们可以观察到大脑在听、说、想或看语言时所激活的区域和模式。\n\n然而，fMRI也有一个很大的缺点，就是它的时间分辨率很低，也就是说它不能捕捉到快速变化的神经信号。对于自然语言（每秒超过两个词），这意味着每张fMRI图像可能受到20多个词的影响。因此，要从fMRI图像中还原出连续的语言，就需要解决一个不适定问题，即未知数比方程数多得多。\n\n为了克服这个难题，德克萨斯大学奥斯汀分校的研究者利用了一个先进的AI语言模型——GPT-1。GPT是由OpenAI实验室开发的一个基于深度学习的文本生成系统，它可以根据给定的上下文生成连贯和流畅的自然语言。研究者将GPT与fMRI图像进行了训练和匹配，从而构建了一个语言解码器。\n\n\n#### 实验设计：\n\n<div align=\"center\">\n    <img src=\"FMRI2TXT-非侵入性语言脑机接口/02.jpg\">\n</div>\n\n首先，在实验前期，研究者让参与者在fMRI扫描仪中听或想一些故事，并记录下他们的大脑活动；\n\n然后，在实验后期，研究者给出一些新的故事，并让参与者再次听或想，并记录下他们的大脑活动；\n\n接着，研究者将这些新的大脑活动输入到语言解码器中，并让GPT生成多个可能与之对应的词序列；\n\n最后，研究者通过比较GPT预测出来的大脑活动与实际记录下来的大脑活动之间的相似度，来选择最佳匹配的词序列作为输出。\n\n研究者发现，这个语言解码器可以在不同任务和条件下都表现出较高的准确率和可靠性。\n\n无论是听到、想象还是观看故事，语言解码器都可以生成与原始故事含义相近甚至相同的词序列。\n\n例如，在听故事任务中，原始故事是“她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小木盒子里”，而语言解码器输出是“她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小盒子里”。\n\n可以看出，输出与原始故事几乎完全相同，只有一个词（木）被省略了。\n\n在想象故事任务中，原始故事是“我今天早上起床后去洗澡然后吃早饭然后去上班”，而语言解码器输出是“我今天早上起床后去洗澡然后吃早饭然后去工作”。\n\n可以看出，输出与原始故事含义完全相同，只有一个词（工作）被替换了。\n\n在观看故事任务中，原始故事是一个视频片段，内容是一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始交谈并走向公园里面 ，而语言解码器输出是“一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始聊天并走向公园”。\n\n可以看出，输出与原始故事含义非常接近。\n\n研究者还发现，在所有任务中，听故事任务表现最好（平均准确率82%），想象故事任务次之（平均准确率75%），观看故事任务最差（平均准确率63%）。\n\n这可能是因为听故事任务中输入和输出都是自然语言形式，而观看故事任务中输入和输出之间存在跨媒体转换。\n\n此外，在所有条件中， 主动合作条件表现最好（平均准确率79%），被动合作条件次之（平均准确率72%），主动反抗条件最差（平均准确率54%）。\n\n这可能是因为主动合作条件中，参与者主动配合语言解码器的工作，而被动合作条件中，参与者只是被动地接受语言刺激，而主动反抗条件中，参与者故意分散注意力或想象与刺激无关的内容。这表明，语言解码器的效果受到参与者意愿和态度的影响。\n\n这项研究是首次利用非侵入性的fMRI和基于GPT的AI语言模型来实现连续语言的解码，它为认知神经科学和人工智能领域带来了新的突破。\n\n","slug":"FMRI2TXT-非侵入性语言脑机接口","published":1,"updated":"2025-01-20T13:33:21.782Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5df60003mcuy7up42l0u","content":"<h3 id=\"文章阅读记录-fmri2txt非侵入性语言脑机接口\"><a class=\"anchor\" href=\"#文章阅读记录-fmri2txt非侵入性语言脑机接口\">#</a> 文章阅读记录 - FMRI2TXT: 非侵入性语言脑机接口</h3>\n<p>一篇在研一初期阅读到的文章，发表在《自然神经科学》杂志，它以一种 “神奇的 AI 读心术” 的形式，给我与朋友留下了深刻的印象。研二寒假闲暇，将它简单整理下来作以记录。</p>\n<p>德克萨斯大学奥斯汀分校的研究者开发了一种基于 GPT 的语言解码器，它能通过非侵入性的 MRI/fMRI 收集大脑活动信息，并将思维转化为语言文字，准确率高达 82%。这项技术有望为失去语言能力或无法外部沟通的人提供一种新的交流方式，同时也为认知神经科学和人工智能领域带来了新的突破。</p>\n<div align=\"center\">\n    <style>.wlgtafpwqthn{}</style><img data-src=\"/2025/01/20/FMRI2TXT-%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%AD%E8%A8%80%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/01.jpg\" class=\"wlgtafpwqthn\">\n</div>\n<h4 id=\"背景补充\"><a class=\"anchor\" href=\"#背景补充\">#</a> 背景补充：</h4>\n<p>大脑解码技术可以通过不同的方法来实现。这其中主要分为三类：侵入式脑机接口，非侵入式脑机接口，以及用于研究神经元活动的大脑解码技术。</p>\n<p>侵入式脑机接口是一种通过直接植入电极到大脑皮层来记录神经元活动的技术。它被广泛用于动物实验，可以帮助科学家们深入研究大脑的内部机制。</p>\n<p>与侵入式脑机接口技术不同，非侵入式脑机接口技术不需要在大脑中植入电极，因此对于临床和人类研究而言更为安全。fMRI (功能性磁共振成像) 是一种常用的非侵入式脑机接口技术，它通过测量大脑中的血液流量变化来了解神经活动。EEG (脑电图) 和 MEG (脑磁图) 也是常用的非侵入式脑机接口技术，它们可以记录脑电活动和磁场活动。fNIRS (近红外光谱成像) 利用可见光外的红外光谱来研究脑血流量的变化。相比于侵入式脑机接口而言，这些非侵入式技术具有相对较低的信噪比，无法记录神经元活动的细节，但这仍然是理解大脑活动的有力工具。</p>\n<p>fMRI 是一种可以捕捉大脑在行为过程中血氧水平变化的技术，它可以反映出大脑不同区域的神经活动。通过 fMRI，我们可以观察到大脑在听、说、想或看语言时所激活的区域和模式。</p>\n<p>然而，fMRI 也有一个很大的缺点，就是它的时间分辨率很低，也就是说它不能捕捉到快速变化的神经信号。对于自然语言（每秒超过两个词），这意味着每张 fMRI 图像可能受到 20 多个词的影响。因此，要从 fMRI 图像中还原出连续的语言，就需要解决一个不适定问题，即未知数比方程数多得多。</p>\n<p>为了克服这个难题，德克萨斯大学奥斯汀分校的研究者利用了一个先进的 AI 语言模型 ——GPT-1。GPT 是由 OpenAI 实验室开发的一个基于深度学习的文本生成系统，它可以根据给定的上下文生成连贯和流畅的自然语言。研究者将 GPT 与 fMRI 图像进行了训练和匹配，从而构建了一个语言解码器。</p>\n<h4 id=\"实验设计\"><a class=\"anchor\" href=\"#实验设计\">#</a> 实验设计：</h4>\n<div align=\"center\">\n    <style>.jtlgyekpkvck{}</style><img data-src=\"/2025/01/20/FMRI2TXT-%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%AD%E8%A8%80%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/02.jpg\" class=\"jtlgyekpkvck\">\n</div>\n<p>首先，在实验前期，研究者让参与者在 fMRI 扫描仪中听或想一些故事，并记录下他们的大脑活动；</p>\n<p>然后，在实验后期，研究者给出一些新的故事，并让参与者再次听或想，并记录下他们的大脑活动；</p>\n<p>接着，研究者将这些新的大脑活动输入到语言解码器中，并让 GPT 生成多个可能与之对应的词序列；</p>\n<p>最后，研究者通过比较 GPT 预测出来的大脑活动与实际记录下来的大脑活动之间的相似度，来选择最佳匹配的词序列作为输出。</p>\n<p>研究者发现，这个语言解码器可以在不同任务和条件下都表现出较高的准确率和可靠性。</p>\n<p>无论是听到、想象还是观看故事，语言解码器都可以生成与原始故事含义相近甚至相同的词序列。</p>\n<p>例如，在听故事任务中，原始故事是 “她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小木盒子里”，而语言解码器输出是 “她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小盒子里”。</p>\n<p>可以看出，输出与原始故事几乎完全相同，只有一个词（木）被省略了。</p>\n<p>在想象故事任务中，原始故事是 “我今天早上起床后去洗澡然后吃早饭然后去上班”，而语言解码器输出是 “我今天早上起床后去洗澡然后吃早饭然后去工作”。</p>\n<p>可以看出，输出与原始故事含义完全相同，只有一个词（工作）被替换了。</p>\n<p>在观看故事任务中，原始故事是一个视频片段，内容是一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始交谈并走向公园里面 ，而语言解码器输出是 “一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始聊天并走向公园”。</p>\n<p>可以看出，输出与原始故事含义非常接近。</p>\n<p>研究者还发现，在所有任务中，听故事任务表现最好（平均准确率 82%），想象故事任务次之（平均准确率 75%），观看故事任务最差（平均准确率 63%）。</p>\n<p>这可能是因为听故事任务中输入和输出都是自然语言形式，而观看故事任务中输入和输出之间存在跨媒体转换。</p>\n<p>此外，在所有条件中， 主动合作条件表现最好（平均准确率 79%），被动合作条件次之（平均准确率 72%），主动反抗条件最差（平均准确率 54%）。</p>\n<p>这可能是因为主动合作条件中，参与者主动配合语言解码器的工作，而被动合作条件中，参与者只是被动地接受语言刺激，而主动反抗条件中，参与者故意分散注意力或想象与刺激无关的内容。这表明，语言解码器的效果受到参与者意愿和态度的影响。</p>\n<p>这项研究是首次利用非侵入性的 fMRI 和基于 GPT 的 AI 语言模型来实现连续语言的解码，它为认知神经科学和人工智能领域带来了新的突破。</p>\n","length":2075,"excerpt":"","more":"<h3 id=\"文章阅读记录-fmri2txt非侵入性语言脑机接口\"><a class=\"anchor\" href=\"#文章阅读记录-fmri2txt非侵入性语言脑机接口\">#</a> 文章阅读记录 - FMRI2TXT: 非侵入性语言脑机接口</h3>\n<p>一篇在研一初期阅读到的文章，发表在《自然神经科学》杂志，它以一种 “神奇的 AI 读心术” 的形式，给我与朋友留下了深刻的印象。研二寒假闲暇，将它简单整理下来作以记录。</p>\n<p>德克萨斯大学奥斯汀分校的研究者开发了一种基于 GPT 的语言解码器，它能通过非侵入性的 MRI/fMRI 收集大脑活动信息，并将思维转化为语言文字，准确率高达 82%。这项技术有望为失去语言能力或无法外部沟通的人提供一种新的交流方式，同时也为认知神经科学和人工智能领域带来了新的突破。</p>\n<div align=\"center\">\n    <style>.wlgtafpwqthn{}</style><img data-src=\"/2025/01/20/FMRI2TXT-%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%AD%E8%A8%80%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/01.jpg\" class=\"wlgtafpwqthn\">\n</div>\n<h4 id=\"背景补充\"><a class=\"anchor\" href=\"#背景补充\">#</a> 背景补充：</h4>\n<p>大脑解码技术可以通过不同的方法来实现。这其中主要分为三类：侵入式脑机接口，非侵入式脑机接口，以及用于研究神经元活动的大脑解码技术。</p>\n<p>侵入式脑机接口是一种通过直接植入电极到大脑皮层来记录神经元活动的技术。它被广泛用于动物实验，可以帮助科学家们深入研究大脑的内部机制。</p>\n<p>与侵入式脑机接口技术不同，非侵入式脑机接口技术不需要在大脑中植入电极，因此对于临床和人类研究而言更为安全。fMRI (功能性磁共振成像) 是一种常用的非侵入式脑机接口技术，它通过测量大脑中的血液流量变化来了解神经活动。EEG (脑电图) 和 MEG (脑磁图) 也是常用的非侵入式脑机接口技术，它们可以记录脑电活动和磁场活动。fNIRS (近红外光谱成像) 利用可见光外的红外光谱来研究脑血流量的变化。相比于侵入式脑机接口而言，这些非侵入式技术具有相对较低的信噪比，无法记录神经元活动的细节，但这仍然是理解大脑活动的有力工具。</p>\n<p>fMRI 是一种可以捕捉大脑在行为过程中血氧水平变化的技术，它可以反映出大脑不同区域的神经活动。通过 fMRI，我们可以观察到大脑在听、说、想或看语言时所激活的区域和模式。</p>\n<p>然而，fMRI 也有一个很大的缺点，就是它的时间分辨率很低，也就是说它不能捕捉到快速变化的神经信号。对于自然语言（每秒超过两个词），这意味着每张 fMRI 图像可能受到 20 多个词的影响。因此，要从 fMRI 图像中还原出连续的语言，就需要解决一个不适定问题，即未知数比方程数多得多。</p>\n<p>为了克服这个难题，德克萨斯大学奥斯汀分校的研究者利用了一个先进的 AI 语言模型 ——GPT-1。GPT 是由 OpenAI 实验室开发的一个基于深度学习的文本生成系统，它可以根据给定的上下文生成连贯和流畅的自然语言。研究者将 GPT 与 fMRI 图像进行了训练和匹配，从而构建了一个语言解码器。</p>\n<h4 id=\"实验设计\"><a class=\"anchor\" href=\"#实验设计\">#</a> 实验设计：</h4>\n<div align=\"center\">\n    <style>.jtlgyekpkvck{}</style><img data-src=\"/2025/01/20/FMRI2TXT-%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%AD%E8%A8%80%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/02.jpg\" class=\"jtlgyekpkvck\">\n</div>\n<p>首先，在实验前期，研究者让参与者在 fMRI 扫描仪中听或想一些故事，并记录下他们的大脑活动；</p>\n<p>然后，在实验后期，研究者给出一些新的故事，并让参与者再次听或想，并记录下他们的大脑活动；</p>\n<p>接着，研究者将这些新的大脑活动输入到语言解码器中，并让 GPT 生成多个可能与之对应的词序列；</p>\n<p>最后，研究者通过比较 GPT 预测出来的大脑活动与实际记录下来的大脑活动之间的相似度，来选择最佳匹配的词序列作为输出。</p>\n<p>研究者发现，这个语言解码器可以在不同任务和条件下都表现出较高的准确率和可靠性。</p>\n<p>无论是听到、想象还是观看故事，语言解码器都可以生成与原始故事含义相近甚至相同的词序列。</p>\n<p>例如，在听故事任务中，原始故事是 “她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小木盒子里”，而语言解码器输出是 “她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小盒子里”。</p>\n<p>可以看出，输出与原始故事几乎完全相同，只有一个词（木）被省略了。</p>\n<p>在想象故事任务中，原始故事是 “我今天早上起床后去洗澡然后吃早饭然后去上班”，而语言解码器输出是 “我今天早上起床后去洗澡然后吃早饭然后去工作”。</p>\n<p>可以看出，输出与原始故事含义完全相同，只有一个词（工作）被替换了。</p>\n<p>在观看故事任务中，原始故事是一个视频片段，内容是一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始交谈并走向公园里面 ，而语言解码器输出是 “一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始聊天并走向公园”。</p>\n<p>可以看出，输出与原始故事含义非常接近。</p>\n<p>研究者还发现，在所有任务中，听故事任务表现最好（平均准确率 82%），想象故事任务次之（平均准确率 75%），观看故事任务最差（平均准确率 63%）。</p>\n<p>这可能是因为听故事任务中输入和输出都是自然语言形式，而观看故事任务中输入和输出之间存在跨媒体转换。</p>\n<p>此外，在所有条件中， 主动合作条件表现最好（平均准确率 79%），被动合作条件次之（平均准确率 72%），主动反抗条件最差（平均准确率 54%）。</p>\n<p>这可能是因为主动合作条件中，参与者主动配合语言解码器的工作，而被动合作条件中，参与者只是被动地接受语言刺激，而主动反抗条件中，参与者故意分散注意力或想象与刺激无关的内容。这表明，语言解码器的效果受到参与者意愿和态度的影响。</p>\n<p>这项研究是首次利用非侵入性的 fMRI 和基于 GPT 的 AI 语言模型来实现连续语言的解码，它为认知神经科学和人工智能领域带来了新的突破。</p>\n"},{"title":"HTTP协议相关知识","date":"2024-08-12T15:15:03.000Z","_content":"\n## 超文本传输协议HTTP\n\n 超文本 HyperText\n HTTP虽然叫传输协议，但它实际上工作在TCP/IP协议的应用层，底层的数据传输由TCP或UDP负责。\n\n HTTP协议发展至今已有多个版本，最常用的是HTTP/1.1,HTTP/2和HTTP/3。\n\n - 目前HTTP/1.1依然被广泛使用。\n\n - HTTP/2引入了多路复用、二进制帧层、头部压缩等特性，提升了不少传输性能。\n\n - HTTP/3基于QUIC协议使用UDP作为传输层，进一步降低了连接延迟和提升了传输性能。\n\n 值得注意的是，HTTPS是HTTP的加密安全版本，它在原始HTTP协议的基础上，加盖了一层SSL/TLS来实现加密传输\n\n HTTPSecure\n\n 除了HTTP/3，TLS在其他版本中并不是强制要求的。\n\n 可以看到，每一代协议升级，都是围绕性能和安全性展开的。\n\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/GF18p4UoORwEdTJ.jpg\">\n</div>\n<br>\n\nHTTP协议大体上是一种问答形式，客户端发出请求，服务器处理请求，然后再给出响应。\n\n服务器会根据不同场景返回不同的响应码。\n\n2XX表示成功处理，3XX表示重定向，4开头表示客户端错误，5开头表示服务端错误\n\n在请求和响应报文中，除了请求方法和响应码外，最值得关注的就是请求头和响应头。\n比如：\n\n- 用于请求上下文的Host、Referer、User-Agent\n\n- 用于响应上下文的Allow、Server\n\n- 用于缓存的Cache-Control、Last-Modified/Last-Modified-Since和ETag/If-NoneMatch\n\n- 用于Cookie的Cookie和Set-Cookie\n\n- 用于安全的X-Frame-Options、Strict-Transport-Security(HSTS)、Content-Security-Policy(CSP)\n\n- 用于跨域控制(CORS)的Origin和Access-Control-*一套\n\n- 用于描述消息主体的Content-*一套\n\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/bmGuUHNspIXVW6O.jpg\">\n</div>\n<br>\n\n浏览器加载资源会使用HTTP协议，前端与服务端的异步请求通常也通过HTTP协议完成。\n\n最早我们会通过XMLHttpRequest(XHR)，在浏览器中发起一个异步请求，后来许多第三方库基于它做了功能扩展，比如jQuery、ajx、superagent和axios等，直到出现了新的Fetch标准。\n\n虽然API都长得一样，但Fetch标准在不同环境下有不同的实现，比如Node.js环境下的fetch是基于Undici实现的，而在边缘运行时（Edge Runtime）中，Fetch API也会依据平台有所不同，因此，在现代前端，应尽可能**使用Fetch API或其封装库来管理异步请求**。\n\n下面使用Fetch API和Node.js原生http模块，举例说明Content-Type是如何工作的，请求代码和报文是这样的：\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/eCY8fKtcdJFQLgU.jpg\">\n</div>\n<br>\n\n对应的服务端处理代码和响应报文是这样的：\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/GmO1EJIShQHC8lA.jpg\">\n</div>\n<br>\n\n\n需要注意的是，请求头和响应头中的Content-Type表示消息主体的数据类型，它可以是JSON、Form，也可以是其他任何MIME类型，不同的类型就要有不同的处理程序。\n\n在这个例子中，客户端发送了一段JSON类型的数据，服务端应通过JSON parse处理，然后响应了一段纯文本类型，客户端应通过text()方法处理它。\n\n这是一个易错点，前端使用第三方库时默认为JSON请求，而服务端默认以Form处理时，会百思不得其解为什么我处理不了你的请求，原因就是没有理解Content-Type的含义。\n\n在不同的场景和环境下，调试HTTP有不同的方法。\n- 最常见的当然是使用浏览器开发者工具，比如在Chrome DevTools的Network选项卡下，可以看到非常详细的HTTP请求和响应信息。\n- 有时候只想快速看看服务端的响应情况，则可以通过cURL等命令行工具完成。\n- 在针对API测试的场景下，可以通过Postman等自动化工具来批量测试。\n- 而要调试移动设备内的HTTPS，则需要安装信任证书以及通过网络代理工具来实现。\n- 对于远程或是生产环境，则更多是通过抓包和分析服务端日志来完成\n\nHTTP的功能很强大，它足够满足大多数应用场景。但在大型客户端应用中，为了更高效和安全的传输数据，同时兼容HTTP协议，会有一些变化。\n我们应该知道，不是所有的客户端环境都支持先进的HTTP/2或HTTP/3，原始HTTP协议在更复杂的高并发场景下，会不够高效和稳定。\n因此，大型技术基建通常会设计一层无线网关（Gateway），并对HTTP协议进行定制。\n\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/d1b2DgR5xVXIcyu.jpg\">\n</div>\n<br>\n\n增加登录验证、请求跟踪、监控、限流等功能。而前端代码通过远程调用（RPC）的方式，而非直接使用原始HTTP\n\n以bilibili客户端为例，前端发起一个grpc请求至gateway网关，同时发送了多个自定义请求头，比如x-bili-mid表示当前用户，x-bili-trace-id用于链路日志跟踪，x-bili-device-bin表示设备信息等等。\n\n在服务端的响应头中，Content-Type表示这是一个grpc响应，x-bili-trace-id用于日志跟踪等，可以看到，相比浏览器中的HTTP，在客户端中的HTTP会更复杂，定制化的HTTP协议能带来更强大的功能。","source":"_posts/HTTP协议相关知识.md","raw":"---\ntitle: HTTP协议相关知识\ndate: 2024-08-12 23:15:03\ncategories:\n- [计算机科学]\ntags:\n---\n\n## 超文本传输协议HTTP\n\n 超文本 HyperText\n HTTP虽然叫传输协议，但它实际上工作在TCP/IP协议的应用层，底层的数据传输由TCP或UDP负责。\n\n HTTP协议发展至今已有多个版本，最常用的是HTTP/1.1,HTTP/2和HTTP/3。\n\n - 目前HTTP/1.1依然被广泛使用。\n\n - HTTP/2引入了多路复用、二进制帧层、头部压缩等特性，提升了不少传输性能。\n\n - HTTP/3基于QUIC协议使用UDP作为传输层，进一步降低了连接延迟和提升了传输性能。\n\n 值得注意的是，HTTPS是HTTP的加密安全版本，它在原始HTTP协议的基础上，加盖了一层SSL/TLS来实现加密传输\n\n HTTPSecure\n\n 除了HTTP/3，TLS在其他版本中并不是强制要求的。\n\n 可以看到，每一代协议升级，都是围绕性能和安全性展开的。\n\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/GF18p4UoORwEdTJ.jpg\">\n</div>\n<br>\n\nHTTP协议大体上是一种问答形式，客户端发出请求，服务器处理请求，然后再给出响应。\n\n服务器会根据不同场景返回不同的响应码。\n\n2XX表示成功处理，3XX表示重定向，4开头表示客户端错误，5开头表示服务端错误\n\n在请求和响应报文中，除了请求方法和响应码外，最值得关注的就是请求头和响应头。\n比如：\n\n- 用于请求上下文的Host、Referer、User-Agent\n\n- 用于响应上下文的Allow、Server\n\n- 用于缓存的Cache-Control、Last-Modified/Last-Modified-Since和ETag/If-NoneMatch\n\n- 用于Cookie的Cookie和Set-Cookie\n\n- 用于安全的X-Frame-Options、Strict-Transport-Security(HSTS)、Content-Security-Policy(CSP)\n\n- 用于跨域控制(CORS)的Origin和Access-Control-*一套\n\n- 用于描述消息主体的Content-*一套\n\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/bmGuUHNspIXVW6O.jpg\">\n</div>\n<br>\n\n浏览器加载资源会使用HTTP协议，前端与服务端的异步请求通常也通过HTTP协议完成。\n\n最早我们会通过XMLHttpRequest(XHR)，在浏览器中发起一个异步请求，后来许多第三方库基于它做了功能扩展，比如jQuery、ajx、superagent和axios等，直到出现了新的Fetch标准。\n\n虽然API都长得一样，但Fetch标准在不同环境下有不同的实现，比如Node.js环境下的fetch是基于Undici实现的，而在边缘运行时（Edge Runtime）中，Fetch API也会依据平台有所不同，因此，在现代前端，应尽可能**使用Fetch API或其封装库来管理异步请求**。\n\n下面使用Fetch API和Node.js原生http模块，举例说明Content-Type是如何工作的，请求代码和报文是这样的：\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/eCY8fKtcdJFQLgU.jpg\">\n</div>\n<br>\n\n对应的服务端处理代码和响应报文是这样的：\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/GmO1EJIShQHC8lA.jpg\">\n</div>\n<br>\n\n\n需要注意的是，请求头和响应头中的Content-Type表示消息主体的数据类型，它可以是JSON、Form，也可以是其他任何MIME类型，不同的类型就要有不同的处理程序。\n\n在这个例子中，客户端发送了一段JSON类型的数据，服务端应通过JSON parse处理，然后响应了一段纯文本类型，客户端应通过text()方法处理它。\n\n这是一个易错点，前端使用第三方库时默认为JSON请求，而服务端默认以Form处理时，会百思不得其解为什么我处理不了你的请求，原因就是没有理解Content-Type的含义。\n\n在不同的场景和环境下，调试HTTP有不同的方法。\n- 最常见的当然是使用浏览器开发者工具，比如在Chrome DevTools的Network选项卡下，可以看到非常详细的HTTP请求和响应信息。\n- 有时候只想快速看看服务端的响应情况，则可以通过cURL等命令行工具完成。\n- 在针对API测试的场景下，可以通过Postman等自动化工具来批量测试。\n- 而要调试移动设备内的HTTPS，则需要安装信任证书以及通过网络代理工具来实现。\n- 对于远程或是生产环境，则更多是通过抓包和分析服务端日志来完成\n\nHTTP的功能很强大，它足够满足大多数应用场景。但在大型客户端应用中，为了更高效和安全的传输数据，同时兼容HTTP协议，会有一些变化。\n我们应该知道，不是所有的客户端环境都支持先进的HTTP/2或HTTP/3，原始HTTP协议在更复杂的高并发场景下，会不够高效和稳定。\n因此，大型技术基建通常会设计一层无线网关（Gateway），并对HTTP协议进行定制。\n\n<br>\n<div align=\"center\">\n    <img src=\"https://s2.loli.net/2024/08/15/d1b2DgR5xVXIcyu.jpg\">\n</div>\n<br>\n\n增加登录验证、请求跟踪、监控、限流等功能。而前端代码通过远程调用（RPC）的方式，而非直接使用原始HTTP\n\n以bilibili客户端为例，前端发起一个grpc请求至gateway网关，同时发送了多个自定义请求头，比如x-bili-mid表示当前用户，x-bili-trace-id用于链路日志跟踪，x-bili-device-bin表示设备信息等等。\n\n在服务端的响应头中，Content-Type表示这是一个grpc响应，x-bili-trace-id用于日志跟踪等，可以看到，相比浏览器中的HTTP，在客户端中的HTTP会更复杂，定制化的HTTP协议能带来更强大的功能。","slug":"HTTP协议相关知识","published":1,"updated":"2024-12-27T14:24:15.984Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5df80006mcuy33jeg5wa","content":"<h2 id=\"超文本传输协议http\"><a class=\"anchor\" href=\"#超文本传输协议http\">#</a> 超文本传输协议 HTTP</h2>\n<p>超文本 HyperText<br />\nHTTP 虽然叫传输协议，但它实际上工作在 TCP/IP 协议的应用层，底层的数据传输由 TCP 或 UDP 负责。</p>\n<p>HTTP 协议发展至今已有多个版本，最常用的是 HTTP/1.1,HTTP/2 和 HTTP/3。</p>\n<ul>\n<li>\n<p>目前 HTTP/1.1 依然被广泛使用。</p>\n</li>\n<li>\n<p>HTTP/2 引入了多路复用、二进制帧层、头部压缩等特性，提升了不少传输性能。</p>\n</li>\n<li>\n<p>HTTP/3 基于 QUIC 协议使用 UDP 作为传输层，进一步降低了连接延迟和提升了传输性能。</p>\n</li>\n</ul>\n<p>值得注意的是，HTTPS 是 HTTP 的加密安全版本，它在原始 HTTP 协议的基础上，加盖了一层 SSL/TLS 来实现加密传输</p>\n<p>HTTPSecure</p>\n<p>除了 HTTP/3，TLS 在其他版本中并不是强制要求的。</p>\n<p>可以看到，每一代协议升级，都是围绕性能和安全性展开的。</p>\n<br>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/GF18p4UoORwEdTJ.jpg\">\n</div>\n<br>\n<p>HTTP 协议大体上是一种问答形式，客户端发出请求，服务器处理请求，然后再给出响应。</p>\n<p>服务器会根据不同场景返回不同的响应码。</p>\n<p>2XX 表示成功处理，3XX 表示重定向，4 开头表示客户端错误，5 开头表示服务端错误</p>\n<p>在请求和响应报文中，除了请求方法和响应码外，最值得关注的就是请求头和响应头。<br />\n比如：</p>\n<ul>\n<li>\n<p>用于请求上下文的 Host、Referer、User-Agent</p>\n</li>\n<li>\n<p>用于响应上下文的 Allow、Server</p>\n</li>\n<li>\n<p>用于缓存的 Cache-Control、Last-Modified/Last-Modified-Since 和 ETag/If-NoneMatch</p>\n</li>\n<li>\n<p>用于 Cookie 的 Cookie 和 Set-Cookie</p>\n</li>\n<li>\n<p>用于安全的 X-Frame-Options、Strict-Transport-Security (HSTS)、Content-Security-Policy (CSP)</p>\n</li>\n<li>\n<p>用于跨域控制 (CORS) 的 Origin 和 Access-Control-* 一套</p>\n</li>\n<li>\n<p>用于描述消息主体的 Content-* 一套</p>\n</li>\n</ul>\n<br>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/bmGuUHNspIXVW6O.jpg\">\n</div>\n<br>\n<p>浏览器加载资源会使用 HTTP 协议，前端与服务端的异步请求通常也通过 HTTP 协议完成。</p>\n<p>最早我们会通过 XMLHttpRequest (XHR)，在浏览器中发起一个异步请求，后来许多第三方库基于它做了功能扩展，比如 jQuery、ajx、superagent 和 axios 等，直到出现了新的 Fetch 标准。</p>\n<p>虽然 API 都长得一样，但 Fetch 标准在不同环境下有不同的实现，比如 Node.js 环境下的 fetch 是基于 Undici 实现的，而在边缘运行时（Edge Runtime）中，Fetch API 也会依据平台有所不同，因此，在现代前端，应尽可能<strong>使用 Fetch API 或其封装库来管理异步请求</strong>。</p>\n<p>下面使用 Fetch API 和 Node.js 原生 http 模块，举例说明 Content-Type 是如何工作的，请求代码和报文是这样的：<br />\n<br></p>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/eCY8fKtcdJFQLgU.jpg\">\n</div>\n<br>\n<p>对应的服务端处理代码和响应报文是这样的：<br />\n<br></p>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/GmO1EJIShQHC8lA.jpg\">\n</div>\n<br>\n<p>需要注意的是，请求头和响应头中的 Content-Type 表示消息主体的数据类型，它可以是 JSON、Form，也可以是其他任何 MIME 类型，不同的类型就要有不同的处理程序。</p>\n<p>在这个例子中，客户端发送了一段 JSON 类型的数据，服务端应通过 JSON parse 处理，然后响应了一段纯文本类型，客户端应通过 text () 方法处理它。</p>\n<p>这是一个易错点，前端使用第三方库时默认为 JSON 请求，而服务端默认以 Form 处理时，会百思不得其解为什么我处理不了你的请求，原因就是没有理解 Content-Type 的含义。</p>\n<p>在不同的场景和环境下，调试 HTTP 有不同的方法。</p>\n<ul>\n<li>最常见的当然是使用浏览器开发者工具，比如在 Chrome DevTools 的 Network 选项卡下，可以看到非常详细的 HTTP 请求和响应信息。</li>\n<li>有时候只想快速看看服务端的响应情况，则可以通过 cURL 等命令行工具完成。</li>\n<li>在针对 API 测试的场景下，可以通过 Postman 等自动化工具来批量测试。</li>\n<li>而要调试移动设备内的 HTTPS，则需要安装信任证书以及通过网络代理工具来实现。</li>\n<li>对于远程或是生产环境，则更多是通过抓包和分析服务端日志来完成</li>\n</ul>\n<p>HTTP 的功能很强大，它足够满足大多数应用场景。但在大型客户端应用中，为了更高效和安全的传输数据，同时兼容 HTTP 协议，会有一些变化。<br />\n我们应该知道，不是所有的客户端环境都支持先进的 HTTP/2 或 HTTP/3，原始 HTTP 协议在更复杂的高并发场景下，会不够高效和稳定。<br />\n因此，大型技术基建通常会设计一层无线网关（Gateway），并对 HTTP 协议进行定制。</p>\n<br>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/d1b2DgR5xVXIcyu.jpg\">\n</div>\n<br>\n<p>增加登录验证、请求跟踪、监控、限流等功能。而前端代码通过远程调用（RPC）的方式，而非直接使用原始 HTTP</p>\n<p>以 bilibili 客户端为例，前端发起一个 grpc 请求至 gateway 网关，同时发送了多个自定义请求头，比如 x-bili-mid 表示当前用户，x-bili-trace-id 用于链路日志跟踪，x-bili-device-bin 表示设备信息等等。</p>\n<p>在服务端的响应头中，Content-Type 表示这是一个 grpc 响应，x-bili-trace-id 用于日志跟踪等，可以看到，相比浏览器中的 HTTP，在客户端中的 HTTP 会更复杂，定制化的 HTTP 协议能带来更强大的功能。</p>\n","length":2080,"excerpt":"","more":"<h2 id=\"超文本传输协议http\"><a class=\"anchor\" href=\"#超文本传输协议http\">#</a> 超文本传输协议 HTTP</h2>\n<p>超文本 HyperText<br />\nHTTP 虽然叫传输协议，但它实际上工作在 TCP/IP 协议的应用层，底层的数据传输由 TCP 或 UDP 负责。</p>\n<p>HTTP 协议发展至今已有多个版本，最常用的是 HTTP/1.1,HTTP/2 和 HTTP/3。</p>\n<ul>\n<li>\n<p>目前 HTTP/1.1 依然被广泛使用。</p>\n</li>\n<li>\n<p>HTTP/2 引入了多路复用、二进制帧层、头部压缩等特性，提升了不少传输性能。</p>\n</li>\n<li>\n<p>HTTP/3 基于 QUIC 协议使用 UDP 作为传输层，进一步降低了连接延迟和提升了传输性能。</p>\n</li>\n</ul>\n<p>值得注意的是，HTTPS 是 HTTP 的加密安全版本，它在原始 HTTP 协议的基础上，加盖了一层 SSL/TLS 来实现加密传输</p>\n<p>HTTPSecure</p>\n<p>除了 HTTP/3，TLS 在其他版本中并不是强制要求的。</p>\n<p>可以看到，每一代协议升级，都是围绕性能和安全性展开的。</p>\n<br>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/GF18p4UoORwEdTJ.jpg\">\n</div>\n<br>\n<p>HTTP 协议大体上是一种问答形式，客户端发出请求，服务器处理请求，然后再给出响应。</p>\n<p>服务器会根据不同场景返回不同的响应码。</p>\n<p>2XX 表示成功处理，3XX 表示重定向，4 开头表示客户端错误，5 开头表示服务端错误</p>\n<p>在请求和响应报文中，除了请求方法和响应码外，最值得关注的就是请求头和响应头。<br />\n比如：</p>\n<ul>\n<li>\n<p>用于请求上下文的 Host、Referer、User-Agent</p>\n</li>\n<li>\n<p>用于响应上下文的 Allow、Server</p>\n</li>\n<li>\n<p>用于缓存的 Cache-Control、Last-Modified/Last-Modified-Since 和 ETag/If-NoneMatch</p>\n</li>\n<li>\n<p>用于 Cookie 的 Cookie 和 Set-Cookie</p>\n</li>\n<li>\n<p>用于安全的 X-Frame-Options、Strict-Transport-Security (HSTS)、Content-Security-Policy (CSP)</p>\n</li>\n<li>\n<p>用于跨域控制 (CORS) 的 Origin 和 Access-Control-* 一套</p>\n</li>\n<li>\n<p>用于描述消息主体的 Content-* 一套</p>\n</li>\n</ul>\n<br>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/bmGuUHNspIXVW6O.jpg\">\n</div>\n<br>\n<p>浏览器加载资源会使用 HTTP 协议，前端与服务端的异步请求通常也通过 HTTP 协议完成。</p>\n<p>最早我们会通过 XMLHttpRequest (XHR)，在浏览器中发起一个异步请求，后来许多第三方库基于它做了功能扩展，比如 jQuery、ajx、superagent 和 axios 等，直到出现了新的 Fetch 标准。</p>\n<p>虽然 API 都长得一样，但 Fetch 标准在不同环境下有不同的实现，比如 Node.js 环境下的 fetch 是基于 Undici 实现的，而在边缘运行时（Edge Runtime）中，Fetch API 也会依据平台有所不同，因此，在现代前端，应尽可能<strong>使用 Fetch API 或其封装库来管理异步请求</strong>。</p>\n<p>下面使用 Fetch API 和 Node.js 原生 http 模块，举例说明 Content-Type 是如何工作的，请求代码和报文是这样的：<br />\n<br></p>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/eCY8fKtcdJFQLgU.jpg\">\n</div>\n<br>\n<p>对应的服务端处理代码和响应报文是这样的：<br />\n<br></p>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/GmO1EJIShQHC8lA.jpg\">\n</div>\n<br>\n<p>需要注意的是，请求头和响应头中的 Content-Type 表示消息主体的数据类型，它可以是 JSON、Form，也可以是其他任何 MIME 类型，不同的类型就要有不同的处理程序。</p>\n<p>在这个例子中，客户端发送了一段 JSON 类型的数据，服务端应通过 JSON parse 处理，然后响应了一段纯文本类型，客户端应通过 text () 方法处理它。</p>\n<p>这是一个易错点，前端使用第三方库时默认为 JSON 请求，而服务端默认以 Form 处理时，会百思不得其解为什么我处理不了你的请求，原因就是没有理解 Content-Type 的含义。</p>\n<p>在不同的场景和环境下，调试 HTTP 有不同的方法。</p>\n<ul>\n<li>最常见的当然是使用浏览器开发者工具，比如在 Chrome DevTools 的 Network 选项卡下，可以看到非常详细的 HTTP 请求和响应信息。</li>\n<li>有时候只想快速看看服务端的响应情况，则可以通过 cURL 等命令行工具完成。</li>\n<li>在针对 API 测试的场景下，可以通过 Postman 等自动化工具来批量测试。</li>\n<li>而要调试移动设备内的 HTTPS，则需要安装信任证书以及通过网络代理工具来实现。</li>\n<li>对于远程或是生产环境，则更多是通过抓包和分析服务端日志来完成</li>\n</ul>\n<p>HTTP 的功能很强大，它足够满足大多数应用场景。但在大型客户端应用中，为了更高效和安全的传输数据，同时兼容 HTTP 协议，会有一些变化。<br />\n我们应该知道，不是所有的客户端环境都支持先进的 HTTP/2 或 HTTP/3，原始 HTTP 协议在更复杂的高并发场景下，会不够高效和稳定。<br />\n因此，大型技术基建通常会设计一层无线网关（Gateway），并对 HTTP 协议进行定制。</p>\n<br>\n<div align=\"center\">\n    <img data-src=\"https://s2.loli.net/2024/08/15/d1b2DgR5xVXIcyu.jpg\">\n</div>\n<br>\n<p>增加登录验证、请求跟踪、监控、限流等功能。而前端代码通过远程调用（RPC）的方式，而非直接使用原始 HTTP</p>\n<p>以 bilibili 客户端为例，前端发起一个 grpc 请求至 gateway 网关，同时发送了多个自定义请求头，比如 x-bili-mid 表示当前用户，x-bili-trace-id 用于链路日志跟踪，x-bili-device-bin 表示设备信息等等。</p>\n<p>在服务端的响应头中，Content-Type 表示这是一个 grpc 响应，x-bili-trace-id 用于日志跟踪等，可以看到，相比浏览器中的 HTTP，在客户端中的 HTTP 会更复杂，定制化的 HTTP 协议能带来更强大的功能。</p>\n"},{"title":"React与Vue","date":"2025-01-06T09:55:46.000Z","_content":"\n### React与Vue\n\n1. 什么是 React？\nReact是一个免费、开源的JavaScript库，可以基于组件构建界面，并采用声明式编程方式。由Meta公司和一个由开发人员以及公司组成的社区共同维护，React可用于开发单页、移动和服务器渲染的应用程序。\n\n2. 什么是 Vue？\nVue则是一个用于构建界面的开源JavaScript框架，同样提供声明式和基于组件的编程选项。因此，您可以构建简单和复杂的界面。\n\n3. React 和 Vue 的相似之处\n\n这两款 Web 开发工具在许多方面高度相似，主要的初始共同点是：\n- 虚拟 DOM（文档对象模型）;\n- 响应式和基于组件的结构;\n- JavaScript 使用;\n- 支持 TypeScript;\n- 核心库和支持库;\n- 无缝版本迁移;\n- 向后兼容性;\n- 种类繁多的库和工具;\n- PWA 支持;\n- 灵活性、性能和速度;\n- 大型、活跃的社区。\n\nReact 和 Vue 都采用了虚拟 DOM 这一关键技术，它作为实际 HTML DOM 的 JavaScript 对象副本，在浏览器中呈现为常规网页。虚拟 DOM 的优势在于，它能在应用重新渲染时避免直接操作 HTML DOM，从而提高性能，减少不必要的元素重绘。\n\n在数据绑定方面，Vue 提供了 v-model 指令，简化了表单的双向数据绑定过程。相比之下，React 没有内置的双向数据绑定解决方案，但允许开发者根据需要自定义实现，以满足特定需求。\n\n此外，React 和 Vue 都遵循单向数据流的原则，即数据从父组件流向子组件。这种向下数据绑定的方式确保了数据流的清晰和一致，只有在数据发生更改时，子组件才会更新其内容，从而维护了干净且可预测的数据流架构。\n\n4. Vue 和 React 的区别\n\nVue 和 React 在多个关键词上展现出显著的区别。首先，从定义上来看，Vue 是一个渐进式 JavaScript 框架，而 React 是一个开源 JavaScript 库。这种基础定位的不同，直接影响了它们的用例和适用范围。\n\n在内容渲染方面，React 采用了 JSX，这是一种专门用于构建 DOM 树的 JavaScript 扩展，非常适合创建 React 组件。相对地，Vue 则采用了不同的方法，它使用 HTML 模板来进行 DOM 渲染，而不是 JSX。\n\n此外，React 和 Vue 在预构建工具和第三方工具的支持上也存在差异。React 提供了一个强大的架构，包括虚拟 DOM 操作和组件状态管理，但其他功能则主要依赖于社区成员的开发和支持。\n\n相比之下，Vue 的工具和库则更加平衡。Vue 的核心团队不仅开发了自己的工具和库，还提供了基于社区的解决方案。这种组合使得 Vue 能够更好地满足经验丰富的开发人员和新手的需求。\n\n综上所述，Vue 与 React 在定义、内容渲染、预构建工具和第三方工具支持等方面都存在显著的差异。这些差异使得两者在各自的领域内都有独特的优势和适用场景。\n\n5. 灵活性与状态管理\nReact\n\nReact以UI为核心，专注于构建UI组件，其XML风格的语法便于创建包含视图描述的UI组件。\n\n然而，React本身不提供状态管理功能。对于小型应用，开发者可以利用React内置的Context API来管理状态，但对于更复杂的Web应用，则需要借助第三方库。Redux、MobX、Recoil和Zustand等是流行的状态管理库，其中Redux基于Flux架构模式，备受推崇。此外，React Router也是由第三方提供的，并非官方包。\n\nVue\n\nVue.js作为一个动态框架，允许开发者使用其基本工具轻松创建应用。但是，如有必要，它还提供您可能需要的绝大多数功能：\n\nPinia 或 Vuex 用于状态管理。\nVue Router 用于应用程序 URL 管理。\nVue.js用于服务器端渲染的服务器端渲染器。\n综上所述，Vue在灵活性方面表现优异，无论是小型还是大型应用，都提供了直观且强大的解决方案。相比之下，React则需要开发者根据需要选择和使用第三方库来扩展功能。\n\n6. 移动开发\n\nReact\n\nReact在移动应用程序开发领域以React Native框架崭露头角。React Native是一个利用JavaScript构建跨平台iOS和Android应用的工具，自2015年初问世以来，便基于React不断演进。该框架摒弃了WebView和HTML技术，转而采用原生组件与JS的绑定，并将其封装在React中。\n\n尽管iOS对React Native的支持略胜一筹，但Android的支持也在不断进步，为开发者提供了高质量的跨平台应用开发服务。\n\n此外，React在渐进式Web应用程序（PWA）开发方面也展现出了巨大潜力。自2015年起，PWA便凭借其接近原生应用性能的Web技术（CSS、HTML和JavaScript）构建方式而备受瞩目。\n\nVue\n\n另一方面，Vue.js 与 NativeScript （NS） 配对，后者允许您使用 XML、CSS 和 JavaScript 构建跨平台应用程序。NativeScript 解决了与上面提到的 React Native 相同的问题，但它们有一些不同。\n\n使用 HTML/CSS/JavaScript 的 Web 开发人员更容易理解 NativeScript 语法和实现。在标记创建中，XML 用法也类似于 HTML。\nNativeScript 可以直接访问本机平台 API。\n","source":"_posts/React与Vue.md","raw":"---\ntitle: React与Vue\ndate: 2025-01-06 17:55:46\ncategories:\n- [React]\ntags:\n- [React, Vue]\n---\n\n### React与Vue\n\n1. 什么是 React？\nReact是一个免费、开源的JavaScript库，可以基于组件构建界面，并采用声明式编程方式。由Meta公司和一个由开发人员以及公司组成的社区共同维护，React可用于开发单页、移动和服务器渲染的应用程序。\n\n2. 什么是 Vue？\nVue则是一个用于构建界面的开源JavaScript框架，同样提供声明式和基于组件的编程选项。因此，您可以构建简单和复杂的界面。\n\n3. React 和 Vue 的相似之处\n\n这两款 Web 开发工具在许多方面高度相似，主要的初始共同点是：\n- 虚拟 DOM（文档对象模型）;\n- 响应式和基于组件的结构;\n- JavaScript 使用;\n- 支持 TypeScript;\n- 核心库和支持库;\n- 无缝版本迁移;\n- 向后兼容性;\n- 种类繁多的库和工具;\n- PWA 支持;\n- 灵活性、性能和速度;\n- 大型、活跃的社区。\n\nReact 和 Vue 都采用了虚拟 DOM 这一关键技术，它作为实际 HTML DOM 的 JavaScript 对象副本，在浏览器中呈现为常规网页。虚拟 DOM 的优势在于，它能在应用重新渲染时避免直接操作 HTML DOM，从而提高性能，减少不必要的元素重绘。\n\n在数据绑定方面，Vue 提供了 v-model 指令，简化了表单的双向数据绑定过程。相比之下，React 没有内置的双向数据绑定解决方案，但允许开发者根据需要自定义实现，以满足特定需求。\n\n此外，React 和 Vue 都遵循单向数据流的原则，即数据从父组件流向子组件。这种向下数据绑定的方式确保了数据流的清晰和一致，只有在数据发生更改时，子组件才会更新其内容，从而维护了干净且可预测的数据流架构。\n\n4. Vue 和 React 的区别\n\nVue 和 React 在多个关键词上展现出显著的区别。首先，从定义上来看，Vue 是一个渐进式 JavaScript 框架，而 React 是一个开源 JavaScript 库。这种基础定位的不同，直接影响了它们的用例和适用范围。\n\n在内容渲染方面，React 采用了 JSX，这是一种专门用于构建 DOM 树的 JavaScript 扩展，非常适合创建 React 组件。相对地，Vue 则采用了不同的方法，它使用 HTML 模板来进行 DOM 渲染，而不是 JSX。\n\n此外，React 和 Vue 在预构建工具和第三方工具的支持上也存在差异。React 提供了一个强大的架构，包括虚拟 DOM 操作和组件状态管理，但其他功能则主要依赖于社区成员的开发和支持。\n\n相比之下，Vue 的工具和库则更加平衡。Vue 的核心团队不仅开发了自己的工具和库，还提供了基于社区的解决方案。这种组合使得 Vue 能够更好地满足经验丰富的开发人员和新手的需求。\n\n综上所述，Vue 与 React 在定义、内容渲染、预构建工具和第三方工具支持等方面都存在显著的差异。这些差异使得两者在各自的领域内都有独特的优势和适用场景。\n\n5. 灵活性与状态管理\nReact\n\nReact以UI为核心，专注于构建UI组件，其XML风格的语法便于创建包含视图描述的UI组件。\n\n然而，React本身不提供状态管理功能。对于小型应用，开发者可以利用React内置的Context API来管理状态，但对于更复杂的Web应用，则需要借助第三方库。Redux、MobX、Recoil和Zustand等是流行的状态管理库，其中Redux基于Flux架构模式，备受推崇。此外，React Router也是由第三方提供的，并非官方包。\n\nVue\n\nVue.js作为一个动态框架，允许开发者使用其基本工具轻松创建应用。但是，如有必要，它还提供您可能需要的绝大多数功能：\n\nPinia 或 Vuex 用于状态管理。\nVue Router 用于应用程序 URL 管理。\nVue.js用于服务器端渲染的服务器端渲染器。\n综上所述，Vue在灵活性方面表现优异，无论是小型还是大型应用，都提供了直观且强大的解决方案。相比之下，React则需要开发者根据需要选择和使用第三方库来扩展功能。\n\n6. 移动开发\n\nReact\n\nReact在移动应用程序开发领域以React Native框架崭露头角。React Native是一个利用JavaScript构建跨平台iOS和Android应用的工具，自2015年初问世以来，便基于React不断演进。该框架摒弃了WebView和HTML技术，转而采用原生组件与JS的绑定，并将其封装在React中。\n\n尽管iOS对React Native的支持略胜一筹，但Android的支持也在不断进步，为开发者提供了高质量的跨平台应用开发服务。\n\n此外，React在渐进式Web应用程序（PWA）开发方面也展现出了巨大潜力。自2015年起，PWA便凭借其接近原生应用性能的Web技术（CSS、HTML和JavaScript）构建方式而备受瞩目。\n\nVue\n\n另一方面，Vue.js 与 NativeScript （NS） 配对，后者允许您使用 XML、CSS 和 JavaScript 构建跨平台应用程序。NativeScript 解决了与上面提到的 React Native 相同的问题，但它们有一些不同。\n\n使用 HTML/CSS/JavaScript 的 Web 开发人员更容易理解 NativeScript 语法和实现。在标记创建中，XML 用法也类似于 HTML。\nNativeScript 可以直接访问本机平台 API。\n","slug":"React与Vue","published":1,"updated":"2025-01-06T10:05:16.225Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5df80008mcuy4re54ddg","content":"<h3 id=\"react与vue\"><a class=\"anchor\" href=\"#react与vue\">#</a> React 与 Vue</h3>\n<ol>\n<li>\n<p>什么是 React？<br />\nReact 是一个免费、开源的 JavaScript 库，可以基于组件构建界面，并采用声明式编程方式。由 Meta 公司和一个由开发人员以及公司组成的社区共同维护，React 可用于开发单页、移动和服务器渲染的应用程序。</p>\n</li>\n<li>\n<p>什么是 Vue？<br />\nVue 则是一个用于构建界面的开源 JavaScript 框架，同样提供声明式和基于组件的编程选项。因此，您可以构建简单和复杂的界面。</p>\n</li>\n<li>\n<p>React 和 Vue 的相似之处</p>\n</li>\n</ol>\n<p>这两款 Web 开发工具在许多方面高度相似，主要的初始共同点是：</p>\n<ul>\n<li>虚拟 DOM（文档对象模型）;</li>\n<li>响应式和基于组件的结构；</li>\n<li>JavaScript 使用；</li>\n<li>支持 TypeScript;</li>\n<li>核心库和支持库；</li>\n<li>无缝版本迁移；</li>\n<li>向后兼容性；</li>\n<li>种类繁多的库和工具；</li>\n<li>PWA 支持；</li>\n<li>灵活性、性能和速度；</li>\n<li>大型、活跃的社区。</li>\n</ul>\n<p>React 和 Vue 都采用了虚拟 DOM 这一关键技术，它作为实际 HTML DOM 的 JavaScript 对象副本，在浏览器中呈现为常规网页。虚拟 DOM 的优势在于，它能在应用重新渲染时避免直接操作 HTML DOM，从而提高性能，减少不必要的元素重绘。</p>\n<p>在数据绑定方面，Vue 提供了 v-model 指令，简化了表单的双向数据绑定过程。相比之下，React 没有内置的双向数据绑定解决方案，但允许开发者根据需要自定义实现，以满足特定需求。</p>\n<p>此外，React 和 Vue 都遵循单向数据流的原则，即数据从父组件流向子组件。这种向下数据绑定的方式确保了数据流的清晰和一致，只有在数据发生更改时，子组件才会更新其内容，从而维护了干净且可预测的数据流架构。</p>\n<ol start=\"4\">\n<li>Vue 和 React 的区别</li>\n</ol>\n<p>Vue 和 React 在多个关键词上展现出显著的区别。首先，从定义上来看，Vue 是一个渐进式 JavaScript 框架，而 React 是一个开源 JavaScript 库。这种基础定位的不同，直接影响了它们的用例和适用范围。</p>\n<p>在内容渲染方面，React 采用了 JSX，这是一种专门用于构建 DOM 树的 JavaScript 扩展，非常适合创建 React 组件。相对地，Vue 则采用了不同的方法，它使用 HTML 模板来进行 DOM 渲染，而不是 JSX。</p>\n<p>此外，React 和 Vue 在预构建工具和第三方工具的支持上也存在差异。React 提供了一个强大的架构，包括虚拟 DOM 操作和组件状态管理，但其他功能则主要依赖于社区成员的开发和支持。</p>\n<p>相比之下，Vue 的工具和库则更加平衡。Vue 的核心团队不仅开发了自己的工具和库，还提供了基于社区的解决方案。这种组合使得 Vue 能够更好地满足经验丰富的开发人员和新手的需求。</p>\n<p>综上所述，Vue 与 React 在定义、内容渲染、预构建工具和第三方工具支持等方面都存在显著的差异。这些差异使得两者在各自的领域内都有独特的优势和适用场景。</p>\n<ol start=\"5\">\n<li>灵活性与状态管理<br />\n React</li>\n</ol>\n<p>React 以 UI 为核心，专注于构建 UI 组件，其 XML 风格的语法便于创建包含视图描述的 UI 组件。</p>\n<p>然而，React 本身不提供状态管理功能。对于小型应用，开发者可以利用 React 内置的 Context API 来管理状态，但对于更复杂的 Web 应用，则需要借助第三方库。Redux、MobX、Recoil 和 Zustand 等是流行的状态管理库，其中 Redux 基于 Flux 架构模式，备受推崇。此外，React Router 也是由第三方提供的，并非官方包。</p>\n<p>Vue</p>\n<p>Vue.js 作为一个动态框架，允许开发者使用其基本工具轻松创建应用。但是，如有必要，它还提供您可能需要的绝大多数功能：</p>\n<p>Pinia 或 Vuex 用于状态管理。<br />\nVue Router 用于应用程序 URL 管理。<br />\nVue.js 用于服务器端渲染的服务器端渲染器。<br />\n综上所述，Vue 在灵活性方面表现优异，无论是小型还是大型应用，都提供了直观且强大的解决方案。相比之下，React 则需要开发者根据需要选择和使用第三方库来扩展功能。</p>\n<ol start=\"6\">\n<li>移动开发</li>\n</ol>\n<p>React</p>\n<p>React 在移动应用程序开发领域以 React Native 框架崭露头角。React Native 是一个利用 JavaScript 构建跨平台 iOS 和 Android 应用的工具，自 2015 年初问世以来，便基于 React 不断演进。该框架摒弃了 WebView 和 HTML 技术，转而采用原生组件与 JS 的绑定，并将其封装在 React 中。</p>\n<p>尽管 iOS 对 React Native 的支持略胜一筹，但 Android 的支持也在不断进步，为开发者提供了高质量的跨平台应用开发服务。</p>\n<p>此外，React 在渐进式 Web 应用程序（PWA）开发方面也展现出了巨大潜力。自 2015 年起，PWA 便凭借其接近原生应用性能的 Web 技术（CSS、HTML 和 JavaScript）构建方式而备受瞩目。</p>\n<p>Vue</p>\n<p>另一方面，Vue.js 与 NativeScript （NS） 配对，后者允许您使用 XML、CSS 和 JavaScript 构建跨平台应用程序。NativeScript 解决了与上面提到的 React Native 相同的问题，但它们有一些不同。</p>\n<p>使用 HTML/CSS/JavaScript 的 Web 开发人员更容易理解 NativeScript 语法和实现。在标记创建中，XML 用法也类似于 HTML。<br />\nNativeScript 可以直接访问本机平台 API。</p>\n","length":2105,"excerpt":"","more":"<h3 id=\"react与vue\"><a class=\"anchor\" href=\"#react与vue\">#</a> React 与 Vue</h3>\n<ol>\n<li>\n<p>什么是 React？<br />\nReact 是一个免费、开源的 JavaScript 库，可以基于组件构建界面，并采用声明式编程方式。由 Meta 公司和一个由开发人员以及公司组成的社区共同维护，React 可用于开发单页、移动和服务器渲染的应用程序。</p>\n</li>\n<li>\n<p>什么是 Vue？<br />\nVue 则是一个用于构建界面的开源 JavaScript 框架，同样提供声明式和基于组件的编程选项。因此，您可以构建简单和复杂的界面。</p>\n</li>\n<li>\n<p>React 和 Vue 的相似之处</p>\n</li>\n</ol>\n<p>这两款 Web 开发工具在许多方面高度相似，主要的初始共同点是：</p>\n<ul>\n<li>虚拟 DOM（文档对象模型）;</li>\n<li>响应式和基于组件的结构；</li>\n<li>JavaScript 使用；</li>\n<li>支持 TypeScript;</li>\n<li>核心库和支持库；</li>\n<li>无缝版本迁移；</li>\n<li>向后兼容性；</li>\n<li>种类繁多的库和工具；</li>\n<li>PWA 支持；</li>\n<li>灵活性、性能和速度；</li>\n<li>大型、活跃的社区。</li>\n</ul>\n<p>React 和 Vue 都采用了虚拟 DOM 这一关键技术，它作为实际 HTML DOM 的 JavaScript 对象副本，在浏览器中呈现为常规网页。虚拟 DOM 的优势在于，它能在应用重新渲染时避免直接操作 HTML DOM，从而提高性能，减少不必要的元素重绘。</p>\n<p>在数据绑定方面，Vue 提供了 v-model 指令，简化了表单的双向数据绑定过程。相比之下，React 没有内置的双向数据绑定解决方案，但允许开发者根据需要自定义实现，以满足特定需求。</p>\n<p>此外，React 和 Vue 都遵循单向数据流的原则，即数据从父组件流向子组件。这种向下数据绑定的方式确保了数据流的清晰和一致，只有在数据发生更改时，子组件才会更新其内容，从而维护了干净且可预测的数据流架构。</p>\n<ol start=\"4\">\n<li>Vue 和 React 的区别</li>\n</ol>\n<p>Vue 和 React 在多个关键词上展现出显著的区别。首先，从定义上来看，Vue 是一个渐进式 JavaScript 框架，而 React 是一个开源 JavaScript 库。这种基础定位的不同，直接影响了它们的用例和适用范围。</p>\n<p>在内容渲染方面，React 采用了 JSX，这是一种专门用于构建 DOM 树的 JavaScript 扩展，非常适合创建 React 组件。相对地，Vue 则采用了不同的方法，它使用 HTML 模板来进行 DOM 渲染，而不是 JSX。</p>\n<p>此外，React 和 Vue 在预构建工具和第三方工具的支持上也存在差异。React 提供了一个强大的架构，包括虚拟 DOM 操作和组件状态管理，但其他功能则主要依赖于社区成员的开发和支持。</p>\n<p>相比之下，Vue 的工具和库则更加平衡。Vue 的核心团队不仅开发了自己的工具和库，还提供了基于社区的解决方案。这种组合使得 Vue 能够更好地满足经验丰富的开发人员和新手的需求。</p>\n<p>综上所述，Vue 与 React 在定义、内容渲染、预构建工具和第三方工具支持等方面都存在显著的差异。这些差异使得两者在各自的领域内都有独特的优势和适用场景。</p>\n<ol start=\"5\">\n<li>灵活性与状态管理<br />\n React</li>\n</ol>\n<p>React 以 UI 为核心，专注于构建 UI 组件，其 XML 风格的语法便于创建包含视图描述的 UI 组件。</p>\n<p>然而，React 本身不提供状态管理功能。对于小型应用，开发者可以利用 React 内置的 Context API 来管理状态，但对于更复杂的 Web 应用，则需要借助第三方库。Redux、MobX、Recoil 和 Zustand 等是流行的状态管理库，其中 Redux 基于 Flux 架构模式，备受推崇。此外，React Router 也是由第三方提供的，并非官方包。</p>\n<p>Vue</p>\n<p>Vue.js 作为一个动态框架，允许开发者使用其基本工具轻松创建应用。但是，如有必要，它还提供您可能需要的绝大多数功能：</p>\n<p>Pinia 或 Vuex 用于状态管理。<br />\nVue Router 用于应用程序 URL 管理。<br />\nVue.js 用于服务器端渲染的服务器端渲染器。<br />\n综上所述，Vue 在灵活性方面表现优异，无论是小型还是大型应用，都提供了直观且强大的解决方案。相比之下，React 则需要开发者根据需要选择和使用第三方库来扩展功能。</p>\n<ol start=\"6\">\n<li>移动开发</li>\n</ol>\n<p>React</p>\n<p>React 在移动应用程序开发领域以 React Native 框架崭露头角。React Native 是一个利用 JavaScript 构建跨平台 iOS 和 Android 应用的工具，自 2015 年初问世以来，便基于 React 不断演进。该框架摒弃了 WebView 和 HTML 技术，转而采用原生组件与 JS 的绑定，并将其封装在 React 中。</p>\n<p>尽管 iOS 对 React Native 的支持略胜一筹，但 Android 的支持也在不断进步，为开发者提供了高质量的跨平台应用开发服务。</p>\n<p>此外，React 在渐进式 Web 应用程序（PWA）开发方面也展现出了巨大潜力。自 2015 年起，PWA 便凭借其接近原生应用性能的 Web 技术（CSS、HTML 和 JavaScript）构建方式而备受瞩目。</p>\n<p>Vue</p>\n<p>另一方面，Vue.js 与 NativeScript （NS） 配对，后者允许您使用 XML、CSS 和 JavaScript 构建跨平台应用程序。NativeScript 解决了与上面提到的 React Native 相同的问题，但它们有一些不同。</p>\n<p>使用 HTML/CSS/JavaScript 的 Web 开发人员更容易理解 NativeScript 语法和实现。在标记创建中，XML 用法也类似于 HTML。<br />\nNativeScript 可以直接访问本机平台 API。</p>\n"},{"title":"Flex与Grid布局","date":"2025-02-21T05:52:57.000Z","_content":"\n# Flex布局与Grid布局\n\n1. flex 布局又称为弹性布局。\n\n- 当我们给一个容器元素设置 display:flex; 时，这个容器就变成了 flex 容器，容器中所有直接子元素就成了容器成员（flex 项目）。\n- flex 容器默认存在两根轴：水平的主轴和垂直的交叉轴，flex 布局主要是围绕这两根轴来进行布局的。\n- 所以 flex 布局相对于 grid 网格布局来说，他更适合一维布局（单行或单列布局）\n\n父容器属性：flex-direction， justify-content， align-items， align-content\n子容器属性：order， flex-grow， flex-shrink， flex-basis， align-self\n\n2. Grid 布局又称为网格布局。\n\n- 当我们给一个元素加上 display:grid;时，我们称这个元素为容器，元素中所有直接子元素称为子项或项目。\n- Grid 布局则是将容器划分成行和列，产生单元格，然后指定项目所在的单元格，可以看作是二维布局。\n- 划分网格的线，称为\"网格线\"（grid line）。水平网格线划分出行，垂直网格线划分出列。\n- 设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。\n\n父容器属性：grid-template-columns， grid-template-rows， grid-gap， grid-auto-flow， grid-auto-columns， grid-auto-rows， justify-items， align-items， justify-content， align-content\n子容器属性：grid-column-start， grid-column-end， grid-row-start， grid-row-end， justify-self， align-self\n\n3. 经典问题\n\n### 经典问题：\n\n#### ask: flex=1是什么意思\n\n#### answer: flex: 1 是 CSS Flexbox 布局中的一个属性值，用于控制弹性容器内子元素的伸缩行为。\n\n具体含义\nflex 是 flex-grow、flex-shrink 和 flex-basis 的简写。\n\nflex: 1 等同于 flex: 1 1 0，表示：\n\nflex-grow: 1：子元素会按比例分配剩余空间。\n\nflex-shrink: 1：子元素在空间不足时会缩小。\n\nflex-basis: 0：子元素的初始大小为 0。\n\n效果\n子元素会根据 flex-grow 的值分配剩余空间。\n\n如果多个子元素都有 flex: 1，它们将平分剩余空间。\n\n\n#### ask: flex 布局设置水平垂直居中\n#### answer: 给 flex 容器添加以下三个属性，就可以实现子项水平垂直居中：\n\ndisplay: flex; // 容器为 flex 布局\njustify-content: center; // 子项在主轴（水平居中）\nalign-items: center; // 子项在交叉轴（垂直居中）\n\n\n#### ask: 如何解决 flex 布局 7 个元素使用 space-between 最后一行两边分布的问题？\n#### answer: 如果我们每一行显示的个数为 n，那我们可以最后一行子项的后面加上 n-2 个 span 元素，span 元素的宽度和其它子项元素宽度一样，但不用设置高度。\n\n为什么是添加 n-2 个 span 元素呢 ？\n\n当最后一行只有 1 个子元素时，他会默认靠左，不用处理\n当最后一行子元素正好时，我们就不用关心这个问题。\n所以要去掉这两种情况，只需要加 n-2 个 span 元素就好\n\n#### ask: flex 实现 8 个元素分两行排列 每行 4 个平均分布-自适应\n#### answer: 给父元素设置 display: flex; flex-wrap: wrap; 子元素设置 flex: 1 0 25%;\n\n给父容器添加如下属性：\n\ndisplay: flex; // flex 布局\nflex-wrap: wrap; // 换行\n给子项添加如下样式：\n\nflex-basis: 25%; // 项目占据主轴（父容器宽）的空间。\nflex-grow: 0; // 不放大\nflex-shrink: 0; // 缩小\n以上三个属性，也可以简写在 flex: 0 0 25%;\n\n####  当容器为 flex 时，其子元素没有指定高度时，其高度默认为父元素高度。\n\n#### ask: 圣杯布局\n#### answer: 拥有 header 和 footer，中间是主内容行;left 和 right 分别固定了宽度，center 会随着整体布局宽度的变化而进行伸缩\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t\t<title>圣杯布局</title>\n\t\t<style type=\"text/css\">\n\t\t\tbody {\n\t\t\t\tmin-width: 550px;\n\t\t\t}\n\n\t\t\t#header {\n\t\t\t\tbackground-color: #999999;\n\t\t\t}\n\t\t\t\n\t\t\t#middle{\n\t\t\t\t/* 2.把中间部分留出左右元素的宽度 */\n\t\t\t\tpadding-left: 200px;\n\t\t\t\tpadding-right: 150px;\n\t\t\t}\n\t\t\t\n\t\t\t#middle .column{\n\t\t\t\tfloat: left;\n\t\t\t\theight: 200px;\n\t\t\t}\n\t\t\t\n\t\t\t#left{\n\t\t\t\twidth: 200px;\n\t\t\t\tbackground-color: #FFFF00;\n\t\t\t\t/* 4. 向左移动center的宽度 */\n\t\t\t\tmargin-left: -100%;\n\t\t\t\t/* 5. 再向左移动自身宽度，露出被覆盖的center块 */\n\t\t\t\tposition: relative;\n\t\t\t\tright: 200px;\n\t\t\t}\n\t\t\t\n\t\t\t#center{\n\t\t\t\twidth: 100%;\n\t\t\t\tbackground-color: pink;\n\t\t\t}\n\t\t\t\n\t\t\t#right{\n\t\t\t\t/* 3.margin-right让右方元素覆盖自身，达到消除自身宽度的目的，浮动到center上面去 */\n\t\t\t\tmargin-right: -150px;\n\t\t\t\twidth: 150px;\n\t\t\t\tbackground-color: #CCCCCC;\n\t\t\t}\n\t\t\t\n\t\t\t#footer {\n\t\t\t\tbackground-color: #999999;\n\t\t\t}\n\t\t\t\n\t\t\t.clearfix:after{\n\t\t\t\tdisplay: table;\n\t\t\t\tcontent: '';\n\t\t\t\tclear: both;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"header\">header</div>\n\t\t<div id=\"middle\" class=\"clearfix\">\n\t\t\t<div id=\"center\" class=\"column\">\n\t\t\t\tcenter\n\t\t\t</div>\n\t\t\t<div id=\"left\" class=\"column\">\n\t\t\t\tleft\n\t\t\t</div>\n\t\t\t<div id=\"right\" class=\"column\">\n\t\t\t\tright\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"footer\">footer</div>\n\t</body>\n</html>\n\n```\n\n\n#### ask: 双飞翼布局\n#### answer: left 和 right 固定宽度; 中间 main 会随着整体布局宽度的变化而伸缩\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>双飞翼布局</title>\n    <style type=\"text/css\">\n        body {\n            min-width: 550px;\n        }\n        .col {\n\t\t\t/* 1.设置浮动 */\n\t\t\tfloat: left;\n        }\n\n        #main {\n            width: 100%;\n            height: 200px;\n            background-color: #FFC0CB;\n        }\n        #main-wrap {\n\t\t\t/* 2.将 main 左右内边距留出 left 和 right 的宽度 */\n\t\t\tmargin: 0 200px 0 150px;\n        }\n\n        #left {\n            width: 150px;\n            height: 200px;\n            background-color: #FFFF00;\n\t\t\t/* 3.left 向左偏移 main 的宽度 */\n\t\t\tmargin-left: -100%;\n        }\n        #right {\n            width: 200px;\n            height: 200px;\n            background-color: #cccccc;\n\t\t\t/* 4.right 向左偏移自身宽度 */\n\t\t\tmargin-left: -200px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"main\" class=\"col\">\n        <div id=\"main-wrap\">\n            main\n        </div>\n    </div>\n    <div id=\"left\" class=\"col\">\n        left\n    </div>\n    <div id=\"right\" class=\"col\">\n        right\n    </div>\n</body>\n</html>\n```\n\n#### ask: 圣杯布局与双飞翼布局异同比较\n#### answer: \n\n| 维度          | 双飞翼布局                | 圣杯布局                  |\n|---------------|-------------------------|---------------------------|\n| **边距控制**  | 通过外层 `margin` 实现   | 通过内层 `padding` 实现    |\n| **元素偏移**  | 左右均向左偏移           | 左侧左偏移，右侧右偏移      |\n| **视觉重心**  | 主内容居中              | 主内容靠左                  |\n| **适用场景**  | 广告位/侧边栏固定展示    | 两侧内容灵活布局          |\n\n双飞翼：均使用 margin-left，左：向左偏移main的宽度；右：向左偏移自身宽度 \n\n圣杯:左：使用 margin-left（向左偏移main的宽度）; 右：margin-right（取消自身宽度）","source":"_posts/Flex与Grid布局.md","raw":"---\ntitle: Flex与Grid布局\ndate: 2025-02-21 13:52:57\ncategories:\n- [前端开发]\ntags:\n- [前端]\n---\n\n# Flex布局与Grid布局\n\n1. flex 布局又称为弹性布局。\n\n- 当我们给一个容器元素设置 display:flex; 时，这个容器就变成了 flex 容器，容器中所有直接子元素就成了容器成员（flex 项目）。\n- flex 容器默认存在两根轴：水平的主轴和垂直的交叉轴，flex 布局主要是围绕这两根轴来进行布局的。\n- 所以 flex 布局相对于 grid 网格布局来说，他更适合一维布局（单行或单列布局）\n\n父容器属性：flex-direction， justify-content， align-items， align-content\n子容器属性：order， flex-grow， flex-shrink， flex-basis， align-self\n\n2. Grid 布局又称为网格布局。\n\n- 当我们给一个元素加上 display:grid;时，我们称这个元素为容器，元素中所有直接子元素称为子项或项目。\n- Grid 布局则是将容器划分成行和列，产生单元格，然后指定项目所在的单元格，可以看作是二维布局。\n- 划分网格的线，称为\"网格线\"（grid line）。水平网格线划分出行，垂直网格线划分出列。\n- 设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。\n\n父容器属性：grid-template-columns， grid-template-rows， grid-gap， grid-auto-flow， grid-auto-columns， grid-auto-rows， justify-items， align-items， justify-content， align-content\n子容器属性：grid-column-start， grid-column-end， grid-row-start， grid-row-end， justify-self， align-self\n\n3. 经典问题\n\n### 经典问题：\n\n#### ask: flex=1是什么意思\n\n#### answer: flex: 1 是 CSS Flexbox 布局中的一个属性值，用于控制弹性容器内子元素的伸缩行为。\n\n具体含义\nflex 是 flex-grow、flex-shrink 和 flex-basis 的简写。\n\nflex: 1 等同于 flex: 1 1 0，表示：\n\nflex-grow: 1：子元素会按比例分配剩余空间。\n\nflex-shrink: 1：子元素在空间不足时会缩小。\n\nflex-basis: 0：子元素的初始大小为 0。\n\n效果\n子元素会根据 flex-grow 的值分配剩余空间。\n\n如果多个子元素都有 flex: 1，它们将平分剩余空间。\n\n\n#### ask: flex 布局设置水平垂直居中\n#### answer: 给 flex 容器添加以下三个属性，就可以实现子项水平垂直居中：\n\ndisplay: flex; // 容器为 flex 布局\njustify-content: center; // 子项在主轴（水平居中）\nalign-items: center; // 子项在交叉轴（垂直居中）\n\n\n#### ask: 如何解决 flex 布局 7 个元素使用 space-between 最后一行两边分布的问题？\n#### answer: 如果我们每一行显示的个数为 n，那我们可以最后一行子项的后面加上 n-2 个 span 元素，span 元素的宽度和其它子项元素宽度一样，但不用设置高度。\n\n为什么是添加 n-2 个 span 元素呢 ？\n\n当最后一行只有 1 个子元素时，他会默认靠左，不用处理\n当最后一行子元素正好时，我们就不用关心这个问题。\n所以要去掉这两种情况，只需要加 n-2 个 span 元素就好\n\n#### ask: flex 实现 8 个元素分两行排列 每行 4 个平均分布-自适应\n#### answer: 给父元素设置 display: flex; flex-wrap: wrap; 子元素设置 flex: 1 0 25%;\n\n给父容器添加如下属性：\n\ndisplay: flex; // flex 布局\nflex-wrap: wrap; // 换行\n给子项添加如下样式：\n\nflex-basis: 25%; // 项目占据主轴（父容器宽）的空间。\nflex-grow: 0; // 不放大\nflex-shrink: 0; // 缩小\n以上三个属性，也可以简写在 flex: 0 0 25%;\n\n####  当容器为 flex 时，其子元素没有指定高度时，其高度默认为父元素高度。\n\n#### ask: 圣杯布局\n#### answer: 拥有 header 和 footer，中间是主内容行;left 和 right 分别固定了宽度，center 会随着整体布局宽度的变化而进行伸缩\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\t\t<meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n\t\t<title>圣杯布局</title>\n\t\t<style type=\"text/css\">\n\t\t\tbody {\n\t\t\t\tmin-width: 550px;\n\t\t\t}\n\n\t\t\t#header {\n\t\t\t\tbackground-color: #999999;\n\t\t\t}\n\t\t\t\n\t\t\t#middle{\n\t\t\t\t/* 2.把中间部分留出左右元素的宽度 */\n\t\t\t\tpadding-left: 200px;\n\t\t\t\tpadding-right: 150px;\n\t\t\t}\n\t\t\t\n\t\t\t#middle .column{\n\t\t\t\tfloat: left;\n\t\t\t\theight: 200px;\n\t\t\t}\n\t\t\t\n\t\t\t#left{\n\t\t\t\twidth: 200px;\n\t\t\t\tbackground-color: #FFFF00;\n\t\t\t\t/* 4. 向左移动center的宽度 */\n\t\t\t\tmargin-left: -100%;\n\t\t\t\t/* 5. 再向左移动自身宽度，露出被覆盖的center块 */\n\t\t\t\tposition: relative;\n\t\t\t\tright: 200px;\n\t\t\t}\n\t\t\t\n\t\t\t#center{\n\t\t\t\twidth: 100%;\n\t\t\t\tbackground-color: pink;\n\t\t\t}\n\t\t\t\n\t\t\t#right{\n\t\t\t\t/* 3.margin-right让右方元素覆盖自身，达到消除自身宽度的目的，浮动到center上面去 */\n\t\t\t\tmargin-right: -150px;\n\t\t\t\twidth: 150px;\n\t\t\t\tbackground-color: #CCCCCC;\n\t\t\t}\n\t\t\t\n\t\t\t#footer {\n\t\t\t\tbackground-color: #999999;\n\t\t\t}\n\t\t\t\n\t\t\t.clearfix:after{\n\t\t\t\tdisplay: table;\n\t\t\t\tcontent: '';\n\t\t\t\tclear: both;\n\t\t\t}\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<div id=\"header\">header</div>\n\t\t<div id=\"middle\" class=\"clearfix\">\n\t\t\t<div id=\"center\" class=\"column\">\n\t\t\t\tcenter\n\t\t\t</div>\n\t\t\t<div id=\"left\" class=\"column\">\n\t\t\t\tleft\n\t\t\t</div>\n\t\t\t<div id=\"right\" class=\"column\">\n\t\t\t\tright\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"footer\">footer</div>\n\t</body>\n</html>\n\n```\n\n\n#### ask: 双飞翼布局\n#### answer: left 和 right 固定宽度; 中间 main 会随着整体布局宽度的变化而伸缩\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>双飞翼布局</title>\n    <style type=\"text/css\">\n        body {\n            min-width: 550px;\n        }\n        .col {\n\t\t\t/* 1.设置浮动 */\n\t\t\tfloat: left;\n        }\n\n        #main {\n            width: 100%;\n            height: 200px;\n            background-color: #FFC0CB;\n        }\n        #main-wrap {\n\t\t\t/* 2.将 main 左右内边距留出 left 和 right 的宽度 */\n\t\t\tmargin: 0 200px 0 150px;\n        }\n\n        #left {\n            width: 150px;\n            height: 200px;\n            background-color: #FFFF00;\n\t\t\t/* 3.left 向左偏移 main 的宽度 */\n\t\t\tmargin-left: -100%;\n        }\n        #right {\n            width: 200px;\n            height: 200px;\n            background-color: #cccccc;\n\t\t\t/* 4.right 向左偏移自身宽度 */\n\t\t\tmargin-left: -200px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"main\" class=\"col\">\n        <div id=\"main-wrap\">\n            main\n        </div>\n    </div>\n    <div id=\"left\" class=\"col\">\n        left\n    </div>\n    <div id=\"right\" class=\"col\">\n        right\n    </div>\n</body>\n</html>\n```\n\n#### ask: 圣杯布局与双飞翼布局异同比较\n#### answer: \n\n| 维度          | 双飞翼布局                | 圣杯布局                  |\n|---------------|-------------------------|---------------------------|\n| **边距控制**  | 通过外层 `margin` 实现   | 通过内层 `padding` 实现    |\n| **元素偏移**  | 左右均向左偏移           | 左侧左偏移，右侧右偏移      |\n| **视觉重心**  | 主内容居中              | 主内容靠左                  |\n| **适用场景**  | 广告位/侧边栏固定展示    | 两侧内容灵活布局          |\n\n双飞翼：均使用 margin-left，左：向左偏移main的宽度；右：向左偏移自身宽度 \n\n圣杯:左：使用 margin-left（向左偏移main的宽度）; 右：margin-right（取消自身宽度）","slug":"Flex与Grid布局","published":1,"updated":"2025-02-21T08:29:06.884Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5df90009mcuy5k5894ms","content":"<h1 id=\"flex布局与grid布局\"><a class=\"anchor\" href=\"#flex布局与grid布局\">#</a> Flex 布局与 Grid 布局</h1>\n<ol>\n<li>flex 布局又称为弹性布局。</li>\n</ol>\n<ul>\n<li>当我们给一个容器元素设置 display:flex; 时，这个容器就变成了 flex 容器，容器中所有直接子元素就成了容器成员（flex 项目）。</li>\n<li>flex 容器默认存在两根轴：水平的主轴和垂直的交叉轴，flex 布局主要是围绕这两根轴来进行布局的。</li>\n<li>所以 flex 布局相对于 grid 网格布局来说，他更适合一维布局（单行或单列布局）</li>\n</ul>\n<p>父容器属性：flex-direction， justify-content， align-items， align-content<br />\n 子容器属性：order， flex-grow， flex-shrink， flex-basis， align-self</p>\n<ol start=\"2\">\n<li>Grid 布局又称为网格布局。</li>\n</ol>\n<ul>\n<li>当我们给一个元素加上 display:grid; 时，我们称这个元素为容器，元素中所有直接子元素称为子项或项目。</li>\n<li>Grid 布局则是将容器划分成行和列，产生单元格，然后指定项目所在的单元格，可以看作是二维布局。</li>\n<li>划分网格的线，称为 &quot;网格线&quot;（grid line）。水平网格线划分出行，垂直网格线划分出列。</li>\n<li>设为网格布局以后，容器子元素（项目）的 float、display: inline-block、display: table-cell、vertical-align 和 column-* 等设置都将失效。</li>\n</ul>\n<p>父容器属性：grid-template-columns， grid-template-rows， grid-gap， grid-auto-flow， grid-auto-columns， grid-auto-rows， justify-items， align-items， justify-content， align-content<br />\n 子容器属性：grid-column-start， grid-column-end， grid-row-start， grid-row-end， justify-self， align-self</p>\n<ol start=\"3\">\n<li>经典问题</li>\n</ol>\n<h3 id=\"经典问题\"><a class=\"anchor\" href=\"#经典问题\">#</a> 经典问题：</h3>\n<h4 id=\"ask-flex1是什么意思\"><a class=\"anchor\" href=\"#ask-flex1是什么意思\">#</a> ask: flex=1 是什么意思</h4>\n<h4 id=\"answer-flex-1-是-css-flexbox-布局中的一个属性值用于控制弹性容器内子元素的伸缩行为\"><a class=\"anchor\" href=\"#answer-flex-1-是-css-flexbox-布局中的一个属性值用于控制弹性容器内子元素的伸缩行为\">#</a> answer: flex: 1 是 CSS Flexbox 布局中的一个属性值，用于控制弹性容器内子元素的伸缩行为。</h4>\n<p>具体含义<br />\n flex 是 flex-grow、flex-shrink 和 flex-basis 的简写。</p>\n<p>flex: 1 等同于 flex: 1 1 0，表示：</p>\n<p>flex-grow: 1：子元素会按比例分配剩余空间。</p>\n<p>flex-shrink: 1：子元素在空间不足时会缩小。</p>\n<p>flex-basis: 0：子元素的初始大小为 0。</p>\n<p>效果<br />\n子元素会根据 flex-grow 的值分配剩余空间。</p>\n<p>如果多个子元素都有 flex: 1，它们将平分剩余空间。</p>\n<h4 id=\"ask-flex-布局设置水平垂直居中\"><a class=\"anchor\" href=\"#ask-flex-布局设置水平垂直居中\">#</a> ask: flex 布局设置水平垂直居中</h4>\n<h4 id=\"answer-给-flex-容器添加以下三个属性就可以实现子项水平垂直居中\"><a class=\"anchor\" href=\"#answer-给-flex-容器添加以下三个属性就可以实现子项水平垂直居中\">#</a> answer: 给 flex 容器添加以下三个属性，就可以实现子项水平垂直居中：</h4>\n<p>display: flex; // 容器为 flex 布局<br />\n justify-content: center; // 子项在主轴（水平居中）<br />\nalign-items: center; // 子项在交叉轴（垂直居中）</p>\n<h4 id=\"ask-如何解决-flex-布局-7-个元素使用-space-between-最后一行两边分布的问题\"><a class=\"anchor\" href=\"#ask-如何解决-flex-布局-7-个元素使用-space-between-最后一行两边分布的问题\">#</a> ask: 如何解决 flex 布局 7 个元素使用 space-between 最后一行两边分布的问题？</h4>\n<h4 id=\"answer-如果我们每一行显示的个数为-n那我们可以最后一行子项的后面加上-n-2-个-span-元素span-元素的宽度和其它子项元素宽度一样但不用设置高度\"><a class=\"anchor\" href=\"#answer-如果我们每一行显示的个数为-n那我们可以最后一行子项的后面加上-n-2-个-span-元素span-元素的宽度和其它子项元素宽度一样但不用设置高度\">#</a> answer: 如果我们每一行显示的个数为 n，那我们可以最后一行子项的后面加上 n-2 个 span 元素，span 元素的宽度和其它子项元素宽度一样，但不用设置高度。</h4>\n<p>为什么是添加 n-2 个 span 元素呢 ？</p>\n<p>当最后一行只有 1 个子元素时，他会默认靠左，不用处理<br />\n当最后一行子元素正好时，我们就不用关心这个问题。<br />\n所以要去掉这两种情况，只需要加 n-2 个 span 元素就好</p>\n<h4 id=\"ask-flex-实现-8-个元素分两行排列-每行-4-个平均分布-自适应\"><a class=\"anchor\" href=\"#ask-flex-实现-8-个元素分两行排列-每行-4-个平均分布-自适应\">#</a> ask: flex 实现 8 个元素分两行排列 每行 4 个平均分布 - 自适应</h4>\n<h4 id=\"answer-给父元素设置-display-flex-flex-wrap-wrap-子元素设置-flex-1-0-25\"><a class=\"anchor\" href=\"#answer-给父元素设置-display-flex-flex-wrap-wrap-子元素设置-flex-1-0-25\">#</a> answer: 给父元素设置 display: flex; flex-wrap: wrap; 子元素设置 flex: 1 0 25%;</h4>\n<p>给父容器添加如下属性：</p>\n<p>display: flex; //flex 布局<br />\n flex-wrap: wrap; // 换行<br />\n给子项添加如下样式：</p>\n<p>flex-basis: 25%; // 项目占据主轴（父容器宽）的空间。<br />\nflex-grow: 0; // 不放大<br />\n flex-shrink: 0; // 缩小<br />\n以上三个属性，也可以简写在 flex: 0 0 25%;</p>\n<h4 id=\"当容器为-flex-时其子元素没有指定高度时其高度默认为父元素高度\"><a class=\"anchor\" href=\"#当容器为-flex-时其子元素没有指定高度时其高度默认为父元素高度\">#</a> 当容器为 flex 时，其子元素没有指定高度时，其高度默认为父元素高度。</h4>\n<h4 id=\"ask-圣杯布局\"><a class=\"anchor\" href=\"#ask-圣杯布局\">#</a> ask: 圣杯布局</h4>\n<h4 id=\"answer-拥有-header-和-footer中间是主内容行left-和-right-分别固定了宽度center-会随着整体布局宽度的变化而进行伸缩\"><a class=\"anchor\" href=\"#answer-拥有-header-和-footer中间是主内容行left-和-right-分别固定了宽度center-会随着整体布局宽度的变化而进行伸缩\">#</a> answer: 拥有 header 和 footer，中间是主内容行；left 和 right 分别固定了宽度，center 会随着整体布局宽度的变化而进行伸缩</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>圣杯布局<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 550px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token selector\">#header</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #999999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token selector\">#middle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 2. 把中间部分留出左右元素的宽度 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t<span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token selector\">#middle .column</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token selector\">#left</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFFF00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 4. 向左移动 center 的宽度 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 5. 再向左移动自身宽度，露出被覆盖的 center 块 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t<span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t<span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token selector\">#center</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token selector\">#right</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 3.margin-right 让右方元素覆盖自身，达到消除自身宽度的目的，浮动到 center 上面去 */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> -150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #CCCCCC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token selector\">#footer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #999999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token selector\">.clearfix:after</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t<span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\tcenter</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\tleft</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\tright</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>footer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"ask-双飞翼布局\"><a class=\"anchor\" href=\"#ask-双飞翼布局\">#</a> ask: 双飞翼布局</h4>\n<h4 id=\"answer-left-和-right-固定宽度-中间-main-会随着整体布局宽度的变化而伸缩\"><a class=\"anchor\" href=\"#answer-left-和-right-固定宽度-中间-main-会随着整体布局宽度的变化而伸缩\">#</a> answer: left 和 right 固定宽度；中间 main 会随着整体布局宽度的变化而伸缩</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>双飞翼布局<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 550px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 1. 设置浮动 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token selector\">#main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFC0CB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token selector\">#main-wrap</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 2. 将 main 左右内边距留出 left 和 right 的宽度 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 200px 0 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token selector\">#left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFFF00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 3.left 向左偏移 main 的宽度 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token selector\">#right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #cccccc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 4.right 向左偏移自身宽度 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main-wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            main</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        left</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        right</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"ask-圣杯布局与双飞翼布局异同比较\"><a class=\"anchor\" href=\"#ask-圣杯布局与双飞翼布局异同比较\">#</a> ask: 圣杯布局与双飞翼布局异同比较</h4>\n<h4 id=\"answer\"><a class=\"anchor\" href=\"#answer\">#</a> answer:</h4>\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>双飞翼布局</th>\n<th>圣杯布局</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>边距控制</strong></td>\n<td>通过外层  <code>margin</code>  实现</td>\n<td>通过内层  <code>padding</code>  实现</td>\n</tr>\n<tr>\n<td><strong>元素偏移</strong></td>\n<td>左右均向左偏移</td>\n<td>左侧左偏移，右侧右偏移</td>\n</tr>\n<tr>\n<td><strong>视觉重心</strong></td>\n<td>主内容居中</td>\n<td>主内容靠左</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>广告位 / 侧边栏固定展示</td>\n<td>两侧内容灵活布局</td>\n</tr>\n</tbody>\n</table>\n<p>双飞翼：均使用 margin-left，左：向左偏移 main 的宽度；右：向左偏移自身宽度</p>\n<p>圣杯：左：使用 margin-left（向左偏移 main 的宽度）; 右：margin-right（取消自身宽度）</p>\n","length":4130,"excerpt":"","more":"<h1 id=\"flex布局与grid布局\"><a class=\"anchor\" href=\"#flex布局与grid布局\">#</a> Flex 布局与 Grid 布局</h1>\n<ol>\n<li>flex 布局又称为弹性布局。</li>\n</ol>\n<ul>\n<li>当我们给一个容器元素设置 display:flex; 时，这个容器就变成了 flex 容器，容器中所有直接子元素就成了容器成员（flex 项目）。</li>\n<li>flex 容器默认存在两根轴：水平的主轴和垂直的交叉轴，flex 布局主要是围绕这两根轴来进行布局的。</li>\n<li>所以 flex 布局相对于 grid 网格布局来说，他更适合一维布局（单行或单列布局）</li>\n</ul>\n<p>父容器属性：flex-direction， justify-content， align-items， align-content<br />\n 子容器属性：order， flex-grow， flex-shrink， flex-basis， align-self</p>\n<ol start=\"2\">\n<li>Grid 布局又称为网格布局。</li>\n</ol>\n<ul>\n<li>当我们给一个元素加上 display:grid; 时，我们称这个元素为容器，元素中所有直接子元素称为子项或项目。</li>\n<li>Grid 布局则是将容器划分成行和列，产生单元格，然后指定项目所在的单元格，可以看作是二维布局。</li>\n<li>划分网格的线，称为 &quot;网格线&quot;（grid line）。水平网格线划分出行，垂直网格线划分出列。</li>\n<li>设为网格布局以后，容器子元素（项目）的 float、display: inline-block、display: table-cell、vertical-align 和 column-* 等设置都将失效。</li>\n</ul>\n<p>父容器属性：grid-template-columns， grid-template-rows， grid-gap， grid-auto-flow， grid-auto-columns， grid-auto-rows， justify-items， align-items， justify-content， align-content<br />\n 子容器属性：grid-column-start， grid-column-end， grid-row-start， grid-row-end， justify-self， align-self</p>\n<ol start=\"3\">\n<li>经典问题</li>\n</ol>\n<h3 id=\"经典问题\"><a class=\"anchor\" href=\"#经典问题\">#</a> 经典问题：</h3>\n<h4 id=\"ask-flex1是什么意思\"><a class=\"anchor\" href=\"#ask-flex1是什么意思\">#</a> ask: flex=1 是什么意思</h4>\n<h4 id=\"answer-flex-1-是-css-flexbox-布局中的一个属性值用于控制弹性容器内子元素的伸缩行为\"><a class=\"anchor\" href=\"#answer-flex-1-是-css-flexbox-布局中的一个属性值用于控制弹性容器内子元素的伸缩行为\">#</a> answer: flex: 1 是 CSS Flexbox 布局中的一个属性值，用于控制弹性容器内子元素的伸缩行为。</h4>\n<p>具体含义<br />\n flex 是 flex-grow、flex-shrink 和 flex-basis 的简写。</p>\n<p>flex: 1 等同于 flex: 1 1 0，表示：</p>\n<p>flex-grow: 1：子元素会按比例分配剩余空间。</p>\n<p>flex-shrink: 1：子元素在空间不足时会缩小。</p>\n<p>flex-basis: 0：子元素的初始大小为 0。</p>\n<p>效果<br />\n子元素会根据 flex-grow 的值分配剩余空间。</p>\n<p>如果多个子元素都有 flex: 1，它们将平分剩余空间。</p>\n<h4 id=\"ask-flex-布局设置水平垂直居中\"><a class=\"anchor\" href=\"#ask-flex-布局设置水平垂直居中\">#</a> ask: flex 布局设置水平垂直居中</h4>\n<h4 id=\"answer-给-flex-容器添加以下三个属性就可以实现子项水平垂直居中\"><a class=\"anchor\" href=\"#answer-给-flex-容器添加以下三个属性就可以实现子项水平垂直居中\">#</a> answer: 给 flex 容器添加以下三个属性，就可以实现子项水平垂直居中：</h4>\n<p>display: flex; // 容器为 flex 布局<br />\n justify-content: center; // 子项在主轴（水平居中）<br />\nalign-items: center; // 子项在交叉轴（垂直居中）</p>\n<h4 id=\"ask-如何解决-flex-布局-7-个元素使用-space-between-最后一行两边分布的问题\"><a class=\"anchor\" href=\"#ask-如何解决-flex-布局-7-个元素使用-space-between-最后一行两边分布的问题\">#</a> ask: 如何解决 flex 布局 7 个元素使用 space-between 最后一行两边分布的问题？</h4>\n<h4 id=\"answer-如果我们每一行显示的个数为-n那我们可以最后一行子项的后面加上-n-2-个-span-元素span-元素的宽度和其它子项元素宽度一样但不用设置高度\"><a class=\"anchor\" href=\"#answer-如果我们每一行显示的个数为-n那我们可以最后一行子项的后面加上-n-2-个-span-元素span-元素的宽度和其它子项元素宽度一样但不用设置高度\">#</a> answer: 如果我们每一行显示的个数为 n，那我们可以最后一行子项的后面加上 n-2 个 span 元素，span 元素的宽度和其它子项元素宽度一样，但不用设置高度。</h4>\n<p>为什么是添加 n-2 个 span 元素呢 ？</p>\n<p>当最后一行只有 1 个子元素时，他会默认靠左，不用处理<br />\n当最后一行子元素正好时，我们就不用关心这个问题。<br />\n所以要去掉这两种情况，只需要加 n-2 个 span 元素就好</p>\n<h4 id=\"ask-flex-实现-8-个元素分两行排列-每行-4-个平均分布-自适应\"><a class=\"anchor\" href=\"#ask-flex-实现-8-个元素分两行排列-每行-4-个平均分布-自适应\">#</a> ask: flex 实现 8 个元素分两行排列 每行 4 个平均分布 - 自适应</h4>\n<h4 id=\"answer-给父元素设置-display-flex-flex-wrap-wrap-子元素设置-flex-1-0-25\"><a class=\"anchor\" href=\"#answer-给父元素设置-display-flex-flex-wrap-wrap-子元素设置-flex-1-0-25\">#</a> answer: 给父元素设置 display: flex; flex-wrap: wrap; 子元素设置 flex: 1 0 25%;</h4>\n<p>给父容器添加如下属性：</p>\n<p>display: flex; //flex 布局<br />\n flex-wrap: wrap; // 换行<br />\n给子项添加如下样式：</p>\n<p>flex-basis: 25%; // 项目占据主轴（父容器宽）的空间。<br />\nflex-grow: 0; // 不放大<br />\n flex-shrink: 0; // 缩小<br />\n以上三个属性，也可以简写在 flex: 0 0 25%;</p>\n<h4 id=\"当容器为-flex-时其子元素没有指定高度时其高度默认为父元素高度\"><a class=\"anchor\" href=\"#当容器为-flex-时其子元素没有指定高度时其高度默认为父元素高度\">#</a> 当容器为 flex 时，其子元素没有指定高度时，其高度默认为父元素高度。</h4>\n<h4 id=\"ask-圣杯布局\"><a class=\"anchor\" href=\"#ask-圣杯布局\">#</a> ask: 圣杯布局</h4>\n<h4 id=\"answer-拥有-header-和-footer中间是主内容行left-和-right-分别固定了宽度center-会随着整体布局宽度的变化而进行伸缩\"><a class=\"anchor\" href=\"#answer-拥有-header-和-footer中间是主内容行left-和-right-分别固定了宽度center-会随着整体布局宽度的变化而进行伸缩\">#</a> answer: 拥有 header 和 footer，中间是主内容行；left 和 right 分别固定了宽度，center 会随着整体布局宽度的变化而进行伸缩</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>圣杯布局<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 550px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token selector\">#header</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #999999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token selector\">#middle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 2. 把中间部分留出左右元素的宽度 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t<span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token selector\">#middle .column</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token selector\">#left</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFFF00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 4. 向左移动 center 的宽度 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 5. 再向左移动自身宽度，露出被覆盖的 center 块 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t<span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t<span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token selector\">#center</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token selector\">#right</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 3.margin-right 让右方元素覆盖自身，达到消除自身宽度的目的，浮动到 center 上面去 */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> -150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #CCCCCC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token selector\">#footer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #999999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token selector\">.clearfix:after</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t<span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\tcenter</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\tleft</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\tright</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>footer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"ask-双飞翼布局\"><a class=\"anchor\" href=\"#ask-双飞翼布局\">#</a> ask: 双飞翼布局</h4>\n<h4 id=\"answer-left-和-right-固定宽度-中间-main-会随着整体布局宽度的变化而伸缩\"><a class=\"anchor\" href=\"#answer-left-和-right-固定宽度-中间-main-会随着整体布局宽度的变化而伸缩\">#</a> answer: left 和 right 固定宽度；中间 main 会随着整体布局宽度的变化而伸缩</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>双飞翼布局<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 550px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 1. 设置浮动 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token selector\">#main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFC0CB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token selector\">#main-wrap</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 2. 将 main 左右内边距留出 left 和 right 的宽度 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 200px 0 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token selector\">#left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFFF00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 3.left 向左偏移 main 的宽度 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token selector\">#right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #cccccc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 4.right 向左偏移自身宽度 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main-wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            main</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        left</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        right</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"ask-圣杯布局与双飞翼布局异同比较\"><a class=\"anchor\" href=\"#ask-圣杯布局与双飞翼布局异同比较\">#</a> ask: 圣杯布局与双飞翼布局异同比较</h4>\n<h4 id=\"answer\"><a class=\"anchor\" href=\"#answer\">#</a> answer:</h4>\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>双飞翼布局</th>\n<th>圣杯布局</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>边距控制</strong></td>\n<td>通过外层  <code>margin</code>  实现</td>\n<td>通过内层  <code>padding</code>  实现</td>\n</tr>\n<tr>\n<td><strong>元素偏移</strong></td>\n<td>左右均向左偏移</td>\n<td>左侧左偏移，右侧右偏移</td>\n</tr>\n<tr>\n<td><strong>视觉重心</strong></td>\n<td>主内容居中</td>\n<td>主内容靠左</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>广告位 / 侧边栏固定展示</td>\n<td>两侧内容灵活布局</td>\n</tr>\n</tbody>\n</table>\n<p>双飞翼：均使用 margin-left，左：向左偏移 main 的宽度；右：向左偏移自身宽度</p>\n<p>圣杯：左：使用 margin-left（向左偏移 main 的宽度）; 右：margin-right（取消自身宽度）</p>\n"},{"title":"Sass/Scss-css预处理器","date":"2025-01-06T05:47:26.000Z","_content":"\n## Sass/Scss-css预处理器\n\n### Sass的诞生\n\n众所周知 css 并不能算是一们真正意义上的“编程”语言，它本身无法未完成像其它编程语言一样的嵌套、继承、设置变量等工作。\n为了解决 css 的不足，开发者们想到了编写一种对 css 进行预处理的“中间语言”，可以实现一些“编程”语言才有的功能，然后自动编译成 css 供浏览识别，这样既一定程度上弥补了 css 的不足，也无需一种新的语言来代替 css 以供浏览器识别。\n于是 css 预处理语言 SASS 就应运而生了。它诞生于 2007 年，是最早成熟css预处理语言。\n\n### 1. 什么是Sass?\nSass 是 css 的预处理器，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。\n\nSass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表，有助于更好地组织管理样式文件，以及更高效地开发项目。\n\nsass是采用的Ruby语言编写的一款css预处理语言\n\nsass是最早的css预处理语言，有比less更为强大的功能。也是目前企业级开发中应用最多的 CSS 预处理器。\n\n### 2、列出 Sass 的一些常用功能 ？\n常用功能\n\n一个开源的预处理器，被解析为 CSS\n完全兼容 CSS3\n在 CSS 基础上增加变量、嵌套 、混合等功能\n在更少的时间内轻松地编写 CSS 代码\n自定义输出格式\n\n### 3、解释 SCSS 和 Sass 之间的区别 ？\n区别\n\nSass 和 SCSS 其实就是同一种东西，我们平时都称之为 Sass，两者之间不同之处主要有以下两点：\n- 文件扩展名不同，Sass 是以.sass后缀为扩展名，而 SCSS 是以.scss后缀为扩展名。\n- 语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号{}和分号;，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。\n- sass从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的css代码，这一代的sass也被称为scss。\n\n### 4、Sass 中的嵌套规则是什么 ？\n嵌套规则\n\n嵌套是一种将多个逻辑结构相互组合的方法。在 Sass 中, 各种 CSS 规则相互连接。\n\n例如：如果使用多个选择器，则可以在另一个选择器内部使用一个选择器来创建复合选择器。\n\n### 5、Sass 基础知识\n| 名称 |\t描述 |\n| --- | --- |\n| Live Sass Compiler（Sass 编译插件） |\tVScode 编译 sass 的插件 |\n| .scss （sass 文件后缀名） | sass 文件的后缀名之一。在该文件中，可以写花括号{}和分号 |\n| .sass （sass 文件后缀名） | sass 文件的后缀名之一。在该文件中，不能写花括号{}和分号 |\n| &（sass 修饰符） | 修饰符，表示上层标签。如下:```span{&:active{color: red;}}编译后的代码是 span:active { color: red; } ```|\n\n### 6、sass 常用变量\n| 名称 |\t描述 |\n| --- | --- |\n| $ （变量前缀） | 使用$，可以用来定义css变量（变量名可自定义） |\n| lighten() | 颜色变量相关的功能函数，可以把颜色变浅 |\n| darken() | 颜色变量相关的功能函数，可以把颜色变深 |\n| @import | 关键字，可以用来引入 css 变量 |\n| @mixin |\t关键字，用来定义混入的内容 |\n| @include | 关键字，用来引入@mixin 定义的混入 |\n| @content | 关键字。当引入 mixin 时，@include 花括号中的内容可以用该关键字代替 |\n\n","source":"_posts/Sass-Scss-css预处理器.md","raw":"---\ntitle: Sass/Scss-css预处理器\ndate: 2025-01-06 13:47:26\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n## Sass/Scss-css预处理器\n\n### Sass的诞生\n\n众所周知 css 并不能算是一们真正意义上的“编程”语言，它本身无法未完成像其它编程语言一样的嵌套、继承、设置变量等工作。\n为了解决 css 的不足，开发者们想到了编写一种对 css 进行预处理的“中间语言”，可以实现一些“编程”语言才有的功能，然后自动编译成 css 供浏览识别，这样既一定程度上弥补了 css 的不足，也无需一种新的语言来代替 css 以供浏览器识别。\n于是 css 预处理语言 SASS 就应运而生了。它诞生于 2007 年，是最早成熟css预处理语言。\n\n### 1. 什么是Sass?\nSass 是 css 的预处理器，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。\n\nSass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表，有助于更好地组织管理样式文件，以及更高效地开发项目。\n\nsass是采用的Ruby语言编写的一款css预处理语言\n\nsass是最早的css预处理语言，有比less更为强大的功能。也是目前企业级开发中应用最多的 CSS 预处理器。\n\n### 2、列出 Sass 的一些常用功能 ？\n常用功能\n\n一个开源的预处理器，被解析为 CSS\n完全兼容 CSS3\n在 CSS 基础上增加变量、嵌套 、混合等功能\n在更少的时间内轻松地编写 CSS 代码\n自定义输出格式\n\n### 3、解释 SCSS 和 Sass 之间的区别 ？\n区别\n\nSass 和 SCSS 其实就是同一种东西，我们平时都称之为 Sass，两者之间不同之处主要有以下两点：\n- 文件扩展名不同，Sass 是以.sass后缀为扩展名，而 SCSS 是以.scss后缀为扩展名。\n- 语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号{}和分号;，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。\n- sass从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的css代码，这一代的sass也被称为scss。\n\n### 4、Sass 中的嵌套规则是什么 ？\n嵌套规则\n\n嵌套是一种将多个逻辑结构相互组合的方法。在 Sass 中, 各种 CSS 规则相互连接。\n\n例如：如果使用多个选择器，则可以在另一个选择器内部使用一个选择器来创建复合选择器。\n\n### 5、Sass 基础知识\n| 名称 |\t描述 |\n| --- | --- |\n| Live Sass Compiler（Sass 编译插件） |\tVScode 编译 sass 的插件 |\n| .scss （sass 文件后缀名） | sass 文件的后缀名之一。在该文件中，可以写花括号{}和分号 |\n| .sass （sass 文件后缀名） | sass 文件的后缀名之一。在该文件中，不能写花括号{}和分号 |\n| &（sass 修饰符） | 修饰符，表示上层标签。如下:```span{&:active{color: red;}}编译后的代码是 span:active { color: red; } ```|\n\n### 6、sass 常用变量\n| 名称 |\t描述 |\n| --- | --- |\n| $ （变量前缀） | 使用$，可以用来定义css变量（变量名可自定义） |\n| lighten() | 颜色变量相关的功能函数，可以把颜色变浅 |\n| darken() | 颜色变量相关的功能函数，可以把颜色变深 |\n| @import | 关键字，可以用来引入 css 变量 |\n| @mixin |\t关键字，用来定义混入的内容 |\n| @include | 关键字，用来引入@mixin 定义的混入 |\n| @content | 关键字。当引入 mixin 时，@include 花括号中的内容可以用该关键字代替 |\n\n","slug":"Sass-Scss-css预处理器","published":1,"updated":"2025-01-06T08:00:10.830Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfa000dmcuy4ukuebmj","content":"<h2 id=\"sassscss-css预处理器\"><a class=\"anchor\" href=\"#sassscss-css预处理器\">#</a> Sass/Scss-css 预处理器</h2>\n<h3 id=\"sass的诞生\"><a class=\"anchor\" href=\"#sass的诞生\">#</a> Sass 的诞生</h3>\n<p>众所周知 css 并不能算是一们真正意义上的 “编程” 语言，它本身无法未完成像其它编程语言一样的嵌套、继承、设置变量等工作。<br />\n为了解决 css 的不足，开发者们想到了编写一种对 css 进行预处理的 “中间语言”，可以实现一些 “编程” 语言才有的功能，然后自动编译成 css 供浏览识别，这样既一定程度上弥补了 css 的不足，也无需一种新的语言来代替 css 以供浏览器识别。<br />\n于是 css 预处理语言 SASS 就应运而生了。它诞生于 2007 年，是最早成熟 css 预处理语言。</p>\n<h3 id=\"1-什么是sass\"><a class=\"anchor\" href=\"#1-什么是sass\">#</a> 1. 什么是 Sass?</h3>\n<p>Sass 是 css 的预处理器，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。</p>\n<p>Sass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表，有助于更好地组织管理样式文件，以及更高效地开发项目。</p>\n<p>sass 是采用的 Ruby 语言编写的一款 css 预处理语言</p>\n<p>sass 是最早的 css 预处理语言，有比 less 更为强大的功能。也是目前企业级开发中应用最多的 CSS 预处理器。</p>\n<h3 id=\"2-列出-sass-的一些常用功能\"><a class=\"anchor\" href=\"#2-列出-sass-的一些常用功能\">#</a> 2、列出 Sass 的一些常用功能 ？</h3>\n<p>常用功能</p>\n<p>一个开源的预处理器，被解析为 CSS<br />\n 完全兼容 CSS3<br />\n 在 CSS 基础上增加变量、嵌套 、混合等功能<br />\n在更少的时间内轻松地编写 CSS 代码<br />\n自定义输出格式</p>\n<h3 id=\"3-解释-scss-和-sass-之间的区别\"><a class=\"anchor\" href=\"#3-解释-scss-和-sass-之间的区别\">#</a> 3、解释 SCSS 和 Sass 之间的区别 ？</h3>\n<p>区别</p>\n<p>Sass 和 SCSS 其实就是同一种东西，我们平时都称之为 Sass，两者之间不同之处主要有以下两点：</p>\n<ul>\n<li>文件扩展名不同，Sass 是以.sass 后缀为扩展名，而 SCSS 是以.scss 后缀为扩展名。</li>\n<li>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号 {} 和分号；，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。</li>\n<li>sass 从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的 css 代码，这一代的 sass 也被称为 scss。</li>\n</ul>\n<h3 id=\"4-sass-中的嵌套规则是什么\"><a class=\"anchor\" href=\"#4-sass-中的嵌套规则是什么\">#</a> 4、Sass 中的嵌套规则是什么 ？</h3>\n<p>嵌套规则</p>\n<p>嵌套是一种将多个逻辑结构相互组合的方法。在 Sass 中，各种 CSS 规则相互连接。</p>\n<p>例如：如果使用多个选择器，则可以在另一个选择器内部使用一个选择器来创建复合选择器。</p>\n<h3 id=\"5-sass-基础知识\"><a class=\"anchor\" href=\"#5-sass-基础知识\">#</a> 5、Sass 基础知识</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Live Sass Compiler（Sass 编译插件）</td>\n<td>VScode 编译 sass 的插件</td>\n</tr>\n<tr>\n<td>.scss （sass 文件后缀名）</td>\n<td>sass 文件的后缀名之一。在该文件中，可以写花括号 {} 和分号</td>\n</tr>\n<tr>\n<td>.sass （sass 文件后缀名）</td>\n<td>sass 文件的后缀名之一。在该文件中，不能写花括号 {} 和分号</td>\n</tr>\n<tr>\n<td>&amp;（sass 修饰符）</td>\n<td>修饰符，表示上层标签。如下: <code>span&#123;&amp;:active&#123;color: red;&#125;&#125;编译后的代码是 span:active &#123; color: red; &#125; </code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"6-sass-常用变量\"><a class=\"anchor\" href=\"#6-sass-常用变量\">#</a> 6、sass 常用变量</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$ （变量前缀）</td>\n<td>使用 $，可以用来定义 css 变量（变量名可自定义）</td>\n</tr>\n<tr>\n<td>lighten()</td>\n<td>颜色变量相关的功能函数，可以把颜色变浅</td>\n</tr>\n<tr>\n<td>darken()</td>\n<td>颜色变量相关的功能函数，可以把颜色变深</td>\n</tr>\n<tr>\n<td>@import</td>\n<td>关键字，可以用来引入 css 变量</td>\n</tr>\n<tr>\n<td>@mixin</td>\n<td>关键字，用来定义混入的内容</td>\n</tr>\n<tr>\n<td>@include</td>\n<td>关键字，用来引入 @mixin 定义的混入</td>\n</tr>\n<tr>\n<td>@content</td>\n<td>关键字。当引入 mixin 时，@include 花括号中的内容可以用该关键字代替</td>\n</tr>\n</tbody>\n</table>\n","length":1362,"excerpt":"","more":"<h2 id=\"sassscss-css预处理器\"><a class=\"anchor\" href=\"#sassscss-css预处理器\">#</a> Sass/Scss-css 预处理器</h2>\n<h3 id=\"sass的诞生\"><a class=\"anchor\" href=\"#sass的诞生\">#</a> Sass 的诞生</h3>\n<p>众所周知 css 并不能算是一们真正意义上的 “编程” 语言，它本身无法未完成像其它编程语言一样的嵌套、继承、设置变量等工作。<br />\n为了解决 css 的不足，开发者们想到了编写一种对 css 进行预处理的 “中间语言”，可以实现一些 “编程” 语言才有的功能，然后自动编译成 css 供浏览识别，这样既一定程度上弥补了 css 的不足，也无需一种新的语言来代替 css 以供浏览器识别。<br />\n于是 css 预处理语言 SASS 就应运而生了。它诞生于 2007 年，是最早成熟 css 预处理语言。</p>\n<h3 id=\"1-什么是sass\"><a class=\"anchor\" href=\"#1-什么是sass\">#</a> 1. 什么是 Sass?</h3>\n<p>Sass 是 css 的预处理器，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。</p>\n<p>Sass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表，有助于更好地组织管理样式文件，以及更高效地开发项目。</p>\n<p>sass 是采用的 Ruby 语言编写的一款 css 预处理语言</p>\n<p>sass 是最早的 css 预处理语言，有比 less 更为强大的功能。也是目前企业级开发中应用最多的 CSS 预处理器。</p>\n<h3 id=\"2-列出-sass-的一些常用功能\"><a class=\"anchor\" href=\"#2-列出-sass-的一些常用功能\">#</a> 2、列出 Sass 的一些常用功能 ？</h3>\n<p>常用功能</p>\n<p>一个开源的预处理器，被解析为 CSS<br />\n 完全兼容 CSS3<br />\n 在 CSS 基础上增加变量、嵌套 、混合等功能<br />\n在更少的时间内轻松地编写 CSS 代码<br />\n自定义输出格式</p>\n<h3 id=\"3-解释-scss-和-sass-之间的区别\"><a class=\"anchor\" href=\"#3-解释-scss-和-sass-之间的区别\">#</a> 3、解释 SCSS 和 Sass 之间的区别 ？</h3>\n<p>区别</p>\n<p>Sass 和 SCSS 其实就是同一种东西，我们平时都称之为 Sass，两者之间不同之处主要有以下两点：</p>\n<ul>\n<li>文件扩展名不同，Sass 是以.sass 后缀为扩展名，而 SCSS 是以.scss 后缀为扩展名。</li>\n<li>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号 {} 和分号；，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。</li>\n<li>sass 从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的 css 代码，这一代的 sass 也被称为 scss。</li>\n</ul>\n<h3 id=\"4-sass-中的嵌套规则是什么\"><a class=\"anchor\" href=\"#4-sass-中的嵌套规则是什么\">#</a> 4、Sass 中的嵌套规则是什么 ？</h3>\n<p>嵌套规则</p>\n<p>嵌套是一种将多个逻辑结构相互组合的方法。在 Sass 中，各种 CSS 规则相互连接。</p>\n<p>例如：如果使用多个选择器，则可以在另一个选择器内部使用一个选择器来创建复合选择器。</p>\n<h3 id=\"5-sass-基础知识\"><a class=\"anchor\" href=\"#5-sass-基础知识\">#</a> 5、Sass 基础知识</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Live Sass Compiler（Sass 编译插件）</td>\n<td>VScode 编译 sass 的插件</td>\n</tr>\n<tr>\n<td>.scss （sass 文件后缀名）</td>\n<td>sass 文件的后缀名之一。在该文件中，可以写花括号 {} 和分号</td>\n</tr>\n<tr>\n<td>.sass （sass 文件后缀名）</td>\n<td>sass 文件的后缀名之一。在该文件中，不能写花括号 {} 和分号</td>\n</tr>\n<tr>\n<td>&amp;（sass 修饰符）</td>\n<td>修饰符，表示上层标签。如下: <code>span&#123;&amp;:active&#123;color: red;&#125;&#125;编译后的代码是 span:active &#123; color: red; &#125; </code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"6-sass-常用变量\"><a class=\"anchor\" href=\"#6-sass-常用变量\">#</a> 6、sass 常用变量</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$ （变量前缀）</td>\n<td>使用 $，可以用来定义 css 变量（变量名可自定义）</td>\n</tr>\n<tr>\n<td>lighten()</td>\n<td>颜色变量相关的功能函数，可以把颜色变浅</td>\n</tr>\n<tr>\n<td>darken()</td>\n<td>颜色变量相关的功能函数，可以把颜色变深</td>\n</tr>\n<tr>\n<td>@import</td>\n<td>关键字，可以用来引入 css 变量</td>\n</tr>\n<tr>\n<td>@mixin</td>\n<td>关键字，用来定义混入的内容</td>\n</tr>\n<tr>\n<td>@include</td>\n<td>关键字，用来引入 @mixin 定义的混入</td>\n</tr>\n<tr>\n<td>@content</td>\n<td>关键字。当引入 mixin 时，@include 花括号中的内容可以用该关键字代替</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"SEO优化策略总结","date":"2024-09-17T12:45:20.000Z","_content":"# SEO优化全方位解决方案\nSEO代表搜寻引擎最佳化/搜寻引擎优化（英文全名 Search Engine Optimization，简称 SEO），是指通过了解搜寻引擎的自然排名的算法逻辑，以提高目标网站在有关搜寻引擎内排名的方式。\n网站的 SEO 至关重要，它可以让你的网站获得更好的排名和流量，从而提高网站知名度。对于一些盈利的网站，做好 SEO，还可以以低成本提高投资回报率。\n网站 SEO 是长线工作，在做好一些基础的配置之后，更重要的是后期的维护，比如定期更新网站动态文章，不断寻找优质外链资源等。\n\n## 一、TDK 优化\n\nTDK 是\n- Title（页面标题）\n- Meta Description（页面描述）\n- Meta Keywords（页面关键词）\nP.S.但是由于一些原因，各大主流搜索引擎基本都已经大大降低甚至移除了 <keywords> 对排名的影响\n但有些搜索引擎还会参考，如必应，目前 keywords 标签仍然对排名有一定影响。\n\ntitle 标签-网站名片\n当前设置：\n``` html\n<title>OK简历 - AI简历优化，免费在线使用，一键导出打印</title>\n```\n参考竞品：\n``` html\n<title>简历模板_个人简历模板_求职简历模板 - Canva可画</title>\n<title>超级简历WonderCV - HR推荐简历模板,智能简历制作工具,专业中英文简历模板免费下载</title>\n```\n\nMETA 标签-网站信息\n当前设置：\n``` html\n<meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta\n      name=\"keywords\"\n      content=\"OK简历,写简历,求职,找工作,简历模板\"\n    />\n    <meta\n      name=\"description\"\n      content=\"从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。\"\n    />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <meta name=\"author\" content=\"霖承科技\" />\n    <meta name=\"robots\" content=\"index, follow\" />\n    <meta name=\"googlebot\" content=\"index, follow\" />\n    <meta name=\"application-name\" content=\"OK简历\" />\n```\nrobots：用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引\n\nOpen Graph 协议标签\nOpen Graph 协议标签通过 OG Tags （OG 标签）实现的，它属于 Meta 标签的一种，可以用来标识网页类型和元素，让分享到社交网络的内容可以被有效的抓取，还可以控制分享的网站卡片呈现我们想要显示的内容。\n``` html\n<!-- 社交媒体分享展示优化 -->\n    <meta property=\"og:title\" content=\"OK简历\">\n    <meta property=\"og:description\" content=\"从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:url\" content=\"https://okjob.linchance.com\">\n    <meta property=\"og:author\" content=\"霖承科技\">\n```\n\n关于网站关键词\n- keywords 关键词数量控制在 4 个左右，避免关键词堆砌；\n- 合理选择长尾关键词（长尾关键词一般是 2-3 个词组成。例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装等），长尾关键词虽然相对核心关键词的搜索量小很多，但是它带来的流量精准度非常高，后期的转化效果更好；\n- 避免使用过于专业的词汇。过于专业的词汇的搜索量较低；\n- 减少使用热门关键词，要选择合适的关键词（搜索量大、转化率高、定位精准）\n当前设置：\n``` html\n<meta\n      name=\"keywords\"\n      content=\"OK简历,写简历,求职,找工作,简历模板\"\n    />\n```\n参考竞品：\n``` html\n<meta data-n-head=\"true\" name=\"keywords\" content=\"简历制作,个人简历模板,写简历,简历网\">\n<meta data-n-head=\"ssr\" property=\"og:keywords\" content=\"简历模板,简历,简历模板免费下载,简历制作,英文简历,超级简历\">\n```\n关于网站描述\n- Description（页面描述）的长度最好控制在 120～200 个字符；\n- Description 要让用户知道将从页面中获得什么；\n- 在 Description 中合理使用行动号召（CTA）用语（例如“了解更多”、“立即获取”、“免费试用”等等……）；\n- Description 应该包含页面的核心关键字；\n- 为每个页面创建独一无二的 Description；\n\n当前设置：\n``` html\n<meta\n      name=\"description\"\n      content=\"从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。\"\n    />\n```\n参考竞品：\n``` html\n<meta data-n-head=\"true\" name=\"description\"\n        content=\"全民简历网是专业的在线简历制作、简历模板下载网站。提供大量原创设计的个人简历模板，包括各种职业和大学生简历模板，让求职者快速制作出高质量简历，服务超800万用户！\">\n```\n\n## 二、网站质量\n### 网站加载速度\n网站性能是会影响到网站的 SEO 排名的，原因可想而知：\n- 网站卡顿势必会大大降低网站的用户留存率；\n- 如果网站加载缓慢，搜索引擎就会认为该网站对用户不友好，从而将其排名下降；\n- 影响搜索引擎蜘蛛的爬取频率；\n### HTML 语义化\n语义化是指内容的结构化（内容语义化），选择合适的标签（代码语义化）。\n 杜绝通篇 div，HTML 语义化不仅便于开发者阅读，还有利于浏览器爬虫的解析，对 seo 优化很有帮助。\n 所以我们在开发时要遵循语义化的开发规范，根据页面内容，选择合适的标签，优化代码，使得网页结构更加清晰。\n\n相比其他标签而言，h 标签在页面中的权重非常高，所以不要滥用 h 标签。要利用 h 标签告诉浏览器网页的核心内容！例如：\nh1 写主标题，通常与网页 title 标签一致，可以在页面展示，一个页面最好只有一个 h1 标签。\nh2 写次级标题，h3-h6 以此类推，细分网页结构。\n\n### strong、em 标签\n`<b>`和`<strong>`标签都是加粗文字的标签，其二者的区别就在于：`<b>`是为了加粗而加粗的，`<strong>`是为了强调而加粗的。\n 同样斜体标签` <i> `和 `<em> `也有着相同的区别，`<em>`有强调效果。\n 推荐使用`<strong> ` `<em>`，而不是 `<b>` `<i>` 等，单纯修改加粗等样式可以用 css 实现。\n\n 当前设置：\n ``` html\n<style>\n      .seo-header {\n        position: absolute;\n        display: none;\n      }\n    </style>\n  </head>\n  <body>\n    <h1 class=\"seo-header\">\n      <a href=\"https://https://okjob.linchance.com\">OK简历网是专业的在线简历制作、AI辅写优化、简历模板下载网站，提供免费的简历创建、编辑、一键导出服务，让求职者快速制作出高质量简历！</a>\n    </h1>\n    <noscript>\n      <strong>OK简历 - 从一份OK的简历开始，笑傲职场</strong>\n    </noscript>\n    <div id=\"app\"></div>\n  </body>\n</html>\n```\n\n### ul ol li 标签\n 这三个都是列表标签，ul 表示无序列表（unordered list），ol 表示有序列表（oredr list）， li 表示列表项（list item）。从网站优化的角度来说，在罗列多个词条的时候，最好使用列表标签，例如 使用 ul li 布局网站导航条对搜索引擎蜘蛛更加友好，也是影响搜索引擎排名的因素之一。\n### img 标签\n img 图片标签的 alt 属性是图片的替换文字。\n alt 属性可以帮助蜘蛛快速理解图片的具体内容，并且在网络故障时，仍然能够爬取到图片的内容信息。\n\nindex.html 里暂时无列表标签和图片标签，如有或后续有添加需求，记得按照上面规范进行。\n\n### 其他注意点\n- SEO 的禁忌之一就是用 JS 输出重要的内容。爬虫不会读取 JS 格式的内容，所以重要的内容必须是 HTML 格式，这也就是为什么现在流行的 spa 框架都不利于 SEO 的原因之一；\n- 尽量不使用 iFrame。因为搜索引擎不会抓取 iframe 内的内容，所以重要内容绝对不能放在 iframe 中；\n- 如果需要截取文字，尽量用 css 实现，保证文字可以完整呈现给搜索引擎。\n\n## 三、SEO 手段\n### 各搜索引擎提交站点收录\n在各个搜索引擎的站点平台提交网站收录可以缩短爬虫发现网站链接时间，加快爬虫抓取速度。\n- 百度站长资源平台\nziyuan.baidu.com/?castk=LTE%…\n- 谷歌网站管理员工具\nwww.google.cn/webmasters/\n- 搜狗站长平台\nzhanzhang.sogou.com/\n- 360 站长平台\nzhanzhang.so.com/\n- 头条搜索站长平台\nzhanzhang.toutiao.com/\n- 必应网站管理员工具\nwww.bing.com/webmaster/i…\n点击以上链接，站长可以查看网站的各项参数表现。\n2024.09.04：尝试百度站长管理平台认证失败，后续如还有需要可以再回来尝试\n\n### sitemap 站点地图\nSitemap，即站点地图，它是一个网站的全部 URL 列表，同时可以列出每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等）。它可以为搜索引擎的蜘蛛进行导航，更快的找到全站中的所有链接，更全面的获取网站信息。为了保证链接的全面性和准确性，应该自动不定期更新 sitemap 站点地图。\n一般网站的 sitemap 文件都会有以下两种格式：\nsitemap.xml，这是大部分搜索引擎所使用的用于提交网站网址的 XML 文件；\nsitemap.html，这是可直接放在网站上用于用户访问或搜索引擎快速找到全站链接的页面（每页最多 500 条，自动分页）；\n\n网上有很多生成 sitemap 文件的站长工具，例如：\nsitemap.zhetao.com/\ntools.bugscaner.com/sitemapspid…\n\n生成的 sitemap 文件一般放在项目根目录下，然后可以在各个搜索引擎的站点平台提交 sitemap.xml 文件。\n\n当前设置：\n在 xml.sitemap 网站制作 sitemap，sitemap.xml 文件暂时保存在我本地，如需提交或放在项目根目录下，上服务器前要说\n\n### robots 文件\n\n蜘蛛在访问一个网站时，会首先会检查该网站的根域下是否有一个叫做 robots.txt 的纯文本文件，这个文件用于指定 spider 在您网站上的抓取范围。\n如果你有哪些页面不想被蜘蛛访问，则可以通过 robots 文件告诉蜘蛛不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。\nrobots 文件内容语法：\n此文件主要由两种键值对组成：\n\nUser-agent:  该项的值用于描述搜索引擎蜘蛛的名字。如果该项的值设为*，则该协议对任何机器人均有效。\nDisallow:  该项的值用于描述不希望被访问到的一个 URL，一个目录或者整个网站。以 Disallow 开头的 URL 均不会被搜索引擎蜘蛛访问到。任何一条 Disallow 记录为空，说明该网站的所有部分都允许被访问。\n\n参考： 掘金的 robots 文件：https://juejin.cn/robots.txt\n\nrobots 文件使用方法：\n使用方法非常简单，只需要将 robots.txt 文件上传到网站根目录就行了，注意文件名一定要全小写。当成功上传后，通常在浏览器中访问域名/robots.txt 就可以查看到文件。\n\n当前设置：\n书写 robots.txt 文件，该文件暂时保存在我本地。如需提交或放在项目根目录下，上服务器前要说明\n\n### 内链｜外链\n在搜索引擎优化领域，有着内链为王、外链为皇的说法，它们都能对提升网站排名有所帮助，尤其是外链的建设。 先来区分下网站内链和外链：\n内链：从自己网站的一个页面指向另外一个页面。通过内链让网站内部形成网状结构，让蜘蛛的广度和深度达到最大化。\n外链：在别的网站导入自己网站的链接。通过外链提升网站权重，提高网站流量。外链有以下几个好处：\n- 提升网站权重\n- 能够吸引蜘蛛来抓取网站\n- 提升关键词排名\n- 提升网址或品牌的曝光度\n- 给网站带来流量\n外链能够为我们的网站带来流量，所以外链数量越多越好是必然的。但是，一定要注意外链的质量，例如对方网站没有被搜索引擎收录，对方网站性能过差，死链等，这些低质量的外链反而会影响到本站的排名。\n另外，在添加内链外链的过程中，要注意在 a 标签中对 nofollow 和·external 属性的使用。\n\n当前设置：\n<!-- 引入外部链接，起引流效果，spider无需跟踪 -->\n    <a rel=\"nofollow\" href=\"http://www.baidu.com/\">百度</a>\n    <a rel=\"nofollow\" href=\"https://www.google.com/\">谷歌</a>\n    <a rel=\"nofollow\" href=\"https://cn.bing.com/\">必应</a>\n  \n带有 rel=nofollow 属性的链接会告诉搜索引擎忽略这个链接。阻止搜索引擎对该页面进行追踪。从而避免权重分散。这个属性只对搜索引擎有效，这是一个纯粹的 SEO 优化标签。\n\n\n## Canonical URL（网址规范化）\n<!-- 指定规范链接 -->\n    <link rel=\"canonical\" href=\"https://okjob.linchance.com\">\n\n网页规范化的两个好处：\n- 解决网站由于网站 url 链接不一样，但网页内容是一样而造成搜索引擎重复收录的问题；\n- 有利于 URL 权重集中。\n解决方法：\n在页面的 head 标签中，加入以下 canonical 标签，指定规范化网址。\n使用 HTTPS\n谷歌曾发公告表示，使用安全加密协议（HTTPS），是搜索引擎排名的一项参考因素。\n所以，在域名相同情况下，HTTPS 站点比 HTTP 站点，能获得更好的排名。\n\n## SSR 服务端渲染（ Server-Side Rendering）\n当下 SPA 应用盛行，虽然它有用户体验好，服务器压力小等优点，但是同时也暴露出很多问题。例如首屏加载较慢，不利于 SEO 等（因为这些 spa 应用内容是由 js 动态更新的，蜘蛛无法爬取网页内容）。\n而 ssr 的出现，很好的解决了 SEO 的问题。因为服务端渲染是指指客户端向服务器发出请求，然后运行时动态生成 html 内容并返回给客户端。所以客户端可以获取到完整的页面内容。\n目前流行的 Vue/React 前端框架，都有 SSR 的解决方案：\nVue 的 nuxt.js\nReact 的 next.js\n对于 Vue/React 来说，对于它们的 SSR/SSG 框架出现的原因就是主要就是 SEO 和首屏加载速度。\n\n当前设置：\n项目一开始并没有用 Nuxt.js 框架，所以改造 SSR 是一项十分重大艰巨的工程，暂时不考虑\n\n### 预渲染 prerender-spa-plugin\n如果只想改善部分页面的 SEO，可以不采用 SSR 的解决方案，毕竟无论是 next.js，还是 nuxt.js，都是有一定学习成本的。那么可以使用 prerender-spa-plugin 等插件来实现预渲染页面，在构建时就针对特定的路有生成静态的 html 文件。\n\n当前设置：\n准备尝试，因看到较近日期的言论提到一些插件包含上面提到的插件已不再维护，需要再考察看看哪些更新的方法可以使用。","source":"_posts/SEO优化策略总结.md","raw":"---\ntitle: SEO优化策略总结\ndate: 2024-09-17 20:45:20\ncategories:\n- [前端开发]\ntags:\n- [前端开发]\n---\n# SEO优化全方位解决方案\nSEO代表搜寻引擎最佳化/搜寻引擎优化（英文全名 Search Engine Optimization，简称 SEO），是指通过了解搜寻引擎的自然排名的算法逻辑，以提高目标网站在有关搜寻引擎内排名的方式。\n网站的 SEO 至关重要，它可以让你的网站获得更好的排名和流量，从而提高网站知名度。对于一些盈利的网站，做好 SEO，还可以以低成本提高投资回报率。\n网站 SEO 是长线工作，在做好一些基础的配置之后，更重要的是后期的维护，比如定期更新网站动态文章，不断寻找优质外链资源等。\n\n## 一、TDK 优化\n\nTDK 是\n- Title（页面标题）\n- Meta Description（页面描述）\n- Meta Keywords（页面关键词）\nP.S.但是由于一些原因，各大主流搜索引擎基本都已经大大降低甚至移除了 <keywords> 对排名的影响\n但有些搜索引擎还会参考，如必应，目前 keywords 标签仍然对排名有一定影响。\n\ntitle 标签-网站名片\n当前设置：\n``` html\n<title>OK简历 - AI简历优化，免费在线使用，一键导出打印</title>\n```\n参考竞品：\n``` html\n<title>简历模板_个人简历模板_求职简历模板 - Canva可画</title>\n<title>超级简历WonderCV - HR推荐简历模板,智能简历制作工具,专业中英文简历模板免费下载</title>\n```\n\nMETA 标签-网站信息\n当前设置：\n``` html\n<meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta\n      name=\"keywords\"\n      content=\"OK简历,写简历,求职,找工作,简历模板\"\n    />\n    <meta\n      name=\"description\"\n      content=\"从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。\"\n    />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <meta name=\"author\" content=\"霖承科技\" />\n    <meta name=\"robots\" content=\"index, follow\" />\n    <meta name=\"googlebot\" content=\"index, follow\" />\n    <meta name=\"application-name\" content=\"OK简历\" />\n```\nrobots：用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引\n\nOpen Graph 协议标签\nOpen Graph 协议标签通过 OG Tags （OG 标签）实现的，它属于 Meta 标签的一种，可以用来标识网页类型和元素，让分享到社交网络的内容可以被有效的抓取，还可以控制分享的网站卡片呈现我们想要显示的内容。\n``` html\n<!-- 社交媒体分享展示优化 -->\n    <meta property=\"og:title\" content=\"OK简历\">\n    <meta property=\"og:description\" content=\"从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:url\" content=\"https://okjob.linchance.com\">\n    <meta property=\"og:author\" content=\"霖承科技\">\n```\n\n关于网站关键词\n- keywords 关键词数量控制在 4 个左右，避免关键词堆砌；\n- 合理选择长尾关键词（长尾关键词一般是 2-3 个词组成。例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装等），长尾关键词虽然相对核心关键词的搜索量小很多，但是它带来的流量精准度非常高，后期的转化效果更好；\n- 避免使用过于专业的词汇。过于专业的词汇的搜索量较低；\n- 减少使用热门关键词，要选择合适的关键词（搜索量大、转化率高、定位精准）\n当前设置：\n``` html\n<meta\n      name=\"keywords\"\n      content=\"OK简历,写简历,求职,找工作,简历模板\"\n    />\n```\n参考竞品：\n``` html\n<meta data-n-head=\"true\" name=\"keywords\" content=\"简历制作,个人简历模板,写简历,简历网\">\n<meta data-n-head=\"ssr\" property=\"og:keywords\" content=\"简历模板,简历,简历模板免费下载,简历制作,英文简历,超级简历\">\n```\n关于网站描述\n- Description（页面描述）的长度最好控制在 120～200 个字符；\n- Description 要让用户知道将从页面中获得什么；\n- 在 Description 中合理使用行动号召（CTA）用语（例如“了解更多”、“立即获取”、“免费试用”等等……）；\n- Description 应该包含页面的核心关键字；\n- 为每个页面创建独一无二的 Description；\n\n当前设置：\n``` html\n<meta\n      name=\"description\"\n      content=\"从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。\"\n    />\n```\n参考竞品：\n``` html\n<meta data-n-head=\"true\" name=\"description\"\n        content=\"全民简历网是专业的在线简历制作、简历模板下载网站。提供大量原创设计的个人简历模板，包括各种职业和大学生简历模板，让求职者快速制作出高质量简历，服务超800万用户！\">\n```\n\n## 二、网站质量\n### 网站加载速度\n网站性能是会影响到网站的 SEO 排名的，原因可想而知：\n- 网站卡顿势必会大大降低网站的用户留存率；\n- 如果网站加载缓慢，搜索引擎就会认为该网站对用户不友好，从而将其排名下降；\n- 影响搜索引擎蜘蛛的爬取频率；\n### HTML 语义化\n语义化是指内容的结构化（内容语义化），选择合适的标签（代码语义化）。\n 杜绝通篇 div，HTML 语义化不仅便于开发者阅读，还有利于浏览器爬虫的解析，对 seo 优化很有帮助。\n 所以我们在开发时要遵循语义化的开发规范，根据页面内容，选择合适的标签，优化代码，使得网页结构更加清晰。\n\n相比其他标签而言，h 标签在页面中的权重非常高，所以不要滥用 h 标签。要利用 h 标签告诉浏览器网页的核心内容！例如：\nh1 写主标题，通常与网页 title 标签一致，可以在页面展示，一个页面最好只有一个 h1 标签。\nh2 写次级标题，h3-h6 以此类推，细分网页结构。\n\n### strong、em 标签\n`<b>`和`<strong>`标签都是加粗文字的标签，其二者的区别就在于：`<b>`是为了加粗而加粗的，`<strong>`是为了强调而加粗的。\n 同样斜体标签` <i> `和 `<em> `也有着相同的区别，`<em>`有强调效果。\n 推荐使用`<strong> ` `<em>`，而不是 `<b>` `<i>` 等，单纯修改加粗等样式可以用 css 实现。\n\n 当前设置：\n ``` html\n<style>\n      .seo-header {\n        position: absolute;\n        display: none;\n      }\n    </style>\n  </head>\n  <body>\n    <h1 class=\"seo-header\">\n      <a href=\"https://https://okjob.linchance.com\">OK简历网是专业的在线简历制作、AI辅写优化、简历模板下载网站，提供免费的简历创建、编辑、一键导出服务，让求职者快速制作出高质量简历！</a>\n    </h1>\n    <noscript>\n      <strong>OK简历 - 从一份OK的简历开始，笑傲职场</strong>\n    </noscript>\n    <div id=\"app\"></div>\n  </body>\n</html>\n```\n\n### ul ol li 标签\n 这三个都是列表标签，ul 表示无序列表（unordered list），ol 表示有序列表（oredr list）， li 表示列表项（list item）。从网站优化的角度来说，在罗列多个词条的时候，最好使用列表标签，例如 使用 ul li 布局网站导航条对搜索引擎蜘蛛更加友好，也是影响搜索引擎排名的因素之一。\n### img 标签\n img 图片标签的 alt 属性是图片的替换文字。\n alt 属性可以帮助蜘蛛快速理解图片的具体内容，并且在网络故障时，仍然能够爬取到图片的内容信息。\n\nindex.html 里暂时无列表标签和图片标签，如有或后续有添加需求，记得按照上面规范进行。\n\n### 其他注意点\n- SEO 的禁忌之一就是用 JS 输出重要的内容。爬虫不会读取 JS 格式的内容，所以重要的内容必须是 HTML 格式，这也就是为什么现在流行的 spa 框架都不利于 SEO 的原因之一；\n- 尽量不使用 iFrame。因为搜索引擎不会抓取 iframe 内的内容，所以重要内容绝对不能放在 iframe 中；\n- 如果需要截取文字，尽量用 css 实现，保证文字可以完整呈现给搜索引擎。\n\n## 三、SEO 手段\n### 各搜索引擎提交站点收录\n在各个搜索引擎的站点平台提交网站收录可以缩短爬虫发现网站链接时间，加快爬虫抓取速度。\n- 百度站长资源平台\nziyuan.baidu.com/?castk=LTE%…\n- 谷歌网站管理员工具\nwww.google.cn/webmasters/\n- 搜狗站长平台\nzhanzhang.sogou.com/\n- 360 站长平台\nzhanzhang.so.com/\n- 头条搜索站长平台\nzhanzhang.toutiao.com/\n- 必应网站管理员工具\nwww.bing.com/webmaster/i…\n点击以上链接，站长可以查看网站的各项参数表现。\n2024.09.04：尝试百度站长管理平台认证失败，后续如还有需要可以再回来尝试\n\n### sitemap 站点地图\nSitemap，即站点地图，它是一个网站的全部 URL 列表，同时可以列出每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等）。它可以为搜索引擎的蜘蛛进行导航，更快的找到全站中的所有链接，更全面的获取网站信息。为了保证链接的全面性和准确性，应该自动不定期更新 sitemap 站点地图。\n一般网站的 sitemap 文件都会有以下两种格式：\nsitemap.xml，这是大部分搜索引擎所使用的用于提交网站网址的 XML 文件；\nsitemap.html，这是可直接放在网站上用于用户访问或搜索引擎快速找到全站链接的页面（每页最多 500 条，自动分页）；\n\n网上有很多生成 sitemap 文件的站长工具，例如：\nsitemap.zhetao.com/\ntools.bugscaner.com/sitemapspid…\n\n生成的 sitemap 文件一般放在项目根目录下，然后可以在各个搜索引擎的站点平台提交 sitemap.xml 文件。\n\n当前设置：\n在 xml.sitemap 网站制作 sitemap，sitemap.xml 文件暂时保存在我本地，如需提交或放在项目根目录下，上服务器前要说\n\n### robots 文件\n\n蜘蛛在访问一个网站时，会首先会检查该网站的根域下是否有一个叫做 robots.txt 的纯文本文件，这个文件用于指定 spider 在您网站上的抓取范围。\n如果你有哪些页面不想被蜘蛛访问，则可以通过 robots 文件告诉蜘蛛不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。\nrobots 文件内容语法：\n此文件主要由两种键值对组成：\n\nUser-agent:  该项的值用于描述搜索引擎蜘蛛的名字。如果该项的值设为*，则该协议对任何机器人均有效。\nDisallow:  该项的值用于描述不希望被访问到的一个 URL，一个目录或者整个网站。以 Disallow 开头的 URL 均不会被搜索引擎蜘蛛访问到。任何一条 Disallow 记录为空，说明该网站的所有部分都允许被访问。\n\n参考： 掘金的 robots 文件：https://juejin.cn/robots.txt\n\nrobots 文件使用方法：\n使用方法非常简单，只需要将 robots.txt 文件上传到网站根目录就行了，注意文件名一定要全小写。当成功上传后，通常在浏览器中访问域名/robots.txt 就可以查看到文件。\n\n当前设置：\n书写 robots.txt 文件，该文件暂时保存在我本地。如需提交或放在项目根目录下，上服务器前要说明\n\n### 内链｜外链\n在搜索引擎优化领域，有着内链为王、外链为皇的说法，它们都能对提升网站排名有所帮助，尤其是外链的建设。 先来区分下网站内链和外链：\n内链：从自己网站的一个页面指向另外一个页面。通过内链让网站内部形成网状结构，让蜘蛛的广度和深度达到最大化。\n外链：在别的网站导入自己网站的链接。通过外链提升网站权重，提高网站流量。外链有以下几个好处：\n- 提升网站权重\n- 能够吸引蜘蛛来抓取网站\n- 提升关键词排名\n- 提升网址或品牌的曝光度\n- 给网站带来流量\n外链能够为我们的网站带来流量，所以外链数量越多越好是必然的。但是，一定要注意外链的质量，例如对方网站没有被搜索引擎收录，对方网站性能过差，死链等，这些低质量的外链反而会影响到本站的排名。\n另外，在添加内链外链的过程中，要注意在 a 标签中对 nofollow 和·external 属性的使用。\n\n当前设置：\n<!-- 引入外部链接，起引流效果，spider无需跟踪 -->\n    <a rel=\"nofollow\" href=\"http://www.baidu.com/\">百度</a>\n    <a rel=\"nofollow\" href=\"https://www.google.com/\">谷歌</a>\n    <a rel=\"nofollow\" href=\"https://cn.bing.com/\">必应</a>\n  \n带有 rel=nofollow 属性的链接会告诉搜索引擎忽略这个链接。阻止搜索引擎对该页面进行追踪。从而避免权重分散。这个属性只对搜索引擎有效，这是一个纯粹的 SEO 优化标签。\n\n\n## Canonical URL（网址规范化）\n<!-- 指定规范链接 -->\n    <link rel=\"canonical\" href=\"https://okjob.linchance.com\">\n\n网页规范化的两个好处：\n- 解决网站由于网站 url 链接不一样，但网页内容是一样而造成搜索引擎重复收录的问题；\n- 有利于 URL 权重集中。\n解决方法：\n在页面的 head 标签中，加入以下 canonical 标签，指定规范化网址。\n使用 HTTPS\n谷歌曾发公告表示，使用安全加密协议（HTTPS），是搜索引擎排名的一项参考因素。\n所以，在域名相同情况下，HTTPS 站点比 HTTP 站点，能获得更好的排名。\n\n## SSR 服务端渲染（ Server-Side Rendering）\n当下 SPA 应用盛行，虽然它有用户体验好，服务器压力小等优点，但是同时也暴露出很多问题。例如首屏加载较慢，不利于 SEO 等（因为这些 spa 应用内容是由 js 动态更新的，蜘蛛无法爬取网页内容）。\n而 ssr 的出现，很好的解决了 SEO 的问题。因为服务端渲染是指指客户端向服务器发出请求，然后运行时动态生成 html 内容并返回给客户端。所以客户端可以获取到完整的页面内容。\n目前流行的 Vue/React 前端框架，都有 SSR 的解决方案：\nVue 的 nuxt.js\nReact 的 next.js\n对于 Vue/React 来说，对于它们的 SSR/SSG 框架出现的原因就是主要就是 SEO 和首屏加载速度。\n\n当前设置：\n项目一开始并没有用 Nuxt.js 框架，所以改造 SSR 是一项十分重大艰巨的工程，暂时不考虑\n\n### 预渲染 prerender-spa-plugin\n如果只想改善部分页面的 SEO，可以不采用 SSR 的解决方案，毕竟无论是 next.js，还是 nuxt.js，都是有一定学习成本的。那么可以使用 prerender-spa-plugin 等插件来实现预渲染页面，在构建时就针对特定的路有生成静态的 html 文件。\n\n当前设置：\n准备尝试，因看到较近日期的言论提到一些插件包含上面提到的插件已不再维护，需要再考察看看哪些更新的方法可以使用。","slug":"SEO优化策略总结","published":1,"updated":"2025-01-05T11:56:08.626Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfa000emcuy2naabv83","content":"<h1 id=\"seo优化全方位解决方案\"><a class=\"anchor\" href=\"#seo优化全方位解决方案\">#</a> SEO 优化全方位解决方案</h1>\n<p>SEO 代表搜寻引擎最佳化 / 搜寻引擎优化（英文全名 Search Engine Optimization，简称 SEO），是指通过了解搜寻引擎的自然排名的算法逻辑，以提高目标网站在有关搜寻引擎内排名的方式。<br />\n网站的 SEO 至关重要，它可以让你的网站获得更好的排名和流量，从而提高网站知名度。对于一些盈利的网站，做好 SEO，还可以以低成本提高投资回报率。<br />\n网站 SEO 是长线工作，在做好一些基础的配置之后，更重要的是后期的维护，比如定期更新网站动态文章，不断寻找优质外链资源等。</p>\n<h2 id=\"一-tdk-优化\"><a class=\"anchor\" href=\"#一-tdk-优化\">#</a> 一、TDK 优化</h2>\n<p>TDK 是</p>\n<ul>\n<li>Title（页面标题）</li>\n<li>Meta Description（页面描述）</li>\n<li>Meta Keywords（页面关键词）<br />\nP.S. 但是由于一些原因，各大主流搜索引擎基本都已经大大降低甚至移除了 <keywords> 对排名的影响<br />\n但有些搜索引擎还会参考，如必应，目前 keywords 标签仍然对排名有一定影响。</li>\n</ul>\n<p>title 标签 - 网站名片<br />\n当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>OK简历 - AI简历优化，免费在线使用，一键导出打印<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>简历模板_个人简历模板_求职简历模板 - Canva可画<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>超级简历WonderCV - HR推荐简历模板,智能简历制作工具,专业中英文简历模板免费下载<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>META 标签 - 网站信息<br />\n当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历,写简历,求职,找工作,简历模板<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>霖承科技<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>robots<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index, follow<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>googlebot<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index, follow<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application-name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>robots：用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引</p>\n<p>Open Graph 协议标签<br />\n Open Graph 协议标签通过 OG Tags （OG 标签）实现的，它属于 Meta 标签的一种，可以用来标识网页类型和元素，让分享到社交网络的内容可以被有效的抓取，还可以控制分享的网站卡片呈现我们想要显示的内容。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 社交媒体分享展示优化 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>website<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://okjob.linchance.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>霖承科技<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>关于网站关键词</p>\n<ul>\n<li>keywords 关键词数量控制在 4 个左右，避免关键词堆砌；</li>\n<li>合理选择长尾关键词（长尾关键词一般是 2-3 个词组成。例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装等），长尾关键词虽然相对核心关键词的搜索量小很多，但是它带来的流量精准度非常高，后期的转化效果更好；</li>\n<li>避免使用过于专业的词汇。过于专业的词汇的搜索量较低；</li>\n<li>减少使用热门关键词，要选择合适的关键词（搜索量大、转化率高、定位精准）<br />\n当前设置：</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历,写简历,求职,找工作,简历模板<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>简历制作,个人简历模板,写简历,简历网<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ssr<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>简历模板,简历,简历模板免费下载,简历制作,英文简历,超级简历<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>关于网站描述</p>\n<ul>\n<li>Description（页面描述）的长度最好控制在 120～200 个字符；</li>\n<li>Description 要让用户知道将从页面中获得什么；</li>\n<li>在 Description 中合理使用行动号召（CTA）用语（例如 “了解更多”、“立即获取”、“免费试用” 等等……）；</li>\n<li>Description 应该包含页面的核心关键字；</li>\n<li>为每个页面创建独一无二的 Description；</li>\n</ul>\n<p>当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>全民简历网是专业的在线简历制作、简历模板下载网站。提供大量原创设计的个人简历模板，包括各种职业和大学生简历模板，让求职者快速制作出高质量简历，服务超800万用户！<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"二-网站质量\"><a class=\"anchor\" href=\"#二-网站质量\">#</a> 二、网站质量</h2>\n<h3 id=\"网站加载速度\"><a class=\"anchor\" href=\"#网站加载速度\">#</a> 网站加载速度</h3>\n<p>网站性能是会影响到网站的 SEO 排名的，原因可想而知：</p>\n<ul>\n<li>网站卡顿势必会大大降低网站的用户留存率；</li>\n<li>如果网站加载缓慢，搜索引擎就会认为该网站对用户不友好，从而将其排名下降；</li>\n<li>影响搜索引擎蜘蛛的爬取频率；</li>\n</ul>\n<h3 id=\"html-语义化\"><a class=\"anchor\" href=\"#html-语义化\">#</a> HTML 语义化</h3>\n<p>语义化是指内容的结构化（内容语义化），选择合适的标签（代码语义化）。<br />\n杜绝通篇 div，HTML 语义化不仅便于开发者阅读，还有利于浏览器爬虫的解析，对 seo 优化很有帮助。<br />\n所以我们在开发时要遵循语义化的开发规范，根据页面内容，选择合适的标签，优化代码，使得网页结构更加清晰。</p>\n<p>相比其他标签而言，h 标签在页面中的权重非常高，所以不要滥用 h 标签。要利用 h 标签告诉浏览器网页的核心内容！例如：<br />\nh1 写主标题，通常与网页 title 标签一致，可以在页面展示，一个页面最好只有一个 h1 标签。<br />\nh2 写次级标题，h3-h6 以此类推，细分网页结构。</p>\n<h3 id=\"strong-em-标签\"><a class=\"anchor\" href=\"#strong-em-标签\">#</a> strong、em 标签</h3>\n<p><code>&lt;b&gt;</code>  和 <code>&lt;strong&gt;</code>  标签都是加粗文字的标签，其二者的区别就在于： <code>&lt;b&gt;</code>  是为了加粗而加粗的， <code>&lt;strong&gt;</code>  是为了强调而加粗的。<br />\n同样斜体标签 <code>&lt;i&gt;</code>  和  <code>&lt;em&gt; </code> 也有着相同的区别， <code>&lt;em&gt;</code>  有强调效果。<br />\n推荐使用 <code>&lt;strong&gt; </code>   <code>&lt;em&gt;</code> ，而不是  <code>&lt;b&gt;</code>   <code>&lt;i&gt;</code>  等，单纯修改加粗等样式可以用 css 实现。</p>\n<p>当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token selector\">.seo-header</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>seo-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://https://okjob.linchance.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>OK简历网是专业的在线简历制作、AI辅写优化、简历模板下载网站，提供免费的简历创建、编辑、一键导出服务，让求职者快速制作出高质量简历！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>OK简历 - 从一份OK的简历开始，笑傲职场<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"ul-ol-li-标签\"><a class=\"anchor\" href=\"#ul-ol-li-标签\">#</a> ul ol li 标签</h3>\n<p>这三个都是列表标签，ul 表示无序列表（unordered list），ol 表示有序列表（oredr list）， li 表示列表项（list item）。从网站优化的角度来说，在罗列多个词条的时候，最好使用列表标签，例如 使用 ul li 布局网站导航条对搜索引擎蜘蛛更加友好，也是影响搜索引擎排名的因素之一。</p>\n<h3 id=\"img-标签\"><a class=\"anchor\" href=\"#img-标签\">#</a> img 标签</h3>\n<p>img 图片标签的 alt 属性是图片的替换文字。<br />\nalt 属性可以帮助蜘蛛快速理解图片的具体内容，并且在网络故障时，仍然能够爬取到图片的内容信息。</p>\n<p>index.html 里暂时无列表标签和图片标签，如有或后续有添加需求，记得按照上面规范进行。</p>\n<h3 id=\"其他注意点\"><a class=\"anchor\" href=\"#其他注意点\">#</a> 其他注意点</h3>\n<ul>\n<li>SEO 的禁忌之一就是用 JS 输出重要的内容。爬虫不会读取 JS 格式的内容，所以重要的内容必须是 HTML 格式，这也就是为什么现在流行的 spa 框架都不利于 SEO 的原因之一；</li>\n<li>尽量不使用 iFrame。因为搜索引擎不会抓取 iframe 内的内容，所以重要内容绝对不能放在 iframe 中；</li>\n<li>如果需要截取文字，尽量用 css 实现，保证文字可以完整呈现给搜索引擎。</li>\n</ul>\n<h2 id=\"三-seo-手段\"><a class=\"anchor\" href=\"#三-seo-手段\">#</a> 三、SEO 手段</h2>\n<h3 id=\"各搜索引擎提交站点收录\"><a class=\"anchor\" href=\"#各搜索引擎提交站点收录\">#</a> 各搜索引擎提交站点收录</h3>\n<p>在各个搜索引擎的站点平台提交网站收录可以缩短爬虫发现网站链接时间，加快爬虫抓取速度。</p>\n<ul>\n<li>百度站长资源平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3ppeXVhbi5iYWlkdS5jb20vP2Nhc3RrPUxURSUyNSVFMiU4MCVBNg==\"> ziyuan.baidu.com/?castk=LTE%…</span></li>\n<li>谷歌网站管理员工具<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY24vd2VibWFzdGVycy8=\"> www.google.cn/webmasters/</span></li>\n<li>搜狗站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy5zb2dvdS5jb20v\"> zhanzhang.sogou.com/</span></li>\n<li>360 站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy5zby5jb20v\"> zhanzhang.so.com/</span></li>\n<li>头条搜索站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy50b3V0aWFvLmNvbS8=\"> zhanzhang.toutiao.com/</span></li>\n<li>必应网站管理员工具<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaW5nLmNvbS93ZWJtYXN0ZXIvaSVFMiU4MCVBNg==\"> www.bing.com/webmaster/i…</span><br />\n 点击以上链接，站长可以查看网站的各项参数表现。<br />\n2024.09.04：尝试百度站长管理平台认证失败，后续如还有需要可以再回来尝试</li>\n</ul>\n<h3 id=\"sitemap-站点地图\"><a class=\"anchor\" href=\"#sitemap-站点地图\">#</a> sitemap 站点地图</h3>\n<p>Sitemap，即站点地图，它是一个网站的全部 URL 列表，同时可以列出每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等）。它可以为搜索引擎的蜘蛛进行导航，更快的找到全站中的所有链接，更全面的获取网站信息。为了保证链接的全面性和准确性，应该自动不定期更新 sitemap 站点地图。<br />\n一般网站的 sitemap 文件都会有以下两种格式：<br />\nsitemap.xml，这是大部分搜索引擎所使用的用于提交网站网址的 XML 文件；<br />\nsitemap.html，这是可直接放在网站上用于用户访问或搜索引擎快速找到全站链接的页面（每页最多 500 条，自动分页）；</p>\n<p>网上有很多生成 sitemap 文件的站长工具，例如：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NpdGVtYXAuemhldGFvLmNvbS8=\">sitemap.zhetao.com/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3Rvb2xzLmJ1Z3NjYW5lci5jb20vc2l0ZW1hcHNwaWQlRTIlODAlQTY=\">tools.bugscaner.com/sitemapspid…</span></p>\n<p>生成的 sitemap 文件一般放在项目根目录下，然后可以在各个搜索引擎的站点平台提交 sitemap.xml 文件。</p>\n<p>当前设置：<br />\n在 xml.sitemap 网站制作 sitemap，sitemap.xml 文件暂时保存在我本地，如需提交或放在项目根目录下，上服务器前要说</p>\n<h3 id=\"robots-文件\"><a class=\"anchor\" href=\"#robots-文件\">#</a> robots 文件</h3>\n<p>蜘蛛在访问一个网站时，会首先会检查该网站的根域下是否有一个叫做 robots.txt 的纯文本文件，这个文件用于指定 spider 在您网站上的抓取范围。<br />\n如果你有哪些页面不想被蜘蛛访问，则可以通过 robots 文件告诉蜘蛛不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。<br />\nrobots 文件内容语法：<br />\n此文件主要由两种键值对组成：</p>\n<p>User-agent:  该项的值用于描述搜索引擎蜘蛛的名字。如果该项的值设为 *，则该协议对任何机器人均有效。<br />\nDisallow:  该项的值用于描述不希望被访问到的一个 URL，一个目录或者整个网站。以 Disallow 开头的 URL 均不会被搜索引擎蜘蛛访问到。任何一条 Disallow 记录为空，说明该网站的所有部分都允许被访问。</p>\n<p>参考： 掘金的 robots 文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcm9ib3RzLnR4dA==\">https://juejin.cn/robots.txt</span></p>\n<p>robots 文件使用方法：<br />\n使用方法非常简单，只需要将 robots.txt 文件上传到网站根目录就行了，注意文件名一定要全小写。当成功上传后，通常在浏览器中访问域名 /robots.txt 就可以查看到文件。</p>\n<p>当前设置：<br />\n书写 robots.txt 文件，该文件暂时保存在我本地。如需提交或放在项目根目录下，上服务器前要说明</p>\n<h3 id=\"内链外链\"><a class=\"anchor\" href=\"#内链外链\">#</a> 内链｜外链</h3>\n<p>在搜索引擎优化领域，有着内链为王、外链为皇的说法，它们都能对提升网站排名有所帮助，尤其是外链的建设。 先来区分下网站内链和外链：<br />\n内链：从自己网站的一个页面指向另外一个页面。通过内链让网站内部形成网状结构，让蜘蛛的广度和深度达到最大化。<br />\n外链：在别的网站导入自己网站的链接。通过外链提升网站权重，提高网站流量。外链有以下几个好处：</p>\n<ul>\n<li>提升网站权重</li>\n<li>能够吸引蜘蛛来抓取网站</li>\n<li>提升关键词排名</li>\n<li>提升网址或品牌的曝光度</li>\n<li>给网站带来流量<br />\n外链能够为我们的网站带来流量，所以外链数量越多越好是必然的。但是，一定要注意外链的质量，例如对方网站没有被搜索引擎收录，对方网站性能过差，死链等，这些低质量的外链反而会影响到本站的排名。<br />\n另外，在添加内链外链的过程中，要注意在 a 标签中对 nofollow 和・external 属性的使用。</li>\n</ul>\n<p>当前设置：</p>\n<!-- 引入外部链接，起引流效果，spider无需跟踪 -->\n<pre><code>&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.baidu.com/&quot;&gt;百度&lt;/a&gt;\n&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.google.com/&quot;&gt;谷歌&lt;/a&gt;\n&lt;a rel=&quot;nofollow&quot; href=&quot;https://cn.bing.com/&quot;&gt;必应&lt;/a&gt;\n</code></pre>\n<p>带有 rel=nofollow 属性的链接会告诉搜索引擎忽略这个链接。阻止搜索引擎对该页面进行追踪。从而避免权重分散。这个属性只对搜索引擎有效，这是一个纯粹的 SEO 优化标签。</p>\n<h2 id=\"canonical-url网址规范化\"><a class=\"anchor\" href=\"#canonical-url网址规范化\">#</a> Canonical URL（网址规范化）</h2>\n<!-- 指定规范链接 -->\n<pre><code>&lt;link rel=&quot;canonical&quot; href=&quot;https://okjob.linchance.com&quot;&gt;\n</code></pre>\n<p>网页规范化的两个好处：</p>\n<ul>\n<li>解决网站由于网站 url 链接不一样，但网页内容是一样而造成搜索引擎重复收录的问题；</li>\n<li>有利于 URL 权重集中。<br />\n解决方法：<br />\n在页面的 head 标签中，加入以下 canonical 标签，指定规范化网址。<br />\n使用 HTTPS<br />\n 谷歌曾发公告表示，使用安全加密协议（HTTPS），是搜索引擎排名的一项参考因素。<br />\n所以，在域名相同情况下，HTTPS 站点比 HTTP 站点，能获得更好的排名。</li>\n</ul>\n<h2 id=\"ssr-服务端渲染-server-side-rendering\"><a class=\"anchor\" href=\"#ssr-服务端渲染-server-side-rendering\">#</a> SSR 服务端渲染（ Server-Side Rendering）</h2>\n<p>当下 SPA 应用盛行，虽然它有用户体验好，服务器压力小等优点，但是同时也暴露出很多问题。例如首屏加载较慢，不利于 SEO 等（因为这些 spa 应用内容是由 js 动态更新的，蜘蛛无法爬取网页内容）。<br />\n而 ssr 的出现，很好的解决了 SEO 的问题。因为服务端渲染是指指客户端向服务器发出请求，然后运行时动态生成 html 内容并返回给客户端。所以客户端可以获取到完整的页面内容。<br />\n目前流行的 Vue/React 前端框架，都有 SSR 的解决方案：<br />\nVue 的 nuxt.js<br />\nReact 的 next.js<br />\n 对于 Vue/React 来说，对于它们的 SSR/SSG 框架出现的原因就是主要就是 SEO 和首屏加载速度。</p>\n<p>当前设置：<br />\n项目一开始并没有用 Nuxt.js 框架，所以改造 SSR 是一项十分重大艰巨的工程，暂时不考虑</p>\n<h3 id=\"预渲染-prerender-spa-plugin\"><a class=\"anchor\" href=\"#预渲染-prerender-spa-plugin\">#</a> 预渲染 prerender-spa-plugin</h3>\n<p>如果只想改善部分页面的 SEO，可以不采用 SSR 的解决方案，毕竟无论是 next.js，还是 nuxt.js，都是有一定学习成本的。那么可以使用 prerender-spa-plugin 等插件来实现预渲染页面，在构建时就针对特定的路有生成静态的 html 文件。</p>\n<p>当前设置：<br />\n准备尝试，因看到较近日期的言论提到一些插件包含上面提到的插件已不再维护，需要再考察看看哪些更新的方法可以使用。</p>\n","length":6699,"excerpt":"","more":"<h1 id=\"seo优化全方位解决方案\"><a class=\"anchor\" href=\"#seo优化全方位解决方案\">#</a> SEO 优化全方位解决方案</h1>\n<p>SEO 代表搜寻引擎最佳化 / 搜寻引擎优化（英文全名 Search Engine Optimization，简称 SEO），是指通过了解搜寻引擎的自然排名的算法逻辑，以提高目标网站在有关搜寻引擎内排名的方式。<br />\n网站的 SEO 至关重要，它可以让你的网站获得更好的排名和流量，从而提高网站知名度。对于一些盈利的网站，做好 SEO，还可以以低成本提高投资回报率。<br />\n网站 SEO 是长线工作，在做好一些基础的配置之后，更重要的是后期的维护，比如定期更新网站动态文章，不断寻找优质外链资源等。</p>\n<h2 id=\"一-tdk-优化\"><a class=\"anchor\" href=\"#一-tdk-优化\">#</a> 一、TDK 优化</h2>\n<p>TDK 是</p>\n<ul>\n<li>Title（页面标题）</li>\n<li>Meta Description（页面描述）</li>\n<li>Meta Keywords（页面关键词）<br />\nP.S. 但是由于一些原因，各大主流搜索引擎基本都已经大大降低甚至移除了 <keywords> 对排名的影响<br />\n但有些搜索引擎还会参考，如必应，目前 keywords 标签仍然对排名有一定影响。</li>\n</ul>\n<p>title 标签 - 网站名片<br />\n当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>OK简历 - AI简历优化，免费在线使用，一键导出打印<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>简历模板_个人简历模板_求职简历模板 - Canva可画<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>超级简历WonderCV - HR推荐简历模板,智能简历制作工具,专业中英文简历模板免费下载<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>META 标签 - 网站信息<br />\n当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历,写简历,求职,找工作,简历模板<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>霖承科技<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>robots<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index, follow<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>googlebot<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index, follow<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application-name<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>robots：用来告诉搜索机器人哪些页面需要索引，哪些页面不需要索引</p>\n<p>Open Graph 协议标签<br />\n Open Graph 协议标签通过 OG Tags （OG 标签）实现的，它属于 Meta 标签的一种，可以用来标识网页类型和元素，让分享到社交网络的内容可以被有效的抓取，还可以控制分享的网站卡片呈现我们想要显示的内容。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 社交媒体分享展示优化 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>website<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:url<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://okjob.linchance.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:author<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>霖承科技<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>关于网站关键词</p>\n<ul>\n<li>keywords 关键词数量控制在 4 个左右，避免关键词堆砌；</li>\n<li>合理选择长尾关键词（长尾关键词一般是 2-3 个词组成。例如，目标关键词是服装，其长尾关键词可以是男士服装、冬装等），长尾关键词虽然相对核心关键词的搜索量小很多，但是它带来的流量精准度非常高，后期的转化效果更好；</li>\n<li>避免使用过于专业的词汇。过于专业的词汇的搜索量较低；</li>\n<li>减少使用热门关键词，要选择合适的关键词（搜索量大、转化率高、定位精准）<br />\n当前设置：</li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>OK简历,写简历,求职,找工作,简历模板<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>简历制作,个人简历模板,写简历,简历网<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ssr<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:keywords<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>简历模板,简历,简历模板免费下载,简历制作,英文简历,超级简历<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>关于网站描述</p>\n<ul>\n<li>Description（页面描述）的长度最好控制在 120～200 个字符；</li>\n<li>Description 要让用户知道将从页面中获得什么；</li>\n<li>在 Description 中合理使用行动号召（CTA）用语（例如 “了解更多”、“立即获取”、“免费试用” 等等……）；</li>\n<li>Description 应该包含页面的核心关键字；</li>\n<li>为每个页面创建独一无二的 Description；</li>\n</ul>\n<p>当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>从一份OK的简历开始，笑傲职场！我们不仅懂你的才华，更懂招聘者的心理。AI智能一键优化简历，让你从“简历海”中脱颖而出，笑傲职场江湖。<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p>参考竞品：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">data-n-head</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>description<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>全民简历网是专业的在线简历制作、简历模板下载网站。提供大量原创设计的个人简历模板，包括各种职业和大学生简历模板，让求职者快速制作出高质量简历，服务超800万用户！<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"二-网站质量\"><a class=\"anchor\" href=\"#二-网站质量\">#</a> 二、网站质量</h2>\n<h3 id=\"网站加载速度\"><a class=\"anchor\" href=\"#网站加载速度\">#</a> 网站加载速度</h3>\n<p>网站性能是会影响到网站的 SEO 排名的，原因可想而知：</p>\n<ul>\n<li>网站卡顿势必会大大降低网站的用户留存率；</li>\n<li>如果网站加载缓慢，搜索引擎就会认为该网站对用户不友好，从而将其排名下降；</li>\n<li>影响搜索引擎蜘蛛的爬取频率；</li>\n</ul>\n<h3 id=\"html-语义化\"><a class=\"anchor\" href=\"#html-语义化\">#</a> HTML 语义化</h3>\n<p>语义化是指内容的结构化（内容语义化），选择合适的标签（代码语义化）。<br />\n杜绝通篇 div，HTML 语义化不仅便于开发者阅读，还有利于浏览器爬虫的解析，对 seo 优化很有帮助。<br />\n所以我们在开发时要遵循语义化的开发规范，根据页面内容，选择合适的标签，优化代码，使得网页结构更加清晰。</p>\n<p>相比其他标签而言，h 标签在页面中的权重非常高，所以不要滥用 h 标签。要利用 h 标签告诉浏览器网页的核心内容！例如：<br />\nh1 写主标题，通常与网页 title 标签一致，可以在页面展示，一个页面最好只有一个 h1 标签。<br />\nh2 写次级标题，h3-h6 以此类推，细分网页结构。</p>\n<h3 id=\"strong-em-标签\"><a class=\"anchor\" href=\"#strong-em-标签\">#</a> strong、em 标签</h3>\n<p><code>&lt;b&gt;</code>  和 <code>&lt;strong&gt;</code>  标签都是加粗文字的标签，其二者的区别就在于： <code>&lt;b&gt;</code>  是为了加粗而加粗的， <code>&lt;strong&gt;</code>  是为了强调而加粗的。<br />\n同样斜体标签 <code>&lt;i&gt;</code>  和  <code>&lt;em&gt; </code> 也有着相同的区别， <code>&lt;em&gt;</code>  有强调效果。<br />\n推荐使用 <code>&lt;strong&gt; </code>   <code>&lt;em&gt;</code> ，而不是  <code>&lt;b&gt;</code>   <code>&lt;i&gt;</code>  等，单纯修改加粗等样式可以用 css 实现。</p>\n<p>当前设置：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token selector\">.seo-header</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>seo-header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://https://okjob.linchance.com<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>OK简历网是专业的在线简历制作、AI辅写优化、简历模板下载网站，提供免费的简历创建、编辑、一键导出服务，让求职者快速制作出高质量简历！<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>OK简历 - 从一份OK的简历开始，笑傲职场<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"ul-ol-li-标签\"><a class=\"anchor\" href=\"#ul-ol-li-标签\">#</a> ul ol li 标签</h3>\n<p>这三个都是列表标签，ul 表示无序列表（unordered list），ol 表示有序列表（oredr list）， li 表示列表项（list item）。从网站优化的角度来说，在罗列多个词条的时候，最好使用列表标签，例如 使用 ul li 布局网站导航条对搜索引擎蜘蛛更加友好，也是影响搜索引擎排名的因素之一。</p>\n<h3 id=\"img-标签\"><a class=\"anchor\" href=\"#img-标签\">#</a> img 标签</h3>\n<p>img 图片标签的 alt 属性是图片的替换文字。<br />\nalt 属性可以帮助蜘蛛快速理解图片的具体内容，并且在网络故障时，仍然能够爬取到图片的内容信息。</p>\n<p>index.html 里暂时无列表标签和图片标签，如有或后续有添加需求，记得按照上面规范进行。</p>\n<h3 id=\"其他注意点\"><a class=\"anchor\" href=\"#其他注意点\">#</a> 其他注意点</h3>\n<ul>\n<li>SEO 的禁忌之一就是用 JS 输出重要的内容。爬虫不会读取 JS 格式的内容，所以重要的内容必须是 HTML 格式，这也就是为什么现在流行的 spa 框架都不利于 SEO 的原因之一；</li>\n<li>尽量不使用 iFrame。因为搜索引擎不会抓取 iframe 内的内容，所以重要内容绝对不能放在 iframe 中；</li>\n<li>如果需要截取文字，尽量用 css 实现，保证文字可以完整呈现给搜索引擎。</li>\n</ul>\n<h2 id=\"三-seo-手段\"><a class=\"anchor\" href=\"#三-seo-手段\">#</a> 三、SEO 手段</h2>\n<h3 id=\"各搜索引擎提交站点收录\"><a class=\"anchor\" href=\"#各搜索引擎提交站点收录\">#</a> 各搜索引擎提交站点收录</h3>\n<p>在各个搜索引擎的站点平台提交网站收录可以缩短爬虫发现网站链接时间，加快爬虫抓取速度。</p>\n<ul>\n<li>百度站长资源平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3ppeXVhbi5iYWlkdS5jb20vP2Nhc3RrPUxURSUyNSVFMiU4MCVBNg==\"> ziyuan.baidu.com/?castk=LTE%…</span></li>\n<li>谷歌网站管理员工具<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY24vd2VibWFzdGVycy8=\"> www.google.cn/webmasters/</span></li>\n<li>搜狗站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy5zb2dvdS5jb20v\"> zhanzhang.sogou.com/</span></li>\n<li>360 站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy5zby5jb20v\"> zhanzhang.so.com/</span></li>\n<li>头条搜索站长平台<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3poYW56aGFuZy50b3V0aWFvLmNvbS8=\"> zhanzhang.toutiao.com/</span></li>\n<li>必应网站管理员工具<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iaW5nLmNvbS93ZWJtYXN0ZXIvaSVFMiU4MCVBNg==\"> www.bing.com/webmaster/i…</span><br />\n 点击以上链接，站长可以查看网站的各项参数表现。<br />\n2024.09.04：尝试百度站长管理平台认证失败，后续如还有需要可以再回来尝试</li>\n</ul>\n<h3 id=\"sitemap-站点地图\"><a class=\"anchor\" href=\"#sitemap-站点地图\">#</a> sitemap 站点地图</h3>\n<p>Sitemap，即站点地图，它是一个网站的全部 URL 列表，同时可以列出每个网址的其他元数据（上次更新的时间、更改的频率以及相对于网站上其他网址的重要程度为何等）。它可以为搜索引擎的蜘蛛进行导航，更快的找到全站中的所有链接，更全面的获取网站信息。为了保证链接的全面性和准确性，应该自动不定期更新 sitemap 站点地图。<br />\n一般网站的 sitemap 文件都会有以下两种格式：<br />\nsitemap.xml，这是大部分搜索引擎所使用的用于提交网站网址的 XML 文件；<br />\nsitemap.html，这是可直接放在网站上用于用户访问或搜索引擎快速找到全站链接的页面（每页最多 500 条，自动分页）；</p>\n<p>网上有很多生成 sitemap 文件的站长工具，例如：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NpdGVtYXAuemhldGFvLmNvbS8=\">sitemap.zhetao.com/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3Rvb2xzLmJ1Z3NjYW5lci5jb20vc2l0ZW1hcHNwaWQlRTIlODAlQTY=\">tools.bugscaner.com/sitemapspid…</span></p>\n<p>生成的 sitemap 文件一般放在项目根目录下，然后可以在各个搜索引擎的站点平台提交 sitemap.xml 文件。</p>\n<p>当前设置：<br />\n在 xml.sitemap 网站制作 sitemap，sitemap.xml 文件暂时保存在我本地，如需提交或放在项目根目录下，上服务器前要说</p>\n<h3 id=\"robots-文件\"><a class=\"anchor\" href=\"#robots-文件\">#</a> robots 文件</h3>\n<p>蜘蛛在访问一个网站时，会首先会检查该网站的根域下是否有一个叫做 robots.txt 的纯文本文件，这个文件用于指定 spider 在您网站上的抓取范围。<br />\n如果你有哪些页面不想被蜘蛛访问，则可以通过 robots 文件告诉蜘蛛不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。<br />\nrobots 文件内容语法：<br />\n此文件主要由两种键值对组成：</p>\n<p>User-agent:  该项的值用于描述搜索引擎蜘蛛的名字。如果该项的值设为 *，则该协议对任何机器人均有效。<br />\nDisallow:  该项的值用于描述不希望被访问到的一个 URL，一个目录或者整个网站。以 Disallow 开头的 URL 均不会被搜索引擎蜘蛛访问到。任何一条 Disallow 记录为空，说明该网站的所有部分都允许被访问。</p>\n<p>参考： 掘金的 robots 文件：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcm9ib3RzLnR4dA==\">https://juejin.cn/robots.txt</span></p>\n<p>robots 文件使用方法：<br />\n使用方法非常简单，只需要将 robots.txt 文件上传到网站根目录就行了，注意文件名一定要全小写。当成功上传后，通常在浏览器中访问域名 /robots.txt 就可以查看到文件。</p>\n<p>当前设置：<br />\n书写 robots.txt 文件，该文件暂时保存在我本地。如需提交或放在项目根目录下，上服务器前要说明</p>\n<h3 id=\"内链外链\"><a class=\"anchor\" href=\"#内链外链\">#</a> 内链｜外链</h3>\n<p>在搜索引擎优化领域，有着内链为王、外链为皇的说法，它们都能对提升网站排名有所帮助，尤其是外链的建设。 先来区分下网站内链和外链：<br />\n内链：从自己网站的一个页面指向另外一个页面。通过内链让网站内部形成网状结构，让蜘蛛的广度和深度达到最大化。<br />\n外链：在别的网站导入自己网站的链接。通过外链提升网站权重，提高网站流量。外链有以下几个好处：</p>\n<ul>\n<li>提升网站权重</li>\n<li>能够吸引蜘蛛来抓取网站</li>\n<li>提升关键词排名</li>\n<li>提升网址或品牌的曝光度</li>\n<li>给网站带来流量<br />\n外链能够为我们的网站带来流量，所以外链数量越多越好是必然的。但是，一定要注意外链的质量，例如对方网站没有被搜索引擎收录，对方网站性能过差，死链等，这些低质量的外链反而会影响到本站的排名。<br />\n另外，在添加内链外链的过程中，要注意在 a 标签中对 nofollow 和・external 属性的使用。</li>\n</ul>\n<p>当前设置：</p>\n<!-- 引入外部链接，起引流效果，spider无需跟踪 -->\n<pre><code>&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.baidu.com/&quot;&gt;百度&lt;/a&gt;\n&lt;a rel=&quot;nofollow&quot; href=&quot;https://www.google.com/&quot;&gt;谷歌&lt;/a&gt;\n&lt;a rel=&quot;nofollow&quot; href=&quot;https://cn.bing.com/&quot;&gt;必应&lt;/a&gt;\n</code></pre>\n<p>带有 rel=nofollow 属性的链接会告诉搜索引擎忽略这个链接。阻止搜索引擎对该页面进行追踪。从而避免权重分散。这个属性只对搜索引擎有效，这是一个纯粹的 SEO 优化标签。</p>\n<h2 id=\"canonical-url网址规范化\"><a class=\"anchor\" href=\"#canonical-url网址规范化\">#</a> Canonical URL（网址规范化）</h2>\n<!-- 指定规范链接 -->\n<pre><code>&lt;link rel=&quot;canonical&quot; href=&quot;https://okjob.linchance.com&quot;&gt;\n</code></pre>\n<p>网页规范化的两个好处：</p>\n<ul>\n<li>解决网站由于网站 url 链接不一样，但网页内容是一样而造成搜索引擎重复收录的问题；</li>\n<li>有利于 URL 权重集中。<br />\n解决方法：<br />\n在页面的 head 标签中，加入以下 canonical 标签，指定规范化网址。<br />\n使用 HTTPS<br />\n 谷歌曾发公告表示，使用安全加密协议（HTTPS），是搜索引擎排名的一项参考因素。<br />\n所以，在域名相同情况下，HTTPS 站点比 HTTP 站点，能获得更好的排名。</li>\n</ul>\n<h2 id=\"ssr-服务端渲染-server-side-rendering\"><a class=\"anchor\" href=\"#ssr-服务端渲染-server-side-rendering\">#</a> SSR 服务端渲染（ Server-Side Rendering）</h2>\n<p>当下 SPA 应用盛行，虽然它有用户体验好，服务器压力小等优点，但是同时也暴露出很多问题。例如首屏加载较慢，不利于 SEO 等（因为这些 spa 应用内容是由 js 动态更新的，蜘蛛无法爬取网页内容）。<br />\n而 ssr 的出现，很好的解决了 SEO 的问题。因为服务端渲染是指指客户端向服务器发出请求，然后运行时动态生成 html 内容并返回给客户端。所以客户端可以获取到完整的页面内容。<br />\n目前流行的 Vue/React 前端框架，都有 SSR 的解决方案：<br />\nVue 的 nuxt.js<br />\nReact 的 next.js<br />\n 对于 Vue/React 来说，对于它们的 SSR/SSG 框架出现的原因就是主要就是 SEO 和首屏加载速度。</p>\n<p>当前设置：<br />\n项目一开始并没有用 Nuxt.js 框架，所以改造 SSR 是一项十分重大艰巨的工程，暂时不考虑</p>\n<h3 id=\"预渲染-prerender-spa-plugin\"><a class=\"anchor\" href=\"#预渲染-prerender-spa-plugin\">#</a> 预渲染 prerender-spa-plugin</h3>\n<p>如果只想改善部分页面的 SEO，可以不采用 SSR 的解决方案，毕竟无论是 next.js，还是 nuxt.js，都是有一定学习成本的。那么可以使用 prerender-spa-plugin 等插件来实现预渲染页面，在构建时就针对特定的路有生成静态的 html 文件。</p>\n<p>当前设置：<br />\n准备尝试，因看到较近日期的言论提到一些插件包含上面提到的插件已不再维护，需要再考察看看哪些更新的方法可以使用。</p>\n"},{"title":"TypeScript与JavaScript","date":"2025-02-21T14:33:35.000Z","_content":"\n# TypeScript与JavaScript\n\nJavaScript 和 TypeScript 是现代前端开发中最常用的两种语言。作为 JavaScript 的超集，TypeScript 提供了对 JavaScript 的增强功能，特别是在类型系统和开发工具支持方面。\n\n### 1. JavaScript\nJavaScript（简称 JS）是一种广泛应用于前端开发的动态类型编程语言，最初是由 Netscape 的 Brendan Eich 在 1995 年开发的。它最初的目标是增强网页的互动性，如验证表单、处理用户输入、动态加载内容等。\n随着时间的推移，JavaScript 已经发展成一种全栈开发语言，不仅用于浏览器端开发，也广泛应用于服务器端开发（如 Node.js）。\n\n- 动态类型：变量的类型在运行时确定。\n- 解释执行：JavaScript 代码在浏览器中直接运行，而无需编译。\n- 事件驱动：广泛应用于用户界面的交互。\n- 异步编程：支持异步编程（如使用回调函数、Promise 和 async/await）。\n\nJavaScript 是动态类型语言，意味着变量的类型是在运行时确定的。你可以随时改变变量的类型，且没有类型检查。这虽然灵活，但也容易引入错误，尤其是在大型应用中，类型错误可能不容易被发现。\n\nJavaScript 支持面向对象编程，但语法相对简洁且不够严格。例如，JavaScript 中的类是基于原型的，不支持传统的接口和类型检查。\n\nJavaScript 是浏览器的原生语言，直接在浏览器中运行，不需要任何编译步骤。\n\n### 2. TypeScript\nTypeScript（简称 TS）是由微软开发的一种编程语言，它是 JavaScript 的超集，意味着 JavaScript 的合法代码也是 TypeScript 的合法代码。TypeScript 增强了 JavaScript 的功能，特别是加入了强类型检查、接口、类等面向对象的特性，以及静态类型系统，可以在编译阶段捕捉到潜在的错误\n\n- 静态类型检查：在编译阶段检查类型错误，提高代码的可靠性。\n- 类型推断：即使没有显式声明类型，TypeScript 也会自动推断变量的类型。\n- 类和接口：支持面向对象编程，提供类、接口、继承等功能。\n- 现代 JavaScript 特性：TypeScript 支持最新的 JavaScript 特性，并且可以编译成兼容旧浏览器的 JavaScript 代码。\n\nTypeScript 加入了静态类型系统，可以在编译阶段进行类型检查，帮助开发者尽早发现错误。TypeScript 不仅支持原始类型（如 string、number、boolean），还支持复杂类型（如数组、元组、枚举、接口、联合类型等）。\n\nTypeScript 在 JavaScript 的基础上增加了类、接口、继承等面向对象的特性，语法更加严格，有助于开发者编写更清晰、可维护的代码。\n\nTypeScript 需要编译成 JavaScript，才能在浏览器或 Node.js 中执行。TypeScript 编译器将 TS 代码转换为 JavaScript 代码，通常目标是 ES5 或 ES6 代码，这样可以兼容各种浏览器和环境。\n\n\n### 3.代码对比\n\n1. 语法\n\n类型注解\n\n- JavaScript: 不支持类型注解，变量的类型由值来推断。\n- TypeScript: 支持静态类型注解，可以在变量、函数参数、函数返回值等地方显式指定类型。\n\n``` typescript\n// TypeScript\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\n```\n\n类和接口\n\n- JavaScript: 使用原型链来实现对象的继承，没有类和接口的概念。\n- TypeScript: 引入了类和接口，支持面向对象的编程风格。\n\n``` typescript\n// TypeScript\ninterface Shape {\n  calculateArea(): number;\n}\n\nclass Circle implements Shape {\n  constructor(private radius: number) {}\n\n  calculateArea() {\n    return Math.PI * this.radius ** 2;\n  }\n}\n\n```\n\n枚举\n\n- JavaScript: 不支持枚举类型。\n- TypeScript: 支持枚举类型，可以定义一组命名的常量值。\n\n``` typescript\n// TypeScript\nenum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\n```\n\n类型系统\n\n静态类型检查\n\n- JavaScript: 在运行时进行类型检查，类型错误只会在执行阶段被发现。\n- TypeScript: 使用静态类型检查，在编译时进行类型检查，能够提前发现并避免一些潜在的错误。\n\n``` typescript\n// TypeScript\nlet name: string = \"Alice\";\nname = 123; // 编译时错误\n\n```\n\n类型推断\n\n- JavaScript: 变量的类型由值来推断。\n- TypeScript: 支持类型推断，当类型没有显式指定时，会根据上下文自动推断出变量的类型。\n\n``` typescript\n// TypeScript\nlet age = 25; // 推断为 number 类型\n\n```\n\n提供更丰富的类型\n- JavaScript: 基本数据类型和对象类型。\n- TypeScript: 支持基本数据类型、对象类型、元组、联合类型、交叉类型、字面量类型等更丰富的类型。\n\n``` typescript\n// TypeScript\ntype Status = \"pending\" | \"in_progress\" | \"completed\";\n\ninterface Fruit {\n  name: string;\n  color: string;\n}\n\ntype Apple = Fruit & { type: \"apple\" };\ntype Banana = Fruit & { type: \"banana\" };\n\nfunction getFruitColor(fruit: Apple | Banana): string {\n  return fruit.color;\n}\n\n```\n\n工具支持\n\n编辑器支持\nJavaScript: 可以在大多数代码编辑器中编辑 JavaScript 代码，但没有针对 JavaScript 的专用编辑器。\nTypeScript: 得益于类型系统，TypeScript 在编辑器中提供了更强大的代码补全、类型检查和重构功能。同时，一些编辑器如 Visual Studio Code 提供了针对 TypeScript 的更完善支持。\n\n调试支持\nJavaScript: 可以通过浏览器的开发者工具进行调试。\nTypeScript: 能够生成可调试的 JavaScript 代码，支持在编辑器或浏览器中进行调试。\n\n文档和社区\nJavaScript: 具有成熟的文档和庞大的社区资源，容易找到相关的教程、博客文章和解决方案。\nTypeScript: TypeScript 基于 JavaScript，因此可以享受到 JavaScript 社区的一部分资源，此外还有针对 TypeScript 的官方文档、社区论坛和第三方库的支持。\n\n第三方库\nJavaScript: 拥有世界上最大的开源生态系统，有众多的第三方库和框架可供选择。\nTypeScript: TypeScript 与 JavaScript 兼容，可以直接使用 JavaScript 的第三方库。此外，TypeScript 还有自己的类型声明文件（.d.ts）生态系统，提供了大量的类型定义供开发者使用。\n\nTypeScript编写一个API的案例\n下面演示用TypeScript 开发一个简单的 Express.js 后端 API：\n\n``` typescript\nimport express, { Request, Response } from \"express\";\n\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst app = express();\n\napp.use(express.json());\n\napp.post(\"/users\", (req: Request, res: Response) => {\n  const user: User = req.body;\n  // 处理用户数据\n  res.json(user);\n});\n\napp.listen(3000, () => {\n  console.log(\"Server is running on port 3000\");\n});\n\n```\n\n在该案例中，使用 TypeScript 提供的静态类型检查，使你能够更早地发现和解决潜在的错误。此外 TypeScript 还提供了代码补全和类型推断，大大提高开发效率。\n\n性能：\n将ts编译为js之后，和原生js的性能表现几乎是一致的","source":"_posts/TypeScript与JavaScript.md","raw":"---\ntitle: TypeScript与JavaScript\ndate: 2025-02-21 22:33:35\ncategories:\n- [前端开发]\ntags:\n- [前端]\n---\n\n# TypeScript与JavaScript\n\nJavaScript 和 TypeScript 是现代前端开发中最常用的两种语言。作为 JavaScript 的超集，TypeScript 提供了对 JavaScript 的增强功能，特别是在类型系统和开发工具支持方面。\n\n### 1. JavaScript\nJavaScript（简称 JS）是一种广泛应用于前端开发的动态类型编程语言，最初是由 Netscape 的 Brendan Eich 在 1995 年开发的。它最初的目标是增强网页的互动性，如验证表单、处理用户输入、动态加载内容等。\n随着时间的推移，JavaScript 已经发展成一种全栈开发语言，不仅用于浏览器端开发，也广泛应用于服务器端开发（如 Node.js）。\n\n- 动态类型：变量的类型在运行时确定。\n- 解释执行：JavaScript 代码在浏览器中直接运行，而无需编译。\n- 事件驱动：广泛应用于用户界面的交互。\n- 异步编程：支持异步编程（如使用回调函数、Promise 和 async/await）。\n\nJavaScript 是动态类型语言，意味着变量的类型是在运行时确定的。你可以随时改变变量的类型，且没有类型检查。这虽然灵活，但也容易引入错误，尤其是在大型应用中，类型错误可能不容易被发现。\n\nJavaScript 支持面向对象编程，但语法相对简洁且不够严格。例如，JavaScript 中的类是基于原型的，不支持传统的接口和类型检查。\n\nJavaScript 是浏览器的原生语言，直接在浏览器中运行，不需要任何编译步骤。\n\n### 2. TypeScript\nTypeScript（简称 TS）是由微软开发的一种编程语言，它是 JavaScript 的超集，意味着 JavaScript 的合法代码也是 TypeScript 的合法代码。TypeScript 增强了 JavaScript 的功能，特别是加入了强类型检查、接口、类等面向对象的特性，以及静态类型系统，可以在编译阶段捕捉到潜在的错误\n\n- 静态类型检查：在编译阶段检查类型错误，提高代码的可靠性。\n- 类型推断：即使没有显式声明类型，TypeScript 也会自动推断变量的类型。\n- 类和接口：支持面向对象编程，提供类、接口、继承等功能。\n- 现代 JavaScript 特性：TypeScript 支持最新的 JavaScript 特性，并且可以编译成兼容旧浏览器的 JavaScript 代码。\n\nTypeScript 加入了静态类型系统，可以在编译阶段进行类型检查，帮助开发者尽早发现错误。TypeScript 不仅支持原始类型（如 string、number、boolean），还支持复杂类型（如数组、元组、枚举、接口、联合类型等）。\n\nTypeScript 在 JavaScript 的基础上增加了类、接口、继承等面向对象的特性，语法更加严格，有助于开发者编写更清晰、可维护的代码。\n\nTypeScript 需要编译成 JavaScript，才能在浏览器或 Node.js 中执行。TypeScript 编译器将 TS 代码转换为 JavaScript 代码，通常目标是 ES5 或 ES6 代码，这样可以兼容各种浏览器和环境。\n\n\n### 3.代码对比\n\n1. 语法\n\n类型注解\n\n- JavaScript: 不支持类型注解，变量的类型由值来推断。\n- TypeScript: 支持静态类型注解，可以在变量、函数参数、函数返回值等地方显式指定类型。\n\n``` typescript\n// TypeScript\nfunction add(a: number, b: number): number {\n  return a + b;\n}\n\n```\n\n类和接口\n\n- JavaScript: 使用原型链来实现对象的继承，没有类和接口的概念。\n- TypeScript: 引入了类和接口，支持面向对象的编程风格。\n\n``` typescript\n// TypeScript\ninterface Shape {\n  calculateArea(): number;\n}\n\nclass Circle implements Shape {\n  constructor(private radius: number) {}\n\n  calculateArea() {\n    return Math.PI * this.radius ** 2;\n  }\n}\n\n```\n\n枚举\n\n- JavaScript: 不支持枚举类型。\n- TypeScript: 支持枚举类型，可以定义一组命名的常量值。\n\n``` typescript\n// TypeScript\nenum Direction {\n  Up,\n  Down,\n  Left,\n  Right,\n}\n\n```\n\n类型系统\n\n静态类型检查\n\n- JavaScript: 在运行时进行类型检查，类型错误只会在执行阶段被发现。\n- TypeScript: 使用静态类型检查，在编译时进行类型检查，能够提前发现并避免一些潜在的错误。\n\n``` typescript\n// TypeScript\nlet name: string = \"Alice\";\nname = 123; // 编译时错误\n\n```\n\n类型推断\n\n- JavaScript: 变量的类型由值来推断。\n- TypeScript: 支持类型推断，当类型没有显式指定时，会根据上下文自动推断出变量的类型。\n\n``` typescript\n// TypeScript\nlet age = 25; // 推断为 number 类型\n\n```\n\n提供更丰富的类型\n- JavaScript: 基本数据类型和对象类型。\n- TypeScript: 支持基本数据类型、对象类型、元组、联合类型、交叉类型、字面量类型等更丰富的类型。\n\n``` typescript\n// TypeScript\ntype Status = \"pending\" | \"in_progress\" | \"completed\";\n\ninterface Fruit {\n  name: string;\n  color: string;\n}\n\ntype Apple = Fruit & { type: \"apple\" };\ntype Banana = Fruit & { type: \"banana\" };\n\nfunction getFruitColor(fruit: Apple | Banana): string {\n  return fruit.color;\n}\n\n```\n\n工具支持\n\n编辑器支持\nJavaScript: 可以在大多数代码编辑器中编辑 JavaScript 代码，但没有针对 JavaScript 的专用编辑器。\nTypeScript: 得益于类型系统，TypeScript 在编辑器中提供了更强大的代码补全、类型检查和重构功能。同时，一些编辑器如 Visual Studio Code 提供了针对 TypeScript 的更完善支持。\n\n调试支持\nJavaScript: 可以通过浏览器的开发者工具进行调试。\nTypeScript: 能够生成可调试的 JavaScript 代码，支持在编辑器或浏览器中进行调试。\n\n文档和社区\nJavaScript: 具有成熟的文档和庞大的社区资源，容易找到相关的教程、博客文章和解决方案。\nTypeScript: TypeScript 基于 JavaScript，因此可以享受到 JavaScript 社区的一部分资源，此外还有针对 TypeScript 的官方文档、社区论坛和第三方库的支持。\n\n第三方库\nJavaScript: 拥有世界上最大的开源生态系统，有众多的第三方库和框架可供选择。\nTypeScript: TypeScript 与 JavaScript 兼容，可以直接使用 JavaScript 的第三方库。此外，TypeScript 还有自己的类型声明文件（.d.ts）生态系统，提供了大量的类型定义供开发者使用。\n\nTypeScript编写一个API的案例\n下面演示用TypeScript 开发一个简单的 Express.js 后端 API：\n\n``` typescript\nimport express, { Request, Response } from \"express\";\n\ninterface User {\n  name: string;\n  age: number;\n}\n\nconst app = express();\n\napp.use(express.json());\n\napp.post(\"/users\", (req: Request, res: Response) => {\n  const user: User = req.body;\n  // 处理用户数据\n  res.json(user);\n});\n\napp.listen(3000, () => {\n  console.log(\"Server is running on port 3000\");\n});\n\n```\n\n在该案例中，使用 TypeScript 提供的静态类型检查，使你能够更早地发现和解决潜在的错误。此外 TypeScript 还提供了代码补全和类型推断，大大提高开发效率。\n\n性能：\n将ts编译为js之后，和原生js的性能表现几乎是一致的","slug":"TypeScript与JavaScript","published":1,"updated":"2025-02-21T14:59:30.276Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfb000imcuyb44fggav","content":"<h1 id=\"typescript与javascript\"><a class=\"anchor\" href=\"#typescript与javascript\">#</a> TypeScript 与 JavaScript</h1>\n<p>JavaScript 和 TypeScript 是现代前端开发中最常用的两种语言。作为 JavaScript 的超集，TypeScript 提供了对 JavaScript 的增强功能，特别是在类型系统和开发工具支持方面。</p>\n<h3 id=\"1-javascript\"><a class=\"anchor\" href=\"#1-javascript\">#</a> 1. JavaScript</h3>\n<p>JavaScript（简称 JS）是一种广泛应用于前端开发的动态类型编程语言，最初是由 Netscape 的 Brendan Eich 在 1995 年开发的。它最初的目标是增强网页的互动性，如验证表单、处理用户输入、动态加载内容等。<br />\n随着时间的推移，JavaScript 已经发展成一种全栈开发语言，不仅用于浏览器端开发，也广泛应用于服务器端开发（如 Node.js）。</p>\n<ul>\n<li>动态类型：变量的类型在运行时确定。</li>\n<li>解释执行：JavaScript 代码在浏览器中直接运行，而无需编译。</li>\n<li>事件驱动：广泛应用于用户界面的交互。</li>\n<li>异步编程：支持异步编程（如使用回调函数、Promise 和 async/await）。</li>\n</ul>\n<p>JavaScript 是动态类型语言，意味着变量的类型是在运行时确定的。你可以随时改变变量的类型，且没有类型检查。这虽然灵活，但也容易引入错误，尤其是在大型应用中，类型错误可能不容易被发现。</p>\n<p>JavaScript 支持面向对象编程，但语法相对简洁且不够严格。例如，JavaScript 中的类是基于原型的，不支持传统的接口和类型检查。</p>\n<p>JavaScript 是浏览器的原生语言，直接在浏览器中运行，不需要任何编译步骤。</p>\n<h3 id=\"2-typescript\"><a class=\"anchor\" href=\"#2-typescript\">#</a> 2. TypeScript</h3>\n<p>TypeScript（简称 TS）是由微软开发的一种编程语言，它是 JavaScript 的超集，意味着 JavaScript 的合法代码也是 TypeScript 的合法代码。TypeScript 增强了 JavaScript 的功能，特别是加入了强类型检查、接口、类等面向对象的特性，以及静态类型系统，可以在编译阶段捕捉到潜在的错误</p>\n<ul>\n<li>静态类型检查：在编译阶段检查类型错误，提高代码的可靠性。</li>\n<li>类型推断：即使没有显式声明类型，TypeScript 也会自动推断变量的类型。</li>\n<li>类和接口：支持面向对象编程，提供类、接口、继承等功能。</li>\n<li>现代 JavaScript 特性：TypeScript 支持最新的 JavaScript 特性，并且可以编译成兼容旧浏览器的 JavaScript 代码。</li>\n</ul>\n<p>TypeScript 加入了静态类型系统，可以在编译阶段进行类型检查，帮助开发者尽早发现错误。TypeScript 不仅支持原始类型（如 string、number、boolean），还支持复杂类型（如数组、元组、枚举、接口、联合类型等）。</p>\n<p>TypeScript 在 JavaScript 的基础上增加了类、接口、继承等面向对象的特性，语法更加严格，有助于开发者编写更清晰、可维护的代码。</p>\n<p>TypeScript 需要编译成 JavaScript，才能在浏览器或 Node.js 中执行。TypeScript 编译器将 TS 代码转换为 JavaScript 代码，通常目标是 ES5 或 ES6 代码，这样可以兼容各种浏览器和环境。</p>\n<h3 id=\"3代码对比\"><a class=\"anchor\" href=\"#3代码对比\">#</a> 3. 代码对比</h3>\n<ol>\n<li>语法</li>\n</ol>\n<p>类型注解</p>\n<ul>\n<li>JavaScript: 不支持类型注解，变量的类型由值来推断。</li>\n<li>TypeScript: 支持静态类型注解，可以在变量、函数参数、函数返回值等地方显式指定类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类和接口</p>\n<ul>\n<li>JavaScript: 使用原型链来实现对象的继承，没有类和接口的概念。</li>\n<li>TypeScript: 引入了类和接口，支持面向对象的编程风格。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>枚举</p>\n<ul>\n<li>JavaScript: 不支持枚举类型。</li>\n<li>TypeScript: 支持枚举类型，可以定义一组命名的常量值。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Up<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Down<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Left<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Right<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类型系统</p>\n<p>静态类型检查</p>\n<ul>\n<li>JavaScript: 在运行时进行类型检查，类型错误只会在执行阶段被发现。</li>\n<li>TypeScript: 使用静态类型检查，在编译时进行类型检查，能够提前发现并避免一些潜在的错误。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译时错误</span></pre></td></tr></table></figure><p>类型推断</p>\n<ul>\n<li>JavaScript: 变量的类型由值来推断。</li>\n<li>TypeScript: 支持类型推断，当类型没有显式指定时，会根据上下文自动推断出变量的类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推断为 number 类型</span></pre></td></tr></table></figure><p>提供更丰富的类型</p>\n<ul>\n<li>JavaScript: 基本数据类型和对象类型。</li>\n<li>TypeScript: 支持基本数据类型、对象类型、元组、联合类型、交叉类型、字面量类型等更丰富的类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Status</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"in_progress\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Apple</span> <span class=\"token operator\">=</span> Fruit <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"apple\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Banana</span> <span class=\"token operator\">=</span> Fruit <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"banana\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getFruitColor</span><span class=\"token punctuation\">(</span>fruit<span class=\"token operator\">:</span> Apple <span class=\"token operator\">|</span> Banana<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> fruit<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>工具支持</p>\n<p>编辑器支持<br />\n JavaScript: 可以在大多数代码编辑器中编辑 JavaScript 代码，但没有针对 JavaScript 的专用编辑器。<br />\nTypeScript: 得益于类型系统，TypeScript 在编辑器中提供了更强大的代码补全、类型检查和重构功能。同时，一些编辑器如 Visual Studio Code 提供了针对 TypeScript 的更完善支持。</p>\n<p>调试支持<br />\n JavaScript: 可以通过浏览器的开发者工具进行调试。<br />\nTypeScript: 能够生成可调试的 JavaScript 代码，支持在编辑器或浏览器中进行调试。</p>\n<p>文档和社区<br />\n JavaScript: 具有成熟的文档和庞大的社区资源，容易找到相关的教程、博客文章和解决方案。<br />\nTypeScript: TypeScript 基于 JavaScript，因此可以享受到 JavaScript 社区的一部分资源，此外还有针对 TypeScript 的官方文档、社区论坛和第三方库的支持。</p>\n<p>第三方库<br />\n JavaScript: 拥有世界上最大的开源生态系统，有众多的第三方库和框架可供选择。<br />\nTypeScript: TypeScript 与 JavaScript 兼容，可以直接使用 JavaScript 的第三方库。此外，TypeScript 还有自己的类型声明文件（.d.ts）生态系统，提供了大量的类型定义供开发者使用。</p>\n<p>TypeScript 编写一个 API 的案例<br />\n下面演示用 TypeScript 开发一个简单的 Express.js 后端 API：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 处理用户数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server is running on port 3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在该案例中，使用 TypeScript 提供的静态类型检查，使你能够更早地发现和解决潜在的错误。此外 TypeScript 还提供了代码补全和类型推断，大大提高开发效率。</p>\n<p>性能：<br />\n将 ts 编译为 js 之后，和原生 js 的性能表现几乎是一致的</p>\n","length":3467,"excerpt":"","more":"<h1 id=\"typescript与javascript\"><a class=\"anchor\" href=\"#typescript与javascript\">#</a> TypeScript 与 JavaScript</h1>\n<p>JavaScript 和 TypeScript 是现代前端开发中最常用的两种语言。作为 JavaScript 的超集，TypeScript 提供了对 JavaScript 的增强功能，特别是在类型系统和开发工具支持方面。</p>\n<h3 id=\"1-javascript\"><a class=\"anchor\" href=\"#1-javascript\">#</a> 1. JavaScript</h3>\n<p>JavaScript（简称 JS）是一种广泛应用于前端开发的动态类型编程语言，最初是由 Netscape 的 Brendan Eich 在 1995 年开发的。它最初的目标是增强网页的互动性，如验证表单、处理用户输入、动态加载内容等。<br />\n随着时间的推移，JavaScript 已经发展成一种全栈开发语言，不仅用于浏览器端开发，也广泛应用于服务器端开发（如 Node.js）。</p>\n<ul>\n<li>动态类型：变量的类型在运行时确定。</li>\n<li>解释执行：JavaScript 代码在浏览器中直接运行，而无需编译。</li>\n<li>事件驱动：广泛应用于用户界面的交互。</li>\n<li>异步编程：支持异步编程（如使用回调函数、Promise 和 async/await）。</li>\n</ul>\n<p>JavaScript 是动态类型语言，意味着变量的类型是在运行时确定的。你可以随时改变变量的类型，且没有类型检查。这虽然灵活，但也容易引入错误，尤其是在大型应用中，类型错误可能不容易被发现。</p>\n<p>JavaScript 支持面向对象编程，但语法相对简洁且不够严格。例如，JavaScript 中的类是基于原型的，不支持传统的接口和类型检查。</p>\n<p>JavaScript 是浏览器的原生语言，直接在浏览器中运行，不需要任何编译步骤。</p>\n<h3 id=\"2-typescript\"><a class=\"anchor\" href=\"#2-typescript\">#</a> 2. TypeScript</h3>\n<p>TypeScript（简称 TS）是由微软开发的一种编程语言，它是 JavaScript 的超集，意味着 JavaScript 的合法代码也是 TypeScript 的合法代码。TypeScript 增强了 JavaScript 的功能，特别是加入了强类型检查、接口、类等面向对象的特性，以及静态类型系统，可以在编译阶段捕捉到潜在的错误</p>\n<ul>\n<li>静态类型检查：在编译阶段检查类型错误，提高代码的可靠性。</li>\n<li>类型推断：即使没有显式声明类型，TypeScript 也会自动推断变量的类型。</li>\n<li>类和接口：支持面向对象编程，提供类、接口、继承等功能。</li>\n<li>现代 JavaScript 特性：TypeScript 支持最新的 JavaScript 特性，并且可以编译成兼容旧浏览器的 JavaScript 代码。</li>\n</ul>\n<p>TypeScript 加入了静态类型系统，可以在编译阶段进行类型检查，帮助开发者尽早发现错误。TypeScript 不仅支持原始类型（如 string、number、boolean），还支持复杂类型（如数组、元组、枚举、接口、联合类型等）。</p>\n<p>TypeScript 在 JavaScript 的基础上增加了类、接口、继承等面向对象的特性，语法更加严格，有助于开发者编写更清晰、可维护的代码。</p>\n<p>TypeScript 需要编译成 JavaScript，才能在浏览器或 Node.js 中执行。TypeScript 编译器将 TS 代码转换为 JavaScript 代码，通常目标是 ES5 或 ES6 代码，这样可以兼容各种浏览器和环境。</p>\n<h3 id=\"3代码对比\"><a class=\"anchor\" href=\"#3代码对比\">#</a> 3. 代码对比</h3>\n<ol>\n<li>语法</li>\n</ol>\n<p>类型注解</p>\n<ul>\n<li>JavaScript: 不支持类型注解，变量的类型由值来推断。</li>\n<li>TypeScript: 支持静态类型注解，可以在变量、函数参数、函数返回值等地方显式指定类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类和接口</p>\n<ul>\n<li>JavaScript: 使用原型链来实现对象的继承，没有类和接口的概念。</li>\n<li>TypeScript: 引入了类和接口，支持面向对象的编程风格。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>枚举</p>\n<ul>\n<li>JavaScript: 不支持枚举类型。</li>\n<li>TypeScript: 支持枚举类型，可以定义一组命名的常量值。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Up<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Down<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Left<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Right<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类型系统</p>\n<p>静态类型检查</p>\n<ul>\n<li>JavaScript: 在运行时进行类型检查，类型错误只会在执行阶段被发现。</li>\n<li>TypeScript: 使用静态类型检查，在编译时进行类型检查，能够提前发现并避免一些潜在的错误。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译时错误</span></pre></td></tr></table></figure><p>类型推断</p>\n<ul>\n<li>JavaScript: 变量的类型由值来推断。</li>\n<li>TypeScript: 支持类型推断，当类型没有显式指定时，会根据上下文自动推断出变量的类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推断为 number 类型</span></pre></td></tr></table></figure><p>提供更丰富的类型</p>\n<ul>\n<li>JavaScript: 基本数据类型和对象类型。</li>\n<li>TypeScript: 支持基本数据类型、对象类型、元组、联合类型、交叉类型、字面量类型等更丰富的类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Status</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"in_progress\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Apple</span> <span class=\"token operator\">=</span> Fruit <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"apple\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Banana</span> <span class=\"token operator\">=</span> Fruit <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"banana\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getFruitColor</span><span class=\"token punctuation\">(</span>fruit<span class=\"token operator\">:</span> Apple <span class=\"token operator\">|</span> Banana<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> fruit<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>工具支持</p>\n<p>编辑器支持<br />\n JavaScript: 可以在大多数代码编辑器中编辑 JavaScript 代码，但没有针对 JavaScript 的专用编辑器。<br />\nTypeScript: 得益于类型系统，TypeScript 在编辑器中提供了更强大的代码补全、类型检查和重构功能。同时，一些编辑器如 Visual Studio Code 提供了针对 TypeScript 的更完善支持。</p>\n<p>调试支持<br />\n JavaScript: 可以通过浏览器的开发者工具进行调试。<br />\nTypeScript: 能够生成可调试的 JavaScript 代码，支持在编辑器或浏览器中进行调试。</p>\n<p>文档和社区<br />\n JavaScript: 具有成熟的文档和庞大的社区资源，容易找到相关的教程、博客文章和解决方案。<br />\nTypeScript: TypeScript 基于 JavaScript，因此可以享受到 JavaScript 社区的一部分资源，此外还有针对 TypeScript 的官方文档、社区论坛和第三方库的支持。</p>\n<p>第三方库<br />\n JavaScript: 拥有世界上最大的开源生态系统，有众多的第三方库和框架可供选择。<br />\nTypeScript: TypeScript 与 JavaScript 兼容，可以直接使用 JavaScript 的第三方库。此外，TypeScript 还有自己的类型声明文件（.d.ts）生态系统，提供了大量的类型定义供开发者使用。</p>\n<p>TypeScript 编写一个 API 的案例<br />\n下面演示用 TypeScript 开发一个简单的 Express.js 后端 API：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 处理用户数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server is running on port 3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在该案例中，使用 TypeScript 提供的静态类型检查，使你能够更早地发现和解决潜在的错误。此外 TypeScript 还提供了代码补全和类型推断，大大提高开发效率。</p>\n<p>性能：<br />\n将 ts 编译为 js 之后，和原生 js 的性能表现几乎是一致的</p>\n"},{"title":"flex弹性布局","date":"2024-09-17T12:02:24.000Z","_content":"\n# flex弹性布局与问题记录\n\n### flex 弹性布局 子标签设置宽度无效的问题\n\nFlexbox 是 flexible box 的简称（注：意思是“灵活的盒子容器”），是 CSS3 引入的新的布局模式。它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。\n\n它之所以被称为 Flexbox ，是因为它能够扩展和收缩 flex 容器内的元素，以最大限度地填充可用空间。\n\nMDN介绍：弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。\n\n目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n\n任何一个容器都可以指定为 Flex 布局。\n\n行内元素也可以使用 Flex 布局。\n\n``` css\nsection {\n  display: flex;\n}\n```\n\n注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。\n\n采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。\n\n<div align=\"center\">\n    <img src=\"flex弹性布局/01.png\">\n</div>\n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\n\n[菜鸟教程](https://www.runoob.com/w3cnote/flex-grammar.html)\n\n[阮一峰的弹性布局教程](https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n**flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。**\n\n*如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的**flex-shrink属性为0**，其他项目都为1，则空间不足时，前者不缩小。*\n\n父元素设置了display:flex,那么所有的子标签都会默认加上flex:0 1 auto;\n其中1 就是 flex中的 flex-shrink 属性,表示开启了元素的收缩功能，所以才会有左边子标签会挤掉右边子标签的一部分的问题。\n\n### 主要结论\n设置 ** flex-shrink: 0;**可以避免被拉伸\n\n举个例子：\n``` css\n.cardInfoItem text:nth-last-child(2) {\n  flex-shrink: 0;\n}\n.cardInfoItem image {\n  width: 28rpx;\n  margin-right: 14rpx;\n  flex-shrink: 0;\n}\n```","source":"_posts/flex弹性布局.md","raw":"---\ntitle: flex弹性布局\ndate: 2024-09-17 20:02:24\ncategories:\n- [前端开发]\ntags:\n- [前端]\n---\n\n# flex弹性布局与问题记录\n\n### flex 弹性布局 子标签设置宽度无效的问题\n\nFlexbox 是 flexible box 的简称（注：意思是“灵活的盒子容器”），是 CSS3 引入的新的布局模式。它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。\n\n它之所以被称为 Flexbox ，是因为它能够扩展和收缩 flex 容器内的元素，以最大限度地填充可用空间。\n\nMDN介绍：弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。\n\n目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。\n\n任何一个容器都可以指定为 Flex 布局。\n\n行内元素也可以使用 Flex 布局。\n\n``` css\nsection {\n  display: flex;\n}\n```\n\n注意，设为Flex布局以后，子元素的float、clear和vertical-align属性将失效。\n\n采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。\n\n<div align=\"center\">\n    <img src=\"flex弹性布局/01.png\">\n</div>\n\n容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。\n\n项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。\n\n[菜鸟教程](https://www.runoob.com/w3cnote/flex-grammar.html)\n\n[阮一峰的弹性布局教程](https://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)\n\n**flex-shrink 属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。**\n\n*如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的**flex-shrink属性为0**，其他项目都为1，则空间不足时，前者不缩小。*\n\n父元素设置了display:flex,那么所有的子标签都会默认加上flex:0 1 auto;\n其中1 就是 flex中的 flex-shrink 属性,表示开启了元素的收缩功能，所以才会有左边子标签会挤掉右边子标签的一部分的问题。\n\n### 主要结论\n设置 ** flex-shrink: 0;**可以避免被拉伸\n\n举个例子：\n``` css\n.cardInfoItem text:nth-last-child(2) {\n  flex-shrink: 0;\n}\n.cardInfoItem image {\n  width: 28rpx;\n  margin-right: 14rpx;\n  flex-shrink: 0;\n}\n```","slug":"flex弹性布局","published":1,"updated":"2024-12-27T14:41:31.811Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfb000lmcuy4rvweydj","content":"<h1 id=\"flex弹性布局与问题记录\"><a class=\"anchor\" href=\"#flex弹性布局与问题记录\">#</a> flex 弹性布局与问题记录</h1>\n<h3 id=\"flex-弹性布局-子标签设置宽度无效的问题\"><a class=\"anchor\" href=\"#flex-弹性布局-子标签设置宽度无效的问题\">#</a> flex 弹性布局 子标签设置宽度无效的问题</h3>\n<p>Flexbox 是 flexible box 的简称（注：意思是 “灵活的盒子容器”），是 CSS3 引入的新的布局模式。它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。</p>\n<p>它之所以被称为 Flexbox ，是因为它能够扩展和收缩 flex 容器内的元素，以最大限度地填充可用空间。</p>\n<p>MDN 介绍：弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p>\n<p>目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p>任何一个容器都可以指定为 Flex 布局。</p>\n<p>行内元素也可以使用 Flex 布局。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">section</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</p>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称” 容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称” 项目”。</p>\n<div align=\"center\">\n    <style>.xuqspkjpvwxm{}</style><img data-src=\"/2024/09/17/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/01.png\" class=\"xuqspkjpvwxm\">\n</div>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做 cross end。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL2ZsZXgtZ3JhbW1hci5odG1s\">菜鸟教程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA3L2ZsZXgtZ3JhbW1hci5odG1s\">阮一峰的弹性布局教程</span></p>\n<p><strong>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</strong></p>\n<p><em>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的<strong> flex-shrink 属性为 0</strong>，其他项目都为 1，则空间不足时，前者不缩小。</em></p>\n<p>父元素设置了 display:flex, 那么所有的子标签都会默认加上 flex:0 1 auto;<br />\n 其中 1 就是 flex 中的 flex-shrink 属性，表示开启了元素的收缩功能，所以才会有左边子标签会挤掉右边子标签的一部分的问题。</p>\n<h3 id=\"主要结论\"><a class=\"anchor\" href=\"#主要结论\">#</a> 主要结论</h3>\n<p>设置 ** flex-shrink: 0;** 可以避免被拉伸</p>\n<p>举个例子：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.cardInfoItem text:nth-last-child(2)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">.cardInfoItem image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 28rpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 14rpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>","length":1091,"excerpt":"","more":"<h1 id=\"flex弹性布局与问题记录\"><a class=\"anchor\" href=\"#flex弹性布局与问题记录\">#</a> flex 弹性布局与问题记录</h1>\n<h3 id=\"flex-弹性布局-子标签设置宽度无效的问题\"><a class=\"anchor\" href=\"#flex-弹性布局-子标签设置宽度无效的问题\">#</a> flex 弹性布局 子标签设置宽度无效的问题</h3>\n<p>Flexbox 是 flexible box 的简称（注：意思是 “灵活的盒子容器”），是 CSS3 引入的新的布局模式。它决定了元素如何在页面上排列，使它们能在不同的屏幕尺寸和设备下可预测地展现出来。</p>\n<p>它之所以被称为 Flexbox ，是因为它能够扩展和收缩 flex 容器内的元素，以最大限度地填充可用空间。</p>\n<p>MDN 介绍：弹性盒子是一种用于按行或按列布局元素的一维布局方法。元素可以膨胀以填充额外的空间，收缩以适应更小的空间。</p>\n<p>目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>\n<p>任何一个容器都可以指定为 Flex 布局。</p>\n<p>行内元素也可以使用 Flex 布局。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">section</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意，设为 Flex 布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</p>\n<p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称” 容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称” 项目”。</p>\n<div align=\"center\">\n    <style>.xuqspkjpvwxm{}</style><img data-src=\"/2024/09/17/flex%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/01.png\" class=\"xuqspkjpvwxm\">\n</div>\n<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做 main start，结束位置叫做 main end；交叉轴的开始位置叫做 cross start，结束位置叫做 cross end。</p>\n<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL2ZsZXgtZ3JhbW1hci5odG1s\">菜鸟教程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA3L2ZsZXgtZ3JhbW1hci5odG1s\">阮一峰的弹性布局教程</span></p>\n<p><strong>flex-shrink 属性定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</strong></p>\n<p><em>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。如果一个项目的<strong> flex-shrink 属性为 0</strong>，其他项目都为 1，则空间不足时，前者不缩小。</em></p>\n<p>父元素设置了 display:flex, 那么所有的子标签都会默认加上 flex:0 1 auto;<br />\n 其中 1 就是 flex 中的 flex-shrink 属性，表示开启了元素的收缩功能，所以才会有左边子标签会挤掉右边子标签的一部分的问题。</p>\n<h3 id=\"主要结论\"><a class=\"anchor\" href=\"#主要结论\">#</a> 主要结论</h3>\n<p>设置 ** flex-shrink: 0;** 可以避免被拉伸</p>\n<p>举个例子：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.cardInfoItem text:nth-last-child(2)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">.cardInfoItem image</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 28rpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 14rpx<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2024-07-18T07:09:54.016Z","updated":"2024-07-18T07:08:40.955Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfc000omcuyc49c46jb","content":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n","length":362,"excerpt":"","more":"<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n"},{"title":"vue3-Router路由","date":"2024-09-17T11:44:44.000Z","_content":"\n# router-view标签\n\n### 场景：\n原本在edit页面，通过v-if绑定侧边栏，当点击侧边栏内的按钮后，URL会发生改变，携带tempID返回构成一个新的URL。需求是URL发生变化后页面重新跳转至新的URL页面，实际是页面并没有刷新，即使URL栏已经改变，需要手动刷新后才能到预期的URL页面\n\n### 问题解决思路:\n\n你可以把router-view当做是一个容器，它渲染的组件是你使用vue-router指定的\n\n``` html\n<template>\n  <section class=\"app-main\">\n    <transition name=\"fade-transform\" mode=\"out-in\">\n      <router-view :key=\"key\" /> //key属性\n    </transition>\n  </section>\n</template>\n\n<script>\nexport default {\n  name: 'AppMain',\n  computed: {\n    key() {\n      return this.$route.fullPath\n    }\n  }\n}\n</script>\n\n```\n\n这里router-view有一个key的属性，这个key的属性作用是：\n\n### 1. 不设置router-view的key属性\n\n由于Vue会复用相同组件，即/page/a => /page/b或者/page?id=a => /page?id=b这类链接跳转时，将不再执行created，mounted之类的钩子，这时候你需要在路由组件中，添加beforeRouteUpdate钩子来执行相关方法拉取数据\n\n### 2. 设置router-view的key属性值为$route.path\n\n从/page/a => /page/b，由于这两个路由的$route.path并不一样，所以组件被强制不复用，相关钩子加载顺序为beforeRouteUpdate => created => mounted\n\n从/page?id=a => /page?id=b，由于这两个路由的$route.path一样，所以和没设置key属性一样，会复用组件，相关钩子加载顺序为：beforeRouteUpdate\n\n### 3. 设置router-view的key属性值为$route.fullPath\n\n从/page/a => /page/a，由于这两个路由的$route.fullPath并不一样，所以组件被强制不复用，相关钩子加载顺序为`beforeRouteUpdate => created => mounted`\n\n从/page?id=a => /page?id=b，由于这两个路由的$route.fullPath并不一样，所以组件被强制不复用，相关钩子加载顺序为`beforeRouteUpdate => created => mounted`\n\n### 最终解决方案：\n在App.vue中加入上述代码片段，设置router-view的key属性值为$route.fullPath，这样一来，新的ID返回后组件强制不复用，就可以实现页面重新加载跳转的效果。\n","source":"_posts/vue3-Router路由.md","raw":"---\ntitle: vue3-Router路由\ndate: 2024-09-17 19:44:44\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n# router-view标签\n\n### 场景：\n原本在edit页面，通过v-if绑定侧边栏，当点击侧边栏内的按钮后，URL会发生改变，携带tempID返回构成一个新的URL。需求是URL发生变化后页面重新跳转至新的URL页面，实际是页面并没有刷新，即使URL栏已经改变，需要手动刷新后才能到预期的URL页面\n\n### 问题解决思路:\n\n你可以把router-view当做是一个容器，它渲染的组件是你使用vue-router指定的\n\n``` html\n<template>\n  <section class=\"app-main\">\n    <transition name=\"fade-transform\" mode=\"out-in\">\n      <router-view :key=\"key\" /> //key属性\n    </transition>\n  </section>\n</template>\n\n<script>\nexport default {\n  name: 'AppMain',\n  computed: {\n    key() {\n      return this.$route.fullPath\n    }\n  }\n}\n</script>\n\n```\n\n这里router-view有一个key的属性，这个key的属性作用是：\n\n### 1. 不设置router-view的key属性\n\n由于Vue会复用相同组件，即/page/a => /page/b或者/page?id=a => /page?id=b这类链接跳转时，将不再执行created，mounted之类的钩子，这时候你需要在路由组件中，添加beforeRouteUpdate钩子来执行相关方法拉取数据\n\n### 2. 设置router-view的key属性值为$route.path\n\n从/page/a => /page/b，由于这两个路由的$route.path并不一样，所以组件被强制不复用，相关钩子加载顺序为beforeRouteUpdate => created => mounted\n\n从/page?id=a => /page?id=b，由于这两个路由的$route.path一样，所以和没设置key属性一样，会复用组件，相关钩子加载顺序为：beforeRouteUpdate\n\n### 3. 设置router-view的key属性值为$route.fullPath\n\n从/page/a => /page/a，由于这两个路由的$route.fullPath并不一样，所以组件被强制不复用，相关钩子加载顺序为`beforeRouteUpdate => created => mounted`\n\n从/page?id=a => /page?id=b，由于这两个路由的$route.fullPath并不一样，所以组件被强制不复用，相关钩子加载顺序为`beforeRouteUpdate => created => mounted`\n\n### 最终解决方案：\n在App.vue中加入上述代码片段，设置router-view的key属性值为$route.fullPath，这样一来，新的ID返回后组件强制不复用，就可以实现页面重新加载跳转的效果。\n","slug":"vue3-Router路由","published":1,"updated":"2025-01-05T11:56:11.089Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfc000rmcuy5rnsbsn7","content":"<h1 id=\"router-view标签\"><a class=\"anchor\" href=\"#router-view标签\">#</a> router-view 标签</h1>\n<h3 id=\"场景\"><a class=\"anchor\" href=\"#场景\">#</a> 场景：</h3>\n<p>原本在 edit 页面，通过 v-if 绑定侧边栏，当点击侧边栏内的按钮后，URL 会发生改变，携带 tempID 返回构成一个新的 URL。需求是 URL 发生变化后页面重新跳转至新的 URL 页面，实际是页面并没有刷新，即使 URL 栏已经改变，需要手动刷新后才能到预期的 URL 页面</p>\n<h3 id=\"问题解决思路\"><a class=\"anchor\" href=\"#问题解决思路\">#</a> 问题解决思路:</h3>\n<p>你可以把 router-view 当做是一个容器，它渲染的组件是你使用 vue-router 指定的</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fade-transform<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>out-in<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> //key属性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AppMain'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>fullPath</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这里 router-view 有一个 key 的属性，这个 key 的属性作用是：</p>\n<h3 id=\"1-不设置router-view的key属性\"><a class=\"anchor\" href=\"#1-不设置router-view的key属性\">#</a> 1. 不设置 router-view 的 key 属性</h3>\n<p>由于 Vue 会复用相同组件，即 /page/a =&gt; /page/b 或者 /page?id=a =&gt; /page?id=b 这类链接跳转时，将不再执行 created，mounted 之类的钩子，这时候你需要在路由组件中，添加 beforeRouteUpdate 钩子来执行相关方法拉取数据</p>\n<h3 id=\"2-设置router-view的key属性值为routepath\"><a class=\"anchor\" href=\"#2-设置router-view的key属性值为routepath\">#</a> 2. 设置 router-view 的 key 属性值为 $route.path</h3>\n<p>从 /page/a =&gt; /page/b，由于这两个路由的 $route.path 并不一样，所以组件被强制不复用，相关钩子加载顺序为 beforeRouteUpdate =&gt; created =&gt; mounted</p>\n<p>从 /page?id=a =&gt; /page?id=b，由于这两个路由的 $route.path 一样，所以和没设置 key 属性一样，会复用组件，相关钩子加载顺序为：beforeRouteUpdate</p>\n<h3 id=\"3-设置router-view的key属性值为routefullpath\"><a class=\"anchor\" href=\"#3-设置router-view的key属性值为routefullpath\">#</a> 3. 设置 router-view 的 key 属性值为 $route.fullPath</h3>\n<p>从 /page/a =&gt; /page/a，由于这两个路由的 $route.fullPath 并不一样，所以组件被强制不复用，相关钩子加载顺序为 <code>beforeRouteUpdate =&gt; created =&gt; mounted</code></p>\n<p>从 /page?id=a =&gt; /page?id=b，由于这两个路由的 $route.fullPath 并不一样，所以组件被强制不复用，相关钩子加载顺序为 <code>beforeRouteUpdate =&gt; created =&gt; mounted</code></p>\n<h3 id=\"最终解决方案\"><a class=\"anchor\" href=\"#最终解决方案\">#</a> 最终解决方案：</h3>\n<p>在 App.vue 中加入上述代码片段，设置 router-view 的 key 属性值为 $route.fullPath，这样一来，新的 ID 返回后组件强制不复用，就可以实现页面重新加载跳转的效果。</p>\n","length":1295,"excerpt":"","more":"<h1 id=\"router-view标签\"><a class=\"anchor\" href=\"#router-view标签\">#</a> router-view 标签</h1>\n<h3 id=\"场景\"><a class=\"anchor\" href=\"#场景\">#</a> 场景：</h3>\n<p>原本在 edit 页面，通过 v-if 绑定侧边栏，当点击侧边栏内的按钮后，URL 会发生改变，携带 tempID 返回构成一个新的 URL。需求是 URL 发生变化后页面重新跳转至新的 URL 页面，实际是页面并没有刷新，即使 URL 栏已经改变，需要手动刷新后才能到预期的 URL 页面</p>\n<h3 id=\"问题解决思路\"><a class=\"anchor\" href=\"#问题解决思路\">#</a> 问题解决思路:</h3>\n<p>你可以把 router-view 当做是一个容器，它渲染的组件是你使用 vue-router 指定的</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app-main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fade-transform<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>out-in<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>key<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span> //key属性</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'AppMain'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>fullPath</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>这里 router-view 有一个 key 的属性，这个 key 的属性作用是：</p>\n<h3 id=\"1-不设置router-view的key属性\"><a class=\"anchor\" href=\"#1-不设置router-view的key属性\">#</a> 1. 不设置 router-view 的 key 属性</h3>\n<p>由于 Vue 会复用相同组件，即 /page/a =&gt; /page/b 或者 /page?id=a =&gt; /page?id=b 这类链接跳转时，将不再执行 created，mounted 之类的钩子，这时候你需要在路由组件中，添加 beforeRouteUpdate 钩子来执行相关方法拉取数据</p>\n<h3 id=\"2-设置router-view的key属性值为routepath\"><a class=\"anchor\" href=\"#2-设置router-view的key属性值为routepath\">#</a> 2. 设置 router-view 的 key 属性值为 $route.path</h3>\n<p>从 /page/a =&gt; /page/b，由于这两个路由的 $route.path 并不一样，所以组件被强制不复用，相关钩子加载顺序为 beforeRouteUpdate =&gt; created =&gt; mounted</p>\n<p>从 /page?id=a =&gt; /page?id=b，由于这两个路由的 $route.path 一样，所以和没设置 key 属性一样，会复用组件，相关钩子加载顺序为：beforeRouteUpdate</p>\n<h3 id=\"3-设置router-view的key属性值为routefullpath\"><a class=\"anchor\" href=\"#3-设置router-view的key属性值为routefullpath\">#</a> 3. 设置 router-view 的 key 属性值为 $route.fullPath</h3>\n<p>从 /page/a =&gt; /page/a，由于这两个路由的 $route.fullPath 并不一样，所以组件被强制不复用，相关钩子加载顺序为 <code>beforeRouteUpdate =&gt; created =&gt; mounted</code></p>\n<p>从 /page?id=a =&gt; /page?id=b，由于这两个路由的 $route.fullPath 并不一样，所以组件被强制不复用，相关钩子加载顺序为 <code>beforeRouteUpdate =&gt; created =&gt; mounted</code></p>\n<h3 id=\"最终解决方案\"><a class=\"anchor\" href=\"#最终解决方案\">#</a> 最终解决方案：</h3>\n<p>在 App.vue 中加入上述代码片段，设置 router-view 的 key 属性值为 $route.fullPath，这样一来，新的 ID 返回后组件强制不复用，就可以实现页面重新加载跳转的效果。</p>\n"},{"title":"okjob-wztj项目对比","date":"2025-01-05T11:53:36.000Z","_content":"\n## 项目总结与对比\n\n### OK-JOB\n\nVueX\n\nwatch\n\n事件修饰符.prevent\n\nprops选项\n\n$emit和v-on（@）\n\nProps + emit\n\nVue-cli项目（npm run serve启动，8080监听）\n\nlang = javascipt\n\nlang = scss\n\nmixins混入\n\n\n### 王者图鉴\n\npinia\n\n动态组件：```<component>+: is```实现\n\nwatchEffect\n\ndefineProps宏\n\ndefineEmits宏\n\ndefineModel宏\n\nVite4项目（npm run dev启动，5173监听）\n\nslot插槽\n\nlang = typescript\n\nlang = less\n\n通过依赖注入（provide+inject）解决vue多层组件逐级透传问题\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/okjob-wztj项目对比.md","raw":"---\ntitle: okjob-wztj项目对比\ndate: 2025-01-05 19:53:36\ncategories:\n- [Vue]\ntags:\n- [前端开发]\n---\n\n## 项目总结与对比\n\n### OK-JOB\n\nVueX\n\nwatch\n\n事件修饰符.prevent\n\nprops选项\n\n$emit和v-on（@）\n\nProps + emit\n\nVue-cli项目（npm run serve启动，8080监听）\n\nlang = javascipt\n\nlang = scss\n\nmixins混入\n\n\n### 王者图鉴\n\npinia\n\n动态组件：```<component>+: is```实现\n\nwatchEffect\n\ndefineProps宏\n\ndefineEmits宏\n\ndefineModel宏\n\nVite4项目（npm run dev启动，5173监听）\n\nslot插槽\n\nlang = typescript\n\nlang = less\n\n通过依赖注入（provide+inject）解决vue多层组件逐级透传问题\n\n\n\n\n\n\n\n\n\n\n","slug":"okjob-wztj项目对比","published":1,"updated":"2025-01-06T09:36:34.521Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfd000umcuy7wz7gk0o","content":"<h2 id=\"项目总结与对比\"><a class=\"anchor\" href=\"#项目总结与对比\">#</a> 项目总结与对比</h2>\n<h3 id=\"ok-job\"><a class=\"anchor\" href=\"#ok-job\">#</a> OK-JOB</h3>\n<p>VueX</p>\n<p>watch</p>\n<p>事件修饰符.prevent</p>\n<p>props 选项</p>\n<p>$emit 和 v-on（@）</p>\n<p>Props + emit</p>\n<p>Vue-cli 项目（npm run serve 启动，8080 监听）</p>\n<p>lang = javascipt</p>\n<p>lang = scss</p>\n<p>mixins 混入</p>\n<h3 id=\"王者图鉴\"><a class=\"anchor\" href=\"#王者图鉴\">#</a> 王者图鉴</h3>\n<p>pinia</p>\n<p>动态组件： <code>&lt;component&gt;+: is</code>  实现</p>\n<p>watchEffect</p>\n<p>defineProps 宏</p>\n<p>defineEmits 宏</p>\n<p>defineModel 宏</p>\n<p>Vite4 项目（npm run dev 启动，5173 监听）</p>\n<p>slot 插槽</p>\n<p>lang = typescript</p>\n<p>lang = less</p>\n<p>通过依赖注入（provide+inject）解决 vue 多层组件逐级透传问题</p>\n","length":308,"excerpt":"","more":"<h2 id=\"项目总结与对比\"><a class=\"anchor\" href=\"#项目总结与对比\">#</a> 项目总结与对比</h2>\n<h3 id=\"ok-job\"><a class=\"anchor\" href=\"#ok-job\">#</a> OK-JOB</h3>\n<p>VueX</p>\n<p>watch</p>\n<p>事件修饰符.prevent</p>\n<p>props 选项</p>\n<p>$emit 和 v-on（@）</p>\n<p>Props + emit</p>\n<p>Vue-cli 项目（npm run serve 启动，8080 监听）</p>\n<p>lang = javascipt</p>\n<p>lang = scss</p>\n<p>mixins 混入</p>\n<h3 id=\"王者图鉴\"><a class=\"anchor\" href=\"#王者图鉴\">#</a> 王者图鉴</h3>\n<p>pinia</p>\n<p>动态组件： <code>&lt;component&gt;+: is</code>  实现</p>\n<p>watchEffect</p>\n<p>defineProps 宏</p>\n<p>defineEmits 宏</p>\n<p>defineModel 宏</p>\n<p>Vite4 项目（npm run dev 启动，5173 监听）</p>\n<p>slot 插槽</p>\n<p>lang = typescript</p>\n<p>lang = less</p>\n<p>通过依赖注入（provide+inject）解决 vue 多层组件逐级透传问题</p>\n"},{"title":"vue基础一览","date":"2025-01-05T11:57:41.000Z","_content":"\n## Vue3基础一览表\n\nVue 是一套用于构建用户界面的渐进式框架\n\n与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n1、Vue 实例（应用）相关\n\n| 名称      | 描述 |\n| ----------- | ----------- |\n| Vue.createApp()      | 创建 vue 实例（应用），参数可以决定根组件如何渲染       |\n| mount(){}   | 该方法可以将 vue 实例，挂载在 dom 元素上        |\n| template | 模板，用来定义该 vue 应用的展示内容。 |\n| data(){}\t| 用来定义数据 |\n| ```{{}}``` | 插值表达式① 可以用来将变量渲染到 dom 结构中。用于起始标签与闭合标签之间② ```{{}}```中间可以写 js 表达式 |\n| $data | vue 实例的属性，可以用来操作 data 中定义的数据 |\n| methods:{} | 里面可以书写方法（函数） |\n| computed:{} | 计算属性，当计算属性依赖的内容发生变更时，才会重新执行计算 |\n| watch:{}\t| 监听器，可以监听数据的改变，做异步操作 |\n\n\n2、Vue 样式相关\n| 名称      | 描述 |\n| ----------- | ----------- |\n|:class\t| v-bind:class 的简写形式，为元素绑定动态类名 |\n|$attrs\t| 可以用来获取父组件绑定在子组件身上的属性（Non-Props 属性）|\n|:style\t| v-bind:style 的简写形式，为元素绑定动态的行内样式 |\n\n3、Vue 常见指令\n| 名称      | 描述 |\n| ----------- | ----------- |\n| v-on\t| 绑定事件 ① “v-on:”可以简写成@ ② 可以使用“@[变量名]”，绑定动态事件。即，具体绑定哪个事件，由“变量名”决定 ③ 事件处理函数中，可以使用事件对象 event ④ 事件处理函数中，如果想传递多个参数，可以使用$event 指代事件对象 |\n| v-if ，v-else-if ，v-else | 条件渲染：通过控制 dom 结构的存在与否来实现区块的显示和隐藏\n三者可以组合使用 |\n| v-show | 条件渲染：>通过控制元素的 display 属性来控制区块的显示和隐藏 |\n| v-for | 列表渲染：用来循环数组、对象为了提高性能，可以使用 :key（前面没有出现:key,要不要考虑加上）为元素绑定唯一的 key 值 |\n| v-model | ① 表单中的内容与 data 方法中的变量，进行双向数据绑定 ② 复选框，可以通过 true-value、false-value 属性指定选中、没选中时显示的值（不常用） ③ v-model 可以使用.lazy 修饰符，减少数据的变化频率（不常用） ④ v-model 可以使用.number 修饰符将数据转换成数字（不常用） ⑤ v-model 可以使用.trim 修饰符去除数据首尾的空格 |\n| v-bind | ① 可以将标签/组件上的某个属性与数据变量进行绑定。 ② “v-bind:”可以简写成 “:” ③ 可以使用 “:[变量名]”，绑定动态属性。即，具体绑定哪个属性，由“变量名”决定 |\n| v-html | 识别变量中的 html 标签；将变量中的 html 结构解析成 dom 结构 |\n| v-once |\t标签/组件只渲染一次；渲染一次后，如果数据变化，标签/组件的内容不会跟随变化 |\n\n4、Vue 事件修饰符\n| 名称      | 描述 |\n| ----------- | ----------- |\n| .prevent\t| 阻止默认事件 |\n| .stop\t| 阻止事件冒泡 |\n| .self\t| 只有操作自身时，才会触发自身上的事件（常用于点击事件，即只有点击自己时，才会触发自身上绑定的点击事件） |\n| .once\t| 事件只触发一次 |\n| .capture\t| 把事件的运营模式变成捕获（不常用） |\n| .passive\t| 提升事件性能，常用于滚动事件 scroll（不常用） |\n\n5、Vue 按键修饰符\n| 名称      | 描述 |\n| ----------- | ----------- |\n| .enter | 触发事件的按键是 enter 键，才会真正触发事件。类似的按键修饰符还有.tab、.delete、.esc、.up、.down、.left、.right、.ctrl（不常用）|\n\n6、鼠标修饰符\n| 名称      | 描述 |\n| ----------- | ----------- |\n| .left | 触发事件的鼠标按键是左键，才会真正触发事件。类似的按键修饰符还有.right、.middle（不常用）|\n\n7、精确修饰符\n| 名称      | 描述 |\n| ----------- | ----------- |\n|.exact | 精确的按住指定键，才会触发事件（不常用）|\n\n8、Vue dom 相关\n| 名称      | 描述 |\n| ----------- | ----------- |\n| ref | 标签、组件设置该属性后，可以通过“this.$refs.xxx”的形式获取到该标签的 dom 节点、该组件的引用 |\n\n9、创建组件\n| 名称      | 描述 |\n| ----------- | ----------- |\n| app.component() | 组定义全局组件，其中“app”是保存 Vue 实例的变量 |\n| components:{} | 注册局部组件 |\n\n10、组件之间传值\n| 名称      | 描述 |\n| ----------- | ----------- |\n| props | 父组件调用子组件时，可以通过标签属性的形式给子组件传值。子组件内部通过 props 属性接收传过来的值。子组件接收值时，可以进行校验：type 用来校验数据类型，default 用来设置默认值，require 用来设置必填 |\n| Non-Props\t| 父组件给子组件传递内容的时候，子组件不通过 props 接收。此时 vue 底层会把传递过来的属性，放在子组件最外层元素上，将其变成子组件的一个属性 |\n| inheritAttrs | 用来设置子组件是否继承父组件传递过来的 Non-props 属性 |\n| $emit | 子组件通过$emit 方法触发自定义事件，利用该事件可以给父组件传值 |\n| emits | 声明组件会向外触发什么事件。通过 emits 属性我们就能知道该组件会向外触发什么事件 |\n| v-model | 父子组件之间可以通过 v-model 实现双向数据绑定，子组件接收到的数据可以用modelValue 表示父组件要通过 v-model 给子组件绑定数据（选学绑定多个数据）|\n\n11、动态组件\n| 名称      | 描述 |\n| ----------- | ----------- |\n|  ``` <component/> ``` | 定义动态组件。具体显示哪个组件，由“:is”属性的值决定 |\n| ``` <keep-alive></keep-alive>``` | 缓存标签。包裹动态组件后，可以保留上一个组件中的内容 |\n\n12、异步组件\n| 名称      | 描述 |\n| ----------- | ----------- |\n| Vue.defineAsyncComponent() |\t该方法可以创建异步组件（了解即可） |\n\n13、依赖、注入\n| 名称      | 描述 |\n| ----------- | ----------- |\n| provide，inject | 祖先组件，通过 provide，可以向子孙组件注入依赖孙子组件，通过 inject，可以在可用的注入内容中搜索需要使用的内容，二者配合，可以实现祖先组件向子孙组件传值（一次性的） |\n\n\n","source":"_posts/vue基础一览.md","raw":"---\ntitle: vue基础一览\ndate: 2025-01-05 19:57:41\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n## Vue3基础一览表\n\nVue 是一套用于构建用户界面的渐进式框架\n\n与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n\n1、Vue 实例（应用）相关\n\n| 名称      | 描述 |\n| ----------- | ----------- |\n| Vue.createApp()      | 创建 vue 实例（应用），参数可以决定根组件如何渲染       |\n| mount(){}   | 该方法可以将 vue 实例，挂载在 dom 元素上        |\n| template | 模板，用来定义该 vue 应用的展示内容。 |\n| data(){}\t| 用来定义数据 |\n| ```{{}}``` | 插值表达式① 可以用来将变量渲染到 dom 结构中。用于起始标签与闭合标签之间② ```{{}}```中间可以写 js 表达式 |\n| $data | vue 实例的属性，可以用来操作 data 中定义的数据 |\n| methods:{} | 里面可以书写方法（函数） |\n| computed:{} | 计算属性，当计算属性依赖的内容发生变更时，才会重新执行计算 |\n| watch:{}\t| 监听器，可以监听数据的改变，做异步操作 |\n\n\n2、Vue 样式相关\n| 名称      | 描述 |\n| ----------- | ----------- |\n|:class\t| v-bind:class 的简写形式，为元素绑定动态类名 |\n|$attrs\t| 可以用来获取父组件绑定在子组件身上的属性（Non-Props 属性）|\n|:style\t| v-bind:style 的简写形式，为元素绑定动态的行内样式 |\n\n3、Vue 常见指令\n| 名称      | 描述 |\n| ----------- | ----------- |\n| v-on\t| 绑定事件 ① “v-on:”可以简写成@ ② 可以使用“@[变量名]”，绑定动态事件。即，具体绑定哪个事件，由“变量名”决定 ③ 事件处理函数中，可以使用事件对象 event ④ 事件处理函数中，如果想传递多个参数，可以使用$event 指代事件对象 |\n| v-if ，v-else-if ，v-else | 条件渲染：通过控制 dom 结构的存在与否来实现区块的显示和隐藏\n三者可以组合使用 |\n| v-show | 条件渲染：>通过控制元素的 display 属性来控制区块的显示和隐藏 |\n| v-for | 列表渲染：用来循环数组、对象为了提高性能，可以使用 :key（前面没有出现:key,要不要考虑加上）为元素绑定唯一的 key 值 |\n| v-model | ① 表单中的内容与 data 方法中的变量，进行双向数据绑定 ② 复选框，可以通过 true-value、false-value 属性指定选中、没选中时显示的值（不常用） ③ v-model 可以使用.lazy 修饰符，减少数据的变化频率（不常用） ④ v-model 可以使用.number 修饰符将数据转换成数字（不常用） ⑤ v-model 可以使用.trim 修饰符去除数据首尾的空格 |\n| v-bind | ① 可以将标签/组件上的某个属性与数据变量进行绑定。 ② “v-bind:”可以简写成 “:” ③ 可以使用 “:[变量名]”，绑定动态属性。即，具体绑定哪个属性，由“变量名”决定 |\n| v-html | 识别变量中的 html 标签；将变量中的 html 结构解析成 dom 结构 |\n| v-once |\t标签/组件只渲染一次；渲染一次后，如果数据变化，标签/组件的内容不会跟随变化 |\n\n4、Vue 事件修饰符\n| 名称      | 描述 |\n| ----------- | ----------- |\n| .prevent\t| 阻止默认事件 |\n| .stop\t| 阻止事件冒泡 |\n| .self\t| 只有操作自身时，才会触发自身上的事件（常用于点击事件，即只有点击自己时，才会触发自身上绑定的点击事件） |\n| .once\t| 事件只触发一次 |\n| .capture\t| 把事件的运营模式变成捕获（不常用） |\n| .passive\t| 提升事件性能，常用于滚动事件 scroll（不常用） |\n\n5、Vue 按键修饰符\n| 名称      | 描述 |\n| ----------- | ----------- |\n| .enter | 触发事件的按键是 enter 键，才会真正触发事件。类似的按键修饰符还有.tab、.delete、.esc、.up、.down、.left、.right、.ctrl（不常用）|\n\n6、鼠标修饰符\n| 名称      | 描述 |\n| ----------- | ----------- |\n| .left | 触发事件的鼠标按键是左键，才会真正触发事件。类似的按键修饰符还有.right、.middle（不常用）|\n\n7、精确修饰符\n| 名称      | 描述 |\n| ----------- | ----------- |\n|.exact | 精确的按住指定键，才会触发事件（不常用）|\n\n8、Vue dom 相关\n| 名称      | 描述 |\n| ----------- | ----------- |\n| ref | 标签、组件设置该属性后，可以通过“this.$refs.xxx”的形式获取到该标签的 dom 节点、该组件的引用 |\n\n9、创建组件\n| 名称      | 描述 |\n| ----------- | ----------- |\n| app.component() | 组定义全局组件，其中“app”是保存 Vue 实例的变量 |\n| components:{} | 注册局部组件 |\n\n10、组件之间传值\n| 名称      | 描述 |\n| ----------- | ----------- |\n| props | 父组件调用子组件时，可以通过标签属性的形式给子组件传值。子组件内部通过 props 属性接收传过来的值。子组件接收值时，可以进行校验：type 用来校验数据类型，default 用来设置默认值，require 用来设置必填 |\n| Non-Props\t| 父组件给子组件传递内容的时候，子组件不通过 props 接收。此时 vue 底层会把传递过来的属性，放在子组件最外层元素上，将其变成子组件的一个属性 |\n| inheritAttrs | 用来设置子组件是否继承父组件传递过来的 Non-props 属性 |\n| $emit | 子组件通过$emit 方法触发自定义事件，利用该事件可以给父组件传值 |\n| emits | 声明组件会向外触发什么事件。通过 emits 属性我们就能知道该组件会向外触发什么事件 |\n| v-model | 父子组件之间可以通过 v-model 实现双向数据绑定，子组件接收到的数据可以用modelValue 表示父组件要通过 v-model 给子组件绑定数据（选学绑定多个数据）|\n\n11、动态组件\n| 名称      | 描述 |\n| ----------- | ----------- |\n|  ``` <component/> ``` | 定义动态组件。具体显示哪个组件，由“:is”属性的值决定 |\n| ``` <keep-alive></keep-alive>``` | 缓存标签。包裹动态组件后，可以保留上一个组件中的内容 |\n\n12、异步组件\n| 名称      | 描述 |\n| ----------- | ----------- |\n| Vue.defineAsyncComponent() |\t该方法可以创建异步组件（了解即可） |\n\n13、依赖、注入\n| 名称      | 描述 |\n| ----------- | ----------- |\n| provide，inject | 祖先组件，通过 provide，可以向子孙组件注入依赖孙子组件，通过 inject，可以在可用的注入内容中搜索需要使用的内容，二者配合，可以实现祖先组件向子孙组件传值（一次性的） |\n\n\n","slug":"vue基础一览","published":1,"updated":"2025-01-05T15:36:06.903Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfd000ymcuyhjwrgoeu","content":"<h2 id=\"vue3基础一览表\"><a class=\"anchor\" href=\"#vue3基础一览表\">#</a> Vue3 基础一览表</h2>\n<p>Vue 是一套用于构建用户界面的渐进式框架</p>\n<p>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>1、Vue 实例（应用）相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.createApp()</td>\n<td>创建 vue 实例（应用），参数可以决定根组件如何渲染</td>\n</tr>\n<tr>\n<td>mount(){}</td>\n<td>该方法可以将 vue 实例，挂载在 dom 元素上</td>\n</tr>\n<tr>\n<td>template</td>\n<td>模板，用来定义该 vue 应用的展示内容。</td>\n</tr>\n<tr>\n<td>data(){}</td>\n<td>用来定义数据</td>\n</tr>\n<tr>\n<td><code>&#123;&#123;&#125;&#125;</code></td>\n<td>插值表达式① 可以用来将变量渲染到 dom 结构中。用于起始标签与闭合标签之间②  <code>&#123;&#123;&#125;&#125;</code>  中间可以写 js 表达式</td>\n</tr>\n<tr>\n<td>$data</td>\n<td>vue 实例的属性，可以用来操作 data 中定义的数据</td>\n</tr>\n<tr>\n<td>methods:{}</td>\n<td>里面可以书写方法（函数）</td>\n</tr>\n<tr>\n<td>computed:{}</td>\n<td>计算属性，当计算属性依赖的内容发生变更时，才会重新执行计算</td>\n</tr>\n<tr>\n<td>watch:{}</td>\n<td>监听器，可以监听数据的改变，做异步操作</td>\n</tr>\n</tbody>\n</table>\n<p>2、Vue 样式相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:class</td>\n<td>v-bind:class 的简写形式，为元素绑定动态类名</td>\n</tr>\n<tr>\n<td>$attrs</td>\n<td>可以用来获取父组件绑定在子组件身上的属性（Non-Props 属性）</td>\n</tr>\n<tr>\n<td>:style</td>\n<td>v-bind:style 的简写形式，为元素绑定动态的行内样式</td>\n</tr>\n</tbody>\n</table>\n<p>3、Vue 常见指令</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-on</td>\n<td>绑定事件 ① “v-on:” 可以简写成 @ ② 可以使用 “@[变量名]”，绑定动态事件。即，具体绑定哪个事件，由 “变量名” 决定 ③ 事件处理函数中，可以使用事件对象 event ④ 事件处理函数中，如果想传递多个参数，可以使用 $event 指代事件对象</td>\n</tr>\n<tr>\n<td>v-if ，v-else-if ，v-else</td>\n<td>条件渲染：通过控制 dom 结构的存在与否来实现区块的显示和隐藏</td>\n</tr>\n<tr>\n<td>三者可以组合使用</td>\n</tr>\n<tr>\n<td>v-show</td>\n<td>条件渲染：&gt; 通过控制元素的 display 属性来控制区块的显示和隐藏</td>\n</tr>\n<tr>\n<td>v-for</td>\n<td>列表渲染：用来循环数组、对象为了提高性能，可以使用 :key（前面没有出现:key, 要不要考虑加上）为元素绑定唯一的 key 值</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>① 表单中的内容与 data 方法中的变量，进行双向数据绑定 ② 复选框，可以通过 true-value、false-value 属性指定选中、没选中时显示的值（不常用） ③ v-model 可以使用.lazy 修饰符，减少数据的变化频率（不常用） ④ v-model 可以使用.number 修饰符将数据转换成数字（不常用） ⑤ v-model 可以使用.trim 修饰符去除数据首尾的空格</td>\n</tr>\n<tr>\n<td>v-bind</td>\n<td>① 可以将标签 / 组件上的某个属性与数据变量进行绑定。 ② “v-bind:” 可以简写成 “:” ③ 可以使用 “:[变量名]”，绑定动态属性。即，具体绑定哪个属性，由 “变量名” 决定</td>\n</tr>\n<tr>\n<td>v-html</td>\n<td>识别变量中的 html 标签；将变量中的 html 结构解析成 dom 结构</td>\n</tr>\n<tr>\n<td>v-once</td>\n<td>标签 / 组件只渲染一次；渲染一次后，如果数据变化，标签 / 组件的内容不会跟随变化</td>\n</tr>\n</tbody>\n</table>\n<p>4、Vue 事件修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.prevent</td>\n<td>阻止默认事件</td>\n</tr>\n<tr>\n<td>.stop</td>\n<td>阻止事件冒泡</td>\n</tr>\n<tr>\n<td>.self</td>\n<td>只有操作自身时，才会触发自身上的事件（常用于点击事件，即只有点击自己时，才会触发自身上绑定的点击事件）</td>\n</tr>\n<tr>\n<td>.once</td>\n<td>事件只触发一次</td>\n</tr>\n<tr>\n<td>.capture</td>\n<td>把事件的运营模式变成捕获（不常用）</td>\n</tr>\n<tr>\n<td>.passive</td>\n<td>提升事件性能，常用于滚动事件 scroll（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>5、Vue 按键修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.enter</td>\n<td>触发事件的按键是 enter 键，才会真正触发事件。类似的按键修饰符还有.tab、.delete、.esc、.up、.down、.left、.right、.ctrl（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>6、鼠标修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.left</td>\n<td>触发事件的鼠标按键是左键，才会真正触发事件。类似的按键修饰符还有.right、.middle（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>7、精确修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.exact</td>\n<td>精确的按住指定键，才会触发事件（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>8、Vue dom 相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ref</td>\n<td>标签、组件设置该属性后，可以通过 “<span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHJlZnMueHh4\">this.$refs.xxx</span>” 的形式获取到该标签的 dom 节点、该组件的引用</td>\n</tr>\n</tbody>\n</table>\n<p>9、创建组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.component()</td>\n<td>组定义全局组件，其中 “app” 是保存 Vue 实例的变量</td>\n</tr>\n<tr>\n<td>components:{}</td>\n<td>注册局部组件</td>\n</tr>\n</tbody>\n</table>\n<p>10、组件之间传值</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>props</td>\n<td>父组件调用子组件时，可以通过标签属性的形式给子组件传值。子组件内部通过 props 属性接收传过来的值。子组件接收值时，可以进行校验：type 用来校验数据类型，default 用来设置默认值，require 用来设置必填</td>\n</tr>\n<tr>\n<td>Non-Props</td>\n<td>父组件给子组件传递内容的时候，子组件不通过 props 接收。此时 vue 底层会把传递过来的属性，放在子组件最外层元素上，将其变成子组件的一个属性</td>\n</tr>\n<tr>\n<td>inheritAttrs</td>\n<td>用来设置子组件是否继承父组件传递过来的 Non-props 属性</td>\n</tr>\n<tr>\n<td>$emit</td>\n<td>子组件通过 $emit 方法触发自定义事件，利用该事件可以给父组件传值</td>\n</tr>\n<tr>\n<td>emits</td>\n<td>声明组件会向外触发什么事件。通过 emits 属性我们就能知道该组件会向外触发什么事件</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>父子组件之间可以通过 v-model 实现双向数据绑定，子组件接收到的数据可以用 modelValue 表示父组件要通过 v-model 给子组件绑定数据（选学绑定多个数据）</td>\n</tr>\n</tbody>\n</table>\n<p>11、动态组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;component/&gt;</code></td>\n<td>定义动态组件。具体显示哪个组件，由 “:is” 属性的值决定</td>\n</tr>\n<tr>\n<td><code> &lt;keep-alive&gt;&lt;/keep-alive&gt;</code></td>\n<td>缓存标签。包裹动态组件后，可以保留上一个组件中的内容</td>\n</tr>\n</tbody>\n</table>\n<p>12、异步组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.defineAsyncComponent()</td>\n<td>该方法可以创建异步组件（了解即可）</td>\n</tr>\n</tbody>\n</table>\n<p>13、依赖、注入</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>provide，inject</td>\n<td>祖先组件，通过 provide，可以向子孙组件注入依赖孙子组件，通过 inject，可以在可用的注入内容中搜索需要使用的内容，二者配合，可以实现祖先组件向子孙组件传值（一次性的）</td>\n</tr>\n</tbody>\n</table>\n","length":2482,"excerpt":"","more":"<h2 id=\"vue3基础一览表\"><a class=\"anchor\" href=\"#vue3基础一览表\">#</a> Vue3 基础一览表</h2>\n<p>Vue 是一套用于构建用户界面的渐进式框架</p>\n<p>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>1、Vue 实例（应用）相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.createApp()</td>\n<td>创建 vue 实例（应用），参数可以决定根组件如何渲染</td>\n</tr>\n<tr>\n<td>mount(){}</td>\n<td>该方法可以将 vue 实例，挂载在 dom 元素上</td>\n</tr>\n<tr>\n<td>template</td>\n<td>模板，用来定义该 vue 应用的展示内容。</td>\n</tr>\n<tr>\n<td>data(){}</td>\n<td>用来定义数据</td>\n</tr>\n<tr>\n<td><code>&#123;&#123;&#125;&#125;</code></td>\n<td>插值表达式① 可以用来将变量渲染到 dom 结构中。用于起始标签与闭合标签之间②  <code>&#123;&#123;&#125;&#125;</code>  中间可以写 js 表达式</td>\n</tr>\n<tr>\n<td>$data</td>\n<td>vue 实例的属性，可以用来操作 data 中定义的数据</td>\n</tr>\n<tr>\n<td>methods:{}</td>\n<td>里面可以书写方法（函数）</td>\n</tr>\n<tr>\n<td>computed:{}</td>\n<td>计算属性，当计算属性依赖的内容发生变更时，才会重新执行计算</td>\n</tr>\n<tr>\n<td>watch:{}</td>\n<td>监听器，可以监听数据的改变，做异步操作</td>\n</tr>\n</tbody>\n</table>\n<p>2、Vue 样式相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:class</td>\n<td>v-bind:class 的简写形式，为元素绑定动态类名</td>\n</tr>\n<tr>\n<td>$attrs</td>\n<td>可以用来获取父组件绑定在子组件身上的属性（Non-Props 属性）</td>\n</tr>\n<tr>\n<td>:style</td>\n<td>v-bind:style 的简写形式，为元素绑定动态的行内样式</td>\n</tr>\n</tbody>\n</table>\n<p>3、Vue 常见指令</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-on</td>\n<td>绑定事件 ① “v-on:” 可以简写成 @ ② 可以使用 “@[变量名]”，绑定动态事件。即，具体绑定哪个事件，由 “变量名” 决定 ③ 事件处理函数中，可以使用事件对象 event ④ 事件处理函数中，如果想传递多个参数，可以使用 $event 指代事件对象</td>\n</tr>\n<tr>\n<td>v-if ，v-else-if ，v-else</td>\n<td>条件渲染：通过控制 dom 结构的存在与否来实现区块的显示和隐藏</td>\n</tr>\n<tr>\n<td>三者可以组合使用</td>\n</tr>\n<tr>\n<td>v-show</td>\n<td>条件渲染：&gt; 通过控制元素的 display 属性来控制区块的显示和隐藏</td>\n</tr>\n<tr>\n<td>v-for</td>\n<td>列表渲染：用来循环数组、对象为了提高性能，可以使用 :key（前面没有出现:key, 要不要考虑加上）为元素绑定唯一的 key 值</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>① 表单中的内容与 data 方法中的变量，进行双向数据绑定 ② 复选框，可以通过 true-value、false-value 属性指定选中、没选中时显示的值（不常用） ③ v-model 可以使用.lazy 修饰符，减少数据的变化频率（不常用） ④ v-model 可以使用.number 修饰符将数据转换成数字（不常用） ⑤ v-model 可以使用.trim 修饰符去除数据首尾的空格</td>\n</tr>\n<tr>\n<td>v-bind</td>\n<td>① 可以将标签 / 组件上的某个属性与数据变量进行绑定。 ② “v-bind:” 可以简写成 “:” ③ 可以使用 “:[变量名]”，绑定动态属性。即，具体绑定哪个属性，由 “变量名” 决定</td>\n</tr>\n<tr>\n<td>v-html</td>\n<td>识别变量中的 html 标签；将变量中的 html 结构解析成 dom 结构</td>\n</tr>\n<tr>\n<td>v-once</td>\n<td>标签 / 组件只渲染一次；渲染一次后，如果数据变化，标签 / 组件的内容不会跟随变化</td>\n</tr>\n</tbody>\n</table>\n<p>4、Vue 事件修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.prevent</td>\n<td>阻止默认事件</td>\n</tr>\n<tr>\n<td>.stop</td>\n<td>阻止事件冒泡</td>\n</tr>\n<tr>\n<td>.self</td>\n<td>只有操作自身时，才会触发自身上的事件（常用于点击事件，即只有点击自己时，才会触发自身上绑定的点击事件）</td>\n</tr>\n<tr>\n<td>.once</td>\n<td>事件只触发一次</td>\n</tr>\n<tr>\n<td>.capture</td>\n<td>把事件的运营模式变成捕获（不常用）</td>\n</tr>\n<tr>\n<td>.passive</td>\n<td>提升事件性能，常用于滚动事件 scroll（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>5、Vue 按键修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.enter</td>\n<td>触发事件的按键是 enter 键，才会真正触发事件。类似的按键修饰符还有.tab、.delete、.esc、.up、.down、.left、.right、.ctrl（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>6、鼠标修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.left</td>\n<td>触发事件的鼠标按键是左键，才会真正触发事件。类似的按键修饰符还有.right、.middle（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>7、精确修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.exact</td>\n<td>精确的按住指定键，才会触发事件（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>8、Vue dom 相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ref</td>\n<td>标签、组件设置该属性后，可以通过 “<span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHJlZnMueHh4\">this.$refs.xxx</span>” 的形式获取到该标签的 dom 节点、该组件的引用</td>\n</tr>\n</tbody>\n</table>\n<p>9、创建组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.component()</td>\n<td>组定义全局组件，其中 “app” 是保存 Vue 实例的变量</td>\n</tr>\n<tr>\n<td>components:{}</td>\n<td>注册局部组件</td>\n</tr>\n</tbody>\n</table>\n<p>10、组件之间传值</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>props</td>\n<td>父组件调用子组件时，可以通过标签属性的形式给子组件传值。子组件内部通过 props 属性接收传过来的值。子组件接收值时，可以进行校验：type 用来校验数据类型，default 用来设置默认值，require 用来设置必填</td>\n</tr>\n<tr>\n<td>Non-Props</td>\n<td>父组件给子组件传递内容的时候，子组件不通过 props 接收。此时 vue 底层会把传递过来的属性，放在子组件最外层元素上，将其变成子组件的一个属性</td>\n</tr>\n<tr>\n<td>inheritAttrs</td>\n<td>用来设置子组件是否继承父组件传递过来的 Non-props 属性</td>\n</tr>\n<tr>\n<td>$emit</td>\n<td>子组件通过 $emit 方法触发自定义事件，利用该事件可以给父组件传值</td>\n</tr>\n<tr>\n<td>emits</td>\n<td>声明组件会向外触发什么事件。通过 emits 属性我们就能知道该组件会向外触发什么事件</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>父子组件之间可以通过 v-model 实现双向数据绑定，子组件接收到的数据可以用 modelValue 表示父组件要通过 v-model 给子组件绑定数据（选学绑定多个数据）</td>\n</tr>\n</tbody>\n</table>\n<p>11、动态组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;component/&gt;</code></td>\n<td>定义动态组件。具体显示哪个组件，由 “:is” 属性的值决定</td>\n</tr>\n<tr>\n<td><code> &lt;keep-alive&gt;&lt;/keep-alive&gt;</code></td>\n<td>缓存标签。包裹动态组件后，可以保留上一个组件中的内容</td>\n</tr>\n</tbody>\n</table>\n<p>12、异步组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.defineAsyncComponent()</td>\n<td>该方法可以创建异步组件（了解即可）</td>\n</tr>\n</tbody>\n</table>\n<p>13、依赖、注入</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>provide，inject</td>\n<td>祖先组件，通过 provide，可以向子孙组件注入依赖孙子组件，通过 inject，可以在可用的注入内容中搜索需要使用的内容，二者配合，可以实现祖先组件向子孙组件传值（一次性的）</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"vue脚手架一览表","date":"2025-01-06T08:01:29.000Z","_content":"\n##  vue脚手架一览表\n\n1、使用 vue 脚手架安装项目\n| 名称 | 描述 |\n| --- | --- |\n| node-v | 查看 node 版本 |\n| npm -v | 查看 npm 版本 |\n| nrm | 用来切换 npm 下载源：安装指令：npm install nrm -gnpm install nrm -g 可以使用 nrm ls，查看有哪些源 ;使用 nrm use XXX 切换下载源 |\n| @vue/cli\t| vue 较新版本的脚手架，用来创建 vue 项目：1、使用 npm install -g @vue/cli 安装脚手架 2、执行 vue create XXX，创建项目，项目名是 XXX 3、执行 cd XXX，进入项目 4、执行 npm run serve 启动项目。备注：如果之前安装过老版本的脚手架工具，可以使用 npm uninstall vue-cli -g 指令卸载一下 |\n\n\n2、路由\n| 名称 | 描述 |\n| --- | --- |\n| createRouter() | 创建路由 |\n| path\t| 配置路由路径 |\n| name\t| 配置路由的名字 |\n| component\t| 配置路由的组件 |\n| router-link | 跳转路由的标签，具体跳到哪，可以用 to 属性来定义 |\n| router-view | 负责展示当前路由对应的组件内容 |\n| import |\t异步加载路由 |\n\n3、vuex\n| 名称 | 描述 |\n| --- | --- |\n| createStore() | 创建 vuex，管理全局数据 |\n| state\t| 用来创建全局数据可以通过 this.$store.state.xxx 获取具体的数据 |\n| actions |\t定义 action |\n| dispatch\t| 派发 action |\n| mutations\t| 定义 mutations |\n| commit\t| 提交一个 commit，触发一个 mutation;在 action 中使用：this.commit(xxx);在 mutation 中使用：this.$store.commit(xxx) |\n| modules\t| 对 store 进行局部拆分（了解即可）|\n\n4、发送 ajax 请求\n| 名称 | 描述 |\n| --- | --- |\n| axios | 插件，用来发送 ajax 请求:npm install axios --save 通过 get 方法，发送 get 请求,通过 post 方法，发送 post 请求 |\n\n\n5、插件  \n| 名称 | 描述 |\n| --- | --- |\n| Vetur\t| vscode 开发 vue 项目时，语法提示插件 |","source":"_posts/vue脚手架一览表.md","raw":"---\ntitle: vue脚手架一览表\ndate: 2025-01-06 16:01:29\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n##  vue脚手架一览表\n\n1、使用 vue 脚手架安装项目\n| 名称 | 描述 |\n| --- | --- |\n| node-v | 查看 node 版本 |\n| npm -v | 查看 npm 版本 |\n| nrm | 用来切换 npm 下载源：安装指令：npm install nrm -gnpm install nrm -g 可以使用 nrm ls，查看有哪些源 ;使用 nrm use XXX 切换下载源 |\n| @vue/cli\t| vue 较新版本的脚手架，用来创建 vue 项目：1、使用 npm install -g @vue/cli 安装脚手架 2、执行 vue create XXX，创建项目，项目名是 XXX 3、执行 cd XXX，进入项目 4、执行 npm run serve 启动项目。备注：如果之前安装过老版本的脚手架工具，可以使用 npm uninstall vue-cli -g 指令卸载一下 |\n\n\n2、路由\n| 名称 | 描述 |\n| --- | --- |\n| createRouter() | 创建路由 |\n| path\t| 配置路由路径 |\n| name\t| 配置路由的名字 |\n| component\t| 配置路由的组件 |\n| router-link | 跳转路由的标签，具体跳到哪，可以用 to 属性来定义 |\n| router-view | 负责展示当前路由对应的组件内容 |\n| import |\t异步加载路由 |\n\n3、vuex\n| 名称 | 描述 |\n| --- | --- |\n| createStore() | 创建 vuex，管理全局数据 |\n| state\t| 用来创建全局数据可以通过 this.$store.state.xxx 获取具体的数据 |\n| actions |\t定义 action |\n| dispatch\t| 派发 action |\n| mutations\t| 定义 mutations |\n| commit\t| 提交一个 commit，触发一个 mutation;在 action 中使用：this.commit(xxx);在 mutation 中使用：this.$store.commit(xxx) |\n| modules\t| 对 store 进行局部拆分（了解即可）|\n\n4、发送 ajax 请求\n| 名称 | 描述 |\n| --- | --- |\n| axios | 插件，用来发送 ajax 请求:npm install axios --save 通过 get 方法，发送 get 请求,通过 post 方法，发送 post 请求 |\n\n\n5、插件  \n| 名称 | 描述 |\n| --- | --- |\n| Vetur\t| vscode 开发 vue 项目时，语法提示插件 |","slug":"vue脚手架一览表","published":1,"updated":"2025-01-06T09:07:08.609Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfd0010mcuy9n55fz3z","content":"<h2 id=\"vue脚手架一览表\"><a class=\"anchor\" href=\"#vue脚手架一览表\">#</a> vue 脚手架一览表</h2>\n<p>1、使用 vue 脚手架安装项目</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>node-v</td>\n<td>查看 node 版本</td>\n</tr>\n<tr>\n<td>npm -v</td>\n<td>查看 npm 版本</td>\n</tr>\n<tr>\n<td>nrm</td>\n<td>用来切换 npm 下载源：安装指令：npm install nrm -gnpm install nrm -g 可以使用 nrm ls，查看有哪些源；使用 nrm use XXX 切换下载源</td>\n</tr>\n<tr>\n<td>@vue/cli</td>\n<td>vue 较新版本的脚手架，用来创建 vue 项目：1、使用 npm install -g @vue/cli 安装脚手架 2、执行 vue create XXX，创建项目，项目名是 XXX 3、执行 cd XXX，进入项目 4、执行 npm run serve 启动项目。备注：如果之前安装过老版本的脚手架工具，可以使用 npm uninstall vue-cli -g 指令卸载一下</td>\n</tr>\n</tbody>\n</table>\n<p>2、路由</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createRouter()</td>\n<td>创建路由</td>\n</tr>\n<tr>\n<td>path</td>\n<td>配置路由路径</td>\n</tr>\n<tr>\n<td>name</td>\n<td>配置路由的名字</td>\n</tr>\n<tr>\n<td>component</td>\n<td>配置路由的组件</td>\n</tr>\n<tr>\n<td>router-link</td>\n<td>跳转路由的标签，具体跳到哪，可以用 to 属性来定义</td>\n</tr>\n<tr>\n<td>router-view</td>\n<td>负责展示当前路由对应的组件内容</td>\n</tr>\n<tr>\n<td>import</td>\n<td>异步加载路由</td>\n</tr>\n</tbody>\n</table>\n<p>3、vuex</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createStore()</td>\n<td>创建 vuex，管理全局数据</td>\n</tr>\n<tr>\n<td>state</td>\n<td>用来创建全局数据可以通过 <span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHN0b3JlLnN0YXRlLnh4eA==\">this.$store.state.xxx</span> 获取具体的数据</td>\n</tr>\n<tr>\n<td>actions</td>\n<td>定义 action</td>\n</tr>\n<tr>\n<td>dispatch</td>\n<td>派发 action</td>\n</tr>\n<tr>\n<td>mutations</td>\n<td>定义 mutations</td>\n</tr>\n<tr>\n<td>commit</td>\n<td>提交一个 commit，触发一个 mutation; 在 action 中使用：this.commit (xxx); 在 mutation 中使用：this.$store.commit (xxx)</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>对 store 进行局部拆分（了解即可）</td>\n</tr>\n</tbody>\n</table>\n<p>4、发送 ajax 请求</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>axios</td>\n<td>插件，用来发送 ajax 请求:npm install axios --save 通过 get 方法，发送 get 请求，通过 post 方法，发送 post 请求</td>\n</tr>\n</tbody>\n</table>\n<p>5、插件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vetur</td>\n<td>vscode 开发 vue 项目时，语法提示插件</td>\n</tr>\n</tbody>\n</table>\n","length":817,"excerpt":"","more":"<h2 id=\"vue脚手架一览表\"><a class=\"anchor\" href=\"#vue脚手架一览表\">#</a> vue 脚手架一览表</h2>\n<p>1、使用 vue 脚手架安装项目</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>node-v</td>\n<td>查看 node 版本</td>\n</tr>\n<tr>\n<td>npm -v</td>\n<td>查看 npm 版本</td>\n</tr>\n<tr>\n<td>nrm</td>\n<td>用来切换 npm 下载源：安装指令：npm install nrm -gnpm install nrm -g 可以使用 nrm ls，查看有哪些源；使用 nrm use XXX 切换下载源</td>\n</tr>\n<tr>\n<td>@vue/cli</td>\n<td>vue 较新版本的脚手架，用来创建 vue 项目：1、使用 npm install -g @vue/cli 安装脚手架 2、执行 vue create XXX，创建项目，项目名是 XXX 3、执行 cd XXX，进入项目 4、执行 npm run serve 启动项目。备注：如果之前安装过老版本的脚手架工具，可以使用 npm uninstall vue-cli -g 指令卸载一下</td>\n</tr>\n</tbody>\n</table>\n<p>2、路由</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createRouter()</td>\n<td>创建路由</td>\n</tr>\n<tr>\n<td>path</td>\n<td>配置路由路径</td>\n</tr>\n<tr>\n<td>name</td>\n<td>配置路由的名字</td>\n</tr>\n<tr>\n<td>component</td>\n<td>配置路由的组件</td>\n</tr>\n<tr>\n<td>router-link</td>\n<td>跳转路由的标签，具体跳到哪，可以用 to 属性来定义</td>\n</tr>\n<tr>\n<td>router-view</td>\n<td>负责展示当前路由对应的组件内容</td>\n</tr>\n<tr>\n<td>import</td>\n<td>异步加载路由</td>\n</tr>\n</tbody>\n</table>\n<p>3、vuex</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createStore()</td>\n<td>创建 vuex，管理全局数据</td>\n</tr>\n<tr>\n<td>state</td>\n<td>用来创建全局数据可以通过 <span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHN0b3JlLnN0YXRlLnh4eA==\">this.$store.state.xxx</span> 获取具体的数据</td>\n</tr>\n<tr>\n<td>actions</td>\n<td>定义 action</td>\n</tr>\n<tr>\n<td>dispatch</td>\n<td>派发 action</td>\n</tr>\n<tr>\n<td>mutations</td>\n<td>定义 mutations</td>\n</tr>\n<tr>\n<td>commit</td>\n<td>提交一个 commit，触发一个 mutation; 在 action 中使用：this.commit (xxx); 在 mutation 中使用：this.$store.commit (xxx)</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>对 store 进行局部拆分（了解即可）</td>\n</tr>\n</tbody>\n</table>\n<p>4、发送 ajax 请求</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>axios</td>\n<td>插件，用来发送 ajax 请求:npm install axios --save 通过 get 方法，发送 get 请求，通过 post 方法，发送 post 请求</td>\n</tr>\n</tbody>\n</table>\n<p>5、插件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vetur</td>\n<td>vscode 开发 vue 项目时，语法提示插件</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"vue进阶一览","date":"2025-01-05T13:07:22.000Z","_content":"\n## Vue3进阶一览表\n\n1、Vue 的设计模式\n\n| 名称      | 描述 |\n| ----------- | ----------- |\n| mvvm | m 代表 model，指代数据；v 代表 view，指代视图；vm 代表 viewModel，指代视图数据连接层 |\n| vm | 自定义的变量名，用来接收 app.mount()的返回值，代表 vue 应用的根组件。利用该变量，可以使用 vm.$data 直接访问、操作根组件上的数据 |\n\n2、Vue 生命周期函数\n\n| 名称      | 描述 |\n| ----------- | ----------- |\n| beforeCreate() | 在实例生成之前，会自动执行该函数 |\n| created() | 在实例生成之后，会自动执行该函数 |\n| beforeMount() | 在组件内容被渲染到页面之前，会自动执行该函数 |\n| mounted() | 组件内容被渲染到页面后，会自动执行该函数 |\n| beforeUpdate() | 当 data 中的数据发生变化时会自动执行该函数 |\n| updated() | 当 data 中的数据发生变化，同时页面完成更新后，会自动执行的函数 |\n| beforeUnmount() | 当 Vue 应用失效时，会自动执行该函数 |\n| unmounted() | 当 Vue 应用失效后，同时 dom 完全销毁之后，自动执行的函数 |\n\n3、vue 实例的方法\n| 名称      | 描述 |\n| ----------- | ----------- |\n| unmount()\t| 销毁 vue 应用 |\n\n4、插槽\n| 名称      | 描述 |\n| ----------- | ----------- |\n| ```<slot></slot>``` | 插槽。父组件可以利用插槽往子组件中传入 dom 结构 |\n| name | 定义插槽的名字(具名插槽）。父组件要使用“v-slot:插槽名”指定为哪个插槽传递内容“v-slot:插槽名”可以简写成“#插槽名” |\n| ``` <template></template> ``` | 占位符 |\n| v-slot |\t父组件利用 v-slot 可以接收到子组件绑定到插槽上的数据 |\n\n5、标签、组件的过渡与动画\n| 名称      | 描述 |\n| ----------- | ----------- |\n| ```<transition></transition>``` |\t用来给标签、组件添加过渡效果 |\n| .v-enter-from | 元素准备入场时的默认类名 |\n| .v-enter-to | 元素准备离场时的默认类名 |\n| .v-enter-active | 元素入场时的默认类名 |\n| .v-leave-from | 元素准备离场时的默认类名 |\n| .v-leave-to | 元素已经离场后的默认类名 |\n| .v-leave-active | 元素离场过程中的默认类名 |\n| name | 通过给<transition></transition>组件设置 name 属性，可以统一修改元素做动画时的类名 |\n| .enter-from-class | 单独设置元素准备入场时的类名 |\n| .enter-active-class | 单独设置元素入场的过程中的类名 |\n| .enter-to-class | 单独设置元素入场之后的类名 |\n| .leave-from-class | 单独设置元素准备出场时的类名 |\n| .leave-active-class | 单独设置元素出场过程中的类名 |\n| .leave-to-class | 单独设置元素出场之后的类名 |\n| type | 当元素既有过渡又有动画，并且二者时间不一致时，使用 type 属性，可以指定以哪一个时间为准 |\n| :duration | 设置过渡、动画的时间，单位是毫秒 |\n| :css | 设置是否使用 css 动画 |\n| @before-enter | 元素准备入场时的钩子 |\n| @enter | 元素入场过程中的钩子 |\n| @after-enter | 元素入场结束时的钩子 |\n| @before-leave | 元素准备出场时的钩子 |\n| @leave | 元素出场过程中的钩子 |\n| @leave-after | 元素出场结束时的钩子 |\n| mode | 设置多个单元素之间状态切换时，可以采取的模式：out-in：先隐藏，再进来 in-out：先进来，再隐藏 |\n| appear | 设置初次显示的元素，也有动画效果 |\n\n6、列表动画\n| 名称      | 描述 |\n| ----------- | ----------- |\n| ``` <transition-group></transition-group> ``` | 用来定义列表动画。使用该组件包裹的一组元素，当元素新增或减少时，可以设置动画效果。动画的相关效果可以设置在默认类名 v-enter-from、v-enter-active、v-enter-to、v-leave-from、v-leave-active、v-leave-to 下 |\n| .v-move\t| 列表元素移动过程中的，默认的类名 |\n\n7、 mixin 混入\n| 名称      | 描述 |\n| ----------- | ----------- |\n| mixins | 定义局部的混入 |\n| app.mixin() | 定义全局的混入 |\n| $options | 可以通过该属性，获取 vue 应用中的自定义属性 |\n| app.config.optionMergeStragies |\t为自定义选项定义合并策略 |\n\n8、自定义指令 directive\n| 名称      | 描述 |\n| ----------- | ----------- |\n| app.directive() |\t定义全局自定义指令，使用指令时，直接在元素上写上“v-指令名”即可，自定义指令时，也可以使用 mounted、updated 等生命周期函数 |\n| directives:{} | 引入局部指令 |\n| binding |\t获取指令上的相关信息 |\n\n9、teleport 传送门 \n| 名称      | 描述 |\n| ----------- | ----------- |\n| ```<teleport></teleport>``` |\t传送门，用来将包裹的内容，传送到 to 属性对应的 dom 元素下 | \n\n10、 render 函数（选学）\n| 名称      | 描述 |\n| ----------- | ----------- |\n| render() |\t用来定义组件的内容 |\n| $slots |\t用来获取插槽的相关内容 |\n\n11、 plugin 插件\n| 名称      | 描述 |\n| ----------- | ----------- |\n| install(){} |\t定义插件时，会执行的方法 |\n| app.use() | 使用插件 |\n| app.provide()\t| 注入全局依赖 |\n| app.config.globalProperties | 扩展全局属性 |\n| $watch |\tvue 实例的方法，用来监听数据 |\n\n12、 composition API\n| 名称      | 描述 |\n| ----------- | ----------- |\n| setup(){} |\t实例被完全初始化之前执行的函数，可以使用 this.$options.setup()获取 setup 函数中的返回值 |\n| ref() |\t将基础类型的数据，转成响应式 配合 ref 属性，可用于获取 dom 节点 |\n| reactive() |\t将非基础型的数据，转成响应式 |\n| readonly() |\t将响应式数据转成只读数据 |\n| toRefs()\t| 从响应式对象中解构出具备响应式的数据 |\n| toRef() | 可以从响应式数据中解构出不存在的数据，并且解构出来的值是响应式的 |\n| context |\tsetup 函数的第二个参数，可以用来获取到 None-Props 属性、插槽，以及 emit 方法 |\n| computed() |\t用来定义计算属性，里面可以写 get、set 方法 |\n| watch() |\t监听器，可以让其监一个或多个数据的变化 |\n| immediate\t| 配置 watch 监听器，让其变成非惰性 |\n| watchEffect() |\t监听器，会自动检测自己内部的代码，如果自己内部代码的某些依赖变化了，watchEffect 方法就会自动执行 |\n| provide()\t| 祖先组件，通过 provide，向子孙组件注入依赖 |\n| inject() | 子孙组件，通过 inject，来获取祖先组件注入的依赖 |\n| useStore() | 用来获取 store，从而操作 vuex 中的数据 |\n\n\n13、composition API 中的生命周期函数\n| 名称      | 描述 |\n| ----------- | ----------- |\n| onBeforeMount(){} |\tvue 实例即将挂载到页面上的时候执行，等价于 beforeMount |\n| onMounted(){} |\tvue 实例挂载到页面上之后执行，等价于 mounted |\n| onBeforeUpdate(){} |\t当数据发生变化时执行，等价于 beforeUpdate |\n| onUpdated(){} |\t当数据发生变化，同时页面完成更新后，会自动执行，等价于 updated |\n| onBeforeUnmount(){} |\t组件从页面移除之前，会自动执行该函数，等价于 beforeUnMount |\n| onUnmounted(){} |\t组件从页面移除之后，自动执行的函数，等价于 unmounted |\n| onRenderTracked(){} | 每次渲染之后，收集依赖的时候会自动执行的函数 |\n| onRenderTriggered(){}\t| 每次重新渲染被触发的时候，自动执行的函数 |\n\n\n","source":"_posts/vue进阶一览.md","raw":"---\ntitle: vue进阶一览\ndate: 2025-01-05 21:07:22\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n## Vue3进阶一览表\n\n1、Vue 的设计模式\n\n| 名称      | 描述 |\n| ----------- | ----------- |\n| mvvm | m 代表 model，指代数据；v 代表 view，指代视图；vm 代表 viewModel，指代视图数据连接层 |\n| vm | 自定义的变量名，用来接收 app.mount()的返回值，代表 vue 应用的根组件。利用该变量，可以使用 vm.$data 直接访问、操作根组件上的数据 |\n\n2、Vue 生命周期函数\n\n| 名称      | 描述 |\n| ----------- | ----------- |\n| beforeCreate() | 在实例生成之前，会自动执行该函数 |\n| created() | 在实例生成之后，会自动执行该函数 |\n| beforeMount() | 在组件内容被渲染到页面之前，会自动执行该函数 |\n| mounted() | 组件内容被渲染到页面后，会自动执行该函数 |\n| beforeUpdate() | 当 data 中的数据发生变化时会自动执行该函数 |\n| updated() | 当 data 中的数据发生变化，同时页面完成更新后，会自动执行的函数 |\n| beforeUnmount() | 当 Vue 应用失效时，会自动执行该函数 |\n| unmounted() | 当 Vue 应用失效后，同时 dom 完全销毁之后，自动执行的函数 |\n\n3、vue 实例的方法\n| 名称      | 描述 |\n| ----------- | ----------- |\n| unmount()\t| 销毁 vue 应用 |\n\n4、插槽\n| 名称      | 描述 |\n| ----------- | ----------- |\n| ```<slot></slot>``` | 插槽。父组件可以利用插槽往子组件中传入 dom 结构 |\n| name | 定义插槽的名字(具名插槽）。父组件要使用“v-slot:插槽名”指定为哪个插槽传递内容“v-slot:插槽名”可以简写成“#插槽名” |\n| ``` <template></template> ``` | 占位符 |\n| v-slot |\t父组件利用 v-slot 可以接收到子组件绑定到插槽上的数据 |\n\n5、标签、组件的过渡与动画\n| 名称      | 描述 |\n| ----------- | ----------- |\n| ```<transition></transition>``` |\t用来给标签、组件添加过渡效果 |\n| .v-enter-from | 元素准备入场时的默认类名 |\n| .v-enter-to | 元素准备离场时的默认类名 |\n| .v-enter-active | 元素入场时的默认类名 |\n| .v-leave-from | 元素准备离场时的默认类名 |\n| .v-leave-to | 元素已经离场后的默认类名 |\n| .v-leave-active | 元素离场过程中的默认类名 |\n| name | 通过给<transition></transition>组件设置 name 属性，可以统一修改元素做动画时的类名 |\n| .enter-from-class | 单独设置元素准备入场时的类名 |\n| .enter-active-class | 单独设置元素入场的过程中的类名 |\n| .enter-to-class | 单独设置元素入场之后的类名 |\n| .leave-from-class | 单独设置元素准备出场时的类名 |\n| .leave-active-class | 单独设置元素出场过程中的类名 |\n| .leave-to-class | 单独设置元素出场之后的类名 |\n| type | 当元素既有过渡又有动画，并且二者时间不一致时，使用 type 属性，可以指定以哪一个时间为准 |\n| :duration | 设置过渡、动画的时间，单位是毫秒 |\n| :css | 设置是否使用 css 动画 |\n| @before-enter | 元素准备入场时的钩子 |\n| @enter | 元素入场过程中的钩子 |\n| @after-enter | 元素入场结束时的钩子 |\n| @before-leave | 元素准备出场时的钩子 |\n| @leave | 元素出场过程中的钩子 |\n| @leave-after | 元素出场结束时的钩子 |\n| mode | 设置多个单元素之间状态切换时，可以采取的模式：out-in：先隐藏，再进来 in-out：先进来，再隐藏 |\n| appear | 设置初次显示的元素，也有动画效果 |\n\n6、列表动画\n| 名称      | 描述 |\n| ----------- | ----------- |\n| ``` <transition-group></transition-group> ``` | 用来定义列表动画。使用该组件包裹的一组元素，当元素新增或减少时，可以设置动画效果。动画的相关效果可以设置在默认类名 v-enter-from、v-enter-active、v-enter-to、v-leave-from、v-leave-active、v-leave-to 下 |\n| .v-move\t| 列表元素移动过程中的，默认的类名 |\n\n7、 mixin 混入\n| 名称      | 描述 |\n| ----------- | ----------- |\n| mixins | 定义局部的混入 |\n| app.mixin() | 定义全局的混入 |\n| $options | 可以通过该属性，获取 vue 应用中的自定义属性 |\n| app.config.optionMergeStragies |\t为自定义选项定义合并策略 |\n\n8、自定义指令 directive\n| 名称      | 描述 |\n| ----------- | ----------- |\n| app.directive() |\t定义全局自定义指令，使用指令时，直接在元素上写上“v-指令名”即可，自定义指令时，也可以使用 mounted、updated 等生命周期函数 |\n| directives:{} | 引入局部指令 |\n| binding |\t获取指令上的相关信息 |\n\n9、teleport 传送门 \n| 名称      | 描述 |\n| ----------- | ----------- |\n| ```<teleport></teleport>``` |\t传送门，用来将包裹的内容，传送到 to 属性对应的 dom 元素下 | \n\n10、 render 函数（选学）\n| 名称      | 描述 |\n| ----------- | ----------- |\n| render() |\t用来定义组件的内容 |\n| $slots |\t用来获取插槽的相关内容 |\n\n11、 plugin 插件\n| 名称      | 描述 |\n| ----------- | ----------- |\n| install(){} |\t定义插件时，会执行的方法 |\n| app.use() | 使用插件 |\n| app.provide()\t| 注入全局依赖 |\n| app.config.globalProperties | 扩展全局属性 |\n| $watch |\tvue 实例的方法，用来监听数据 |\n\n12、 composition API\n| 名称      | 描述 |\n| ----------- | ----------- |\n| setup(){} |\t实例被完全初始化之前执行的函数，可以使用 this.$options.setup()获取 setup 函数中的返回值 |\n| ref() |\t将基础类型的数据，转成响应式 配合 ref 属性，可用于获取 dom 节点 |\n| reactive() |\t将非基础型的数据，转成响应式 |\n| readonly() |\t将响应式数据转成只读数据 |\n| toRefs()\t| 从响应式对象中解构出具备响应式的数据 |\n| toRef() | 可以从响应式数据中解构出不存在的数据，并且解构出来的值是响应式的 |\n| context |\tsetup 函数的第二个参数，可以用来获取到 None-Props 属性、插槽，以及 emit 方法 |\n| computed() |\t用来定义计算属性，里面可以写 get、set 方法 |\n| watch() |\t监听器，可以让其监一个或多个数据的变化 |\n| immediate\t| 配置 watch 监听器，让其变成非惰性 |\n| watchEffect() |\t监听器，会自动检测自己内部的代码，如果自己内部代码的某些依赖变化了，watchEffect 方法就会自动执行 |\n| provide()\t| 祖先组件，通过 provide，向子孙组件注入依赖 |\n| inject() | 子孙组件，通过 inject，来获取祖先组件注入的依赖 |\n| useStore() | 用来获取 store，从而操作 vuex 中的数据 |\n\n\n13、composition API 中的生命周期函数\n| 名称      | 描述 |\n| ----------- | ----------- |\n| onBeforeMount(){} |\tvue 实例即将挂载到页面上的时候执行，等价于 beforeMount |\n| onMounted(){} |\tvue 实例挂载到页面上之后执行，等价于 mounted |\n| onBeforeUpdate(){} |\t当数据发生变化时执行，等价于 beforeUpdate |\n| onUpdated(){} |\t当数据发生变化，同时页面完成更新后，会自动执行，等价于 updated |\n| onBeforeUnmount(){} |\t组件从页面移除之前，会自动执行该函数，等价于 beforeUnMount |\n| onUnmounted(){} |\t组件从页面移除之后，自动执行的函数，等价于 unmounted |\n| onRenderTracked(){} | 每次渲染之后，收集依赖的时候会自动执行的函数 |\n| onRenderTriggered(){}\t| 每次重新渲染被触发的时候，自动执行的函数 |\n\n\n","slug":"vue进阶一览","published":1,"updated":"2025-01-05T15:31:49.623Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dff0015mcuy4gkib5kh","content":"<h2 id=\"vue3进阶一览表\"><a class=\"anchor\" href=\"#vue3进阶一览表\">#</a> Vue3 进阶一览表</h2>\n<p>1、Vue 的设计模式</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mvvm</td>\n<td>m 代表 model，指代数据；v 代表 view，指代视图；vm 代表 viewModel，指代视图数据连接层</td>\n</tr>\n<tr>\n<td>vm</td>\n<td>自定义的变量名，用来接收 app.mount () 的返回值，代表 vue 应用的根组件。利用该变量，可以使用 vm.$data 直接访问、操作根组件上的数据</td>\n</tr>\n</tbody>\n</table>\n<p>2、Vue 生命周期函数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate()</td>\n<td>在实例生成之前，会自动执行该函数</td>\n</tr>\n<tr>\n<td>created()</td>\n<td>在实例生成之后，会自动执行该函数</td>\n</tr>\n<tr>\n<td>beforeMount()</td>\n<td>在组件内容被渲染到页面之前，会自动执行该函数</td>\n</tr>\n<tr>\n<td>mounted()</td>\n<td>组件内容被渲染到页面后，会自动执行该函数</td>\n</tr>\n<tr>\n<td>beforeUpdate()</td>\n<td>当 data 中的数据发生变化时会自动执行该函数</td>\n</tr>\n<tr>\n<td>updated()</td>\n<td>当 data 中的数据发生变化，同时页面完成更新后，会自动执行的函数</td>\n</tr>\n<tr>\n<td>beforeUnmount()</td>\n<td>当 Vue 应用失效时，会自动执行该函数</td>\n</tr>\n<tr>\n<td>unmounted()</td>\n<td>当 Vue 应用失效后，同时 dom 完全销毁之后，自动执行的函数</td>\n</tr>\n</tbody>\n</table>\n<p>3、vue 实例的方法</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>unmount()</td>\n<td>销毁 vue 应用</td>\n</tr>\n</tbody>\n</table>\n<p>4、插槽</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;slot&gt;&lt;/slot&gt;</code></td>\n<td>插槽。父组件可以利用插槽往子组件中传入 dom 结构</td>\n</tr>\n<tr>\n<td>name</td>\n<td>定义插槽的名字 (具名插槽）。父组件要使用 “v-slot: 插槽名” 指定为哪个插槽传递内容 “v-slot: 插槽名” 可以简写成 “# 插槽名”</td>\n</tr>\n<tr>\n<td><code>&lt;template&gt;&lt;/template&gt;</code></td>\n<td>占位符</td>\n</tr>\n<tr>\n<td>v-slot</td>\n<td>父组件利用 v-slot 可以接收到子组件绑定到插槽上的数据</td>\n</tr>\n</tbody>\n</table>\n<p>5、标签、组件的过渡与动画</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;transition&gt;&lt;/transition&gt;</code></td>\n<td>用来给标签、组件添加过渡效果</td>\n</tr>\n<tr>\n<td>.v-enter-from</td>\n<td>元素准备入场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-enter-to</td>\n<td>元素准备离场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-enter-active</td>\n<td>元素入场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-from</td>\n<td>元素准备离场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-to</td>\n<td>元素已经离场后的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-active</td>\n<td>元素离场过程中的默认类名</td>\n</tr>\n<tr>\n<td>name</td>\n<td>通过给<transition></transition>组件设置 name 属性，可以统一修改元素做动画时的类名</td>\n</tr>\n<tr>\n<td>.enter-from-class</td>\n<td>单独设置元素准备入场时的类名</td>\n</tr>\n<tr>\n<td>.enter-active-class</td>\n<td>单独设置元素入场的过程中的类名</td>\n</tr>\n<tr>\n<td>.enter-to-class</td>\n<td>单独设置元素入场之后的类名</td>\n</tr>\n<tr>\n<td>.leave-from-class</td>\n<td>单独设置元素准备出场时的类名</td>\n</tr>\n<tr>\n<td>.leave-active-class</td>\n<td>单独设置元素出场过程中的类名</td>\n</tr>\n<tr>\n<td>.leave-to-class</td>\n<td>单独设置元素出场之后的类名</td>\n</tr>\n<tr>\n<td>type</td>\n<td>当元素既有过渡又有动画，并且二者时间不一致时，使用 type 属性，可以指定以哪一个时间为准</td>\n</tr>\n<tr>\n<td>:duration</td>\n<td>设置过渡、动画的时间，单位是毫秒</td>\n</tr>\n<tr>\n<td>:css</td>\n<td>设置是否使用 css 动画</td>\n</tr>\n<tr>\n<td>@before-enter</td>\n<td>元素准备入场时的钩子</td>\n</tr>\n<tr>\n<td>@enter</td>\n<td>元素入场过程中的钩子</td>\n</tr>\n<tr>\n<td>@after-enter</td>\n<td>元素入场结束时的钩子</td>\n</tr>\n<tr>\n<td>@before-leave</td>\n<td>元素准备出场时的钩子</td>\n</tr>\n<tr>\n<td>@leave</td>\n<td>元素出场过程中的钩子</td>\n</tr>\n<tr>\n<td>@leave-after</td>\n<td>元素出场结束时的钩子</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>设置多个单元素之间状态切换时，可以采取的模式：out-in：先隐藏，再进来 in-out：先进来，再隐藏</td>\n</tr>\n<tr>\n<td>appear</td>\n<td>设置初次显示的元素，也有动画效果</td>\n</tr>\n</tbody>\n</table>\n<p>6、列表动画</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;transition-group&gt;&lt;/transition-group&gt;</code></td>\n<td>用来定义列表动画。使用该组件包裹的一组元素，当元素新增或减少时，可以设置动画效果。动画的相关效果可以设置在默认类名 v-enter-from、v-enter-active、v-enter-to、v-leave-from、v-leave-active、v-leave-to 下</td>\n</tr>\n<tr>\n<td>.v-move</td>\n<td>列表元素移动过程中的，默认的类名</td>\n</tr>\n</tbody>\n</table>\n<p>7、 mixin 混入</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mixins</td>\n<td>定义局部的混入</td>\n</tr>\n<tr>\n<td>app.mixin()</td>\n<td>定义全局的混入</td>\n</tr>\n<tr>\n<td>$options</td>\n<td>可以通过该属性，获取 vue 应用中的自定义属性</td>\n</tr>\n<tr>\n<td>app.config.optionMergeStragies</td>\n<td>为自定义选项定义合并策略</td>\n</tr>\n</tbody>\n</table>\n<p>8、自定义指令 directive</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.directive()</td>\n<td>定义全局自定义指令，使用指令时，直接在元素上写上 “v - 指令名” 即可，自定义指令时，也可以使用 mounted、updated 等生命周期函数</td>\n</tr>\n<tr>\n<td>directives:{}</td>\n<td>引入局部指令</td>\n</tr>\n<tr>\n<td>binding</td>\n<td>获取指令上的相关信息</td>\n</tr>\n</tbody>\n</table>\n<p>9、teleport 传送门</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;teleport&gt;&lt;/teleport&gt;</code></td>\n<td>传送门，用来将包裹的内容，传送到 to 属性对应的 dom 元素下</td>\n</tr>\n</tbody>\n</table>\n<p>10、 render 函数（选学）</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>render()</td>\n<td>用来定义组件的内容</td>\n</tr>\n<tr>\n<td>$slots</td>\n<td>用来获取插槽的相关内容</td>\n</tr>\n</tbody>\n</table>\n<p>11、 plugin 插件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>install(){}</td>\n<td>定义插件时，会执行的方法</td>\n</tr>\n<tr>\n<td>app.use()</td>\n<td>使用插件</td>\n</tr>\n<tr>\n<td>app.provide()</td>\n<td>注入全局依赖</td>\n</tr>\n<tr>\n<td>app.config.globalProperties</td>\n<td>扩展全局属性</td>\n</tr>\n<tr>\n<td>$watch</td>\n<td>vue 实例的方法，用来监听数据</td>\n</tr>\n</tbody>\n</table>\n<p>12、 composition API</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setup(){}</td>\n<td>实例被完全初始化之前执行的函数，可以使用 this.$options.setup () 获取 setup 函数中的返回值</td>\n</tr>\n<tr>\n<td>ref()</td>\n<td>将基础类型的数据，转成响应式 配合 ref 属性，可用于获取 dom 节点</td>\n</tr>\n<tr>\n<td>reactive()</td>\n<td>将非基础型的数据，转成响应式</td>\n</tr>\n<tr>\n<td>readonly()</td>\n<td>将响应式数据转成只读数据</td>\n</tr>\n<tr>\n<td>toRefs()</td>\n<td>从响应式对象中解构出具备响应式的数据</td>\n</tr>\n<tr>\n<td>toRef()</td>\n<td>可以从响应式数据中解构出不存在的数据，并且解构出来的值是响应式的</td>\n</tr>\n<tr>\n<td>context</td>\n<td>setup 函数的第二个参数，可以用来获取到 None-Props 属性、插槽，以及 emit 方法</td>\n</tr>\n<tr>\n<td>computed()</td>\n<td>用来定义计算属性，里面可以写 get、set 方法</td>\n</tr>\n<tr>\n<td>watch()</td>\n<td>监听器，可以让其监一个或多个数据的变化</td>\n</tr>\n<tr>\n<td>immediate</td>\n<td>配置 watch 监听器，让其变成非惰性</td>\n</tr>\n<tr>\n<td>watchEffect()</td>\n<td>监听器，会自动检测自己内部的代码，如果自己内部代码的某些依赖变化了，watchEffect 方法就会自动执行</td>\n</tr>\n<tr>\n<td>provide()</td>\n<td>祖先组件，通过 provide，向子孙组件注入依赖</td>\n</tr>\n<tr>\n<td>inject()</td>\n<td>子孙组件，通过 inject，来获取祖先组件注入的依赖</td>\n</tr>\n<tr>\n<td>useStore()</td>\n<td>用来获取 store，从而操作 vuex 中的数据</td>\n</tr>\n</tbody>\n</table>\n<p>13、composition API 中的生命周期函数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onBeforeMount(){}</td>\n<td>vue 实例即将挂载到页面上的时候执行，等价于 beforeMount</td>\n</tr>\n<tr>\n<td>onMounted(){}</td>\n<td>vue 实例挂载到页面上之后执行，等价于 mounted</td>\n</tr>\n<tr>\n<td>onBeforeUpdate(){}</td>\n<td>当数据发生变化时执行，等价于 beforeUpdate</td>\n</tr>\n<tr>\n<td>onUpdated(){}</td>\n<td>当数据发生变化，同时页面完成更新后，会自动执行，等价于 updated</td>\n</tr>\n<tr>\n<td>onBeforeUnmount(){}</td>\n<td>组件从页面移除之前，会自动执行该函数，等价于 beforeUnMount</td>\n</tr>\n<tr>\n<td>onUnmounted(){}</td>\n<td>组件从页面移除之后，自动执行的函数，等价于 unmounted</td>\n</tr>\n<tr>\n<td>onRenderTracked(){}</td>\n<td>每次渲染之后，收集依赖的时候会自动执行的函数</td>\n</tr>\n<tr>\n<td>onRenderTriggered(){}</td>\n<td>每次重新渲染被触发的时候，自动执行的函数</td>\n</tr>\n</tbody>\n</table>\n","length":3038,"excerpt":"","more":"<h2 id=\"vue3进阶一览表\"><a class=\"anchor\" href=\"#vue3进阶一览表\">#</a> Vue3 进阶一览表</h2>\n<p>1、Vue 的设计模式</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mvvm</td>\n<td>m 代表 model，指代数据；v 代表 view，指代视图；vm 代表 viewModel，指代视图数据连接层</td>\n</tr>\n<tr>\n<td>vm</td>\n<td>自定义的变量名，用来接收 app.mount () 的返回值，代表 vue 应用的根组件。利用该变量，可以使用 vm.$data 直接访问、操作根组件上的数据</td>\n</tr>\n</tbody>\n</table>\n<p>2、Vue 生命周期函数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate()</td>\n<td>在实例生成之前，会自动执行该函数</td>\n</tr>\n<tr>\n<td>created()</td>\n<td>在实例生成之后，会自动执行该函数</td>\n</tr>\n<tr>\n<td>beforeMount()</td>\n<td>在组件内容被渲染到页面之前，会自动执行该函数</td>\n</tr>\n<tr>\n<td>mounted()</td>\n<td>组件内容被渲染到页面后，会自动执行该函数</td>\n</tr>\n<tr>\n<td>beforeUpdate()</td>\n<td>当 data 中的数据发生变化时会自动执行该函数</td>\n</tr>\n<tr>\n<td>updated()</td>\n<td>当 data 中的数据发生变化，同时页面完成更新后，会自动执行的函数</td>\n</tr>\n<tr>\n<td>beforeUnmount()</td>\n<td>当 Vue 应用失效时，会自动执行该函数</td>\n</tr>\n<tr>\n<td>unmounted()</td>\n<td>当 Vue 应用失效后，同时 dom 完全销毁之后，自动执行的函数</td>\n</tr>\n</tbody>\n</table>\n<p>3、vue 实例的方法</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>unmount()</td>\n<td>销毁 vue 应用</td>\n</tr>\n</tbody>\n</table>\n<p>4、插槽</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;slot&gt;&lt;/slot&gt;</code></td>\n<td>插槽。父组件可以利用插槽往子组件中传入 dom 结构</td>\n</tr>\n<tr>\n<td>name</td>\n<td>定义插槽的名字 (具名插槽）。父组件要使用 “v-slot: 插槽名” 指定为哪个插槽传递内容 “v-slot: 插槽名” 可以简写成 “# 插槽名”</td>\n</tr>\n<tr>\n<td><code>&lt;template&gt;&lt;/template&gt;</code></td>\n<td>占位符</td>\n</tr>\n<tr>\n<td>v-slot</td>\n<td>父组件利用 v-slot 可以接收到子组件绑定到插槽上的数据</td>\n</tr>\n</tbody>\n</table>\n<p>5、标签、组件的过渡与动画</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;transition&gt;&lt;/transition&gt;</code></td>\n<td>用来给标签、组件添加过渡效果</td>\n</tr>\n<tr>\n<td>.v-enter-from</td>\n<td>元素准备入场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-enter-to</td>\n<td>元素准备离场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-enter-active</td>\n<td>元素入场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-from</td>\n<td>元素准备离场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-to</td>\n<td>元素已经离场后的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-active</td>\n<td>元素离场过程中的默认类名</td>\n</tr>\n<tr>\n<td>name</td>\n<td>通过给<transition></transition>组件设置 name 属性，可以统一修改元素做动画时的类名</td>\n</tr>\n<tr>\n<td>.enter-from-class</td>\n<td>单独设置元素准备入场时的类名</td>\n</tr>\n<tr>\n<td>.enter-active-class</td>\n<td>单独设置元素入场的过程中的类名</td>\n</tr>\n<tr>\n<td>.enter-to-class</td>\n<td>单独设置元素入场之后的类名</td>\n</tr>\n<tr>\n<td>.leave-from-class</td>\n<td>单独设置元素准备出场时的类名</td>\n</tr>\n<tr>\n<td>.leave-active-class</td>\n<td>单独设置元素出场过程中的类名</td>\n</tr>\n<tr>\n<td>.leave-to-class</td>\n<td>单独设置元素出场之后的类名</td>\n</tr>\n<tr>\n<td>type</td>\n<td>当元素既有过渡又有动画，并且二者时间不一致时，使用 type 属性，可以指定以哪一个时间为准</td>\n</tr>\n<tr>\n<td>:duration</td>\n<td>设置过渡、动画的时间，单位是毫秒</td>\n</tr>\n<tr>\n<td>:css</td>\n<td>设置是否使用 css 动画</td>\n</tr>\n<tr>\n<td>@before-enter</td>\n<td>元素准备入场时的钩子</td>\n</tr>\n<tr>\n<td>@enter</td>\n<td>元素入场过程中的钩子</td>\n</tr>\n<tr>\n<td>@after-enter</td>\n<td>元素入场结束时的钩子</td>\n</tr>\n<tr>\n<td>@before-leave</td>\n<td>元素准备出场时的钩子</td>\n</tr>\n<tr>\n<td>@leave</td>\n<td>元素出场过程中的钩子</td>\n</tr>\n<tr>\n<td>@leave-after</td>\n<td>元素出场结束时的钩子</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>设置多个单元素之间状态切换时，可以采取的模式：out-in：先隐藏，再进来 in-out：先进来，再隐藏</td>\n</tr>\n<tr>\n<td>appear</td>\n<td>设置初次显示的元素，也有动画效果</td>\n</tr>\n</tbody>\n</table>\n<p>6、列表动画</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;transition-group&gt;&lt;/transition-group&gt;</code></td>\n<td>用来定义列表动画。使用该组件包裹的一组元素，当元素新增或减少时，可以设置动画效果。动画的相关效果可以设置在默认类名 v-enter-from、v-enter-active、v-enter-to、v-leave-from、v-leave-active、v-leave-to 下</td>\n</tr>\n<tr>\n<td>.v-move</td>\n<td>列表元素移动过程中的，默认的类名</td>\n</tr>\n</tbody>\n</table>\n<p>7、 mixin 混入</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mixins</td>\n<td>定义局部的混入</td>\n</tr>\n<tr>\n<td>app.mixin()</td>\n<td>定义全局的混入</td>\n</tr>\n<tr>\n<td>$options</td>\n<td>可以通过该属性，获取 vue 应用中的自定义属性</td>\n</tr>\n<tr>\n<td>app.config.optionMergeStragies</td>\n<td>为自定义选项定义合并策略</td>\n</tr>\n</tbody>\n</table>\n<p>8、自定义指令 directive</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.directive()</td>\n<td>定义全局自定义指令，使用指令时，直接在元素上写上 “v - 指令名” 即可，自定义指令时，也可以使用 mounted、updated 等生命周期函数</td>\n</tr>\n<tr>\n<td>directives:{}</td>\n<td>引入局部指令</td>\n</tr>\n<tr>\n<td>binding</td>\n<td>获取指令上的相关信息</td>\n</tr>\n</tbody>\n</table>\n<p>9、teleport 传送门</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;teleport&gt;&lt;/teleport&gt;</code></td>\n<td>传送门，用来将包裹的内容，传送到 to 属性对应的 dom 元素下</td>\n</tr>\n</tbody>\n</table>\n<p>10、 render 函数（选学）</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>render()</td>\n<td>用来定义组件的内容</td>\n</tr>\n<tr>\n<td>$slots</td>\n<td>用来获取插槽的相关内容</td>\n</tr>\n</tbody>\n</table>\n<p>11、 plugin 插件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>install(){}</td>\n<td>定义插件时，会执行的方法</td>\n</tr>\n<tr>\n<td>app.use()</td>\n<td>使用插件</td>\n</tr>\n<tr>\n<td>app.provide()</td>\n<td>注入全局依赖</td>\n</tr>\n<tr>\n<td>app.config.globalProperties</td>\n<td>扩展全局属性</td>\n</tr>\n<tr>\n<td>$watch</td>\n<td>vue 实例的方法，用来监听数据</td>\n</tr>\n</tbody>\n</table>\n<p>12、 composition API</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setup(){}</td>\n<td>实例被完全初始化之前执行的函数，可以使用 this.$options.setup () 获取 setup 函数中的返回值</td>\n</tr>\n<tr>\n<td>ref()</td>\n<td>将基础类型的数据，转成响应式 配合 ref 属性，可用于获取 dom 节点</td>\n</tr>\n<tr>\n<td>reactive()</td>\n<td>将非基础型的数据，转成响应式</td>\n</tr>\n<tr>\n<td>readonly()</td>\n<td>将响应式数据转成只读数据</td>\n</tr>\n<tr>\n<td>toRefs()</td>\n<td>从响应式对象中解构出具备响应式的数据</td>\n</tr>\n<tr>\n<td>toRef()</td>\n<td>可以从响应式数据中解构出不存在的数据，并且解构出来的值是响应式的</td>\n</tr>\n<tr>\n<td>context</td>\n<td>setup 函数的第二个参数，可以用来获取到 None-Props 属性、插槽，以及 emit 方法</td>\n</tr>\n<tr>\n<td>computed()</td>\n<td>用来定义计算属性，里面可以写 get、set 方法</td>\n</tr>\n<tr>\n<td>watch()</td>\n<td>监听器，可以让其监一个或多个数据的变化</td>\n</tr>\n<tr>\n<td>immediate</td>\n<td>配置 watch 监听器，让其变成非惰性</td>\n</tr>\n<tr>\n<td>watchEffect()</td>\n<td>监听器，会自动检测自己内部的代码，如果自己内部代码的某些依赖变化了，watchEffect 方法就会自动执行</td>\n</tr>\n<tr>\n<td>provide()</td>\n<td>祖先组件，通过 provide，向子孙组件注入依赖</td>\n</tr>\n<tr>\n<td>inject()</td>\n<td>子孙组件，通过 inject，来获取祖先组件注入的依赖</td>\n</tr>\n<tr>\n<td>useStore()</td>\n<td>用来获取 store，从而操作 vuex 中的数据</td>\n</tr>\n</tbody>\n</table>\n<p>13、composition API 中的生命周期函数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onBeforeMount(){}</td>\n<td>vue 实例即将挂载到页面上的时候执行，等价于 beforeMount</td>\n</tr>\n<tr>\n<td>onMounted(){}</td>\n<td>vue 实例挂载到页面上之后执行，等价于 mounted</td>\n</tr>\n<tr>\n<td>onBeforeUpdate(){}</td>\n<td>当数据发生变化时执行，等价于 beforeUpdate</td>\n</tr>\n<tr>\n<td>onUpdated(){}</td>\n<td>当数据发生变化，同时页面完成更新后，会自动执行，等价于 updated</td>\n</tr>\n<tr>\n<td>onBeforeUnmount(){}</td>\n<td>组件从页面移除之前，会自动执行该函数，等价于 beforeUnMount</td>\n</tr>\n<tr>\n<td>onUnmounted(){}</td>\n<td>组件从页面移除之后，自动执行的函数，等价于 unmounted</td>\n</tr>\n<tr>\n<td>onRenderTracked(){}</td>\n<td>每次渲染之后，收集依赖的时候会自动执行的函数</td>\n</tr>\n<tr>\n<td>onRenderTriggered(){}</td>\n<td>每次重新渲染被触发的时候，自动执行的函数</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"前端基础--HTTP基本概念","date":"2024-07-29T10:02:55.000Z","_content":"\n# HTTP常见面试题\n\n## HTTP基本概念\n\n[幕布链接](https://mubu.com/doc/4n-ehUovcCP)\n\n\n1. HTTP 是什么？描述一下\n- HTTP 是超文本传输协议，也就是HyperText Transfer Protocol。\n\n2. 能否详细解释「超文本传输协议」？\n- HTTP的名字「超文本协议传输」，HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。\n\n3. 那「HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议HTTP」 ，这种说法正确吗？\n- 这种说法是不正确的。因为也可以是「服务器< -- >服务器」，所以采用两点之间的描述会更准确。\n\n4. HTTP 常见的状态码，有哪些？\n- 1xx,2xx,3xx,4xx,5xx\n\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/错误码.jpg\">\n</div>\n\n- 1xx 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。\n- 2xx 类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。\n<br>「200 OK」是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。\n<br>「204 No Content」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。\n<br>「206 Partial Content」是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。\n\n- 3xx 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。\n<br>「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。\n<br>「302 Moved Permanently」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。\n<br>301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。\n<br>「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。\n\n- 4xx 类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。\n<br>「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。\n<br>「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。\n<br>「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。\n\n- 5xx 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。\n<br> 「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。\n<br>「501 Not Implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。\n<br>「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。\n<br>「503 Service Unavailable」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试”的意思。\n\n## http 常见字段有哪些？\n\n1. Host\n- 客户端发送请求时，用来指定服务器的域名。\n- Host: http://www.A.com\n- 有了 Host 字段，就可以将请求发往「同一台」服务器上的不同网站。\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/01.jpg\">\n</div>\n<br>\n\n2. Content-Length 字段\n- 服务器在返回数据时，会有 Content-Length 字段，表明本次回应的数据长度。\n- Content-Length: 1000\n- 如上面则是告诉浏览器，本次服务器回应的数据长度是 1000 个字节，后面的字节就属于下一个回应了。\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/02.jpg\">\n</div>\n<br>\n3. Connection 字段\n- Connection 字段最常用于客户端要求服务器使用 TCP 持久连接，以便其他请求复用。\n- HTTP/1.1 版本的默认连接都是持久连接，但为了兼容老版本的 HTTP，需要指定 Connection 首部字段的值为 Keep-Alive。\n- Connection: keep-alive\n- 一个可以复用的 TCP 连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段。\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/03.jpg\">\n</div>\n<br>\n\n4. Content-Type 字段\n- Content-Type 字段用于服务器回应时，告诉客户端，本次数据是什么格式。\n- Content-Type: text/html; charset=utf-8\n- 上面的类型表明，发送的是网页，而且编码是UTF-8。\n- 客户端请求的时候，可以使用 Accept 字段声明自己可以接受哪些数据格式。\n- Accept: */*\n- 上面代码中，客户端声明自己可以接受任何格式的数据。\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/04.jpg\">\n</div>\n<br>\n\n5. Content-Encoding 字段\n- Content-Encoding 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式\n- Content-Encoding: gzip\n- 下面表示服务器返回的数据采用了 gzip 方式压缩，告知客户端需要用此方式解压。\n- 客户端在请求时，用 Accept-Encoding 字段说明自己可以接受哪些压缩方法。\n- Accept-Encoding: gzip, deflate\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/05.jpg\">\n</div>\n<br>\n","source":"_posts/前端基础-HTTP基本概念.md","raw":"---\ntitle: 前端基础--HTTP基本概念\ndate: 2024-07-29 18:02:55\ncategories:\n- [计算机科学]\ntags:\n- [计算机网络]\n---\n\n# HTTP常见面试题\n\n## HTTP基本概念\n\n[幕布链接](https://mubu.com/doc/4n-ehUovcCP)\n\n\n1. HTTP 是什么？描述一下\n- HTTP 是超文本传输协议，也就是HyperText Transfer Protocol。\n\n2. 能否详细解释「超文本传输协议」？\n- HTTP的名字「超文本协议传输」，HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。\n\n3. 那「HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议HTTP」 ，这种说法正确吗？\n- 这种说法是不正确的。因为也可以是「服务器< -- >服务器」，所以采用两点之间的描述会更准确。\n\n4. HTTP 常见的状态码，有哪些？\n- 1xx,2xx,3xx,4xx,5xx\n\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/错误码.jpg\">\n</div>\n\n- 1xx 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。\n- 2xx 类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。\n<br>「200 OK」是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。\n<br>「204 No Content」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。\n<br>「206 Partial Content」是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。\n\n- 3xx 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。\n<br>「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。\n<br>「302 Moved Permanently」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。\n<br>301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。\n<br>「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。\n\n- 4xx 类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。\n<br>「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。\n<br>「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。\n<br>「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。\n\n- 5xx 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。\n<br> 「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。\n<br>「501 Not Implemented」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。\n<br>「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。\n<br>「503 Service Unavailable」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试”的意思。\n\n## http 常见字段有哪些？\n\n1. Host\n- 客户端发送请求时，用来指定服务器的域名。\n- Host: http://www.A.com\n- 有了 Host 字段，就可以将请求发往「同一台」服务器上的不同网站。\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/01.jpg\">\n</div>\n<br>\n\n2. Content-Length 字段\n- 服务器在返回数据时，会有 Content-Length 字段，表明本次回应的数据长度。\n- Content-Length: 1000\n- 如上面则是告诉浏览器，本次服务器回应的数据长度是 1000 个字节，后面的字节就属于下一个回应了。\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/02.jpg\">\n</div>\n<br>\n3. Connection 字段\n- Connection 字段最常用于客户端要求服务器使用 TCP 持久连接，以便其他请求复用。\n- HTTP/1.1 版本的默认连接都是持久连接，但为了兼容老版本的 HTTP，需要指定 Connection 首部字段的值为 Keep-Alive。\n- Connection: keep-alive\n- 一个可以复用的 TCP 连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段。\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/03.jpg\">\n</div>\n<br>\n\n4. Content-Type 字段\n- Content-Type 字段用于服务器回应时，告诉客户端，本次数据是什么格式。\n- Content-Type: text/html; charset=utf-8\n- 上面的类型表明，发送的是网页，而且编码是UTF-8。\n- 客户端请求的时候，可以使用 Accept 字段声明自己可以接受哪些数据格式。\n- Accept: */*\n- 上面代码中，客户端声明自己可以接受任何格式的数据。\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/04.jpg\">\n</div>\n<br>\n\n5. Content-Encoding 字段\n- Content-Encoding 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式\n- Content-Encoding: gzip\n- 下面表示服务器返回的数据采用了 gzip 方式压缩，告知客户端需要用此方式解压。\n- 客户端在请求时，用 Accept-Encoding 字段说明自己可以接受哪些压缩方法。\n- Accept-Encoding: gzip, deflate\n\n<br>\n<div align=center>\n    <img src=\"前端基础-HTTP基本概念/05.jpg\">\n</div>\n<br>\n","slug":"前端基础-HTTP基本概念","published":1,"updated":"2024-12-27T14:39:55.774Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dff0018mcuygdsw05x2","content":"<h1 id=\"http常见面试题\"><a class=\"anchor\" href=\"#http常见面试题\">#</a> HTTP 常见面试题</h1>\n<h2 id=\"http基本概念\"><a class=\"anchor\" href=\"#http基本概念\">#</a> HTTP 基本概念</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdWJ1LmNvbS9kb2MvNG4tZWhVb3ZjQ1A=\">幕布链接</span></p>\n<ol>\n<li>HTTP 是什么？描述一下</li>\n</ol>\n<ul>\n<li>HTTP 是超文本传输协议，也就是 HyperText Transfer Protocol。</li>\n</ul>\n<ol start=\"2\">\n<li>能否详细解释「超文本传输协议」？</li>\n</ol>\n<ul>\n<li>HTTP 的名字「超文本协议传输」，HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</li>\n</ul>\n<ol start=\"3\">\n<li>那「HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议 HTTP」 ，这种说法正确吗？</li>\n</ol>\n<ul>\n<li>这种说法是不正确的。因为也可以是「服务器 &lt;--&gt; 服务器」，所以采用两点之间的描述会更准确。</li>\n</ul>\n<ol start=\"4\">\n<li>HTTP 常见的状态码，有哪些？</li>\n</ol>\n<ul>\n<li>1xx,2xx,3xx,4xx,5xx</li>\n</ul>\n<div align=center>\n    <style>.fxtieijywjwd{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E9%94%99%E8%AF%AF%E7%A0%81.jpg\" class=\"fxtieijywjwd\">\n</div>\n<ul>\n<li>\n<p>1xx 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。</p>\n</li>\n<li>\n<p>2xx 类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。<br />\n<br>「200 OK」是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。<br />\n<br>「204 No Content」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。<br />\n<br>「206 Partial Content」是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</p>\n</li>\n<li>\n<p>3xx 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。<br />\n<br>「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。<br />\n<br>「302 Moved Permanently」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。<br />\n<br>301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。<br />\n<br>「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。</p>\n</li>\n<li>\n<p>4xx 类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。<br />\n<br>「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。<br />\n<br>「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。<br />\n<br>「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</p>\n</li>\n<li>\n<p>5xx 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。<br />\n<br> 「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。<br />\n<br>「501 Not Implemented」表示客户端请求的功能还不支持，类似 “即将开业，敬请期待” 的意思。<br />\n<br>「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。<br />\n<br>「503 Service Unavailable」表示服务器当前很忙，暂时无法响应服务器，类似 “网络服务正忙，请稍后重试” 的意思。</p>\n</li>\n</ul>\n<h2 id=\"http-常见字段有哪些\"><a class=\"anchor\" href=\"#http-常见字段有哪些\">#</a> http 常见字段有哪些？</h2>\n<ol>\n<li>Host</li>\n</ol>\n<ul>\n<li>客户端发送请求时，用来指定服务器的域名。</li>\n<li>Host: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5BLmNvbQ==\">http://www.A.com</span></li>\n<li>有了 Host 字段，就可以将请求发往「同一台」服务器上的不同网站。</li>\n</ul>\n<br>\n<div align=center>\n    <style>.mrzhlmnobvlg{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/01.jpg\" class=\"mrzhlmnobvlg\">\n</div>\n<br>\n<ol start=\"2\">\n<li>Content-Length 字段</li>\n</ol>\n<ul>\n<li>服务器在返回数据时，会有 Content-Length 字段，表明本次回应的数据长度。</li>\n<li>Content-Length: 1000</li>\n<li>如上面则是告诉浏览器，本次服务器回应的数据长度是 1000 个字节，后面的字节就属于下一个回应了。</li>\n</ul>\n<br>\n<div align=center>\n    <style>.gdlctfhuojtj{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/02.jpg\" class=\"gdlctfhuojtj\">\n</div>\n<br>\n3. Connection 字段\n- Connection 字段最常用于客户端要求服务器使用 TCP 持久连接，以便其他请求复用。\n- HTTP/1.1 版本的默认连接都是持久连接，但为了兼容老版本的 HTTP，需要指定 Connection 首部字段的值为 Keep-Alive。\n- Connection: keep-alive\n- 一个可以复用的 TCP 连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段。\n<br>\n<div align=center>\n    <style>.xwloxykiyrmc{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/03.jpg\" class=\"xwloxykiyrmc\">\n</div>\n<br>\n<ol start=\"4\">\n<li>Content-Type 字段</li>\n</ol>\n<ul>\n<li>Content-Type 字段用于服务器回应时，告诉客户端，本次数据是什么格式。</li>\n<li>Content-Type: text/html; charset=utf-8</li>\n<li>上面的类型表明，发送的是网页，而且编码是 UTF-8。</li>\n<li>客户端请求的时候，可以使用 Accept 字段声明自己可以接受哪些数据格式。</li>\n<li>Accept: <em>/</em></li>\n<li>上面代码中，客户端声明自己可以接受任何格式的数据。</li>\n</ul>\n<br>\n<div align=center>\n    <style>.esvjguhvopnn{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/04.jpg\" class=\"esvjguhvopnn\">\n</div>\n<br>\n<ol start=\"5\">\n<li>Content-Encoding 字段</li>\n</ol>\n<ul>\n<li>Content-Encoding 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式</li>\n<li>Content-Encoding: gzip</li>\n<li>下面表示服务器返回的数据采用了 gzip 方式压缩，告知客户端需要用此方式解压。</li>\n<li>客户端在请求时，用 Accept-Encoding 字段说明自己可以接受哪些压缩方法。</li>\n<li>Accept-Encoding: gzip, deflate</li>\n</ul>\n<br>\n<div align=center>\n    <style>.wmdmmwecapoc{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/05.jpg\" class=\"wmdmmwecapoc\">\n</div>\n<br>\n","length":2144,"excerpt":"","more":"<h1 id=\"http常见面试题\"><a class=\"anchor\" href=\"#http常见面试题\">#</a> HTTP 常见面试题</h1>\n<h2 id=\"http基本概念\"><a class=\"anchor\" href=\"#http基本概念\">#</a> HTTP 基本概念</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tdWJ1LmNvbS9kb2MvNG4tZWhVb3ZjQ1A=\">幕布链接</span></p>\n<ol>\n<li>HTTP 是什么？描述一下</li>\n</ol>\n<ul>\n<li>HTTP 是超文本传输协议，也就是 HyperText Transfer Protocol。</li>\n</ul>\n<ol start=\"2\">\n<li>能否详细解释「超文本传输协议」？</li>\n</ol>\n<ul>\n<li>HTTP 的名字「超文本协议传输」，HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</li>\n</ul>\n<ol start=\"3\">\n<li>那「HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议 HTTP」 ，这种说法正确吗？</li>\n</ol>\n<ul>\n<li>这种说法是不正确的。因为也可以是「服务器 &lt;--&gt; 服务器」，所以采用两点之间的描述会更准确。</li>\n</ul>\n<ol start=\"4\">\n<li>HTTP 常见的状态码，有哪些？</li>\n</ol>\n<ul>\n<li>1xx,2xx,3xx,4xx,5xx</li>\n</ul>\n<div align=center>\n    <style>.fxtieijywjwd{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/%E9%94%99%E8%AF%AF%E7%A0%81.jpg\" class=\"fxtieijywjwd\">\n</div>\n<ul>\n<li>\n<p>1xx 类状态码属于提示信息，是协议处理中的一种中间状态，实际用到的比较少。</p>\n</li>\n<li>\n<p>2xx 类状态码表示服务器成功处理了客户端的请求，也是我们最愿意看到的状态。<br />\n<br>「200 OK」是最常见的成功状态码，表示一切正常。如果是非 HEAD 请求，服务器返回的响应头都会有 body 数据。<br />\n<br>「204 No Content」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。<br />\n<br>「206 Partial Content」是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</p>\n</li>\n<li>\n<p>3xx 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是重定向。<br />\n<br>「301 Moved Permanently」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。<br />\n<br>「302 Moved Permanently」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。<br />\n<br>301 和 302 都会在响应头里使用字段 Location，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。<br />\n<br>「304 Not Modified」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。</p>\n</li>\n<li>\n<p>4xx 类状态码表示客户端发送的报文有误，服务器无法处理，也就是错误码的含义。<br />\n<br>「400 Bad Request」表示客户端请求的报文有错误，但只是个笼统的错误。<br />\n<br>「403 Forbidden」表示服务器禁止访问资源，并不是客户端的请求出错。<br />\n<br>「404 Not Found」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</p>\n</li>\n<li>\n<p>5xx 类状态码表示客户端请求报文正确，但是服务器处理时内部发生了错误，属于服务器端的错误码。<br />\n<br> 「500 Internal Server Error」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。<br />\n<br>「501 Not Implemented」表示客户端请求的功能还不支持，类似 “即将开业，敬请期待” 的意思。<br />\n<br>「502 Bad Gateway」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。<br />\n<br>「503 Service Unavailable」表示服务器当前很忙，暂时无法响应服务器，类似 “网络服务正忙，请稍后重试” 的意思。</p>\n</li>\n</ul>\n<h2 id=\"http-常见字段有哪些\"><a class=\"anchor\" href=\"#http-常见字段有哪些\">#</a> http 常见字段有哪些？</h2>\n<ol>\n<li>Host</li>\n</ol>\n<ul>\n<li>客户端发送请求时，用来指定服务器的域名。</li>\n<li>Host: <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5BLmNvbQ==\">http://www.A.com</span></li>\n<li>有了 Host 字段，就可以将请求发往「同一台」服务器上的不同网站。</li>\n</ul>\n<br>\n<div align=center>\n    <style>.mrzhlmnobvlg{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/01.jpg\" class=\"mrzhlmnobvlg\">\n</div>\n<br>\n<ol start=\"2\">\n<li>Content-Length 字段</li>\n</ol>\n<ul>\n<li>服务器在返回数据时，会有 Content-Length 字段，表明本次回应的数据长度。</li>\n<li>Content-Length: 1000</li>\n<li>如上面则是告诉浏览器，本次服务器回应的数据长度是 1000 个字节，后面的字节就属于下一个回应了。</li>\n</ul>\n<br>\n<div align=center>\n    <style>.gdlctfhuojtj{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/02.jpg\" class=\"gdlctfhuojtj\">\n</div>\n<br>\n3. Connection 字段\n- Connection 字段最常用于客户端要求服务器使用 TCP 持久连接，以便其他请求复用。\n- HTTP/1.1 版本的默认连接都是持久连接，但为了兼容老版本的 HTTP，需要指定 Connection 首部字段的值为 Keep-Alive。\n- Connection: keep-alive\n- 一个可以复用的 TCP 连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段。\n<br>\n<div align=center>\n    <style>.xwloxykiyrmc{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/03.jpg\" class=\"xwloxykiyrmc\">\n</div>\n<br>\n<ol start=\"4\">\n<li>Content-Type 字段</li>\n</ol>\n<ul>\n<li>Content-Type 字段用于服务器回应时，告诉客户端，本次数据是什么格式。</li>\n<li>Content-Type: text/html; charset=utf-8</li>\n<li>上面的类型表明，发送的是网页，而且编码是 UTF-8。</li>\n<li>客户端请求的时候，可以使用 Accept 字段声明自己可以接受哪些数据格式。</li>\n<li>Accept: <em>/</em></li>\n<li>上面代码中，客户端声明自己可以接受任何格式的数据。</li>\n</ul>\n<br>\n<div align=center>\n    <style>.esvjguhvopnn{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/04.jpg\" class=\"esvjguhvopnn\">\n</div>\n<br>\n<ol start=\"5\">\n<li>Content-Encoding 字段</li>\n</ol>\n<ul>\n<li>Content-Encoding 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式</li>\n<li>Content-Encoding: gzip</li>\n<li>下面表示服务器返回的数据采用了 gzip 方式压缩，告知客户端需要用此方式解压。</li>\n<li>客户端在请求时，用 Accept-Encoding 字段说明自己可以接受哪些压缩方法。</li>\n<li>Accept-Encoding: gzip, deflate</li>\n</ul>\n<br>\n<div align=center>\n    <style>.wmdmmwecapoc{}</style><img data-src=\"/2024/07/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-HTTP%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/05.jpg\" class=\"wmdmmwecapoc\">\n</div>\n<br>\n"},{"title":"前端基础--互联网基本原理","date":"2024-07-27T13:38:51.000Z","_content":"\n# Internet 地址\n\n连接到 Internet 的每台计算机都必须具有唯一的地址。Internet 地址的格式为 nnn.nnn.nnn.nnn，其中 nnn 必须是 0 - 255 之间的数字。这 地址称为 IP 地址。\n\n下图显示了连接到 Internet 的两台计算机; 您的 IP 地址为 1.2.3.4 的计算机和另一台 IP 地址为 IP 的计算机 5.6.7.8. 互联网被表示为介于两者之间的抽象对象。\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag1.gif\">\n</div>\n\n两种不同的互联网连接方式以及它们如何分配IP地址:\n- 通过互联网服务提供商（ISP）的连接： \n当您通过ISP连接到互联网时，通常在拨号或建立连接的过程中，ISP会分配给您一个临时的IP地址。这个IP地址仅在您的会话期间有效，一旦您断开连接，这个IP地址可能会被回收并分配给其他用户。\n- 局域网（LAN）连接到互联网：\n如果您是通过局域网（例如公司或学校的网络）连接到互联网，您的计算机可能会有一个固定的IP地址，也就是永久的IP地址。但是，更常见的情况是，计算机会从DHCP服务器获取一个临时的IP地址。DHCP（动态主机配置协议）是一种网络管理协议，它允许网络管理员自动分配IP地址和其他网络配置给网络中的设备。\n\n无论您通过哪种方式连接到互联网，只要您的设备已经连接上，它就会有一个唯一的IP地址。这个IP地址是互联网上用来识别和定位您的设备的唯一标识符。这样，数据包就可以准确地发送到正确的目的地。\n\n## Ping \n进入命令提示符。输入ping www.yahoo.com。Ping程序将向指定的计算机发送一个“ping”（实际上是一个ICMP（互联网控制消息协议）回显请求消息）。被ping的计算机将以回复响应。Ping程序将计算回复回来之前经过的时间（如果有回复的话）。此外，如果你输入一个域名（即www.yahoo.com）而不是IP地址，Ping将解析域名并显示计算机的IP地址。\n\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/28/5dt8aFZblrOsEhu.jpg\">\n</div>\n\n# 协议栈和数据包\n\n 假设你的IP地址是1.2.3.4，你想向IP地址为5.6.7.8的电脑发送一条消息。你想发送的消息是“你好，电脑5.6.7.8！”。显然，这条消息必须通过连接你的电脑到互联网的某种线路来传输。假设你从家里拨号连接到你的ISP，那么这条消息必须通过电话线传输。因此，这条消息必须从字母文本转换为电子信号，通过互联网传输，然后再转换回字母文本。这是如何实现的呢？通过使用协议栈。每台电脑都需要一个协议栈来进行互联网通信，它通常内置在电脑的操作系统中（例如Windows、Unix等）。在互联网上使用的协议栈被称为TCP/IP协议栈，因为它使用了两个主要的通信协议。\n\n- 应用层（Application Protocols Layer）：\n应用层是网络模型的最高层，它包含特定于应用程序的协议，如万维网（WWW）、电子邮件、文件传输协议（FTP）等。这些协议定义了应用程序如何通过网络进行通信和数据交换。\n\n- 传输层（Transmission Control Protocol Layer）：\n传输层负责确保数据的可靠传输。传输控制协议（TCP）使用端口号将数据包定向到计算机上的特定应用程序。端口号使得多个应用程序能够在同一台计算机上同时运行，而不会相互干扰。\n\n- 网络层（Internet Protocol Layer）：\n网络层负责将数据包从源头路由到目的地。互联网协议（IP）通过IP地址将数据包定向到特定的计算机。这一层处理数据包在整个网络中的路由和转发。\n\n- 物理层（Hardware Layer）：\n物理层是网络模型的最低层，它负责将二进制数据包转换为网络信号，以及将网络信号转换回二进制数据。物理层包括各种硬件设备，例如以太网网卡、电话线调制解调器等，它们负责在物理介质上传输数据。\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag2.gif\">\n</div>\n\n消息会从你的电脑的协议栈顶部开始，然后向下工作。\n\n如果待发送的消息很长，每一层协议栈在消息通过时都可能将消息分解成更小的数据块。这是因为通过互联网（以及大多数计算机网络）发送的数据都是以可管理的块来发送的。在互联网上，这些数据块被称为数据包。\n\n数据包会经过应用层，继续到达传输层（TCP层）。每个数据包都被分配一个端口号。我们需要知道目标计算机上的哪个程序需要接收消息，因为它将在特定的端口上监听。\n\n通过TCP层后，数据包继续前往网络层（IP层）。在这里，每个数据包接收到它的目的地地址，即5.6.7.8。\n\n现在，我们的消息数据包有了端口号和IP地址，它们已经准备好通过互联网发送。物理层负责将包含我们消息的字母文本的数据包转换为电子信号，并通过电话线传输它们。\n\n在电话线的另一端，你的ISP有一个直接连接到互联网的路由器。ISP的路由器检查每个数据包的目的地地址，并确定将其发送到哪里。通常，数据包的下一站是另一个路由器。\n\n最终，数据包到达计算机5.6.7.8。在这里，数据包从目标计算机的TCP/IP协议栈底部开始向上工作。\n\n当数据包通过协议栈向上移动时，发送计算机的协议栈添加的所有路由数据（如IP地址和端口号）都被从数据包中剥离。\n\n当数据到达协议栈的顶部时，数据包已经被重新组装成它们原来的形式，“你好，电脑5.6.7.8！”\n\n# 网络基础设施\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag3.gif\">\n</div>\n\nISP维护着一个为拨号客户准备的调制解调器池。这是由某种计算机（通常是专用的）管理的，它控制着从调制解调器池到骨干网或专用线路路由器的数据流。这种设置可能被称为端口服务器，因为它提供了对网络的访问。计费和使用信息通常也在这里收集。\n\n你的数据包穿过电话网络和ISP的本地设备后，它们会被路由到ISP的骨干网或ISP购买带宽的骨干网上。从这里，数据包通常会经过几个路由器，经过几个骨干网、专用线路和其他网络，直到找到它们的目的地，即地址为5.6.7.8的计算机。\n\n## traceroute\n\n跟踪路由（traceroute），它显示了你的数据包到达给定互联网目的地的路径。像ping一样，你必须从命令提示符使用跟踪路由。在Windows中，使用tracert www.yahoo.com。在Unix提示符下，输入traceroute www.yahoo.com。像ping一样，你也可以输入IP地址而不是域名。跟踪路由将打印出所有路由器、计算机以及数据包必须经过的任何其他互联网实体的列表。\n\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/28/M9wQ1xYJdfANpCF.jpg\">\n</div>\n\n# 互联网基础设施\n\n互联网的骨干网由许多大型网络组成，这些网络相互连接。这些大型网络被称为**网络服务提供商**或**NSP**。一些大型NSP包括UUNet、CerfNet、IBM、BBN Planet、SprintNet、PSINet等。这些网络相互对等，以交换数据包流量。每个NSP都需要连接到三个网络接入点或NAP。在NAP，数据包流量可以从一个NSP的骨干网跳转到另一个NSP的骨干网。NSP还在城域交换（Metropolitan Area Exchanges）或MAE进行互联。MAE的作用与NAP相同，但它们是私有的。NAP是最初的互联网互联点。NAP和MAE都被称为互联网交换点或IX。NSP还向较小的网络，如ISP和较小的带宽提供商出售带宽。下面是一张显示这种分层基础设施的图片。\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag4.gif\">\n</div>\n\n# Internet 路由层次结构\n\n没有一台计算机知道其他任何一台计算机在哪里， 数据包不会发送到每台计算机。用于将数据包送达目的地的信息包含在每个连接到互联网的路由器所维护的路由表中。\n\n路由器是数据包交换机。每个路由器都知道它的子网络以及它们使用的IP地址。路由器通常不知道“上面”的IP地址是什么。\n\n当一个数据包到达路由器时，路由器会检查由源计算机上的IP协议层放置的IP地址。路由器会检查它的路由表。如果找到了包含IP地址的网络，数据包就会被发送到那个网络。如果没有找到包含IP地址的网络，那么路由器会将数据包通过默认路由发送出去，通常是向上层骨干网络发送到下一个路由器。希望下一个路由器会知道将数据包发送到哪里。如果它不知道，数据包将再次向上路由，直到它到达一个NSP骨干网。连接到NSP骨干网的路由器拥有最大的路由表，在这里数据包将被路由到正确的骨干网，然后它将开始通过越来越小的网络向下行进，直到找到它的目的地。\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag5.gif\">\n</div>\n\n# 域名和地址解析\n\n但是，如果你不知道你想连接的计算机的IP地址怎么办？如果你需要访问一个被称为www.anothercomputer.com的Web服务器怎么办？你的Web浏览器是如何知道这台计算机在互联网上的哪个位置的？\n\n所有这些问题的答案都是域名服务或DNS。DNS是一个分布式数据库，它跟踪互联网上计算机的名称及其相应的IP地址。\n\n许多连接到互联网的计算机托管了DNS数据库的一部分以及允许其他人访问的软件。这些计算机被称为DNS服务器。没有一个DNS服务器包含整个数据库；它们只包含它的一个子集。如果一个DNS服务器不包含另一台计算机请求的域名，该DNS服务器会将请求计算机重定向到另一个DNS服务器。\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag6.gif\">\n</div>\n\n\n\n域名服务（Domain Name Service, DNS）的结构类似于IP路由层级结构。请求名称解析的计算机将被重定向到层级的“上方”，直到找到一个能够解析请求中域名的DNS服务器。上图展示了层级的一部分。在树的顶端是域名根。一些较老、较常见的域靠近顶端。没有显示出来的是世界各地构成层级其余部分的众多DNS服务器。\n\n当设置互联网连接时（例如，在Windows中为局域网或拨号网络设置），通常在安装过程中指定一个主要的和一个或多个次要的DNS服务器。这样，任何需要域名解析的互联网应用程序都将能够正确运行。例如，当你在Web浏览器中输入一个网址时，浏览器首先连接到你的主要DNS服务器。在获得你输入的域名的IP地址后，浏览器然后连接到目标计算机并请求你想要访问的网页。\n\n# 重新审视互联网协议\n\n## 应用程序协议：HTTP 和万维网\n\n互联网上最常用的服务之一是万维网（WWW）。使网络工作的应用协议是超文本传输协议（HTTP）。不要将其与超文本标记语言（HTML）混淆。HTML是用于编写网页的语言。HTTP是Web浏览器和Web服务器通过互联网相互通信的协议。它是一个应用层协议，因为它位于协议栈的TCP层之上，并被特定应用程序用来相互通信。在这种情况下，应用程序是Web浏览器和Web服务器。\n\nHTTP是一个无连接的基于文本的协议。客户端（Web浏览器）向Web服务器发送请求，请求网页和图像等网络元素。服务器处理完请求后，客户端和服务器之间的互联网连接将被断开。每个请求都必须重新建立连接。大多数协议是面向连接的。这意味着彼此通信的两台计算机在互联网上保持连接打开。然而，HTTP不是这样。在客户端可以进行HTTP请求之前，必须与服务器建立新连接。\n\n当你在Web浏览器中输入一个URL时，会发生以下情况：\n\n1. 如果URL包含域名，浏览器首先连接到域名服务器并检索Web服务器的相应IP地址。\n2. Web浏览器连接到Web服务器，并通过协议栈发送HTTP请求（请求所需的网页）。\n3. Web服务器接收请求并检查所需页面。如果页面存在，Web服务器会发送它。如果服务器找不到请求的页面，它会发送一个HTTP 404错误消息。（404意味着“页面未找到”，任何浏览过网页的人可能都知道。）\n4. Web浏览器接收页面并关闭连接。\n5. 然后浏览器解析页面，并查找它需要完成网页的其他页面元素。这些通常包括图像、小程序等。\n6. 对于每个需要的元素，浏览器都会额外连接并针对每个元素向服务器发送HTTP请求。\n7. 当浏览器加载完所有图像、小程序等时，页面将在浏览器窗口中完全加载。\n\n## 应用协议：SMTP 和电子邮件\n\n应用协议：SMTP和电子邮件\n互联网上另一个常用的服务是电子邮件。电子邮件使用一种称为简单邮件传输协议（SMTP）的应用层协议。SMTP也是一种基于文本的协议，但与HTTP不同，SMTP是面向连接的。SMTP也比HTTP更复杂。在SMTP中有更多的命令和考虑因素，而HTTP中则较少。\n\n当你打开邮件客户端阅读电子邮件时，通常会发生以下情况：\n\n邮件客户端（Netscape Mail、Lotus Notes、Microsoft Outlook等）打开一个连接到其默认邮件服务器。邮件服务器的IP地址或域名通常在安装邮件客户端时设置。\n\n邮件服务器始终会首先传输消息以标识自己。\n客户端将发送一个SMTP HELO命令，服务器将以250 OK消息响应。\n根据客户端是检查邮件、发送邮件等，将向服务器发送相应的SMTP命令，服务器将相应地做出回应。\n\n这个请求/响应交易将持续进行，直到客户端发送一个SMTP QUIT命令。然后服务器将告别，连接将被关闭。\n\n## 传输控制协议\n\n在协议栈的应用层下面是TCP层。当应用程序打开到互联网上另一台计算机的连接时，它们发送的消息（使用特定的应用层协议）会沿着协议栈传递到TCP层。TCP负责将应用协议路由到目标计算机上正确的应用程序。为了实现这一点，使用端口号。端口可以被看作是每台计算机上独立的通道。\n\n\n例如，你可以在查看电子邮件的同时浏览网页。这是因为这两个应用程序（Web浏览器和邮件客户端）使用了不同的**端口号**。当一个数据包到达计算机并向上通过协议栈时，TCP层根据TCP头中的端口号决定哪个应用程序接收该数据包。\n\nTCP的工作原理如下：\n\n当TCP层从上层接收到应用层协议数据时，它会将其分割成可管理的“块”，然后为每个“块”添加一个包含特定TCP信息的TCP头。TCP头中包含的信息包括数据需要发送到的应用程序的端口号。\n\n当TCP层从下面的IP层接收到一个数据包时，TCP层会从数据包中剥离TCP头数据，如果需要，进行一些数据重构，然后使用从TCP头中取出的端口号将数据发送到正确的应用程序。\n\n这就是TCP如何将通过协议栈移动的数据路由到正确的应用程序的方式。\n\nTCP不是一个文本协议。TCP是一个面向连接的、可靠的、字节流服务。\n\n面向连接意味着使用TCP的两个应用程序在交换数据之前必须首先建立连接。TCP是可靠的，因为对于每个接收到的数据包，都会向发送者发送一个确认以确认交付。\n\n请注意，在TCP头中没有IP地址的位置。这是因为TCP对IP地址一无所知。TCP的工作是可靠地将应用层数据从一个应用程序传输到另一个应用程序。将数据从一个计算机传输到另一个计算机的任务是由IP来完成的。\n\n## IP协议\n\n与TCP不同，IP是一个不可靠、无连接的协议。IP不关心数据包是否到达目的地。同样，IP也不知道连接和端口号。IP的工作是发送和路由数据包到其他计算机。\n\nIP数据包是独立的实体，可能会乱序到达或根本不到达。确保数据包到达并且顺序正确的工作是由TCP来完成的。IP与TCP唯一的共同点是接收数据并在TCP数据上添加自己的IP头信息的方式。\n\n\n\n","source":"_posts/前端基础-互联网基本原理.md","raw":"---\ntitle: 前端基础--互联网基本原理\ndate: 2024-07-27 21:38:51\ncategories:\n- [前端开发]\ntags:\n- [前端]\n---\n\n# Internet 地址\n\n连接到 Internet 的每台计算机都必须具有唯一的地址。Internet 地址的格式为 nnn.nnn.nnn.nnn，其中 nnn 必须是 0 - 255 之间的数字。这 地址称为 IP 地址。\n\n下图显示了连接到 Internet 的两台计算机; 您的 IP 地址为 1.2.3.4 的计算机和另一台 IP 地址为 IP 的计算机 5.6.7.8. 互联网被表示为介于两者之间的抽象对象。\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag1.gif\">\n</div>\n\n两种不同的互联网连接方式以及它们如何分配IP地址:\n- 通过互联网服务提供商（ISP）的连接： \n当您通过ISP连接到互联网时，通常在拨号或建立连接的过程中，ISP会分配给您一个临时的IP地址。这个IP地址仅在您的会话期间有效，一旦您断开连接，这个IP地址可能会被回收并分配给其他用户。\n- 局域网（LAN）连接到互联网：\n如果您是通过局域网（例如公司或学校的网络）连接到互联网，您的计算机可能会有一个固定的IP地址，也就是永久的IP地址。但是，更常见的情况是，计算机会从DHCP服务器获取一个临时的IP地址。DHCP（动态主机配置协议）是一种网络管理协议，它允许网络管理员自动分配IP地址和其他网络配置给网络中的设备。\n\n无论您通过哪种方式连接到互联网，只要您的设备已经连接上，它就会有一个唯一的IP地址。这个IP地址是互联网上用来识别和定位您的设备的唯一标识符。这样，数据包就可以准确地发送到正确的目的地。\n\n## Ping \n进入命令提示符。输入ping www.yahoo.com。Ping程序将向指定的计算机发送一个“ping”（实际上是一个ICMP（互联网控制消息协议）回显请求消息）。被ping的计算机将以回复响应。Ping程序将计算回复回来之前经过的时间（如果有回复的话）。此外，如果你输入一个域名（即www.yahoo.com）而不是IP地址，Ping将解析域名并显示计算机的IP地址。\n\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/28/5dt8aFZblrOsEhu.jpg\">\n</div>\n\n# 协议栈和数据包\n\n 假设你的IP地址是1.2.3.4，你想向IP地址为5.6.7.8的电脑发送一条消息。你想发送的消息是“你好，电脑5.6.7.8！”。显然，这条消息必须通过连接你的电脑到互联网的某种线路来传输。假设你从家里拨号连接到你的ISP，那么这条消息必须通过电话线传输。因此，这条消息必须从字母文本转换为电子信号，通过互联网传输，然后再转换回字母文本。这是如何实现的呢？通过使用协议栈。每台电脑都需要一个协议栈来进行互联网通信，它通常内置在电脑的操作系统中（例如Windows、Unix等）。在互联网上使用的协议栈被称为TCP/IP协议栈，因为它使用了两个主要的通信协议。\n\n- 应用层（Application Protocols Layer）：\n应用层是网络模型的最高层，它包含特定于应用程序的协议，如万维网（WWW）、电子邮件、文件传输协议（FTP）等。这些协议定义了应用程序如何通过网络进行通信和数据交换。\n\n- 传输层（Transmission Control Protocol Layer）：\n传输层负责确保数据的可靠传输。传输控制协议（TCP）使用端口号将数据包定向到计算机上的特定应用程序。端口号使得多个应用程序能够在同一台计算机上同时运行，而不会相互干扰。\n\n- 网络层（Internet Protocol Layer）：\n网络层负责将数据包从源头路由到目的地。互联网协议（IP）通过IP地址将数据包定向到特定的计算机。这一层处理数据包在整个网络中的路由和转发。\n\n- 物理层（Hardware Layer）：\n物理层是网络模型的最低层，它负责将二进制数据包转换为网络信号，以及将网络信号转换回二进制数据。物理层包括各种硬件设备，例如以太网网卡、电话线调制解调器等，它们负责在物理介质上传输数据。\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag2.gif\">\n</div>\n\n消息会从你的电脑的协议栈顶部开始，然后向下工作。\n\n如果待发送的消息很长，每一层协议栈在消息通过时都可能将消息分解成更小的数据块。这是因为通过互联网（以及大多数计算机网络）发送的数据都是以可管理的块来发送的。在互联网上，这些数据块被称为数据包。\n\n数据包会经过应用层，继续到达传输层（TCP层）。每个数据包都被分配一个端口号。我们需要知道目标计算机上的哪个程序需要接收消息，因为它将在特定的端口上监听。\n\n通过TCP层后，数据包继续前往网络层（IP层）。在这里，每个数据包接收到它的目的地地址，即5.6.7.8。\n\n现在，我们的消息数据包有了端口号和IP地址，它们已经准备好通过互联网发送。物理层负责将包含我们消息的字母文本的数据包转换为电子信号，并通过电话线传输它们。\n\n在电话线的另一端，你的ISP有一个直接连接到互联网的路由器。ISP的路由器检查每个数据包的目的地地址，并确定将其发送到哪里。通常，数据包的下一站是另一个路由器。\n\n最终，数据包到达计算机5.6.7.8。在这里，数据包从目标计算机的TCP/IP协议栈底部开始向上工作。\n\n当数据包通过协议栈向上移动时，发送计算机的协议栈添加的所有路由数据（如IP地址和端口号）都被从数据包中剥离。\n\n当数据到达协议栈的顶部时，数据包已经被重新组装成它们原来的形式，“你好，电脑5.6.7.8！”\n\n# 网络基础设施\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag3.gif\">\n</div>\n\nISP维护着一个为拨号客户准备的调制解调器池。这是由某种计算机（通常是专用的）管理的，它控制着从调制解调器池到骨干网或专用线路路由器的数据流。这种设置可能被称为端口服务器，因为它提供了对网络的访问。计费和使用信息通常也在这里收集。\n\n你的数据包穿过电话网络和ISP的本地设备后，它们会被路由到ISP的骨干网或ISP购买带宽的骨干网上。从这里，数据包通常会经过几个路由器，经过几个骨干网、专用线路和其他网络，直到找到它们的目的地，即地址为5.6.7.8的计算机。\n\n## traceroute\n\n跟踪路由（traceroute），它显示了你的数据包到达给定互联网目的地的路径。像ping一样，你必须从命令提示符使用跟踪路由。在Windows中，使用tracert www.yahoo.com。在Unix提示符下，输入traceroute www.yahoo.com。像ping一样，你也可以输入IP地址而不是域名。跟踪路由将打印出所有路由器、计算机以及数据包必须经过的任何其他互联网实体的列表。\n\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/28/M9wQ1xYJdfANpCF.jpg\">\n</div>\n\n# 互联网基础设施\n\n互联网的骨干网由许多大型网络组成，这些网络相互连接。这些大型网络被称为**网络服务提供商**或**NSP**。一些大型NSP包括UUNet、CerfNet、IBM、BBN Planet、SprintNet、PSINet等。这些网络相互对等，以交换数据包流量。每个NSP都需要连接到三个网络接入点或NAP。在NAP，数据包流量可以从一个NSP的骨干网跳转到另一个NSP的骨干网。NSP还在城域交换（Metropolitan Area Exchanges）或MAE进行互联。MAE的作用与NAP相同，但它们是私有的。NAP是最初的互联网互联点。NAP和MAE都被称为互联网交换点或IX。NSP还向较小的网络，如ISP和较小的带宽提供商出售带宽。下面是一张显示这种分层基础设施的图片。\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag4.gif\">\n</div>\n\n# Internet 路由层次结构\n\n没有一台计算机知道其他任何一台计算机在哪里， 数据包不会发送到每台计算机。用于将数据包送达目的地的信息包含在每个连接到互联网的路由器所维护的路由表中。\n\n路由器是数据包交换机。每个路由器都知道它的子网络以及它们使用的IP地址。路由器通常不知道“上面”的IP地址是什么。\n\n当一个数据包到达路由器时，路由器会检查由源计算机上的IP协议层放置的IP地址。路由器会检查它的路由表。如果找到了包含IP地址的网络，数据包就会被发送到那个网络。如果没有找到包含IP地址的网络，那么路由器会将数据包通过默认路由发送出去，通常是向上层骨干网络发送到下一个路由器。希望下一个路由器会知道将数据包发送到哪里。如果它不知道，数据包将再次向上路由，直到它到达一个NSP骨干网。连接到NSP骨干网的路由器拥有最大的路由表，在这里数据包将被路由到正确的骨干网，然后它将开始通过越来越小的网络向下行进，直到找到它的目的地。\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag5.gif\">\n</div>\n\n# 域名和地址解析\n\n但是，如果你不知道你想连接的计算机的IP地址怎么办？如果你需要访问一个被称为www.anothercomputer.com的Web服务器怎么办？你的Web浏览器是如何知道这台计算机在互联网上的哪个位置的？\n\n所有这些问题的答案都是域名服务或DNS。DNS是一个分布式数据库，它跟踪互联网上计算机的名称及其相应的IP地址。\n\n许多连接到互联网的计算机托管了DNS数据库的一部分以及允许其他人访问的软件。这些计算机被称为DNS服务器。没有一个DNS服务器包含整个数据库；它们只包含它的一个子集。如果一个DNS服务器不包含另一台计算机请求的域名，该DNS服务器会将请求计算机重定向到另一个DNS服务器。\n\n<br>\n<div align=center>\n    <img src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag6.gif\">\n</div>\n\n\n\n域名服务（Domain Name Service, DNS）的结构类似于IP路由层级结构。请求名称解析的计算机将被重定向到层级的“上方”，直到找到一个能够解析请求中域名的DNS服务器。上图展示了层级的一部分。在树的顶端是域名根。一些较老、较常见的域靠近顶端。没有显示出来的是世界各地构成层级其余部分的众多DNS服务器。\n\n当设置互联网连接时（例如，在Windows中为局域网或拨号网络设置），通常在安装过程中指定一个主要的和一个或多个次要的DNS服务器。这样，任何需要域名解析的互联网应用程序都将能够正确运行。例如，当你在Web浏览器中输入一个网址时，浏览器首先连接到你的主要DNS服务器。在获得你输入的域名的IP地址后，浏览器然后连接到目标计算机并请求你想要访问的网页。\n\n# 重新审视互联网协议\n\n## 应用程序协议：HTTP 和万维网\n\n互联网上最常用的服务之一是万维网（WWW）。使网络工作的应用协议是超文本传输协议（HTTP）。不要将其与超文本标记语言（HTML）混淆。HTML是用于编写网页的语言。HTTP是Web浏览器和Web服务器通过互联网相互通信的协议。它是一个应用层协议，因为它位于协议栈的TCP层之上，并被特定应用程序用来相互通信。在这种情况下，应用程序是Web浏览器和Web服务器。\n\nHTTP是一个无连接的基于文本的协议。客户端（Web浏览器）向Web服务器发送请求，请求网页和图像等网络元素。服务器处理完请求后，客户端和服务器之间的互联网连接将被断开。每个请求都必须重新建立连接。大多数协议是面向连接的。这意味着彼此通信的两台计算机在互联网上保持连接打开。然而，HTTP不是这样。在客户端可以进行HTTP请求之前，必须与服务器建立新连接。\n\n当你在Web浏览器中输入一个URL时，会发生以下情况：\n\n1. 如果URL包含域名，浏览器首先连接到域名服务器并检索Web服务器的相应IP地址。\n2. Web浏览器连接到Web服务器，并通过协议栈发送HTTP请求（请求所需的网页）。\n3. Web服务器接收请求并检查所需页面。如果页面存在，Web服务器会发送它。如果服务器找不到请求的页面，它会发送一个HTTP 404错误消息。（404意味着“页面未找到”，任何浏览过网页的人可能都知道。）\n4. Web浏览器接收页面并关闭连接。\n5. 然后浏览器解析页面，并查找它需要完成网页的其他页面元素。这些通常包括图像、小程序等。\n6. 对于每个需要的元素，浏览器都会额外连接并针对每个元素向服务器发送HTTP请求。\n7. 当浏览器加载完所有图像、小程序等时，页面将在浏览器窗口中完全加载。\n\n## 应用协议：SMTP 和电子邮件\n\n应用协议：SMTP和电子邮件\n互联网上另一个常用的服务是电子邮件。电子邮件使用一种称为简单邮件传输协议（SMTP）的应用层协议。SMTP也是一种基于文本的协议，但与HTTP不同，SMTP是面向连接的。SMTP也比HTTP更复杂。在SMTP中有更多的命令和考虑因素，而HTTP中则较少。\n\n当你打开邮件客户端阅读电子邮件时，通常会发生以下情况：\n\n邮件客户端（Netscape Mail、Lotus Notes、Microsoft Outlook等）打开一个连接到其默认邮件服务器。邮件服务器的IP地址或域名通常在安装邮件客户端时设置。\n\n邮件服务器始终会首先传输消息以标识自己。\n客户端将发送一个SMTP HELO命令，服务器将以250 OK消息响应。\n根据客户端是检查邮件、发送邮件等，将向服务器发送相应的SMTP命令，服务器将相应地做出回应。\n\n这个请求/响应交易将持续进行，直到客户端发送一个SMTP QUIT命令。然后服务器将告别，连接将被关闭。\n\n## 传输控制协议\n\n在协议栈的应用层下面是TCP层。当应用程序打开到互联网上另一台计算机的连接时，它们发送的消息（使用特定的应用层协议）会沿着协议栈传递到TCP层。TCP负责将应用协议路由到目标计算机上正确的应用程序。为了实现这一点，使用端口号。端口可以被看作是每台计算机上独立的通道。\n\n\n例如，你可以在查看电子邮件的同时浏览网页。这是因为这两个应用程序（Web浏览器和邮件客户端）使用了不同的**端口号**。当一个数据包到达计算机并向上通过协议栈时，TCP层根据TCP头中的端口号决定哪个应用程序接收该数据包。\n\nTCP的工作原理如下：\n\n当TCP层从上层接收到应用层协议数据时，它会将其分割成可管理的“块”，然后为每个“块”添加一个包含特定TCP信息的TCP头。TCP头中包含的信息包括数据需要发送到的应用程序的端口号。\n\n当TCP层从下面的IP层接收到一个数据包时，TCP层会从数据包中剥离TCP头数据，如果需要，进行一些数据重构，然后使用从TCP头中取出的端口号将数据发送到正确的应用程序。\n\n这就是TCP如何将通过协议栈移动的数据路由到正确的应用程序的方式。\n\nTCP不是一个文本协议。TCP是一个面向连接的、可靠的、字节流服务。\n\n面向连接意味着使用TCP的两个应用程序在交换数据之前必须首先建立连接。TCP是可靠的，因为对于每个接收到的数据包，都会向发送者发送一个确认以确认交付。\n\n请注意，在TCP头中没有IP地址的位置。这是因为TCP对IP地址一无所知。TCP的工作是可靠地将应用层数据从一个应用程序传输到另一个应用程序。将数据从一个计算机传输到另一个计算机的任务是由IP来完成的。\n\n## IP协议\n\n与TCP不同，IP是一个不可靠、无连接的协议。IP不关心数据包是否到达目的地。同样，IP也不知道连接和端口号。IP的工作是发送和路由数据包到其他计算机。\n\nIP数据包是独立的实体，可能会乱序到达或根本不到达。确保数据包到达并且顺序正确的工作是由TCP来完成的。IP与TCP唯一的共同点是接收数据并在TCP数据上添加自己的IP头信息的方式。\n\n\n\n","slug":"前端基础-互联网基本原理","published":1,"updated":"2024-12-27T14:39:31.152Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfg001dmcuyb83o4jce","content":"<h1 id=\"internet-地址\"><a class=\"anchor\" href=\"#internet-地址\">#</a> Internet 地址</h1>\n<p>连接到 Internet 的每台计算机都必须具有唯一的地址。Internet 地址的格式为 nnn.nnn.nnn.nnn，其中 nnn 必须是 0 - 255 之间的数字。这 地址称为 IP 地址。</p>\n<p>下图显示了连接到 Internet 的两台计算机；您的 IP 地址为 1.2.3.4 的计算机和另一台 IP 地址为 IP 的计算机 5.6.7.8. 互联网被表示为介于两者之间的抽象对象。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag1.gif\">\n</div>\n<p>两种不同的互联网连接方式以及它们如何分配 IP 地址:</p>\n<ul>\n<li>通过互联网服务提供商（ISP）的连接：<br />\n当您通过 ISP 连接到互联网时，通常在拨号或建立连接的过程中，ISP 会分配给您一个临时的 IP 地址。这个 IP 地址仅在您的会话期间有效，一旦您断开连接，这个 IP 地址可能会被回收并分配给其他用户。</li>\n<li>局域网（LAN）连接到互联网：<br />\n如果您是通过局域网（例如公司或学校的网络）连接到互联网，您的计算机可能会有一个固定的 IP 地址，也就是永久的 IP 地址。但是，更常见的情况是，计算机会从 DHCP 服务器获取一个临时的 IP 地址。DHCP（动态主机配置协议）是一种网络管理协议，它允许网络管理员自动分配 IP 地址和其他网络配置给网络中的设备。</li>\n</ul>\n<p>无论您通过哪种方式连接到互联网，只要您的设备已经连接上，它就会有一个唯一的 IP 地址。这个 IP 地址是互联网上用来识别和定位您的设备的唯一标识符。这样，数据包就可以准确地发送到正确的目的地。</p>\n<h2 id=\"ping\"><a class=\"anchor\" href=\"#ping\">#</a> Ping</h2>\n<p>进入命令提示符。输入 ping <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55YWhvby5jb20=\">www.yahoo.com</span>。Ping 程序将向指定的计算机发送一个 “ping”（实际上是一个 ICMP（互联网控制消息协议）回显请求消息）。被 ping 的计算机将以回复响应。Ping 程序将计算回复回来之前经过的时间（如果有回复的话）。此外，如果你输入一个域名（<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3ctNGwzZS55YWhvby5jb20=\">即 www.yahoo.com</span>）而不是 IP 地址，Ping 将解析域名并显示计算机的 IP 地址。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/28/5dt8aFZblrOsEhu.jpg\">\n</div>\n<h1 id=\"协议栈和数据包\"><a class=\"anchor\" href=\"#协议栈和数据包\">#</a> 协议栈和数据包</h1>\n<p>假设你的 IP 地址是 1.2.3.4，你想向 IP 地址为 5.6.7.8 的电脑发送一条消息。你想发送的消息是 “你好，电脑 5.6.7.8！”。显然，这条消息必须通过连接你的电脑到互联网的某种线路来传输。假设你从家里拨号连接到你的 ISP，那么这条消息必须通过电话线传输。因此，这条消息必须从字母文本转换为电子信号，通过互联网传输，然后再转换回字母文本。这是如何实现的呢？通过使用协议栈。每台电脑都需要一个协议栈来进行互联网通信，它通常内置在电脑的操作系统中（例如 Windows、Unix 等）。在互联网上使用的协议栈被称为 TCP/IP 协议栈，因为它使用了两个主要的通信协议。</p>\n<ul>\n<li>\n<p>应用层（Application Protocols Layer）：<br />\n应用层是网络模型的最高层，它包含特定于应用程序的协议，如万维网（WWW）、电子邮件、文件传输协议（FTP）等。这些协议定义了应用程序如何通过网络进行通信和数据交换。</p>\n</li>\n<li>\n<p>传输层（Transmission Control Protocol Layer）：<br />\n传输层负责确保数据的可靠传输。传输控制协议（TCP）使用端口号将数据包定向到计算机上的特定应用程序。端口号使得多个应用程序能够在同一台计算机上同时运行，而不会相互干扰。</p>\n</li>\n<li>\n<p>网络层（Internet Protocol Layer）：<br />\n网络层负责将数据包从源头路由到目的地。互联网协议（IP）通过 IP 地址将数据包定向到特定的计算机。这一层处理数据包在整个网络中的路由和转发。</p>\n</li>\n<li>\n<p>物理层（Hardware Layer）：<br />\n物理层是网络模型的最低层，它负责将二进制数据包转换为网络信号，以及将网络信号转换回二进制数据。物理层包括各种硬件设备，例如以太网网卡、电话线调制解调器等，它们负责在物理介质上传输数据。</p>\n</li>\n</ul>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag2.gif\">\n</div>\n<p>消息会从你的电脑的协议栈顶部开始，然后向下工作。</p>\n<p>如果待发送的消息很长，每一层协议栈在消息通过时都可能将消息分解成更小的数据块。这是因为通过互联网（以及大多数计算机网络）发送的数据都是以可管理的块来发送的。在互联网上，这些数据块被称为数据包。</p>\n<p>数据包会经过应用层，继续到达传输层（TCP 层）。每个数据包都被分配一个端口号。我们需要知道目标计算机上的哪个程序需要接收消息，因为它将在特定的端口上监听。</p>\n<p>通过 TCP 层后，数据包继续前往网络层（IP 层）。在这里，每个数据包接收到它的目的地地址，即 5.6.7.8。</p>\n<p>现在，我们的消息数据包有了端口号和 IP 地址，它们已经准备好通过互联网发送。物理层负责将包含我们消息的字母文本的数据包转换为电子信号，并通过电话线传输它们。</p>\n<p>在电话线的另一端，你的 ISP 有一个直接连接到互联网的路由器。ISP 的路由器检查每个数据包的目的地地址，并确定将其发送到哪里。通常，数据包的下一站是另一个路由器。</p>\n<p>最终，数据包到达计算机 5.6.7.8。在这里，数据包从目标计算机的 TCP/IP 协议栈底部开始向上工作。</p>\n<p>当数据包通过协议栈向上移动时，发送计算机的协议栈添加的所有路由数据（如 IP 地址和端口号）都被从数据包中剥离。</p>\n<p>当数据到达协议栈的顶部时，数据包已经被重新组装成它们原来的形式，“你好，电脑 5.6.7.8！”</p>\n<h1 id=\"网络基础设施\"><a class=\"anchor\" href=\"#网络基础设施\">#</a> 网络基础设施</h1>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag3.gif\">\n</div>\n<p>ISP 维护着一个为拨号客户准备的调制解调器池。这是由某种计算机（通常是专用的）管理的，它控制着从调制解调器池到骨干网或专用线路路由器的数据流。这种设置可能被称为端口服务器，因为它提供了对网络的访问。计费和使用信息通常也在这里收集。</p>\n<p>你的数据包穿过电话网络和 ISP 的本地设备后，它们会被路由到 ISP 的骨干网或 ISP 购买带宽的骨干网上。从这里，数据包通常会经过几个路由器，经过几个骨干网、专用线路和其他网络，直到找到它们的目的地，即地址为 5.6.7.8 的计算机。</p>\n<h2 id=\"traceroute\"><a class=\"anchor\" href=\"#traceroute\">#</a> traceroute</h2>\n<p>跟踪路由（traceroute），它显示了你的数据包到达给定互联网目的地的路径。像 ping 一样，你必须从命令提示符使用跟踪路由。在 Windows 中，使用 tracert <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55YWhvby5jb20=\">www.yahoo.com</span>。在 Unix 提示符下，输入 traceroute <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55YWhvby5jb20=\">www.yahoo.com</span>。像 ping 一样，你也可以输入 IP 地址而不是域名。跟踪路由将打印出所有路由器、计算机以及数据包必须经过的任何其他互联网实体的列表。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/28/M9wQ1xYJdfANpCF.jpg\">\n</div>\n<h1 id=\"互联网基础设施\"><a class=\"anchor\" href=\"#互联网基础设施\">#</a> 互联网基础设施</h1>\n<p>互联网的骨干网由许多大型网络组成，这些网络相互连接。这些大型网络被称为<strong>网络服务提供商</strong>或<strong> NSP</strong>。一些大型 NSP 包括 UUNet、CerfNet、IBM、BBN Planet、SprintNet、PSINet 等。这些网络相互对等，以交换数据包流量。每个 NSP 都需要连接到三个网络接入点或 NAP。在 NAP，数据包流量可以从一个 NSP 的骨干网跳转到另一个 NSP 的骨干网。NSP 还在城域交换（Metropolitan Area Exchanges）或 MAE 进行互联。MAE 的作用与 NAP 相同，但它们是私有的。NAP 是最初的互联网互联点。NAP 和 MAE 都被称为互联网交换点或 IX。NSP 还向较小的网络，如 ISP 和较小的带宽提供商出售带宽。下面是一张显示这种分层基础设施的图片。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag4.gif\">\n</div>\n<h1 id=\"internet-路由层次结构\"><a class=\"anchor\" href=\"#internet-路由层次结构\">#</a> Internet 路由层次结构</h1>\n<p>没有一台计算机知道其他任何一台计算机在哪里， 数据包不会发送到每台计算机。用于将数据包送达目的地的信息包含在每个连接到互联网的路由器所维护的路由表中。</p>\n<p>路由器是数据包交换机。每个路由器都知道它的子网络以及它们使用的 IP 地址。路由器通常不知道 “上面” 的 IP 地址是什么。</p>\n<p>当一个数据包到达路由器时，路由器会检查由源计算机上的 IP 协议层放置的 IP 地址。路由器会检查它的路由表。如果找到了包含 IP 地址的网络，数据包就会被发送到那个网络。如果没有找到包含 IP 地址的网络，那么路由器会将数据包通过默认路由发送出去，通常是向上层骨干网络发送到下一个路由器。希望下一个路由器会知道将数据包发送到哪里。如果它不知道，数据包将再次向上路由，直到它到达一个 NSP 骨干网。连接到 NSP 骨干网的路由器拥有最大的路由表，在这里数据包将被路由到正确的骨干网，然后它将开始通过越来越小的网络向下行进，直到找到它的目的地。<br />\n<br></p>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag5.gif\">\n</div>\n<h1 id=\"域名和地址解析\"><a class=\"anchor\" href=\"#域名和地址解析\">#</a> 域名和地址解析</h1>\n<p>但是，如果你不知道你想连接的计算机的 IP 地址怎么办？如果你需要访问一个被称为 www.anothercomputer.com 的 Web 服务器怎么办？你的 Web 浏览器是如何知道这台计算机在互联网上的哪个位置的？</p>\n<p>所有这些问题的答案都是域名服务或 DNS。DNS 是一个分布式数据库，它跟踪互联网上计算机的名称及其相应的 IP 地址。</p>\n<p>许多连接到互联网的计算机托管了 DNS 数据库的一部分以及允许其他人访问的软件。这些计算机被称为 DNS 服务器。没有一个 DNS 服务器包含整个数据库；它们只包含它的一个子集。如果一个 DNS 服务器不包含另一台计算机请求的域名，该 DNS 服务器会将请求计算机重定向到另一个 DNS 服务器。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag6.gif\">\n</div>\n<p>域名服务（Domain Name Service, DNS）的结构类似于 IP 路由层级结构。请求名称解析的计算机将被重定向到层级的 “上方”，直到找到一个能够解析请求中域名的 DNS 服务器。上图展示了层级的一部分。在树的顶端是域名根。一些较老、较常见的域靠近顶端。没有显示出来的是世界各地构成层级其余部分的众多 DNS 服务器。</p>\n<p>当设置互联网连接时（例如，在 Windows 中为局域网或拨号网络设置），通常在安装过程中指定一个主要的和一个或多个次要的 DNS 服务器。这样，任何需要域名解析的互联网应用程序都将能够正确运行。例如，当你在 Web 浏览器中输入一个网址时，浏览器首先连接到你的主要 DNS 服务器。在获得你输入的域名的 IP 地址后，浏览器然后连接到目标计算机并请求你想要访问的网页。</p>\n<h1 id=\"重新审视互联网协议\"><a class=\"anchor\" href=\"#重新审视互联网协议\">#</a> 重新审视互联网协议</h1>\n<h2 id=\"应用程序协议http-和万维网\"><a class=\"anchor\" href=\"#应用程序协议http-和万维网\">#</a> 应用程序协议：HTTP 和万维网</h2>\n<p>互联网上最常用的服务之一是万维网（WWW）。使网络工作的应用协议是超文本传输协议（HTTP）。不要将其与超文本标记语言（HTML）混淆。HTML 是用于编写网页的语言。HTTP 是 Web 浏览器和 Web 服务器通过互联网相互通信的协议。它是一个应用层协议，因为它位于协议栈的 TCP 层之上，并被特定应用程序用来相互通信。在这种情况下，应用程序是 Web 浏览器和 Web 服务器。</p>\n<p>HTTP 是一个无连接的基于文本的协议。客户端（Web 浏览器）向 Web 服务器发送请求，请求网页和图像等网络元素。服务器处理完请求后，客户端和服务器之间的互联网连接将被断开。每个请求都必须重新建立连接。大多数协议是面向连接的。这意味着彼此通信的两台计算机在互联网上保持连接打开。然而，HTTP 不是这样。在客户端可以进行 HTTP 请求之前，必须与服务器建立新连接。</p>\n<p>当你在 Web 浏览器中输入一个 URL 时，会发生以下情况：</p>\n<ol>\n<li>如果 URL 包含域名，浏览器首先连接到域名服务器并检索 Web 服务器的相应 IP 地址。</li>\n<li>Web 浏览器连接到 Web 服务器，并通过协议栈发送 HTTP 请求（请求所需的网页）。</li>\n<li>Web 服务器接收请求并检查所需页面。如果页面存在，Web 服务器会发送它。如果服务器找不到请求的页面，它会发送一个 HTTP 404 错误消息。（404 意味着 “页面未找到”，任何浏览过网页的人可能都知道。）</li>\n<li>Web 浏览器接收页面并关闭连接。</li>\n<li>然后浏览器解析页面，并查找它需要完成网页的其他页面元素。这些通常包括图像、小程序等。</li>\n<li>对于每个需要的元素，浏览器都会额外连接并针对每个元素向服务器发送 HTTP 请求。</li>\n<li>当浏览器加载完所有图像、小程序等时，页面将在浏览器窗口中完全加载。</li>\n</ol>\n<h2 id=\"应用协议smtp-和电子邮件\"><a class=\"anchor\" href=\"#应用协议smtp-和电子邮件\">#</a> 应用协议：SMTP 和电子邮件</h2>\n<p>应用协议：SMTP 和电子邮件<br />\n互联网上另一个常用的服务是电子邮件。电子邮件使用一种称为简单邮件传输协议（SMTP）的应用层协议。SMTP 也是一种基于文本的协议，但与 HTTP 不同，SMTP 是面向连接的。SMTP 也比 HTTP 更复杂。在 SMTP 中有更多的命令和考虑因素，而 HTTP 中则较少。</p>\n<p>当你打开邮件客户端阅读电子邮件时，通常会发生以下情况：</p>\n<p>邮件客户端（Netscape Mail、Lotus Notes、Microsoft Outlook 等）打开一个连接到其默认邮件服务器。邮件服务器的 IP 地址或域名通常在安装邮件客户端时设置。</p>\n<p>邮件服务器始终会首先传输消息以标识自己。<br />\n客户端将发送一个 SMTP HELO 命令，服务器将以 250 OK 消息响应。<br />\n根据客户端是检查邮件、发送邮件等，将向服务器发送相应的 SMTP 命令，服务器将相应地做出回应。</p>\n<p>这个请求 / 响应交易将持续进行，直到客户端发送一个 SMTP QUIT 命令。然后服务器将告别，连接将被关闭。</p>\n<h2 id=\"传输控制协议\"><a class=\"anchor\" href=\"#传输控制协议\">#</a> 传输控制协议</h2>\n<p>在协议栈的应用层下面是 TCP 层。当应用程序打开到互联网上另一台计算机的连接时，它们发送的消息（使用特定的应用层协议）会沿着协议栈传递到 TCP 层。TCP 负责将应用协议路由到目标计算机上正确的应用程序。为了实现这一点，使用端口号。端口可以被看作是每台计算机上独立的通道。</p>\n<p>例如，你可以在查看电子邮件的同时浏览网页。这是因为这两个应用程序（Web 浏览器和邮件客户端）使用了不同的<strong>端口号</strong>。当一个数据包到达计算机并向上通过协议栈时，TCP 层根据 TCP 头中的端口号决定哪个应用程序接收该数据包。</p>\n<p>TCP 的工作原理如下：</p>\n<p>当 TCP 层从上层接收到应用层协议数据时，它会将其分割成可管理的 “块”，然后为每个 “块” 添加一个包含特定 TCP 信息的 TCP 头。TCP 头中包含的信息包括数据需要发送到的应用程序的端口号。</p>\n<p>当 TCP 层从下面的 IP 层接收到一个数据包时，TCP 层会从数据包中剥离 TCP 头数据，如果需要，进行一些数据重构，然后使用从 TCP 头中取出的端口号将数据发送到正确的应用程序。</p>\n<p>这就是 TCP 如何将通过协议栈移动的数据路由到正确的应用程序的方式。</p>\n<p>TCP 不是一个文本协议。TCP 是一个面向连接的、可靠的、字节流服务。</p>\n<p>面向连接意味着使用 TCP 的两个应用程序在交换数据之前必须首先建立连接。TCP 是可靠的，因为对于每个接收到的数据包，都会向发送者发送一个确认以确认交付。</p>\n<p>请注意，在 TCP 头中没有 IP 地址的位置。这是因为 TCP 对 IP 地址一无所知。TCP 的工作是可靠地将应用层数据从一个应用程序传输到另一个应用程序。将数据从一个计算机传输到另一个计算机的任务是由 IP 来完成的。</p>\n<h2 id=\"ip协议\"><a class=\"anchor\" href=\"#ip协议\">#</a> IP 协议</h2>\n<p>与 TCP 不同，IP 是一个不可靠、无连接的协议。IP 不关心数据包是否到达目的地。同样，IP 也不知道连接和端口号。IP 的工作是发送和路由数据包到其他计算机。</p>\n<p>IP 数据包是独立的实体，可能会乱序到达或根本不到达。确保数据包到达并且顺序正确的工作是由 TCP 来完成的。IP 与 TCP 唯一的共同点是接收数据并在 TCP 数据上添加自己的 IP 头信息的方式。</p>\n","length":5867,"excerpt":"","more":"<h1 id=\"internet-地址\"><a class=\"anchor\" href=\"#internet-地址\">#</a> Internet 地址</h1>\n<p>连接到 Internet 的每台计算机都必须具有唯一的地址。Internet 地址的格式为 nnn.nnn.nnn.nnn，其中 nnn 必须是 0 - 255 之间的数字。这 地址称为 IP 地址。</p>\n<p>下图显示了连接到 Internet 的两台计算机；您的 IP 地址为 1.2.3.4 的计算机和另一台 IP 地址为 IP 的计算机 5.6.7.8. 互联网被表示为介于两者之间的抽象对象。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag1.gif\">\n</div>\n<p>两种不同的互联网连接方式以及它们如何分配 IP 地址:</p>\n<ul>\n<li>通过互联网服务提供商（ISP）的连接：<br />\n当您通过 ISP 连接到互联网时，通常在拨号或建立连接的过程中，ISP 会分配给您一个临时的 IP 地址。这个 IP 地址仅在您的会话期间有效，一旦您断开连接，这个 IP 地址可能会被回收并分配给其他用户。</li>\n<li>局域网（LAN）连接到互联网：<br />\n如果您是通过局域网（例如公司或学校的网络）连接到互联网，您的计算机可能会有一个固定的 IP 地址，也就是永久的 IP 地址。但是，更常见的情况是，计算机会从 DHCP 服务器获取一个临时的 IP 地址。DHCP（动态主机配置协议）是一种网络管理协议，它允许网络管理员自动分配 IP 地址和其他网络配置给网络中的设备。</li>\n</ul>\n<p>无论您通过哪种方式连接到互联网，只要您的设备已经连接上，它就会有一个唯一的 IP 地址。这个 IP 地址是互联网上用来识别和定位您的设备的唯一标识符。这样，数据包就可以准确地发送到正确的目的地。</p>\n<h2 id=\"ping\"><a class=\"anchor\" href=\"#ping\">#</a> Ping</h2>\n<p>进入命令提示符。输入 ping <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55YWhvby5jb20=\">www.yahoo.com</span>。Ping 程序将向指定的计算机发送一个 “ping”（实际上是一个 ICMP（互联网控制消息协议）回显请求消息）。被 ping 的计算机将以回复响应。Ping 程序将计算回复回来之前经过的时间（如果有回复的话）。此外，如果你输入一个域名（<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3ctNGwzZS55YWhvby5jb20=\">即 www.yahoo.com</span>）而不是 IP 地址，Ping 将解析域名并显示计算机的 IP 地址。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/28/5dt8aFZblrOsEhu.jpg\">\n</div>\n<h1 id=\"协议栈和数据包\"><a class=\"anchor\" href=\"#协议栈和数据包\">#</a> 协议栈和数据包</h1>\n<p>假设你的 IP 地址是 1.2.3.4，你想向 IP 地址为 5.6.7.8 的电脑发送一条消息。你想发送的消息是 “你好，电脑 5.6.7.8！”。显然，这条消息必须通过连接你的电脑到互联网的某种线路来传输。假设你从家里拨号连接到你的 ISP，那么这条消息必须通过电话线传输。因此，这条消息必须从字母文本转换为电子信号，通过互联网传输，然后再转换回字母文本。这是如何实现的呢？通过使用协议栈。每台电脑都需要一个协议栈来进行互联网通信，它通常内置在电脑的操作系统中（例如 Windows、Unix 等）。在互联网上使用的协议栈被称为 TCP/IP 协议栈，因为它使用了两个主要的通信协议。</p>\n<ul>\n<li>\n<p>应用层（Application Protocols Layer）：<br />\n应用层是网络模型的最高层，它包含特定于应用程序的协议，如万维网（WWW）、电子邮件、文件传输协议（FTP）等。这些协议定义了应用程序如何通过网络进行通信和数据交换。</p>\n</li>\n<li>\n<p>传输层（Transmission Control Protocol Layer）：<br />\n传输层负责确保数据的可靠传输。传输控制协议（TCP）使用端口号将数据包定向到计算机上的特定应用程序。端口号使得多个应用程序能够在同一台计算机上同时运行，而不会相互干扰。</p>\n</li>\n<li>\n<p>网络层（Internet Protocol Layer）：<br />\n网络层负责将数据包从源头路由到目的地。互联网协议（IP）通过 IP 地址将数据包定向到特定的计算机。这一层处理数据包在整个网络中的路由和转发。</p>\n</li>\n<li>\n<p>物理层（Hardware Layer）：<br />\n物理层是网络模型的最低层，它负责将二进制数据包转换为网络信号，以及将网络信号转换回二进制数据。物理层包括各种硬件设备，例如以太网网卡、电话线调制解调器等，它们负责在物理介质上传输数据。</p>\n</li>\n</ul>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag2.gif\">\n</div>\n<p>消息会从你的电脑的协议栈顶部开始，然后向下工作。</p>\n<p>如果待发送的消息很长，每一层协议栈在消息通过时都可能将消息分解成更小的数据块。这是因为通过互联网（以及大多数计算机网络）发送的数据都是以可管理的块来发送的。在互联网上，这些数据块被称为数据包。</p>\n<p>数据包会经过应用层，继续到达传输层（TCP 层）。每个数据包都被分配一个端口号。我们需要知道目标计算机上的哪个程序需要接收消息，因为它将在特定的端口上监听。</p>\n<p>通过 TCP 层后，数据包继续前往网络层（IP 层）。在这里，每个数据包接收到它的目的地地址，即 5.6.7.8。</p>\n<p>现在，我们的消息数据包有了端口号和 IP 地址，它们已经准备好通过互联网发送。物理层负责将包含我们消息的字母文本的数据包转换为电子信号，并通过电话线传输它们。</p>\n<p>在电话线的另一端，你的 ISP 有一个直接连接到互联网的路由器。ISP 的路由器检查每个数据包的目的地地址，并确定将其发送到哪里。通常，数据包的下一站是另一个路由器。</p>\n<p>最终，数据包到达计算机 5.6.7.8。在这里，数据包从目标计算机的 TCP/IP 协议栈底部开始向上工作。</p>\n<p>当数据包通过协议栈向上移动时，发送计算机的协议栈添加的所有路由数据（如 IP 地址和端口号）都被从数据包中剥离。</p>\n<p>当数据到达协议栈的顶部时，数据包已经被重新组装成它们原来的形式，“你好，电脑 5.6.7.8！”</p>\n<h1 id=\"网络基础设施\"><a class=\"anchor\" href=\"#网络基础设施\">#</a> 网络基础设施</h1>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag3.gif\">\n</div>\n<p>ISP 维护着一个为拨号客户准备的调制解调器池。这是由某种计算机（通常是专用的）管理的，它控制着从调制解调器池到骨干网或专用线路路由器的数据流。这种设置可能被称为端口服务器，因为它提供了对网络的访问。计费和使用信息通常也在这里收集。</p>\n<p>你的数据包穿过电话网络和 ISP 的本地设备后，它们会被路由到 ISP 的骨干网或 ISP 购买带宽的骨干网上。从这里，数据包通常会经过几个路由器，经过几个骨干网、专用线路和其他网络，直到找到它们的目的地，即地址为 5.6.7.8 的计算机。</p>\n<h2 id=\"traceroute\"><a class=\"anchor\" href=\"#traceroute\">#</a> traceroute</h2>\n<p>跟踪路由（traceroute），它显示了你的数据包到达给定互联网目的地的路径。像 ping 一样，你必须从命令提示符使用跟踪路由。在 Windows 中，使用 tracert <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55YWhvby5jb20=\">www.yahoo.com</span>。在 Unix 提示符下，输入 traceroute <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy55YWhvby5jb20=\">www.yahoo.com</span>。像 ping 一样，你也可以输入 IP 地址而不是域名。跟踪路由将打印出所有路由器、计算机以及数据包必须经过的任何其他互联网实体的列表。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/28/M9wQ1xYJdfANpCF.jpg\">\n</div>\n<h1 id=\"互联网基础设施\"><a class=\"anchor\" href=\"#互联网基础设施\">#</a> 互联网基础设施</h1>\n<p>互联网的骨干网由许多大型网络组成，这些网络相互连接。这些大型网络被称为<strong>网络服务提供商</strong>或<strong> NSP</strong>。一些大型 NSP 包括 UUNet、CerfNet、IBM、BBN Planet、SprintNet、PSINet 等。这些网络相互对等，以交换数据包流量。每个 NSP 都需要连接到三个网络接入点或 NAP。在 NAP，数据包流量可以从一个 NSP 的骨干网跳转到另一个 NSP 的骨干网。NSP 还在城域交换（Metropolitan Area Exchanges）或 MAE 进行互联。MAE 的作用与 NAP 相同，但它们是私有的。NAP 是最初的互联网互联点。NAP 和 MAE 都被称为互联网交换点或 IX。NSP 还向较小的网络，如 ISP 和较小的带宽提供商出售带宽。下面是一张显示这种分层基础设施的图片。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag4.gif\">\n</div>\n<h1 id=\"internet-路由层次结构\"><a class=\"anchor\" href=\"#internet-路由层次结构\">#</a> Internet 路由层次结构</h1>\n<p>没有一台计算机知道其他任何一台计算机在哪里， 数据包不会发送到每台计算机。用于将数据包送达目的地的信息包含在每个连接到互联网的路由器所维护的路由表中。</p>\n<p>路由器是数据包交换机。每个路由器都知道它的子网络以及它们使用的 IP 地址。路由器通常不知道 “上面” 的 IP 地址是什么。</p>\n<p>当一个数据包到达路由器时，路由器会检查由源计算机上的 IP 协议层放置的 IP 地址。路由器会检查它的路由表。如果找到了包含 IP 地址的网络，数据包就会被发送到那个网络。如果没有找到包含 IP 地址的网络，那么路由器会将数据包通过默认路由发送出去，通常是向上层骨干网络发送到下一个路由器。希望下一个路由器会知道将数据包发送到哪里。如果它不知道，数据包将再次向上路由，直到它到达一个 NSP 骨干网。连接到 NSP 骨干网的路由器拥有最大的路由表，在这里数据包将被路由到正确的骨干网，然后它将开始通过越来越小的网络向下行进，直到找到它的目的地。<br />\n<br></p>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag5.gif\">\n</div>\n<h1 id=\"域名和地址解析\"><a class=\"anchor\" href=\"#域名和地址解析\">#</a> 域名和地址解析</h1>\n<p>但是，如果你不知道你想连接的计算机的 IP 地址怎么办？如果你需要访问一个被称为 www.anothercomputer.com 的 Web 服务器怎么办？你的 Web 浏览器是如何知道这台计算机在互联网上的哪个位置的？</p>\n<p>所有这些问题的答案都是域名服务或 DNS。DNS 是一个分布式数据库，它跟踪互联网上计算机的名称及其相应的 IP 地址。</p>\n<p>许多连接到互联网的计算机托管了 DNS 数据库的一部分以及允许其他人访问的软件。这些计算机被称为 DNS 服务器。没有一个 DNS 服务器包含整个数据库；它们只包含它的一个子集。如果一个 DNS 服务器不包含另一台计算机请求的域名，该 DNS 服务器会将请求计算机重定向到另一个 DNS 服务器。</p>\n<br>\n<div align=center>\n    <img data-src=\"https://web.stanford.edu/class/msande91si/www-spr04/readings/week1/InternetWhitepaper_files/ruswp_diag6.gif\">\n</div>\n<p>域名服务（Domain Name Service, DNS）的结构类似于 IP 路由层级结构。请求名称解析的计算机将被重定向到层级的 “上方”，直到找到一个能够解析请求中域名的 DNS 服务器。上图展示了层级的一部分。在树的顶端是域名根。一些较老、较常见的域靠近顶端。没有显示出来的是世界各地构成层级其余部分的众多 DNS 服务器。</p>\n<p>当设置互联网连接时（例如，在 Windows 中为局域网或拨号网络设置），通常在安装过程中指定一个主要的和一个或多个次要的 DNS 服务器。这样，任何需要域名解析的互联网应用程序都将能够正确运行。例如，当你在 Web 浏览器中输入一个网址时，浏览器首先连接到你的主要 DNS 服务器。在获得你输入的域名的 IP 地址后，浏览器然后连接到目标计算机并请求你想要访问的网页。</p>\n<h1 id=\"重新审视互联网协议\"><a class=\"anchor\" href=\"#重新审视互联网协议\">#</a> 重新审视互联网协议</h1>\n<h2 id=\"应用程序协议http-和万维网\"><a class=\"anchor\" href=\"#应用程序协议http-和万维网\">#</a> 应用程序协议：HTTP 和万维网</h2>\n<p>互联网上最常用的服务之一是万维网（WWW）。使网络工作的应用协议是超文本传输协议（HTTP）。不要将其与超文本标记语言（HTML）混淆。HTML 是用于编写网页的语言。HTTP 是 Web 浏览器和 Web 服务器通过互联网相互通信的协议。它是一个应用层协议，因为它位于协议栈的 TCP 层之上，并被特定应用程序用来相互通信。在这种情况下，应用程序是 Web 浏览器和 Web 服务器。</p>\n<p>HTTP 是一个无连接的基于文本的协议。客户端（Web 浏览器）向 Web 服务器发送请求，请求网页和图像等网络元素。服务器处理完请求后，客户端和服务器之间的互联网连接将被断开。每个请求都必须重新建立连接。大多数协议是面向连接的。这意味着彼此通信的两台计算机在互联网上保持连接打开。然而，HTTP 不是这样。在客户端可以进行 HTTP 请求之前，必须与服务器建立新连接。</p>\n<p>当你在 Web 浏览器中输入一个 URL 时，会发生以下情况：</p>\n<ol>\n<li>如果 URL 包含域名，浏览器首先连接到域名服务器并检索 Web 服务器的相应 IP 地址。</li>\n<li>Web 浏览器连接到 Web 服务器，并通过协议栈发送 HTTP 请求（请求所需的网页）。</li>\n<li>Web 服务器接收请求并检查所需页面。如果页面存在，Web 服务器会发送它。如果服务器找不到请求的页面，它会发送一个 HTTP 404 错误消息。（404 意味着 “页面未找到”，任何浏览过网页的人可能都知道。）</li>\n<li>Web 浏览器接收页面并关闭连接。</li>\n<li>然后浏览器解析页面，并查找它需要完成网页的其他页面元素。这些通常包括图像、小程序等。</li>\n<li>对于每个需要的元素，浏览器都会额外连接并针对每个元素向服务器发送 HTTP 请求。</li>\n<li>当浏览器加载完所有图像、小程序等时，页面将在浏览器窗口中完全加载。</li>\n</ol>\n<h2 id=\"应用协议smtp-和电子邮件\"><a class=\"anchor\" href=\"#应用协议smtp-和电子邮件\">#</a> 应用协议：SMTP 和电子邮件</h2>\n<p>应用协议：SMTP 和电子邮件<br />\n互联网上另一个常用的服务是电子邮件。电子邮件使用一种称为简单邮件传输协议（SMTP）的应用层协议。SMTP 也是一种基于文本的协议，但与 HTTP 不同，SMTP 是面向连接的。SMTP 也比 HTTP 更复杂。在 SMTP 中有更多的命令和考虑因素，而 HTTP 中则较少。</p>\n<p>当你打开邮件客户端阅读电子邮件时，通常会发生以下情况：</p>\n<p>邮件客户端（Netscape Mail、Lotus Notes、Microsoft Outlook 等）打开一个连接到其默认邮件服务器。邮件服务器的 IP 地址或域名通常在安装邮件客户端时设置。</p>\n<p>邮件服务器始终会首先传输消息以标识自己。<br />\n客户端将发送一个 SMTP HELO 命令，服务器将以 250 OK 消息响应。<br />\n根据客户端是检查邮件、发送邮件等，将向服务器发送相应的 SMTP 命令，服务器将相应地做出回应。</p>\n<p>这个请求 / 响应交易将持续进行，直到客户端发送一个 SMTP QUIT 命令。然后服务器将告别，连接将被关闭。</p>\n<h2 id=\"传输控制协议\"><a class=\"anchor\" href=\"#传输控制协议\">#</a> 传输控制协议</h2>\n<p>在协议栈的应用层下面是 TCP 层。当应用程序打开到互联网上另一台计算机的连接时，它们发送的消息（使用特定的应用层协议）会沿着协议栈传递到 TCP 层。TCP 负责将应用协议路由到目标计算机上正确的应用程序。为了实现这一点，使用端口号。端口可以被看作是每台计算机上独立的通道。</p>\n<p>例如，你可以在查看电子邮件的同时浏览网页。这是因为这两个应用程序（Web 浏览器和邮件客户端）使用了不同的<strong>端口号</strong>。当一个数据包到达计算机并向上通过协议栈时，TCP 层根据 TCP 头中的端口号决定哪个应用程序接收该数据包。</p>\n<p>TCP 的工作原理如下：</p>\n<p>当 TCP 层从上层接收到应用层协议数据时，它会将其分割成可管理的 “块”，然后为每个 “块” 添加一个包含特定 TCP 信息的 TCP 头。TCP 头中包含的信息包括数据需要发送到的应用程序的端口号。</p>\n<p>当 TCP 层从下面的 IP 层接收到一个数据包时，TCP 层会从数据包中剥离 TCP 头数据，如果需要，进行一些数据重构，然后使用从 TCP 头中取出的端口号将数据发送到正确的应用程序。</p>\n<p>这就是 TCP 如何将通过协议栈移动的数据路由到正确的应用程序的方式。</p>\n<p>TCP 不是一个文本协议。TCP 是一个面向连接的、可靠的、字节流服务。</p>\n<p>面向连接意味着使用 TCP 的两个应用程序在交换数据之前必须首先建立连接。TCP 是可靠的，因为对于每个接收到的数据包，都会向发送者发送一个确认以确认交付。</p>\n<p>请注意，在 TCP 头中没有 IP 地址的位置。这是因为 TCP 对 IP 地址一无所知。TCP 的工作是可靠地将应用层数据从一个应用程序传输到另一个应用程序。将数据从一个计算机传输到另一个计算机的任务是由 IP 来完成的。</p>\n<h2 id=\"ip协议\"><a class=\"anchor\" href=\"#ip协议\">#</a> IP 协议</h2>\n<p>与 TCP 不同，IP 是一个不可靠、无连接的协议。IP 不关心数据包是否到达目的地。同样，IP 也不知道连接和端口号。IP 的工作是发送和路由数据包到其他计算机。</p>\n<p>IP 数据包是独立的实体，可能会乱序到达或根本不到达。确保数据包到达并且顺序正确的工作是由 TCP 来完成的。IP 与 TCP 唯一的共同点是接收数据并在 TCP 数据上添加自己的 IP 头信息的方式。</p>\n"},{"title":"前端基础--浏览器是如何运作的","date":"2024-07-31T12:01:34.000Z","_content":"\n## 前言\n\n在浏览网页时用户希望页面的内容能够快速加载且流畅交互。因此，开发者应力争实现这两个目标。\n理解浏览器的工作原理有助于开发者了解该如何提升性能和感知性能。\n\n导致 Web 性能问题的原因主要有两种，一是网络延迟，二是大部分情况下的浏览器单线程执行。\n\n保障页面快速加载的最大威胁是网络延迟。开发者的目标是使网站加载速度尽可能快，或者至少看起来加载速度很快，以便用户尽快获取所需信息。\n网络延迟是将字节传输到计算机的时间。Web 性能优化需要做的就是使页面尽可能快地加载完成。\n\n大部分情况下，浏览器被认为是单线程的。也就是说，它们在执行一个任务之前会从头到尾完成一个任务，然后才会接受另一个任务。\n\n为了实现流畅的交互，开发者的目标是确保网站的交互性能良好，从流畅的滚动到对触摸的响应。渲染时间非常关键，我们需要确保主线程能够完成交给它的所有工作，并且始终能够处理用户交互。\n\n通过理解浏览器的单线程特性，并尽可能和适当地减少主线程的责任，可以提高网页性能，以确保渲染流畅，并且对交互的响应是即时的。\n\n## 导航\n\n导航是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。\nWeb 性能优化的目标之一就是缩短导航完成所花费的时间，在理想情况下，它通常不会花费太多的时间，但是网络延迟和带宽会让它变久。\n\n## DNS查询\n\n对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。\n如果导航到 https://example.com，HTML 页面被定位到 IP 地址为 93.184.216.34 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询。\n\n浏览器向域名服务器发起 DNS 查询请求，最终得到一个 IP 地址。\n第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过域名服务器进行查询来加速后续的请求。\n\n每个主机名 (hostname) 在页面加载时通常只需要进行一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（font）、图像（image）、脚本（script）、广告（ads）和网站统计（metric）都有不同的主机名，则需要对每一个主机名进行 DNS 查询。\n<br>\n<div align=\"center\">\n    <img src=\"前端基础-浏览器是如何运作的/01.jpg\">\n</div>\n<br>\n但是对于移动网络，DNS 查询可能存在性能问题。当一个用户使用移动网络时，所有 DNS 查询必须从手机发送到基站，然后到达一个权威 DNS 服务器。手机、信号塔、域名服务器之间的距离会显著增加延迟。\n\n## TCP握手\n\n一旦获取到服务器 IP 地址，浏览器就会通过TCP“三次握手”与服务器建立连接。\n这个机制的是用来让两端尝试进行通信——在浏览器和服务器通过上层协议 HTTPS 发送数据之前，可以协商网络 TCP 套接字连接的一些参数。\n\nTCP 的“三次握手”技术经常被称为“SYN-SYN-ACK”——更确切的说是 SYN、SYN-ACK、ACK——因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着当请求尚未发出的时候，终端与每台服务器之间还要来回多发送三条消息。\n\n## TLS协商\n\n对于通过 HTTPS 建立的安全连接，还需要另一次 \"握手\"。这种握手，或者说 TLS 协商，决定使用哪种密码对通信进行加密，验证服务器，并在开始实际数据传输前建立安全连接。这就需要在实际发送内容请求之前，再往返服务器五次。\n<br>\n<div align=\"center\">\n    <img src=\"前端基础-浏览器是如何运作的/02.jpg\">\n</div>\n<br>\n虽然建立安全连接的步骤增加了等待加载页面的时间，但是为了建立一个安全的连接而增加延迟是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。\n\n如此经过 8 次往返，浏览器终于可以发出请求。\n\n### 响应\n\n一旦我们建立了和 web 服务器的连接，浏览器就会代表用户发送一个初始的 HTTP GET 请求，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复。\n\n\n``` html\n<!doctype html>\n<html lang=\"zh-CN\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>简单的页面</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <script src=\"myscript.js\"></script>\n  </head>\n  <body>\n    <h1 class=\"heading\">我的页面</h1>\n    <p>含有<a href=\"https://example.com/about\">链接</a>的段落。</p>\n    <div>\n      <img src=\"myimage.jpg\" alt=\"图像描述\" />\n    </div>\n    <script src=\"anotherscript.js\"></script>\n  </body>\n</html>\n```\n\n初始请求的响应包含所接收数据的第一个字节。首字节时间（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。\n\n上面的示例中，这个请求肯定是小于 14KB 的，但是直到浏览器在解析阶段遇到链接时才会去请求链接的资源，下面有进行描述。\n\n### 拥塞控制/TCP慢启动\n\n在传输过程中，TCP 包被分割成段。由于 TCP 保证了数据包的顺序，因此服务器在发送一定数量的分段后，必须从客户端接收一个 ACK 包的确认。\n\n如果服务器在发送每个分段之后都等待 ACK，那么客户端将频繁地发送 ACK，并且可能会增加传输时间，即使在网络负载较低的情况下也是如此。\n\n另一方面，一次发送过多的分段会导致在繁忙的网络中客户端无法接收分段并且长时间地只会持续发送 ACK，服务器必须不断重新发送分段的问题。\n\n为了平衡传输分段的数量，TCP 慢启动算法用于逐渐增加传输数据量，直到确定最大网络带宽，并在网络负载较高时减少传输数据量。\n\n传输段的数量由拥塞窗口（CWND）的值控制，该值可初始化为 1、2、4 或 10 MSS（以太网协议中的 MSS 为 1500 字节）。该值是发送的字节数，客户端收到后必须发送 ACK。\n\n如果收到 ACK，那么 CWND 值将加倍，这样服务器下次就能发送更多的数据分段。相反，如果没有收到 ACK，那么 CWND 值将减半。因此，这种机制在发送过多分段和过少分段之间取得了平衡。\n\n### 解析\n\n一旦浏览器收到第一个数据分块，它就可以开始解析收到的信息。“解析”是浏览器将通过网络接收的数据转换为 DOM 和 CSSOM 的步骤，通过渲染器在屏幕上将它们绘制成页面。\n\n虽然 DOM 是浏览器标记的内部表示，但是它也被暴露出来，可以通过 JavaScript 中的各种 API 进行操作。\n\n即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将根据其拥有的数据开始解析并尝试渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。\n\n### 构建DOM树\n\n我们在关键渲染路径这篇文章中描述了五个步骤。\n\n第一步是处理 HTML 标记并构造 DOM 树。HTML 解析涉及到符号化和树的构造。HTML 标记包括开始和结束标记，以及属性名和值。如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树。\n\nDOM 树描述了文档的内容。<html> 元素是第一个标签也是文档树的根节点。树反映了不同标记之间的关系和层次结构。嵌套在其他标记中的标记是子节点。DOM 节点的数量越多，构建 DOM 树所需的时间就越长。\n<br>\n<div align=\"center\">\n    <img src=\"前端基础-浏览器是如何运作的/03.gif\">\n</div>\n<br>\n当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 \n《script》标签（特别是没有 async 或者 defer 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈。\n\n### 预加载扫描器\n\n浏览器构建 DOM 树时，这个过程占用了主线程。同时，预加载扫描器会解析可用的内容并请求高优先级的资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用时才去请求。它将在后台检索资源，而当主 HTML 解析器解析到要请求的资源时，它们可能已经下载中了，或者已经被下载。预加载扫描器提供的优化减少了阻塞。\n\n``` html\n<link rel=\"stylesheet\" href=\"styles.css\" />\n<script src=\"myscript.js\" async></script>\n<img src=\"myimage.jpg\" alt=\"图像描述\" />\n<script src=\"anotherscript.js\" async></script>\n```\n\n在这个例子中，当主线程在解析 HTML 和 CSS 时，预加载扫描器将找到脚本和图像，并开始下载它们。为了确保脚本不会阻塞进程，当 JavaScript 解析和执行顺序不重要时，可以添加 async 属性或 defer 属性。\n\n等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。\n\n### 构建CSSOM树\n\n第二步是处理 CSS 并构建 CSSOM 树。CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树。它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树。\n\n与 HTML 类似，浏览器需要将接收到的 CSS 规则转换为可处理的格式。因此，它重复了 HTML 到对象的过程，但这次是针对 CSS。\n\n\nCSSOM 树包括来自用户代理样式表的样式。浏览器从适用于节点的最通用规则开始，并通过应用更具体的规则递归地优化计算的样式。换句话说，它级联属性值。\n\n构建 CSSOM 非常快，并且在当前的开发工具中没有以独特的颜色显示。相反，开发人员工具中的“重新计算样式”显示解析 CSS、构建 CSSOM 树和递归计算计算样式所需的总时间。在 web 性能优化方面，它是可轻易实现的，因为创建 CSSOM 的总时间通常小于一次 DNS 查询所需的时间。\n\n### 其他过程\n\n### JavaScript编译\n\n在解析 CSS 和创建 CSSOM 的同时，包括 JavaScript 文件在内的其他资源也在下载（这要归功于预加载扫描器）。JavaScript 会被解析、编译和解释。脚本被解析为抽象语法树。有些浏览器引擎会将抽象语法树输入编译器，输出字节码。这就是所谓的 JavaScript 编译。大部分代码都是在主线程上解释的，但也有例外，例如在 web worker 中运行的代码。\n\n### 构建无障碍树\n\n浏览器还构建辅助设备用于分析和解释内容的无障碍树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。\n\n在构建 AOM 之前，屏幕阅读器无法访问内容。\n\n## 渲染\n\n渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个渲染树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。\n\n### 样式\n\n关键呈现路径的第三步是将 DOM 和 CSSOM 组合成渲染树。计算样式树或渲染树的构建从 DOM 树的根开始，遍历每个可见节点。\n\n不会被显示的元素，如` <head> `元素及其子元素，以及任何带有 display: none 的节点，如用户代理样式表中的 script { display: none; }，都不会包含在渲染树中，因为它们不会出现在渲染输出中。应用了 visibility: hidden 的节点会包含在渲染树中，因为它们会占用空间。由于我们没有给出任何指令来覆盖用户代理默认值，因此上述代码示例中的 script 节点不会包含在渲染树中。\n\n每个可见节点都应用了 CSSOM 规则。渲染树包含所有可见节点的内容和计算样式，将所有相关样式与 DOM 树中的每个可见节点匹配起来，并根据 CSS 级联，确定每个节点的计算样式。\n\n### 布局\n\n第四步是在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的尺寸和位置，以及确定页面上每个对象的大小和位置的过程。重排是后续过程中对页面的任意部分或整个文档的大小和位置的重新计算。\n\n渲染树构建完毕后，浏览器就开始布局。渲染树标识了哪些节点会显示（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器会从渲染树的根开始遍历。\n\n在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面设置意味着无限数量的不同视区大小。在此阶段，根据视口大小，浏览器将确定屏幕上所有盒子的大小。以视口大小为基础，布局通常从 body 开始，设置所有 body 后代的大小，同时给不知道其尺寸的替换元素（例如图像）提供占位符空间，空间大小以相应元素盒模型的属性为准。\n\n第一次确定每个节点的大小和位置称为**布局**。随后对节点大小和位置的重新计算称为**重排**。在我们的示例中，假设初始布局发生在返回图像之前。由于我们没有声明图像的尺寸，因此一旦知道图像的尺寸，就会出现重排。\n\n### 绘制\n\n关键渲染路径中的最后一步是将各个节点绘制到屏幕上，其中第一次的绘制被称为**首次有意义的绘制**。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个盒子转换为屏幕上的实际像素。绘制涉及将元素的每个可见部分绘制到屏幕上，包括文本、颜色、边框、阴影以及按钮和图像等替换元素。浏览器需要以超快的速度执行这个过程。\n\n为了确保平滑滚动和动画效果，包括计算样式、回流和绘制等占用主线程的所有操作，必须在不超过 16.67 毫秒的时间内完成。在 2048 x 1536 分辨率下，iPad 需要将超过 314.5 万个像素绘制到屏幕上。这是非常多的像素，必须要非常快速地绘制出来。为了确保重绘能够比初始绘制更快地完成，绘制到屏幕的操作通常被分解成几个图层。如果发生这种情况，浏览器则需要进行合成。\n\n绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括 `<video>` 和 `<canvas>`，任何 CSS 属性为 opacity 、3D transform、will-change 的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。\n\n分层确实可以提高性能，但在内存管理方面成本较高，因此不应作为 Web 性能优化策略的过度使用。\n\n## 交互\n\n一旦主线程绘制页面完成，你会认为我们已经“准备好了”，但事实并非如此。如果加载包括正确延迟加载的 JavaScript，并且仅在 onload 事件触发后执行，那么主线程可能会忙于执行脚本，无法用于滚动、触摸和其他交互操作。\n\n\n**可交互时间（TTI）**是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间——可交互是在首次内容绘制之后页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则无法及时（小于 50ms）响应用户交互。\n\n在我们的示例中，可能图像加载很快，但 anotherscript.js 文件的大小可能是 2MB，而且用户的网络连接很慢。在这种情况下，用户可以非常快地看到页面，但是在下载、解析和执行脚本之前，就无法滚动。这不是一个好的用户体验。避免占用主线程，如下面的网页测试示例所示：\n<br>\n<div align=\"center\">\n    <img src=\"前端基础-浏览器是如何运作的/04.png\">\n</div>\n\n<br>\n在本例中，DOM 内容加载过程花费了超过 1.5 秒的时间，主线程在这段时间内完全被占用，对单击事件或屏幕点击没有响应。","source":"_posts/前端基础-浏览器是如何运作的.md","raw":"---\ntitle: 前端基础--浏览器是如何运作的\ndate: 2024-07-31 20:01:34\ncategories:\n- [计算机科学]\ntags:\n- [前端]\n---\n\n## 前言\n\n在浏览网页时用户希望页面的内容能够快速加载且流畅交互。因此，开发者应力争实现这两个目标。\n理解浏览器的工作原理有助于开发者了解该如何提升性能和感知性能。\n\n导致 Web 性能问题的原因主要有两种，一是网络延迟，二是大部分情况下的浏览器单线程执行。\n\n保障页面快速加载的最大威胁是网络延迟。开发者的目标是使网站加载速度尽可能快，或者至少看起来加载速度很快，以便用户尽快获取所需信息。\n网络延迟是将字节传输到计算机的时间。Web 性能优化需要做的就是使页面尽可能快地加载完成。\n\n大部分情况下，浏览器被认为是单线程的。也就是说，它们在执行一个任务之前会从头到尾完成一个任务，然后才会接受另一个任务。\n\n为了实现流畅的交互，开发者的目标是确保网站的交互性能良好，从流畅的滚动到对触摸的响应。渲染时间非常关键，我们需要确保主线程能够完成交给它的所有工作，并且始终能够处理用户交互。\n\n通过理解浏览器的单线程特性，并尽可能和适当地减少主线程的责任，可以提高网页性能，以确保渲染流畅，并且对交互的响应是即时的。\n\n## 导航\n\n导航是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。\nWeb 性能优化的目标之一就是缩短导航完成所花费的时间，在理想情况下，它通常不会花费太多的时间，但是网络延迟和带宽会让它变久。\n\n## DNS查询\n\n对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。\n如果导航到 https://example.com，HTML 页面被定位到 IP 地址为 93.184.216.34 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询。\n\n浏览器向域名服务器发起 DNS 查询请求，最终得到一个 IP 地址。\n第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过域名服务器进行查询来加速后续的请求。\n\n每个主机名 (hostname) 在页面加载时通常只需要进行一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（font）、图像（image）、脚本（script）、广告（ads）和网站统计（metric）都有不同的主机名，则需要对每一个主机名进行 DNS 查询。\n<br>\n<div align=\"center\">\n    <img src=\"前端基础-浏览器是如何运作的/01.jpg\">\n</div>\n<br>\n但是对于移动网络，DNS 查询可能存在性能问题。当一个用户使用移动网络时，所有 DNS 查询必须从手机发送到基站，然后到达一个权威 DNS 服务器。手机、信号塔、域名服务器之间的距离会显著增加延迟。\n\n## TCP握手\n\n一旦获取到服务器 IP 地址，浏览器就会通过TCP“三次握手”与服务器建立连接。\n这个机制的是用来让两端尝试进行通信——在浏览器和服务器通过上层协议 HTTPS 发送数据之前，可以协商网络 TCP 套接字连接的一些参数。\n\nTCP 的“三次握手”技术经常被称为“SYN-SYN-ACK”——更确切的说是 SYN、SYN-ACK、ACK——因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着当请求尚未发出的时候，终端与每台服务器之间还要来回多发送三条消息。\n\n## TLS协商\n\n对于通过 HTTPS 建立的安全连接，还需要另一次 \"握手\"。这种握手，或者说 TLS 协商，决定使用哪种密码对通信进行加密，验证服务器，并在开始实际数据传输前建立安全连接。这就需要在实际发送内容请求之前，再往返服务器五次。\n<br>\n<div align=\"center\">\n    <img src=\"前端基础-浏览器是如何运作的/02.jpg\">\n</div>\n<br>\n虽然建立安全连接的步骤增加了等待加载页面的时间，但是为了建立一个安全的连接而增加延迟是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。\n\n如此经过 8 次往返，浏览器终于可以发出请求。\n\n### 响应\n\n一旦我们建立了和 web 服务器的连接，浏览器就会代表用户发送一个初始的 HTTP GET 请求，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复。\n\n\n``` html\n<!doctype html>\n<html lang=\"zh-CN\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>简单的页面</title>\n    <link rel=\"stylesheet\" href=\"styles.css\" />\n    <script src=\"myscript.js\"></script>\n  </head>\n  <body>\n    <h1 class=\"heading\">我的页面</h1>\n    <p>含有<a href=\"https://example.com/about\">链接</a>的段落。</p>\n    <div>\n      <img src=\"myimage.jpg\" alt=\"图像描述\" />\n    </div>\n    <script src=\"anotherscript.js\"></script>\n  </body>\n</html>\n```\n\n初始请求的响应包含所接收数据的第一个字节。首字节时间（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。\n\n上面的示例中，这个请求肯定是小于 14KB 的，但是直到浏览器在解析阶段遇到链接时才会去请求链接的资源，下面有进行描述。\n\n### 拥塞控制/TCP慢启动\n\n在传输过程中，TCP 包被分割成段。由于 TCP 保证了数据包的顺序，因此服务器在发送一定数量的分段后，必须从客户端接收一个 ACK 包的确认。\n\n如果服务器在发送每个分段之后都等待 ACK，那么客户端将频繁地发送 ACK，并且可能会增加传输时间，即使在网络负载较低的情况下也是如此。\n\n另一方面，一次发送过多的分段会导致在繁忙的网络中客户端无法接收分段并且长时间地只会持续发送 ACK，服务器必须不断重新发送分段的问题。\n\n为了平衡传输分段的数量，TCP 慢启动算法用于逐渐增加传输数据量，直到确定最大网络带宽，并在网络负载较高时减少传输数据量。\n\n传输段的数量由拥塞窗口（CWND）的值控制，该值可初始化为 1、2、4 或 10 MSS（以太网协议中的 MSS 为 1500 字节）。该值是发送的字节数，客户端收到后必须发送 ACK。\n\n如果收到 ACK，那么 CWND 值将加倍，这样服务器下次就能发送更多的数据分段。相反，如果没有收到 ACK，那么 CWND 值将减半。因此，这种机制在发送过多分段和过少分段之间取得了平衡。\n\n### 解析\n\n一旦浏览器收到第一个数据分块，它就可以开始解析收到的信息。“解析”是浏览器将通过网络接收的数据转换为 DOM 和 CSSOM 的步骤，通过渲染器在屏幕上将它们绘制成页面。\n\n虽然 DOM 是浏览器标记的内部表示，但是它也被暴露出来，可以通过 JavaScript 中的各种 API 进行操作。\n\n即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将根据其拥有的数据开始解析并尝试渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。\n\n### 构建DOM树\n\n我们在关键渲染路径这篇文章中描述了五个步骤。\n\n第一步是处理 HTML 标记并构造 DOM 树。HTML 解析涉及到符号化和树的构造。HTML 标记包括开始和结束标记，以及属性名和值。如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树。\n\nDOM 树描述了文档的内容。<html> 元素是第一个标签也是文档树的根节点。树反映了不同标记之间的关系和层次结构。嵌套在其他标记中的标记是子节点。DOM 节点的数量越多，构建 DOM 树所需的时间就越长。\n<br>\n<div align=\"center\">\n    <img src=\"前端基础-浏览器是如何运作的/03.gif\">\n</div>\n<br>\n当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 \n《script》标签（特别是没有 async 或者 defer 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈。\n\n### 预加载扫描器\n\n浏览器构建 DOM 树时，这个过程占用了主线程。同时，预加载扫描器会解析可用的内容并请求高优先级的资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用时才去请求。它将在后台检索资源，而当主 HTML 解析器解析到要请求的资源时，它们可能已经下载中了，或者已经被下载。预加载扫描器提供的优化减少了阻塞。\n\n``` html\n<link rel=\"stylesheet\" href=\"styles.css\" />\n<script src=\"myscript.js\" async></script>\n<img src=\"myimage.jpg\" alt=\"图像描述\" />\n<script src=\"anotherscript.js\" async></script>\n```\n\n在这个例子中，当主线程在解析 HTML 和 CSS 时，预加载扫描器将找到脚本和图像，并开始下载它们。为了确保脚本不会阻塞进程，当 JavaScript 解析和执行顺序不重要时，可以添加 async 属性或 defer 属性。\n\n等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。\n\n### 构建CSSOM树\n\n第二步是处理 CSS 并构建 CSSOM 树。CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树。它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树。\n\n与 HTML 类似，浏览器需要将接收到的 CSS 规则转换为可处理的格式。因此，它重复了 HTML 到对象的过程，但这次是针对 CSS。\n\n\nCSSOM 树包括来自用户代理样式表的样式。浏览器从适用于节点的最通用规则开始，并通过应用更具体的规则递归地优化计算的样式。换句话说，它级联属性值。\n\n构建 CSSOM 非常快，并且在当前的开发工具中没有以独特的颜色显示。相反，开发人员工具中的“重新计算样式”显示解析 CSS、构建 CSSOM 树和递归计算计算样式所需的总时间。在 web 性能优化方面，它是可轻易实现的，因为创建 CSSOM 的总时间通常小于一次 DNS 查询所需的时间。\n\n### 其他过程\n\n### JavaScript编译\n\n在解析 CSS 和创建 CSSOM 的同时，包括 JavaScript 文件在内的其他资源也在下载（这要归功于预加载扫描器）。JavaScript 会被解析、编译和解释。脚本被解析为抽象语法树。有些浏览器引擎会将抽象语法树输入编译器，输出字节码。这就是所谓的 JavaScript 编译。大部分代码都是在主线程上解释的，但也有例外，例如在 web worker 中运行的代码。\n\n### 构建无障碍树\n\n浏览器还构建辅助设备用于分析和解释内容的无障碍树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。\n\n在构建 AOM 之前，屏幕阅读器无法访问内容。\n\n## 渲染\n\n渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个渲染树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。\n\n### 样式\n\n关键呈现路径的第三步是将 DOM 和 CSSOM 组合成渲染树。计算样式树或渲染树的构建从 DOM 树的根开始，遍历每个可见节点。\n\n不会被显示的元素，如` <head> `元素及其子元素，以及任何带有 display: none 的节点，如用户代理样式表中的 script { display: none; }，都不会包含在渲染树中，因为它们不会出现在渲染输出中。应用了 visibility: hidden 的节点会包含在渲染树中，因为它们会占用空间。由于我们没有给出任何指令来覆盖用户代理默认值，因此上述代码示例中的 script 节点不会包含在渲染树中。\n\n每个可见节点都应用了 CSSOM 规则。渲染树包含所有可见节点的内容和计算样式，将所有相关样式与 DOM 树中的每个可见节点匹配起来，并根据 CSS 级联，确定每个节点的计算样式。\n\n### 布局\n\n第四步是在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的尺寸和位置，以及确定页面上每个对象的大小和位置的过程。重排是后续过程中对页面的任意部分或整个文档的大小和位置的重新计算。\n\n渲染树构建完毕后，浏览器就开始布局。渲染树标识了哪些节点会显示（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器会从渲染树的根开始遍历。\n\n在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面设置意味着无限数量的不同视区大小。在此阶段，根据视口大小，浏览器将确定屏幕上所有盒子的大小。以视口大小为基础，布局通常从 body 开始，设置所有 body 后代的大小，同时给不知道其尺寸的替换元素（例如图像）提供占位符空间，空间大小以相应元素盒模型的属性为准。\n\n第一次确定每个节点的大小和位置称为**布局**。随后对节点大小和位置的重新计算称为**重排**。在我们的示例中，假设初始布局发生在返回图像之前。由于我们没有声明图像的尺寸，因此一旦知道图像的尺寸，就会出现重排。\n\n### 绘制\n\n关键渲染路径中的最后一步是将各个节点绘制到屏幕上，其中第一次的绘制被称为**首次有意义的绘制**。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个盒子转换为屏幕上的实际像素。绘制涉及将元素的每个可见部分绘制到屏幕上，包括文本、颜色、边框、阴影以及按钮和图像等替换元素。浏览器需要以超快的速度执行这个过程。\n\n为了确保平滑滚动和动画效果，包括计算样式、回流和绘制等占用主线程的所有操作，必须在不超过 16.67 毫秒的时间内完成。在 2048 x 1536 分辨率下，iPad 需要将超过 314.5 万个像素绘制到屏幕上。这是非常多的像素，必须要非常快速地绘制出来。为了确保重绘能够比初始绘制更快地完成，绘制到屏幕的操作通常被分解成几个图层。如果发生这种情况，浏览器则需要进行合成。\n\n绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括 `<video>` 和 `<canvas>`，任何 CSS 属性为 opacity 、3D transform、will-change 的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。\n\n分层确实可以提高性能，但在内存管理方面成本较高，因此不应作为 Web 性能优化策略的过度使用。\n\n## 交互\n\n一旦主线程绘制页面完成，你会认为我们已经“准备好了”，但事实并非如此。如果加载包括正确延迟加载的 JavaScript，并且仅在 onload 事件触发后执行，那么主线程可能会忙于执行脚本，无法用于滚动、触摸和其他交互操作。\n\n\n**可交互时间（TTI）**是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间——可交互是在首次内容绘制之后页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则无法及时（小于 50ms）响应用户交互。\n\n在我们的示例中，可能图像加载很快，但 anotherscript.js 文件的大小可能是 2MB，而且用户的网络连接很慢。在这种情况下，用户可以非常快地看到页面，但是在下载、解析和执行脚本之前，就无法滚动。这不是一个好的用户体验。避免占用主线程，如下面的网页测试示例所示：\n<br>\n<div align=\"center\">\n    <img src=\"前端基础-浏览器是如何运作的/04.png\">\n</div>\n\n<br>\n在本例中，DOM 内容加载过程花费了超过 1.5 秒的时间，主线程在这段时间内完全被占用，对单击事件或屏幕点击没有响应。","slug":"前端基础-浏览器是如何运作的","published":1,"updated":"2024-12-27T14:39:42.776Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfg001gmcuy8bvk502t","content":"<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在浏览网页时用户希望页面的内容能够快速加载且流畅交互。因此，开发者应力争实现这两个目标。<br />\n理解浏览器的工作原理有助于开发者了解该如何提升性能和感知性能。</p>\n<p>导致 Web 性能问题的原因主要有两种，一是网络延迟，二是大部分情况下的浏览器单线程执行。</p>\n<p>保障页面快速加载的最大威胁是网络延迟。开发者的目标是使网站加载速度尽可能快，或者至少看起来加载速度很快，以便用户尽快获取所需信息。<br />\n网络延迟是将字节传输到计算机的时间。Web 性能优化需要做的就是使页面尽可能快地加载完成。</p>\n<p>大部分情况下，浏览器被认为是单线程的。也就是说，它们在执行一个任务之前会从头到尾完成一个任务，然后才会接受另一个任务。</p>\n<p>为了实现流畅的交互，开发者的目标是确保网站的交互性能良好，从流畅的滚动到对触摸的响应。渲染时间非常关键，我们需要确保主线程能够完成交给它的所有工作，并且始终能够处理用户交互。</p>\n<p>通过理解浏览器的单线程特性，并尽可能和适当地减少主线程的责任，可以提高网页性能，以确保渲染流畅，并且对交互的响应是即时的。</p>\n<h2 id=\"导航\"><a class=\"anchor\" href=\"#导航\">#</a> 导航</h2>\n<p>导航是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。<br />\nWeb 性能优化的目标之一就是缩短导航完成所花费的时间，在理想情况下，它通常不会花费太多的时间，但是网络延迟和带宽会让它变久。</p>\n<h2 id=\"dns查询\"><a class=\"anchor\" href=\"#dns查询\">#</a> DNS 查询</h2>\n<p>对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。<br />\n如果导航到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9leGFtcGxlLmNvbQ==\">https://example.com</span>，HTML 页面被定位到 IP 地址为 93.184.216.34 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询。</p>\n<p>浏览器向域名服务器发起 DNS 查询请求，最终得到一个 IP 地址。<br />\n第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过域名服务器进行查询来加速后续的请求。</p>\n<p>每个主机名 (hostname) 在页面加载时通常只需要进行一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（font）、图像（image）、脚本（script）、广告（ads）和网站统计（metric）都有不同的主机名，则需要对每一个主机名进行 DNS 查询。<br />\n<br></p>\n<div align=\"center\">\n    <style>.pwohhirqgvse{}</style><img data-src=\"/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/01.jpg\" class=\"pwohhirqgvse\">\n</div>\n<br>\n但是对于移动网络，DNS 查询可能存在性能问题。当一个用户使用移动网络时，所有 DNS 查询必须从手机发送到基站，然后到达一个权威 DNS 服务器。手机、信号塔、域名服务器之间的距离会显著增加延迟。\n<h2 id=\"tcp握手\"><a class=\"anchor\" href=\"#tcp握手\">#</a> TCP 握手</h2>\n<p>一旦获取到服务器 IP 地址，浏览器就会通过 TCP “三次握手” 与服务器建立连接。<br />\n这个机制的是用来让两端尝试进行通信 —— 在浏览器和服务器通过上层协议 HTTPS 发送数据之前，可以协商网络 TCP 套接字连接的一些参数。</p>\n<p>TCP 的 “三次握手” 技术经常被称为 “SYN-SYN-ACK”—— 更确切的说是 SYN、SYN-ACK、ACK—— 因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着当请求尚未发出的时候，终端与每台服务器之间还要来回多发送三条消息。</p>\n<h2 id=\"tls协商\"><a class=\"anchor\" href=\"#tls协商\">#</a> TLS 协商</h2>\n<p>对于通过 HTTPS 建立的安全连接，还需要另一次 &quot;握手&quot;。这种握手，或者说 TLS 协商，决定使用哪种密码对通信进行加密，验证服务器，并在开始实际数据传输前建立安全连接。这就需要在实际发送内容请求之前，再往返服务器五次。<br />\n<br></p>\n<div align=\"center\">\n    <style>.bifmvcexrmmb{}</style><img data-src=\"/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/02.jpg\" class=\"bifmvcexrmmb\">\n</div>\n<br>\n虽然建立安全连接的步骤增加了等待加载页面的时间，但是为了建立一个安全的连接而增加延迟是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。\n<p>如此经过 8 次往返，浏览器终于可以发出请求。</p>\n<h3 id=\"响应\"><a class=\"anchor\" href=\"#响应\">#</a> 响应</h3>\n<p>一旦我们建立了和 web 服务器的连接，浏览器就会代表用户发送一个初始的 HTTP GET 请求，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>简单的页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myscript.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我的页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>含有<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://example.com/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>的段落。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myimage.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图像描述<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anotherscript.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>初始请求的响应包含所接收数据的第一个字节。首字节时间（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。</p>\n<p>上面的示例中，这个请求肯定是小于 14KB 的，但是直到浏览器在解析阶段遇到链接时才会去请求链接的资源，下面有进行描述。</p>\n<h3 id=\"拥塞控制tcp慢启动\"><a class=\"anchor\" href=\"#拥塞控制tcp慢启动\">#</a> 拥塞控制 / TCP 慢启动</h3>\n<p>在传输过程中，TCP 包被分割成段。由于 TCP 保证了数据包的顺序，因此服务器在发送一定数量的分段后，必须从客户端接收一个 ACK 包的确认。</p>\n<p>如果服务器在发送每个分段之后都等待 ACK，那么客户端将频繁地发送 ACK，并且可能会增加传输时间，即使在网络负载较低的情况下也是如此。</p>\n<p>另一方面，一次发送过多的分段会导致在繁忙的网络中客户端无法接收分段并且长时间地只会持续发送 ACK，服务器必须不断重新发送分段的问题。</p>\n<p>为了平衡传输分段的数量，TCP 慢启动算法用于逐渐增加传输数据量，直到确定最大网络带宽，并在网络负载较高时减少传输数据量。</p>\n<p>传输段的数量由拥塞窗口（CWND）的值控制，该值可初始化为 1、2、4 或 10 MSS（以太网协议中的 MSS 为 1500 字节）。该值是发送的字节数，客户端收到后必须发送 ACK。</p>\n<p>如果收到 ACK，那么 CWND 值将加倍，这样服务器下次就能发送更多的数据分段。相反，如果没有收到 ACK，那么 CWND 值将减半。因此，这种机制在发送过多分段和过少分段之间取得了平衡。</p>\n<h3 id=\"解析\"><a class=\"anchor\" href=\"#解析\">#</a> 解析</h3>\n<p>一旦浏览器收到第一个数据分块，它就可以开始解析收到的信息。“解析” 是浏览器将通过网络接收的数据转换为 DOM 和 CSSOM 的步骤，通过渲染器在屏幕上将它们绘制成页面。</p>\n<p>虽然 DOM 是浏览器标记的内部表示，但是它也被暴露出来，可以通过 JavaScript 中的各种 API 进行操作。</p>\n<p>即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将根据其拥有的数据开始解析并尝试渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。</p>\n<h3 id=\"构建dom树\"><a class=\"anchor\" href=\"#构建dom树\">#</a> 构建 DOM 树</h3>\n<p>我们在关键渲染路径这篇文章中描述了五个步骤。</p>\n<p>第一步是处理 HTML 标记并构造 DOM 树。HTML 解析涉及到符号化和树的构造。HTML 标记包括开始和结束标记，以及属性名和值。如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树。</p>\n<p>DOM 树描述了文档的内容。<html> 元素是第一个标签也是文档树的根节点。树反映了不同标记之间的关系和层次结构。嵌套在其他标记中的标记是子节点。DOM 节点的数量越多，构建 DOM 树所需的时间就越长。<br />\n<br></p>\n<div align=\"center\">\n    <style>.vfuwicrmumol{}</style><img data-src=\"/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/03.gif\" class=\"vfuwicrmumol\">\n</div>\n<br>\n当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 \n《script》标签（特别是没有 async 或者 defer 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈。\n<h3 id=\"预加载扫描器\"><a class=\"anchor\" href=\"#预加载扫描器\">#</a> 预加载扫描器</h3>\n<p>浏览器构建 DOM 树时，这个过程占用了主线程。同时，预加载扫描器会解析可用的内容并请求高优先级的资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用时才去请求。它将在后台检索资源，而当主 HTML 解析器解析到要请求的资源时，它们可能已经下载中了，或者已经被下载。预加载扫描器提供的优化减少了阻塞。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myscript.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myimage.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图像描述<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anotherscript.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在这个例子中，当主线程在解析 HTML 和 CSS 时，预加载扫描器将找到脚本和图像，并开始下载它们。为了确保脚本不会阻塞进程，当 JavaScript 解析和执行顺序不重要时，可以添加 async 属性或 defer 属性。</p>\n<p>等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。</p>\n<h3 id=\"构建cssom树\"><a class=\"anchor\" href=\"#构建cssom树\">#</a> 构建 CSSOM 树</h3>\n<p>第二步是处理 CSS 并构建 CSSOM 树。CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树。它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树。</p>\n<p>与 HTML 类似，浏览器需要将接收到的 CSS 规则转换为可处理的格式。因此，它重复了 HTML 到对象的过程，但这次是针对 CSS。</p>\n<p>CSSOM 树包括来自用户代理样式表的样式。浏览器从适用于节点的最通用规则开始，并通过应用更具体的规则递归地优化计算的样式。换句话说，它级联属性值。</p>\n<p>构建 CSSOM 非常快，并且在当前的开发工具中没有以独特的颜色显示。相反，开发人员工具中的 “重新计算样式” 显示解析 CSS、构建 CSSOM 树和递归计算计算样式所需的总时间。在 web 性能优化方面，它是可轻易实现的，因为创建 CSSOM 的总时间通常小于一次 DNS 查询所需的时间。</p>\n<h3 id=\"其他过程\"><a class=\"anchor\" href=\"#其他过程\">#</a> 其他过程</h3>\n<h3 id=\"javascript编译\"><a class=\"anchor\" href=\"#javascript编译\">#</a> JavaScript 编译</h3>\n<p>在解析 CSS 和创建 CSSOM 的同时，包括 JavaScript 文件在内的其他资源也在下载（这要归功于预加载扫描器）。JavaScript 会被解析、编译和解释。脚本被解析为抽象语法树。有些浏览器引擎会将抽象语法树输入编译器，输出字节码。这就是所谓的 JavaScript 编译。大部分代码都是在主线程上解释的，但也有例外，例如在 web worker 中运行的代码。</p>\n<h3 id=\"构建无障碍树\"><a class=\"anchor\" href=\"#构建无障碍树\">#</a> 构建无障碍树</h3>\n<p>浏览器还构建辅助设备用于分析和解释内容的无障碍树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。</p>\n<p>在构建 AOM 之前，屏幕阅读器无法访问内容。</p>\n<h2 id=\"渲染\"><a class=\"anchor\" href=\"#渲染\">#</a> 渲染</h2>\n<p>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个渲染树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。</p>\n<h3 id=\"样式\"><a class=\"anchor\" href=\"#样式\">#</a> 样式</h3>\n<p>关键呈现路径的第三步是将 DOM 和 CSSOM 组合成渲染树。计算样式树或渲染树的构建从 DOM 树的根开始，遍历每个可见节点。</p>\n<p>不会被显示的元素，如 <code>&lt;head&gt;</code>  元素及其子元素，以及任何带有 display: none 的节点，如用户代理样式表中的 script {display: none;}，都不会包含在渲染树中，因为它们不会出现在渲染输出中。应用了 visibility: hidden 的节点会包含在渲染树中，因为它们会占用空间。由于我们没有给出任何指令来覆盖用户代理默认值，因此上述代码示例中的 script 节点不会包含在渲染树中。</p>\n<p>每个可见节点都应用了 CSSOM 规则。渲染树包含所有可见节点的内容和计算样式，将所有相关样式与 DOM 树中的每个可见节点匹配起来，并根据 CSS 级联，确定每个节点的计算样式。</p>\n<h3 id=\"布局\"><a class=\"anchor\" href=\"#布局\">#</a> 布局</h3>\n<p>第四步是在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的尺寸和位置，以及确定页面上每个对象的大小和位置的过程。重排是后续过程中对页面的任意部分或整个文档的大小和位置的重新计算。</p>\n<p>渲染树构建完毕后，浏览器就开始布局。渲染树标识了哪些节点会显示（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器会从渲染树的根开始遍历。</p>\n<p>在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面设置意味着无限数量的不同视区大小。在此阶段，根据视口大小，浏览器将确定屏幕上所有盒子的大小。以视口大小为基础，布局通常从 body 开始，设置所有 body 后代的大小，同时给不知道其尺寸的替换元素（例如图像）提供占位符空间，空间大小以相应元素盒模型的属性为准。</p>\n<p>第一次确定每个节点的大小和位置称为<strong>布局</strong>。随后对节点大小和位置的重新计算称为<strong>重排</strong>。在我们的示例中，假设初始布局发生在返回图像之前。由于我们没有声明图像的尺寸，因此一旦知道图像的尺寸，就会出现重排。</p>\n<h3 id=\"绘制\"><a class=\"anchor\" href=\"#绘制\">#</a> 绘制</h3>\n<p>关键渲染路径中的最后一步是将各个节点绘制到屏幕上，其中第一次的绘制被称为<strong>首次有意义的绘制</strong>。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个盒子转换为屏幕上的实际像素。绘制涉及将元素的每个可见部分绘制到屏幕上，包括文本、颜色、边框、阴影以及按钮和图像等替换元素。浏览器需要以超快的速度执行这个过程。</p>\n<p>为了确保平滑滚动和动画效果，包括计算样式、回流和绘制等占用主线程的所有操作，必须在不超过 16.67 毫秒的时间内完成。在 2048 x 1536 分辨率下，iPad 需要将超过 314.5 万个像素绘制到屏幕上。这是非常多的像素，必须要非常快速地绘制出来。为了确保重绘能够比初始绘制更快地完成，绘制到屏幕的操作通常被分解成几个图层。如果发生这种情况，浏览器则需要进行合成。</p>\n<p>绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括  <code>&lt;video&gt;</code>  和  <code>&lt;canvas&gt;</code> ，任何 CSS 属性为 opacity 、3D transform、will-change 的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。</p>\n<p>分层确实可以提高性能，但在内存管理方面成本较高，因此不应作为 Web 性能优化策略的过度使用。</p>\n<h2 id=\"交互\"><a class=\"anchor\" href=\"#交互\">#</a> 交互</h2>\n<p>一旦主线程绘制页面完成，你会认为我们已经 “准备好了”，但事实并非如此。如果加载包括正确延迟加载的 JavaScript，并且仅在 onload 事件触发后执行，那么主线程可能会忙于执行脚本，无法用于滚动、触摸和其他交互操作。</p>\n<p>** 可交互时间（TTI）** 是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间 —— 可交互是在首次内容绘制之后页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则无法及时（小于 50ms）响应用户交互。</p>\n<p>在我们的示例中，可能图像加载很快，但 anotherscript.js 文件的大小可能是 2MB，而且用户的网络连接很慢。在这种情况下，用户可以非常快地看到页面，但是在下载、解析和执行脚本之前，就无法滚动。这不是一个好的用户体验。避免占用主线程，如下面的网页测试示例所示：<br />\n<br></p>\n<div align=\"center\">\n    <style>.gcethlaseely{}</style><img data-src=\"/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/04.png\" class=\"gcethlaseely\">\n</div>\n<br>\n在本例中，DOM 内容加载过程花费了超过 1.5 秒的时间，主线程在这段时间内完全被占用，对单击事件或屏幕点击没有响应。","length":6507,"excerpt":"","more":"<h2 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>在浏览网页时用户希望页面的内容能够快速加载且流畅交互。因此，开发者应力争实现这两个目标。<br />\n理解浏览器的工作原理有助于开发者了解该如何提升性能和感知性能。</p>\n<p>导致 Web 性能问题的原因主要有两种，一是网络延迟，二是大部分情况下的浏览器单线程执行。</p>\n<p>保障页面快速加载的最大威胁是网络延迟。开发者的目标是使网站加载速度尽可能快，或者至少看起来加载速度很快，以便用户尽快获取所需信息。<br />\n网络延迟是将字节传输到计算机的时间。Web 性能优化需要做的就是使页面尽可能快地加载完成。</p>\n<p>大部分情况下，浏览器被认为是单线程的。也就是说，它们在执行一个任务之前会从头到尾完成一个任务，然后才会接受另一个任务。</p>\n<p>为了实现流畅的交互，开发者的目标是确保网站的交互性能良好，从流畅的滚动到对触摸的响应。渲染时间非常关键，我们需要确保主线程能够完成交给它的所有工作，并且始终能够处理用户交互。</p>\n<p>通过理解浏览器的单线程特性，并尽可能和适当地减少主线程的责任，可以提高网页性能，以确保渲染流畅，并且对交互的响应是即时的。</p>\n<h2 id=\"导航\"><a class=\"anchor\" href=\"#导航\">#</a> 导航</h2>\n<p>导航是加载 web 页面的第一步。它发生在以下情形：用户通过在地址栏输入一个 URL、点击一个链接、提交表单或者是其他的行为。<br />\nWeb 性能优化的目标之一就是缩短导航完成所花费的时间，在理想情况下，它通常不会花费太多的时间，但是网络延迟和带宽会让它变久。</p>\n<h2 id=\"dns查询\"><a class=\"anchor\" href=\"#dns查询\">#</a> DNS 查询</h2>\n<p>对于一个 web 页面来说导航的第一步是要去寻找页面资源的位置。<br />\n如果导航到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9leGFtcGxlLmNvbQ==\">https://example.com</span>，HTML 页面被定位到 IP 地址为 93.184.216.34 的服务器。如果以前没有访问过这个网站，就需要进行 DNS 查询。</p>\n<p>浏览器向域名服务器发起 DNS 查询请求，最终得到一个 IP 地址。<br />\n第一次请求之后，这个 IP 地址可能会被缓存一段时间，这样可以通过从缓存里面检索 IP 地址而不是再通过域名服务器进行查询来加速后续的请求。</p>\n<p>每个主机名 (hostname) 在页面加载时通常只需要进行一次 DNS 查询。但是，对于页面指向的不同的主机名，则需要多次 DNS 查询。如果字体（font）、图像（image）、脚本（script）、广告（ads）和网站统计（metric）都有不同的主机名，则需要对每一个主机名进行 DNS 查询。<br />\n<br></p>\n<div align=\"center\">\n    <style>.pwohhirqgvse{}</style><img data-src=\"/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/01.jpg\" class=\"pwohhirqgvse\">\n</div>\n<br>\n但是对于移动网络，DNS 查询可能存在性能问题。当一个用户使用移动网络时，所有 DNS 查询必须从手机发送到基站，然后到达一个权威 DNS 服务器。手机、信号塔、域名服务器之间的距离会显著增加延迟。\n<h2 id=\"tcp握手\"><a class=\"anchor\" href=\"#tcp握手\">#</a> TCP 握手</h2>\n<p>一旦获取到服务器 IP 地址，浏览器就会通过 TCP “三次握手” 与服务器建立连接。<br />\n这个机制的是用来让两端尝试进行通信 —— 在浏览器和服务器通过上层协议 HTTPS 发送数据之前，可以协商网络 TCP 套接字连接的一些参数。</p>\n<p>TCP 的 “三次握手” 技术经常被称为 “SYN-SYN-ACK”—— 更确切的说是 SYN、SYN-ACK、ACK—— 因为通过 TCP 首先发送了三个消息进行协商，然后在两台电脑之间开始一个 TCP 会话。是的，这意味着当请求尚未发出的时候，终端与每台服务器之间还要来回多发送三条消息。</p>\n<h2 id=\"tls协商\"><a class=\"anchor\" href=\"#tls协商\">#</a> TLS 协商</h2>\n<p>对于通过 HTTPS 建立的安全连接，还需要另一次 &quot;握手&quot;。这种握手，或者说 TLS 协商，决定使用哪种密码对通信进行加密，验证服务器，并在开始实际数据传输前建立安全连接。这就需要在实际发送内容请求之前，再往返服务器五次。<br />\n<br></p>\n<div align=\"center\">\n    <style>.bifmvcexrmmb{}</style><img data-src=\"/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/02.jpg\" class=\"bifmvcexrmmb\">\n</div>\n<br>\n虽然建立安全连接的步骤增加了等待加载页面的时间，但是为了建立一个安全的连接而增加延迟是值得的，因为在浏览器和 web 服务器之间传输的数据不可以被第三方解密。\n<p>如此经过 8 次往返，浏览器终于可以发出请求。</p>\n<h3 id=\"响应\"><a class=\"anchor\" href=\"#响应\">#</a> 响应</h3>\n<p>一旦我们建立了和 web 服务器的连接，浏览器就会代表用户发送一个初始的 HTTP GET 请求，对于网站来说，这个请求通常是一个 HTML 文件。一旦服务器收到请求，它将使用相关的响应头和 HTML 的内容进行回复。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">doctype</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-CN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>简单的页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myscript.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>heading<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我的页面<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>含有<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://example.com/about<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>的段落。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myimage.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图像描述<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anotherscript.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>初始请求的响应包含所接收数据的第一个字节。首字节时间（TTFB）是用户通过点击链接进行请求与收到第一个 HTML 数据包之间的时间。第一个内容分块通常是 14KB 的数据。</p>\n<p>上面的示例中，这个请求肯定是小于 14KB 的，但是直到浏览器在解析阶段遇到链接时才会去请求链接的资源，下面有进行描述。</p>\n<h3 id=\"拥塞控制tcp慢启动\"><a class=\"anchor\" href=\"#拥塞控制tcp慢启动\">#</a> 拥塞控制 / TCP 慢启动</h3>\n<p>在传输过程中，TCP 包被分割成段。由于 TCP 保证了数据包的顺序，因此服务器在发送一定数量的分段后，必须从客户端接收一个 ACK 包的确认。</p>\n<p>如果服务器在发送每个分段之后都等待 ACK，那么客户端将频繁地发送 ACK，并且可能会增加传输时间，即使在网络负载较低的情况下也是如此。</p>\n<p>另一方面，一次发送过多的分段会导致在繁忙的网络中客户端无法接收分段并且长时间地只会持续发送 ACK，服务器必须不断重新发送分段的问题。</p>\n<p>为了平衡传输分段的数量，TCP 慢启动算法用于逐渐增加传输数据量，直到确定最大网络带宽，并在网络负载较高时减少传输数据量。</p>\n<p>传输段的数量由拥塞窗口（CWND）的值控制，该值可初始化为 1、2、4 或 10 MSS（以太网协议中的 MSS 为 1500 字节）。该值是发送的字节数，客户端收到后必须发送 ACK。</p>\n<p>如果收到 ACK，那么 CWND 值将加倍，这样服务器下次就能发送更多的数据分段。相反，如果没有收到 ACK，那么 CWND 值将减半。因此，这种机制在发送过多分段和过少分段之间取得了平衡。</p>\n<h3 id=\"解析\"><a class=\"anchor\" href=\"#解析\">#</a> 解析</h3>\n<p>一旦浏览器收到第一个数据分块，它就可以开始解析收到的信息。“解析” 是浏览器将通过网络接收的数据转换为 DOM 和 CSSOM 的步骤，通过渲染器在屏幕上将它们绘制成页面。</p>\n<p>虽然 DOM 是浏览器标记的内部表示，但是它也被暴露出来，可以通过 JavaScript 中的各种 API 进行操作。</p>\n<p>即使请求页面的 HTML 大于初始的 14KB 数据包，浏览器也将根据其拥有的数据开始解析并尝试渲染。这就是为什么在前 14KB 中包含浏览器开始渲染页面所需的所有内容，或者至少包含页面模板（第一次渲染所需的 CSS 和 HTML）对于 web 性能优化来说是重要的。但是在渲染到屏幕上面之前，HTML、CSS、JavaScript 必须被解析完成。</p>\n<h3 id=\"构建dom树\"><a class=\"anchor\" href=\"#构建dom树\">#</a> 构建 DOM 树</h3>\n<p>我们在关键渲染路径这篇文章中描述了五个步骤。</p>\n<p>第一步是处理 HTML 标记并构造 DOM 树。HTML 解析涉及到符号化和树的构造。HTML 标记包括开始和结束标记，以及属性名和值。如果文档格式良好，则解析它会简单而快速。解析器将标记化的输入解析到文档中，构建文档树。</p>\n<p>DOM 树描述了文档的内容。<html> 元素是第一个标签也是文档树的根节点。树反映了不同标记之间的关系和层次结构。嵌套在其他标记中的标记是子节点。DOM 节点的数量越多，构建 DOM 树所需的时间就越长。<br />\n<br></p>\n<div align=\"center\">\n    <style>.vfuwicrmumol{}</style><img data-src=\"/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/03.gif\" class=\"vfuwicrmumol\">\n</div>\n<br>\n当解析器发现非阻塞资源，例如一张图片，浏览器会请求这些资源并且继续解析。当遇到一个 CSS 文件时，解析也可以继续进行，但是对于 \n《script》标签（特别是没有 async 或者 defer 属性的）会阻塞渲染并停止 HTML 的解析。尽管浏览器的预加载扫描器加速了这个过程，但过多的脚本仍然是一个重要的瓶颈。\n<h3 id=\"预加载扫描器\"><a class=\"anchor\" href=\"#预加载扫描器\">#</a> 预加载扫描器</h3>\n<p>浏览器构建 DOM 树时，这个过程占用了主线程。同时，预加载扫描器会解析可用的内容并请求高优先级的资源，如 CSS、JavaScript 和 web 字体。多亏了预加载扫描器，我们不必等到解析器找到对外部资源的引用时才去请求。它将在后台检索资源，而当主 HTML 解析器解析到要请求的资源时，它们可能已经下载中了，或者已经被下载。预加载扫描器提供的优化减少了阻塞。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>styles.css<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myscript.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myimage.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>图像描述<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>anotherscript.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在这个例子中，当主线程在解析 HTML 和 CSS 时，预加载扫描器将找到脚本和图像，并开始下载它们。为了确保脚本不会阻塞进程，当 JavaScript 解析和执行顺序不重要时，可以添加 async 属性或 defer 属性。</p>\n<p>等待获取 CSS 不会阻塞 HTML 的解析或者下载，但是它确实会阻塞 JavaScript，因为 JavaScript 经常用于查询元素的 CSS 属性。</p>\n<h3 id=\"构建cssom树\"><a class=\"anchor\" href=\"#构建cssom树\">#</a> 构建 CSSOM 树</h3>\n<p>第二步是处理 CSS 并构建 CSSOM 树。CSS 对象模型和 DOM 是相似的。DOM 和 CSSOM 是两棵树。它们是独立的数据结构。浏览器将 CSS 规则转换为可以理解和使用的样式映射。浏览器遍历 CSS 中的每个规则集，根据 CSS 选择器创建具有父、子和兄弟关系的节点树。</p>\n<p>与 HTML 类似，浏览器需要将接收到的 CSS 规则转换为可处理的格式。因此，它重复了 HTML 到对象的过程，但这次是针对 CSS。</p>\n<p>CSSOM 树包括来自用户代理样式表的样式。浏览器从适用于节点的最通用规则开始，并通过应用更具体的规则递归地优化计算的样式。换句话说，它级联属性值。</p>\n<p>构建 CSSOM 非常快，并且在当前的开发工具中没有以独特的颜色显示。相反，开发人员工具中的 “重新计算样式” 显示解析 CSS、构建 CSSOM 树和递归计算计算样式所需的总时间。在 web 性能优化方面，它是可轻易实现的，因为创建 CSSOM 的总时间通常小于一次 DNS 查询所需的时间。</p>\n<h3 id=\"其他过程\"><a class=\"anchor\" href=\"#其他过程\">#</a> 其他过程</h3>\n<h3 id=\"javascript编译\"><a class=\"anchor\" href=\"#javascript编译\">#</a> JavaScript 编译</h3>\n<p>在解析 CSS 和创建 CSSOM 的同时，包括 JavaScript 文件在内的其他资源也在下载（这要归功于预加载扫描器）。JavaScript 会被解析、编译和解释。脚本被解析为抽象语法树。有些浏览器引擎会将抽象语法树输入编译器，输出字节码。这就是所谓的 JavaScript 编译。大部分代码都是在主线程上解释的，但也有例外，例如在 web worker 中运行的代码。</p>\n<h3 id=\"构建无障碍树\"><a class=\"anchor\" href=\"#构建无障碍树\">#</a> 构建无障碍树</h3>\n<p>浏览器还构建辅助设备用于分析和解释内容的无障碍树。无障碍对象模型（AOM）类似于 DOM 的语义版本。当 DOM 更新时，浏览器会更新辅助功能树。辅助技术本身无法修改无障碍树。</p>\n<p>在构建 AOM 之前，屏幕阅读器无法访问内容。</p>\n<h2 id=\"渲染\"><a class=\"anchor\" href=\"#渲染\">#</a> 渲染</h2>\n<p>渲染步骤包括样式、布局、绘制，在某些情况下还包括合成。在解析步骤中创建的 CSSOM 树和 DOM 树组合成一个渲染树，然后用于计算每个可见元素的布局，然后将其绘制到屏幕上。在某些情况下，可以将内容提升到它们自己的层并进行合成，通过在 GPU 而不是 CPU 上绘制屏幕的一部分来提高性能，从而释放主线程。</p>\n<h3 id=\"样式\"><a class=\"anchor\" href=\"#样式\">#</a> 样式</h3>\n<p>关键呈现路径的第三步是将 DOM 和 CSSOM 组合成渲染树。计算样式树或渲染树的构建从 DOM 树的根开始，遍历每个可见节点。</p>\n<p>不会被显示的元素，如 <code>&lt;head&gt;</code>  元素及其子元素，以及任何带有 display: none 的节点，如用户代理样式表中的 script {display: none;}，都不会包含在渲染树中，因为它们不会出现在渲染输出中。应用了 visibility: hidden 的节点会包含在渲染树中，因为它们会占用空间。由于我们没有给出任何指令来覆盖用户代理默认值，因此上述代码示例中的 script 节点不会包含在渲染树中。</p>\n<p>每个可见节点都应用了 CSSOM 规则。渲染树包含所有可见节点的内容和计算样式，将所有相关样式与 DOM 树中的每个可见节点匹配起来，并根据 CSS 级联，确定每个节点的计算样式。</p>\n<h3 id=\"布局\"><a class=\"anchor\" href=\"#布局\">#</a> 布局</h3>\n<p>第四步是在渲染树上运行布局以计算每个节点的几何体。布局是确定呈现树中所有节点的尺寸和位置，以及确定页面上每个对象的大小和位置的过程。重排是后续过程中对页面的任意部分或整个文档的大小和位置的重新计算。</p>\n<p>渲染树构建完毕后，浏览器就开始布局。渲染树标识了哪些节点会显示（即使不可见）及其计算样式，但不标识每个节点的尺寸或位置。为了确定每个对象的确切大小和位置，浏览器会从渲染树的根开始遍历。</p>\n<p>在网页上，大多数东西都是一个盒子。不同的设备和不同的桌面设置意味着无限数量的不同视区大小。在此阶段，根据视口大小，浏览器将确定屏幕上所有盒子的大小。以视口大小为基础，布局通常从 body 开始，设置所有 body 后代的大小，同时给不知道其尺寸的替换元素（例如图像）提供占位符空间，空间大小以相应元素盒模型的属性为准。</p>\n<p>第一次确定每个节点的大小和位置称为<strong>布局</strong>。随后对节点大小和位置的重新计算称为<strong>重排</strong>。在我们的示例中，假设初始布局发生在返回图像之前。由于我们没有声明图像的尺寸，因此一旦知道图像的尺寸，就会出现重排。</p>\n<h3 id=\"绘制\"><a class=\"anchor\" href=\"#绘制\">#</a> 绘制</h3>\n<p>关键渲染路径中的最后一步是将各个节点绘制到屏幕上，其中第一次的绘制被称为<strong>首次有意义的绘制</strong>。在绘制或光栅化阶段，浏览器将在布局阶段计算的每个盒子转换为屏幕上的实际像素。绘制涉及将元素的每个可见部分绘制到屏幕上，包括文本、颜色、边框、阴影以及按钮和图像等替换元素。浏览器需要以超快的速度执行这个过程。</p>\n<p>为了确保平滑滚动和动画效果，包括计算样式、回流和绘制等占用主线程的所有操作，必须在不超过 16.67 毫秒的时间内完成。在 2048 x 1536 分辨率下，iPad 需要将超过 314.5 万个像素绘制到屏幕上。这是非常多的像素，必须要非常快速地绘制出来。为了确保重绘能够比初始绘制更快地完成，绘制到屏幕的操作通常被分解成几个图层。如果发生这种情况，浏览器则需要进行合成。</p>\n<p>绘制可以将布局树中的元素分解为多个层。将内容提升到 GPU 上的层（而不是 CPU 上的主线程）可以提高绘制和重新绘制性能。有一些特定的属性和元素可以实例化一个层，包括  <code>&lt;video&gt;</code>  和  <code>&lt;canvas&gt;</code> ，任何 CSS 属性为 opacity 、3D transform、will-change 的元素，还有一些其他元素。这些节点将与子节点一起绘制到它们自己的层上，除非子节点由于上述一个（或多个）原因需要自己的层。</p>\n<p>分层确实可以提高性能，但在内存管理方面成本较高，因此不应作为 Web 性能优化策略的过度使用。</p>\n<h2 id=\"交互\"><a class=\"anchor\" href=\"#交互\">#</a> 交互</h2>\n<p>一旦主线程绘制页面完成，你会认为我们已经 “准备好了”，但事实并非如此。如果加载包括正确延迟加载的 JavaScript，并且仅在 onload 事件触发后执行，那么主线程可能会忙于执行脚本，无法用于滚动、触摸和其他交互操作。</p>\n<p>** 可交互时间（TTI）** 是测量从第一个请求导致 DNS 查询和 SSL 连接到页面可交互时所用的时间 —— 可交互是在首次内容绘制之后页面在 50ms 内响应用户的交互。如果主线程正在解析、编译和执行 JavaScript，则无法及时（小于 50ms）响应用户交互。</p>\n<p>在我们的示例中，可能图像加载很快，但 anotherscript.js 文件的大小可能是 2MB，而且用户的网络连接很慢。在这种情况下，用户可以非常快地看到页面，但是在下载、解析和执行脚本之前，就无法滚动。这不是一个好的用户体验。避免占用主线程，如下面的网页测试示例所示：<br />\n<br></p>\n<div align=\"center\">\n    <style>.gcethlaseely{}</style><img data-src=\"/2024/07/31/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80-%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%A6%82%E4%BD%95%E8%BF%90%E4%BD%9C%E7%9A%84/04.png\" class=\"gcethlaseely\">\n</div>\n<br>\n在本例中，DOM 内容加载过程花费了超过 1.5 秒的时间，主线程在这段时间内完全被占用，对单击事件或屏幕点击没有响应。"},{"title":"前端学习之JS篇（一）","date":"2025-01-07T15:06:15.000Z","_content":"\n## Javascript学习总结\n\n### 一、数据类型\n\n1. JavaScript有哪些数据类型，它们的区别？\n\nJavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。\n\n其中 Symbol 和 BigInt 是ES6 中新增的数据类型：\n- Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。\n- BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。\n\n这些数据可以分为原始数据类型和引用数据类型：\n- 栈：原始数据类型（Undefined、Null、Boolean、Number、String）\n- 堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别在于存储位置的不同：\n- 原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n- 引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。\n\n堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：\n- 在数据结构中，栈中数据的存取方式为先进后出。\n- 堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n\n在操作系统中，内存被分为栈区和堆区：\n- 栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n- 堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。\n\n2. 数据类型检测的方式有哪些\n\n（1）typeof\n\n``` javascript\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object\n\n```\n\n其中数组、对象、null都会被判断为object，其他判断都正确。\n\n（2）instanceof\n\ninstanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。\n\n``` javascript\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false \n \nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true\n\n```\n\n可以看到，instanceof只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。\n\n（3） constructor\n\n``` javascript\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n\n```\n\nconstructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。\n需要注意，如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了：\n\n``` javascript\nfunction Fn(){};\n \nFn.prototype = new Array();\n \nvar f = new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true\n\n```\n\n（4）Object.prototype.toString.call()\n\nObject.prototype.toString.call() 使用 Object 对象的原型方法 toString 来判断数据类型：\n\n``` javascript \nvar a = Object.prototype.toString;\n \nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function(){}));\nconsole.log(a.call({}));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n\n```\n\n同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n\n这是因为toString是Object的原型方法，而Array、function等类型作为Object的实例，都重写了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。\n\n3. 判断数组的方式有哪些\n\n- 通过Object.prototype.toString.call()做判断\n\n``` javascript\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';\n```\n\n- 通过原型链做判断\n\n``` javascript\nobj.__proto__ === Array.prototype;\n```\n\n- 通过ES6的Array.isArray()做判断\n\n``` javascript\nArray.isArrray(obj);\n\n```\n\n- 通过instanceof做判断\n\n``` javascript\nobj instanceof Array\n\n```\n\n- 通过Array.prototype.isPrototypeOf\n\n``` javascript\nArray.prototype.isPrototypeOf(obj)\n\n```\n\n4. null和undefined区别\n\n首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\n\nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。\n\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n\n当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\n\n5. typeof null 的结果是什么，为什么？\n\ntypeof null 的结果是Object。\n\n在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签(1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：\n\n``` javascript\n000: object   - 当前存储的数据指向一个对象。\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\n010: double   - 当前存储的数据指向一个双精度的浮点数。\n100: string   - 当前存储的数据指向一个字符串。\n110: boolean  - 当前存储的数据是布尔值。\n\n```\n\n如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。\n\n有两种特殊数据类型：\n\n- undefined的值是 (-2)30(一个超出整数范围的数字)；\n- null 的值是机器码 NULL 指针(null 指针的值全是 0)\n\n那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。\n\n6. intanceof 操作符的实现原理及实现\n\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n\n``` javascript\nfunction myInstanceof(left, right) {\n  // 获取对象的原型\n  let proto = Object.getPrototypeOf(left)\n  // 获取构造函数的 prototype 对象\n  let prototype = right.prototype; \n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n\n```\n\n7. 为什么0.1+0.2 ! == 0.3，如何让其相等  \n\n在开发过程中遇到类似这样的问题：\n\n``` javascript\nlet n1 = 0.1, n2 = 0.2\nconsole.log(n1 + n2)  // 0.30000000000000004\n\n```\n\n这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：\n\n``` javascript\n(n1 + n2).toFixed(2) // 注意，toFixed为四舍五入\n\n```\n\ntoFixed(num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？\n\n计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是0.0001100110011001100...（1100循环），0.2的二进制是：0.00110011001100...（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？\n\n一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。\n\n根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：0.30000000000000004。\n\n下面看一下双精度数是如何保存的：\n\n<div align=center>\n    <img src=\"前端学习之JS篇（一）/01.jpg\">\n</div>\n\n- 第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位\n- 第二部分（绿色）：用来存储指数（exponent），占用11位\n- 第三部分（红色）：用来存储小数（fraction），占用52位\n\n对于0.1，它的二进制为：\n\n``` javascript\n0.00011001100110011001100110011001100110011001100110011001 10011...\n\n```\n\n转为科学计数法（科学计数法的结果就是浮点数）：\n\n``` javascript\n1.1001100110011001100110011001100110011001100110011001*2^-4\n\n```\n\n可以看出0.1的符号位为0，指数位为-4，小数位为：\n\n``` javascript\n1001100110011001100110011001100110011001100110011001\n\n```\n\n那么问题又来了，指数位是负数，该如何保存呢？\n\nIEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定双精度数的偏移量为1023。\n\n- 当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是-1022~1013。\n- 当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。\n- 当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。\n\n对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：1111111011.\n\n所以，0.1表示为：\n\n``` javascript\n0 1111111011 1001100110011001100110011001100110011001100110011001\n\n```\n\n说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？\n\n对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了Number.EPSILON属性，而它的值就是2-52，只要判断0.1+0.2-0.3是否小于Number.EPSILON，如果小于，就可以判断为0.1+0.2 ===0.3\n\n``` javascript\n\nfunction numberepsilon(arg1,arg2){                   \n  return Math.abs(arg1 - arg2) < Number.EPSILON;        \n}        \n\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n```\n\n8. 如何获取安全的 undefined 值？\n\n因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。\n表达式 void ___ 没有返回值，因此返回结果是 undefined。\nvoid 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。\n\n9. typeof NaN 的结果是什么？\n\nNaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n\n``` javascript\ntypeof NaN; // \"number\"\n\n```\n\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。\n\n10. isNaN 和 Number.isNaN 函数的区别？\n\n- 函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。\n- 函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。\n\n\n12. 其他值到字符串的转换规则？\n\n- Null 和 Undefined 类型 ，null 转换为 \"null\"，undefined 转换为 \"undefined\"，\n- Boolean 类型，true 转换为 \"true\"，false 转换为 \"false\"。\n- Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n- Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n- 对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如\"[object Object]\"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。\n\n13. 其他值到数字值的转换规则？\n- Undefined 类型的值转换为 NaN。\n- Null 类型的值转换为 0。\n- Boolean 类型的值，true 转换为 1，false 转换为 0。\n- String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\n- Symbol 类型的值不能转换为数字，会报错。\n- 对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n\n14. 其他值到布尔类型的值的转换规则？\n\n以下这些是假值： ```• undefined • null • false • +0、-0 和 NaN •```\n\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\n\n15. || 和 && 操作符的返回值？\n\n|| 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。\n\n- 对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n- && 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\n\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果\n\n16. Object.is() 与比较操作符 ```“===”、“==” ```的区别？\n\n- 使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n- 使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n- 使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。\n\n17. 什么是 JavaScript 中的包装类型？\n\n在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：\n\n``` javascript\nconst a = \"abc\";\na.length; // 3\na.toUpperCase(); // \"ABC\"\n\n```\n\n在访问'abc'.length时，JavaScript 将'abc'在后台转换成String('abc')，然后再访问其length属性。\n\nJavaScript也可以使用Object函数显式地将基本类型转换为包装类型：\n\n``` javascript\nvar a = 'abc'\nObject(a) // String {\"abc\"}\n\n```\n\n也可以使用valueOf方法将包装类型倒转成基本类型：\n\n``` javascript\nvar a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n\n```\n\n看看如下代码会打印出什么：\n\n``` javascript\nvar a = new Boolean( false );\nif (!a) {\n\tconsole.log( \"Oops\" ); // never runs\n}\n\n```\n\n答案是**什么都不会打印**，因为虽然包裹的基本类型是false，但是false被包裹成包装类型后就成了对象，所以其非值为false，所以循环体中的内容不会运行。\n\n18. JavaScript 中如何进行隐式类型转换？\n\n首先要介绍ToPrimitive方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：\n\n``` javascript\n/**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*/\nToPrimitive(obj,type)\n\n```\n\ntype的值为number或者string。\n\n（1）当type为number时规则如下：\n\n- 调用obj的valueOf方法，如果为原始值，则返回，否则下一步；\n- 调用obj的toString方法，后续同上；\n- 抛出TypeError 异常。\n\n（2）当type为string时规则如下：\n\n- 调用obj的toString方法，如果为原始值，则返回，否则下一步；\n- 调用obj的valueOf方法，后续同上；\n- 抛出TypeError 异常。\n\np.s. \n- toString 方法用于将对象转换为字符串。\n- valueOf 方法用于返回对象的原始值。\n\n可以看出两者的主要区别在于调用toString和valueOf的先后顺序。默认情况下：\n- 如果对象为 Date 对象，则type默认为string；\n- 其他情况下，type默认为number。\n\n总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：\n\n``` javascript\nvar objToNumber = value => Number(value.valueOf().toString())\nobjToNumber([]) === 0\nobjToNumber({}) === NaN\n\n```\n\n而 JavaScript 中的隐式类型转换主要发生在+、-、*、/以及==、>、<这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用ToPrimitive转换成基本类型，再进行操作。\n\n以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被ToPrimitive转换成基本类型，所以最终还是要应用基本类型转换规则）：\n\n(1) +操作符 +操作符的两边有至少一个string类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。\n\n``` javascript\n 1 + '23' // '123'\n 1 + false // 1 \n 1 + Symbol() // Uncaught TypeError: Cannot convert a Symbol value to a number\n '1' + false // '1false'\n false + true // 1\n\n```\n\n(2) -、*、\\操作符\n\nNaN也是一个数字\n\n``` javascript\n 1 * '23' // 23\n 1 * false // 0\n 1 / 'aa' // NaN\n\n```\n\n(3) 对于==操作符\n\n操作符两边的值都尽量转成number：\n\n``` javascript\n3 == true // false, 3 转为number为3，true转为number为1\n'0' == false //true, '0'转为number为0，false转为number为0\n'0' == 0 // '0'转为number为0\n\n```\n\n(4) 对于<和>比较符\n\n如果两边都是字符串，则比较字母表顺序：\n\n``` javascript\n'ca' < 'bd' // false\n'a' < 'b' // true\n\n```\n\n其他情况下，转换为数字再比较：\n\n``` javascript\n'12' < 13 // true\nfalse > -1 // true\n\n```\n\n以上说的是基本类型的隐式转换，而对象会被ToPrimitive转换为基本类型再进行转换：\n\n``` javascript\nvar a = {}\na > 2 // false\n\n```\n\n其对比过程如下：\n\n``` javascript\na.valueOf() // {}, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"，现在是一个字符串了\nNumber(a.toString()) // NaN，根据上面 < 和 > 操作符的规则，要转换成数字\nNaN > 2 //false，得出比较结果\n\n```\n\n又比如：\n\n``` javascript\nvar a = {name:'Jack'}\nvar b = {age: 18}\na + b // \"[object Object][object Object]\"\n\n```\n\n运算过程如下：\n\n``` javascript\na.valueOf() // {}，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"\nb.valueOf() // 同理\nb.toString() // \"[object Object]\"\na + b // \"[object Object][object Object]\"\n\n```\n\n19. ```+``` 操作符什么时候用于字符串的拼接？\n\n根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。\n\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\n\n20. 为什么会有BigInt的提案？\n\nJavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。\n\n21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别\n\n扩展运算符：\n\n``` javascript\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = {...outObj}\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n\n```\n\nObject.assign():\n\n``` javascript\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = Object.assign({}, outObj)\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n\n```\n\n可以看到，两者都是浅拷贝。\n\n- Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。\n- 扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。\n\n### 二、ES6\n\n1. let、const、var的区别\n\n（1）块级作用域： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：\n\n- 内层变量可能覆盖外层变量\n- 用来计数的循环变量泄露为全局变量\n\n（2）变量提升： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。\n\n（3）给全局添加属性： 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n\n（4）重复声明： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。\n\n（5）暂时性死区： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。\n\n（6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。\n\n（7）指针指向： let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。\n\n| 区别 | var | let | const |\n| --- | --- | --- | --- |\n| 是否有块级作用域 | × | ✔️ | ✔️ |\n| 是否有变量提升 | ✔️ | × | × |\n| 是否添加全局属性\t| ✔️ |\t× |\t× |\n| 能否重复声明变量\t| ✔️ |\t× |\t× |\n| 是否有暂时性死区\t| × | ✔️ | ✔️ |\n| 是否需要初始化\t| × | ✔️ | ✔️ |\n| 是否必须设置初始值 | × | × | ✔️ |\n| 是否可以改变指针指向\t| ✔️ |\t✔️ | × |\n\n2. const对象的属性可以修改吗\n\nconst保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。\n\n但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。\n\n3. 如果new一个箭头函数会怎么样\n\n箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。\n\nnew操作符的实现步骤如下：\n（1）创建一个对象\n（2）将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）\n（3）执行构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）\n（4）返回新对象\n\n所以，上面的第二、三步，箭头函数都是没有办法执行的。\n\n4. 箭头函数与普通函数的区别\n\n（1）箭头函数比普通函数更加简洁\n- 如果没有参数，就直接写一个空括号即可\n- 如果只有一个参数，可以省去参数的括号\n- 如果有多个参数，用逗号分割\n- 如果函数体的返回值只有一句，可以省略大括号\n- 如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：\n\n``` javascript\nlet fn = () => void doesNotReturn();\n```\n\n（2）箭头函数没有自己的this\n箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。\n\n（3）箭头函数继承来的this指向永远不会改变\n\n``` javascript\nvar id = 'GLOBAL';\nvar obj = {\n    id: 'OBJ',\n    a: function() {\n        console.log(this.id);\n    },\n    b: () => {\n        console.log(this.id);\n    }\n};\nobj.a(); // 'OBJ'\nobj.b(); // 'GLOBAL'\nnew obj.a()  // undefined\nnew obj.b()  // Uncaught TypeError: obj.b is not a constructor\n```\n\n(b是箭头函数，它的外层作用域是全局作用域，因此它的this被绑定到全局对象（（在浏览器中是 window 对象，在 Node.js 中是 global 对象））)\n\n对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号{}是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。\n\n（对象的大括号 {} 不会创建新的执行环境：它只是在当前的作用域中定义了一个对象字面量，所有的属性和方法都仍然是当前作用域的一部分。\n函数会创建新的执行环境：定义一个函数时，函数内部会形成一个新的作用域，函数内部的变量和操作不会影响外部的作用域。）\n\n（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向\n\n``` javascript\nvar id = 'Global';\nlet fun1 = () => {\n    console.log(this.id)\n};\nfun1();                     // 'Global'\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n\n```\n\n（5）箭头函数不能作为构造函数使用\n\n构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。\n\n（6）箭头函数没有自己的arguments\n\n箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层函数的arguments。\n\n（7）箭头函数没有prototype\n\n（8）箭头函数不能用作Generator函数，不能使用yeild关键字\n\n5. 箭头函数的this指向哪⾥？\n\n箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。\n\n可以⽤Babel理解⼀下箭头函数:\n\n``` javascript\n// ES6 \nconst obj = { \n  getArrow() { \n    return () => { \n      console.log(this === obj); \n    }; \n  } \n}\n\n```\n\n转化后：\n\n``` javascript\n// ES5，由 Babel 转译\nvar obj = { \n   getArrow: function getArrow() { \n     var _this = this; \n     return function () { \n        console.log(_this === obj); \n     }; \n   } \n};\n\n```\n\n6. 扩展运算符的作用及使用场景\n\n（1）对象扩展运算符\n\n对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。\n\n``` javascript\nlet bar = { a: 1, b: 2 };\nlet baz = { ...bar }; // { a: 1, b: 2 }\n\n```\n\n上述方法实际上等价于:\n\n``` javascript\nlet bar = { a: 1, b: 2 };\nlet baz = Object.assign({}, bar); // { a: 1, b: 2 }\n\n```\n\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。\n\n同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\n\n``` javascript\nlet bar = {a: 1, b: 2};\nlet baz = {...bar, ...{a:2, b: 4}};  // {a: 2, b: 4}\n\n```\n\n利用上述特性就可以很方便的修改对象的部分属性。在redux中的reducer函数规定必须是一个纯函数，reducer中的state对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。\n\n需要注意：扩展运算符对对象实例的拷贝属于浅拷贝。\n\n（2）数组扩展运算符\n\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\n\n``` javascript\nconsole.log(...[1, 2, 3])\n// 1 2 3\nconsole.log(...[1, [2, 3, 4], 5])\n// 1 [2, 3, 4] 5\n\n```\n\n下面是数组的扩展运算符的应用：\n- 将数组转换为参数序列\n\n``` javascript\nfunction add(x, y) {\n  return x + y;\n}\nconst numbers = [1, 2];\nadd(...numbers) // 3\n\n```\n\n- 复制数组\n\n``` javascript\nconst arr1 = [1, 2];\nconst arr2 = [...arr1];\n\n```\n\n要记住：扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。\n\n- 合并数组\n\n如果想在数组内合并数组，可以这样：\n\n``` javascript\nconst arr1 = ['two', 'three'];const arr2 = ['one', ...arr1, 'four', 'five'];// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n\n```\n\n- 扩展运算符与解构赋值结合起来，用于生成数组\n\n``` javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest  // [2, 3, 4, 5]\n\n```\n\n需要注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n\n``` javascript\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n\n```\n\n- 将字符串转为真正的数组\n\n``` javascript\n[...'hello']    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\n```\n\n- 任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组\n\n比较常见的应用是可以将某些数据结构转为数组：\n\n``` javascript\n// arguments对象\nfunction foo() {\n  const args = [...arguments];\n}\n\n```\n\n用于替换es5中的Array.prototype.slice.call(arguments)写法。\n\n- 使用Math函数获取数组中特定的值\n\n``` javascript\nconst numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n\n```\n\n8. 对对象与数组的解构的理解\n\n解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 1）数组的解构 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：\n\n``` javascript\nconst [a, b, c] = [1, 2, 3]\n\n```\n最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：\n\n数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：\n\n``` javascript\nconst [a,,c] = [1,2,3]\n\n```\n\n通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量\n\n2）对象的解构 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：\n\n``` javascript\nconst stu = {\n  name: 'Bob',\n  age: 24\n}\n\n```\n\n假如想要解构它的两个自有属性，可以这样：\n\n``` javascript\nconst { name, age } = stu\n\n```\n\n这样就得到了 name 和 age 两个和 stu 平级的变量：\n\n注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：\n\n``` javascript\nconst { age, name } = stu\n```\n\n9. 如何提取高度嵌套的对象里的指定属性？\n\n有时会遇到一些嵌套程度非常深的对象：\n\n``` javascript\nconst school = {\n   classes: {\n      stu: {\n         name: 'Bob',\n         age: 24,\n      }\n   }\n}\n\n```\n\n像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：\n\n``` javascript\nconst { name } = school\n\n```\n显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：\n\n``` javascript\nconst { classes } = school\nconst { stu } = classes\nconst { name } = stu\nname // 'Bob'\n\n```\n\n但是还有一种更标准的做法，可以用一行代码来解决这个问题：\n\n``` javascript\nconst { classes: { stu: { name } }} = school\n       \nconsole.log(name)  // 'Bob'\n\n```\n\n可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。\n\n10. 对 rest 参数的理解\n\n扩展运算符被用在函数形参上时，它还可以把一个分离的参数序列整合成一个数组：\n\n``` javascript\nfunction mutiple(...args) {\n  let result = 1;\n  for (var val of args) {\n    result *= val;\n  }\n  return result;\n}\nmutiple(1, 2, 3, 4) // 24\n\n```\n\n这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：\n\n``` javascript\nfunction mutiple(...args) {\n  console.log(args)\n}\nmutiple(1, 2, 3, 4) // [1, 2, 3, 4]\n\n```\n\n这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。\n\n11. ES6中模板语法与字符串处理\n\nES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：\n\n``` javascript\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = 'my name is ' + name + ', I work as a ' + career + ', I love ' + hobby[0] + ' and ' + hobby[1]\n\n```\n\n仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：\n\n``` javascript\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = `my name is ${name}, I work as a ${career} I love ${hobby[0]} and ${hobby[1]}`\n\n```\n\n字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：\n\n- 在模板字符串中，空格、缩进、换行都会被保留\n- 模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算\n\n基于第一点，可以在模板字符串里无障碍地直接写 html 代码：\n\n``` javascript\nlet list = `\n\t<ul>\n\t\t<li>列表项1</li>\n\t\t<li>列表项2</li>\n\t</ul>\n`;\nconsole.log(message); // 正确输出，不存在报错\n\n```\n\n基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：\n\n``` javascript\nfunction add(a, b) {\n  const finalString = `${a} + ${b} = ${a+b}`\n  console.log(finalString)\n}\nadd(1, 2) // 输出 '1 + 2 = 3'\n\n```\n\n除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：\n\n（1）存在性判定：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf > -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。\n\n- includes：判断字符串与子串的包含关系：\n\n``` javascript\nconst son = 'haha' \nconst father = 'xixi haha hehe'\nfather.includes(son) // true\n\n```\n\n- startsWith：判断字符串是否以指定子串开头：\n\n``` javascript\nconst father = 'xixi haha hehe'\nfather.startsWith('haha') // false\nfather.startsWith('xixi') // true\n\n```\n\n- endsWith：判断字符串是否以指定子串结尾：\n\n``` javascript\nconst father = 'xixi haha hehe'\n  father.endsWith('hehe') // true\n```\n\n（2）自动重复：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：\n\n``` javascript\nconst sourceCode = 'repeat for 3 times;'\nconst repeated = sourceCode.repeat(3) \nconsole.log(repeated) // repeat for 3 times;repeat for 3 times;repeat for 3 times;\n\n```\n\n","source":"_posts/前端学习之JS篇（一）.md","raw":"---\ntitle: 前端学习之JS篇（一）\ndate: 2025-01-07 23:06:15\ncategories:\n- [前端开发]\ntags:\n- [前端开发]\n---\n\n## Javascript学习总结\n\n### 一、数据类型\n\n1. JavaScript有哪些数据类型，它们的区别？\n\nJavaScript共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。\n\n其中 Symbol 和 BigInt 是ES6 中新增的数据类型：\n- Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。\n- BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。\n\n这些数据可以分为原始数据类型和引用数据类型：\n- 栈：原始数据类型（Undefined、Null、Boolean、Number、String）\n- 堆：引用数据类型（对象、数组和函数）\n\n两种类型的区别在于存储位置的不同：\n- 原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；\n- 引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。\n\n堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：\n- 在数据结构中，栈中数据的存取方式为先进后出。\n- 堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。\n\n在操作系统中，内存被分为栈区和堆区：\n- 栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。\n- 堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。\n\n2. 数据类型检测的方式有哪些\n\n（1）typeof\n\n``` javascript\nconsole.log(typeof 2);               // number\nconsole.log(typeof true);            // boolean\nconsole.log(typeof 'str');           // string\nconsole.log(typeof []);              // object    \nconsole.log(typeof function(){});    // function\nconsole.log(typeof {});              // object\nconsole.log(typeof undefined);       // undefined\nconsole.log(typeof null);            // object\n\n```\n\n其中数组、对象、null都会被判断为object，其他判断都正确。\n\n（2）instanceof\n\ninstanceof可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。\n\n``` javascript\nconsole.log(2 instanceof Number);                    // false\nconsole.log(true instanceof Boolean);                // false \nconsole.log('str' instanceof String);                // false \n \nconsole.log([] instanceof Array);                    // true\nconsole.log(function(){} instanceof Function);       // true\nconsole.log({} instanceof Object);                   // true\n\n```\n\n可以看到，instanceof只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。\n\n（3） constructor\n\n``` javascript\nconsole.log((2).constructor === Number); // true\nconsole.log((true).constructor === Boolean); // true\nconsole.log(('str').constructor === String); // true\nconsole.log(([]).constructor === Array); // true\nconsole.log((function() {}).constructor === Function); // true\nconsole.log(({}).constructor === Object); // true\n\n```\n\nconstructor有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。\n需要注意，如果创建一个对象来改变它的原型，constructor就不能用来判断数据类型了：\n\n``` javascript\nfunction Fn(){};\n \nFn.prototype = new Array();\n \nvar f = new Fn();\n \nconsole.log(f.constructor===Fn);    // false\nconsole.log(f.constructor===Array); // true\n\n```\n\n（4）Object.prototype.toString.call()\n\nObject.prototype.toString.call() 使用 Object 对象的原型方法 toString 来判断数据类型：\n\n``` javascript \nvar a = Object.prototype.toString;\n \nconsole.log(a.call(2));\nconsole.log(a.call(true));\nconsole.log(a.call('str'));\nconsole.log(a.call([]));\nconsole.log(a.call(function(){}));\nconsole.log(a.call({}));\nconsole.log(a.call(undefined));\nconsole.log(a.call(null));\n\n```\n\n同样是检测对象obj调用toString方法，obj.toString()的结果和Object.prototype.toString.call(obj)的结果不一样，这是为什么？\n\n这是因为toString是Object的原型方法，而Array、function等类型作为Object的实例，都重写了toString方法。不同的对象类型调用toString方法时，根据原型链的知识，调用的是对应的重写之后的toString方法（function类型返回内容为函数体的字符串，Array类型返回元素组成的字符串…），而不会去调用Object上原型toString方法（返回对象的具体类型），所以采用obj.toString()不能得到其对象类型，只能将obj转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用Object原型上的toString方法。\n\n3. 判断数组的方式有哪些\n\n- 通过Object.prototype.toString.call()做判断\n\n``` javascript\nObject.prototype.toString.call(obj).slice(8,-1) === 'Array';\n```\n\n- 通过原型链做判断\n\n``` javascript\nobj.__proto__ === Array.prototype;\n```\n\n- 通过ES6的Array.isArray()做判断\n\n``` javascript\nArray.isArrray(obj);\n\n```\n\n- 通过instanceof做判断\n\n``` javascript\nobj instanceof Array\n\n```\n\n- 通过Array.prototype.isPrototypeOf\n\n``` javascript\nArray.prototype.isPrototypeOf(obj)\n\n```\n\n4. null和undefined区别\n\n首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。\n\nundefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null主要用于赋值给一些可能会返回对象的变量，作为初始化。\n\nundefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。\n\n当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。\n\n5. typeof null 的结果是什么，为什么？\n\ntypeof null 的结果是Object。\n\n在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签(1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：\n\n``` javascript\n000: object   - 当前存储的数据指向一个对象。\n  1: int      - 当前存储的数据是一个 31 位的有符号整数。\n010: double   - 当前存储的数据指向一个双精度的浮点数。\n100: string   - 当前存储的数据指向一个字符串。\n110: boolean  - 当前存储的数据是布尔值。\n\n```\n\n如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。\n\n有两种特殊数据类型：\n\n- undefined的值是 (-2)30(一个超出整数范围的数字)；\n- null 的值是机器码 NULL 指针(null 指针的值全是 0)\n\n那也就是说null的类型标签也是000，和Object的类型标签一样，所以会被判定为Object。\n\n6. intanceof 操作符的实现原理及实现\n\ninstanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n\n``` javascript\nfunction myInstanceof(left, right) {\n  // 获取对象的原型\n  let proto = Object.getPrototypeOf(left)\n  // 获取构造函数的 prototype 对象\n  let prototype = right.prototype; \n \n  // 判断构造函数的 prototype 对象是否在对象的原型链上\n  while (true) {\n    if (!proto) return false;\n    if (proto === prototype) return true;\n    // 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型\n    proto = Object.getPrototypeOf(proto);\n  }\n}\n\n```\n\n7. 为什么0.1+0.2 ! == 0.3，如何让其相等  \n\n在开发过程中遇到类似这样的问题：\n\n``` javascript\nlet n1 = 0.1, n2 = 0.2\nconsole.log(n1 + n2)  // 0.30000000000000004\n\n```\n\n这里得到的不是想要的结果，要想等于0.3，就要把它进行转化：\n\n``` javascript\n(n1 + n2).toFixed(2) // 注意，toFixed为四舍五入\n\n```\n\ntoFixed(num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？\n\n计算机是通过二进制的方式存储数据的，所以计算机计算0.1+0.2的时候，实际上是计算的两个数的二进制的和。0.1的二进制是0.0001100110011001100...（1100循环），0.2的二进制是：0.00110011001100...（1100循环），这两个数的二进制都是无限循环的数。那JavaScript是如何处理无限循环的二进制小数呢？\n\n一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循IEEE 754标准，使用64位固定长度来表示，也就是标准的double双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留52位，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从“0舍1入”的原则。\n\n根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是：0.30000000000000004。\n\n下面看一下双精度数是如何保存的：\n\n<div align=center>\n    <img src=\"前端学习之JS篇（一）/01.jpg\">\n</div>\n\n- 第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0表示正数，占用1位\n- 第二部分（绿色）：用来存储指数（exponent），占用11位\n- 第三部分（红色）：用来存储小数（fraction），占用52位\n\n对于0.1，它的二进制为：\n\n``` javascript\n0.00011001100110011001100110011001100110011001100110011001 10011...\n\n```\n\n转为科学计数法（科学计数法的结果就是浮点数）：\n\n``` javascript\n1.1001100110011001100110011001100110011001100110011001*2^-4\n\n```\n\n可以看出0.1的符号位为0，指数位为-4，小数位为：\n\n``` javascript\n1001100110011001100110011001100110011001100110011001\n\n```\n\n那么问题又来了，指数位是负数，该如何保存呢？\n\nIEEE标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于JavaScript的数字是双精度数，这里就以双精度数为例，它的指数部分为11位，能表示的范围就是0~2047，IEEE固定双精度数的偏移量为1023。\n\n- 当指数位不全是0也不全是1时(规格化的数值)，IEEE规定，阶码计算公式为 e-Bias。 此时e最小值是1，则1-1023= -1022，e最大值是2046，则2046-1023=1023，可以看到，这种情况下取值范围是-1022~1013。\n- 当指数位全部是0的时候(非规格化的数值)，IEEE规定，阶码的计算公式为1-Bias，即1-1023= -1022。\n- 当指数位全部是1的时候(特殊值)，IEEE规定这个浮点数可用来表示3个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为0的时候表示NaN；小数位为0时，当符号位s=0时表示正无穷，s=1时候表示负无穷。\n\n对于上面的0.1的指数位为-4，-4+1023 = 1019 转化为二进制就是：1111111011.\n\n所以，0.1表示为：\n\n``` javascript\n0 1111111011 1001100110011001100110011001100110011001100110011001\n\n```\n\n说了这么多，是时候该最开始的问题了，如何实现0.1+0.2=0.3呢？\n\n对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为2-52，在ES6中，提供了Number.EPSILON属性，而它的值就是2-52，只要判断0.1+0.2-0.3是否小于Number.EPSILON，如果小于，就可以判断为0.1+0.2 ===0.3\n\n``` javascript\n\nfunction numberepsilon(arg1,arg2){                   \n  return Math.abs(arg1 - arg2) < Number.EPSILON;        \n}        \n\nconsole.log(numberepsilon(0.1 + 0.2, 0.3)); // true\n```\n\n8. 如何获取安全的 undefined 值？\n\n因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。\n表达式 void ___ 没有返回值，因此返回结果是 undefined。\nvoid 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。\n\n9. typeof NaN 的结果是什么？\n\nNaN 指“不是一个数字”（not a number），NaN 是一个“警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即“执行数学运算没有成功，这是失败后返回的结果”。\n\n``` javascript\ntypeof NaN; // \"number\"\n\n```\n\nNaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。\n\n10. isNaN 和 Number.isNaN 函数的区别？\n\n- 函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。\n- 函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。\n\n\n12. 其他值到字符串的转换规则？\n\n- Null 和 Undefined 类型 ，null 转换为 \"null\"，undefined 转换为 \"undefined\"，\n- Boolean 类型，true 转换为 \"true\"，false 转换为 \"false\"。\n- Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。\n- Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。\n- 对普通对象来说，除非自行定义 toString() 方法，否则会调用 toString()（Object.prototype.toString()）来返回内部属性 [[Class]] 的值，如\"[object Object]\"。如果对象有自己的 toString() 方法，字符串化时就会调用该方法并使用其返回值。\n\n13. 其他值到数字值的转换规则？\n- Undefined 类型的值转换为 NaN。\n- Null 类型的值转换为 0。\n- Boolean 类型的值，true 转换为 1，false 转换为 0。\n- String 类型的值转换如同使用 Number() 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。\n- Symbol 类型的值不能转换为数字，会报错。\n- 对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。\n\n为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有valueOf()方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。\n\n如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。\n\n14. 其他值到布尔类型的值的转换规则？\n\n以下这些是假值： ```• undefined • null • false • +0、-0 和 NaN •```\n\n假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。\n\n15. || 和 && 操作符的返回值？\n\n|| 和 && 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。\n\n- 对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。\n- && 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。\n\n|| 和 && 返回它们其中一个操作数的值，而非条件判断的结果\n\n16. Object.is() 与比较操作符 ```“===”、“==” ```的区别？\n\n- 使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。\n- 使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。\n- 使用 Object.is 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。\n\n17. 什么是 JavaScript 中的包装类型？\n\n在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：\n\n``` javascript\nconst a = \"abc\";\na.length; // 3\na.toUpperCase(); // \"ABC\"\n\n```\n\n在访问'abc'.length时，JavaScript 将'abc'在后台转换成String('abc')，然后再访问其length属性。\n\nJavaScript也可以使用Object函数显式地将基本类型转换为包装类型：\n\n``` javascript\nvar a = 'abc'\nObject(a) // String {\"abc\"}\n\n```\n\n也可以使用valueOf方法将包装类型倒转成基本类型：\n\n``` javascript\nvar a = 'abc'\nvar b = Object(a)\nvar c = b.valueOf() // 'abc'\n\n```\n\n看看如下代码会打印出什么：\n\n``` javascript\nvar a = new Boolean( false );\nif (!a) {\n\tconsole.log( \"Oops\" ); // never runs\n}\n\n```\n\n答案是**什么都不会打印**，因为虽然包裹的基本类型是false，但是false被包裹成包装类型后就成了对象，所以其非值为false，所以循环体中的内容不会运行。\n\n18. JavaScript 中如何进行隐式类型转换？\n\n首先要介绍ToPrimitive方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：\n\n``` javascript\n/**\n* @obj 需要转换的对象\n* @type 期望的结果类型\n*/\nToPrimitive(obj,type)\n\n```\n\ntype的值为number或者string。\n\n（1）当type为number时规则如下：\n\n- 调用obj的valueOf方法，如果为原始值，则返回，否则下一步；\n- 调用obj的toString方法，后续同上；\n- 抛出TypeError 异常。\n\n（2）当type为string时规则如下：\n\n- 调用obj的toString方法，如果为原始值，则返回，否则下一步；\n- 调用obj的valueOf方法，后续同上；\n- 抛出TypeError 异常。\n\np.s. \n- toString 方法用于将对象转换为字符串。\n- valueOf 方法用于返回对象的原始值。\n\n可以看出两者的主要区别在于调用toString和valueOf的先后顺序。默认情况下：\n- 如果对象为 Date 对象，则type默认为string；\n- 其他情况下，type默认为number。\n\n总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：\n\n``` javascript\nvar objToNumber = value => Number(value.valueOf().toString())\nobjToNumber([]) === 0\nobjToNumber({}) === NaN\n\n```\n\n而 JavaScript 中的隐式类型转换主要发生在+、-、*、/以及==、>、<这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用ToPrimitive转换成基本类型，再进行操作。\n\n以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被ToPrimitive转换成基本类型，所以最终还是要应用基本类型转换规则）：\n\n(1) +操作符 +操作符的两边有至少一个string类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。\n\n``` javascript\n 1 + '23' // '123'\n 1 + false // 1 \n 1 + Symbol() // Uncaught TypeError: Cannot convert a Symbol value to a number\n '1' + false // '1false'\n false + true // 1\n\n```\n\n(2) -、*、\\操作符\n\nNaN也是一个数字\n\n``` javascript\n 1 * '23' // 23\n 1 * false // 0\n 1 / 'aa' // NaN\n\n```\n\n(3) 对于==操作符\n\n操作符两边的值都尽量转成number：\n\n``` javascript\n3 == true // false, 3 转为number为3，true转为number为1\n'0' == false //true, '0'转为number为0，false转为number为0\n'0' == 0 // '0'转为number为0\n\n```\n\n(4) 对于<和>比较符\n\n如果两边都是字符串，则比较字母表顺序：\n\n``` javascript\n'ca' < 'bd' // false\n'a' < 'b' // true\n\n```\n\n其他情况下，转换为数字再比较：\n\n``` javascript\n'12' < 13 // true\nfalse > -1 // true\n\n```\n\n以上说的是基本类型的隐式转换，而对象会被ToPrimitive转换为基本类型再进行转换：\n\n``` javascript\nvar a = {}\na > 2 // false\n\n```\n\n其对比过程如下：\n\n``` javascript\na.valueOf() // {}, 上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"，现在是一个字符串了\nNumber(a.toString()) // NaN，根据上面 < 和 > 操作符的规则，要转换成数字\nNaN > 2 //false，得出比较结果\n\n```\n\n又比如：\n\n``` javascript\nvar a = {name:'Jack'}\nvar b = {age: 18}\na + b // \"[object Object][object Object]\"\n\n```\n\n运算过程如下：\n\n``` javascript\na.valueOf() // {}，上面提到过，ToPrimitive默认type为number，所以先valueOf，结果还是个对象，下一步\na.toString() // \"[object Object]\"\nb.valueOf() // 同理\nb.toString() // \"[object Object]\"\na + b // \"[object Object][object Object]\"\n\n```\n\n19. ```+``` 操作符什么时候用于字符串的拼接？\n\n根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。\n\n简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。\n\n那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。\n\n20. 为什么会有BigInt的提案？\n\nJavaScript中Number.MAX_SAFE_INTEGER表示最⼤安全数字，计算结果是9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了BigInt来解决此问题。\n\n21. object.assign和扩展运算法是深拷贝还是浅拷贝，两者区别\n\n扩展运算符：\n\n``` javascript\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = {...outObj}\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n\n```\n\nObject.assign():\n\n``` javascript\nlet outObj = {\n  inObj: {a: 1, b: 2}\n}\nlet newObj = Object.assign({}, outObj)\nnewObj.inObj.a = 2\nconsole.log(outObj) // {inObj: {a: 2, b: 2}}\n\n```\n\n可以看到，两者都是浅拷贝。\n\n- Object.assign()方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。\n- 扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制ES6的 symbols 属性。\n\n### 二、ES6\n\n1. let、const、var的区别\n\n（1）块级作用域： 块作用域由 { }包括，let和const具有块级作用域，var不存在块级作用域。块级作用域解决了ES5中的两个问题：\n\n- 内层变量可能覆盖外层变量\n- 用来计数的循环变量泄露为全局变量\n\n（2）变量提升： var存在变量提升，let和const不存在变量提升，即在变量只能在声明之后使用，否在会报错。\n\n（3）给全局添加属性： 浏览器的全局对象是window，Node的全局对象是global。var声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是let和const不会。\n\n（4）重复声明： var声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const和let不允许重复声明变量。\n\n（5）暂时性死区： 在使用let、const命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用var声明的变量不存在暂时性死区。\n\n（6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而const声明变量必须设置初始值。\n\n（7）指针指向： let和const都是ES6新增的用于创建变量的语法。 let创建的变量是可以更改指针指向（可以重新赋值）。但const声明的变量是不允许改变指针的指向。\n\n| 区别 | var | let | const |\n| --- | --- | --- | --- |\n| 是否有块级作用域 | × | ✔️ | ✔️ |\n| 是否有变量提升 | ✔️ | × | × |\n| 是否添加全局属性\t| ✔️ |\t× |\t× |\n| 能否重复声明变量\t| ✔️ |\t× |\t× |\n| 是否有暂时性死区\t| × | ✔️ | ✔️ |\n| 是否需要初始化\t| × | ✔️ | ✔️ |\n| 是否必须设置初始值 | × | × | ✔️ |\n| 是否可以改变指针指向\t| ✔️ |\t✔️ | × |\n\n2. const对象的属性可以修改吗\n\nconst保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。\n\n但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。\n\n3. 如果new一个箭头函数会怎么样\n\n箭头函数是ES6中的提出来的，它没有prototype，也没有自己的this指向，更不可以使用arguments参数，所以不能New一个箭头函数。\n\nnew操作符的实现步骤如下：\n（1）创建一个对象\n（2）将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的prototype属性）\n（3）执行构造函数中的代码，构造函数中的this指向该对象（也就是为这个对象添加属性和方法）\n（4）返回新对象\n\n所以，上面的第二、三步，箭头函数都是没有办法执行的。\n\n4. 箭头函数与普通函数的区别\n\n（1）箭头函数比普通函数更加简洁\n- 如果没有参数，就直接写一个空括号即可\n- 如果只有一个参数，可以省去参数的括号\n- 如果有多个参数，用逗号分割\n- 如果函数体的返回值只有一句，可以省略大括号\n- 如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个void关键字。最常见的就是调用一个函数：\n\n``` javascript\nlet fn = () => void doesNotReturn();\n```\n\n（2）箭头函数没有自己的this\n箭头函数不会创建自己的this， 所以它没有自己的this，它只会在自己作用域的上一层继承this。所以箭头函数中this的指向在它在定义时已经确定了，之后不会改变。\n\n（3）箭头函数继承来的this指向永远不会改变\n\n``` javascript\nvar id = 'GLOBAL';\nvar obj = {\n    id: 'OBJ',\n    a: function() {\n        console.log(this.id);\n    },\n    b: () => {\n        console.log(this.id);\n    }\n};\nobj.a(); // 'OBJ'\nobj.b(); // 'GLOBAL'\nnew obj.a()  // undefined\nnew obj.b()  // Uncaught TypeError: obj.b is not a constructor\n```\n\n(b是箭头函数，它的外层作用域是全局作用域，因此它的this被绑定到全局对象（（在浏览器中是 window 对象，在 Node.js 中是 global 对象））)\n\n对象obj的方法b是使用箭头函数定义的，这个函数中的this就永远指向它定义时所处的全局执行环境中的this，即便这个函数是作为对象obj的方法调用，this依旧指向Window对象。需要注意，定义对象的大括号{}是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。\n\n（对象的大括号 {} 不会创建新的执行环境：它只是在当前的作用域中定义了一个对象字面量，所有的属性和方法都仍然是当前作用域的一部分。\n函数会创建新的执行环境：定义一个函数时，函数内部会形成一个新的作用域，函数内部的变量和操作不会影响外部的作用域。）\n\n（4）call()、apply()、bind()等方法不能改变箭头函数中this的指向\n\n``` javascript\nvar id = 'Global';\nlet fun1 = () => {\n    console.log(this.id)\n};\nfun1();                     // 'Global'\nfun1.call({id: 'Obj'});     // 'Global'\nfun1.apply({id: 'Obj'});    // 'Global'\nfun1.bind({id: 'Obj'})();   // 'Global'\n\n```\n\n（5）箭头函数不能作为构造函数使用\n\n构造函数在new的步骤在上面已经说过了，实际上第二步就是将函数中的this指向该对象。 但是由于箭头函数时没有自己的this的，且this指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。\n\n（6）箭头函数没有自己的arguments\n\n箭头函数没有自己的arguments对象。在箭头函数中访问arguments实际上获得的是外层函数的arguments。\n\n（7）箭头函数没有prototype\n\n（8）箭头函数不能用作Generator函数，不能使用yeild关键字\n\n5. 箭头函数的this指向哪⾥？\n\n箭头函数不同于传统JavaScript中的函数，箭头函数并没有属于⾃⼰的this，它所谓的this是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的this，所以是不会被new调⽤的，这个所谓的this也不会被改变。\n\n可以⽤Babel理解⼀下箭头函数:\n\n``` javascript\n// ES6 \nconst obj = { \n  getArrow() { \n    return () => { \n      console.log(this === obj); \n    }; \n  } \n}\n\n```\n\n转化后：\n\n``` javascript\n// ES5，由 Babel 转译\nvar obj = { \n   getArrow: function getArrow() { \n     var _this = this; \n     return function () { \n        console.log(_this === obj); \n     }; \n   } \n};\n\n```\n\n6. 扩展运算符的作用及使用场景\n\n（1）对象扩展运算符\n\n对象的扩展运算符(...)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。\n\n``` javascript\nlet bar = { a: 1, b: 2 };\nlet baz = { ...bar }; // { a: 1, b: 2 }\n\n```\n\n上述方法实际上等价于:\n\n``` javascript\nlet bar = { a: 1, b: 2 };\nlet baz = Object.assign({}, bar); // { a: 1, b: 2 }\n\n```\n\nObject.assign方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。\n\n同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。\n\n``` javascript\nlet bar = {a: 1, b: 2};\nlet baz = {...bar, ...{a:2, b: 4}};  // {a: 2, b: 4}\n\n```\n\n利用上述特性就可以很方便的修改对象的部分属性。在redux中的reducer函数规定必须是一个纯函数，reducer中的state对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。\n\n需要注意：扩展运算符对对象实例的拷贝属于浅拷贝。\n\n（2）数组扩展运算符\n\n数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。\n\n``` javascript\nconsole.log(...[1, 2, 3])\n// 1 2 3\nconsole.log(...[1, [2, 3, 4], 5])\n// 1 [2, 3, 4] 5\n\n```\n\n下面是数组的扩展运算符的应用：\n- 将数组转换为参数序列\n\n``` javascript\nfunction add(x, y) {\n  return x + y;\n}\nconst numbers = [1, 2];\nadd(...numbers) // 3\n\n```\n\n- 复制数组\n\n``` javascript\nconst arr1 = [1, 2];\nconst arr2 = [...arr1];\n\n```\n\n要记住：扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。\n\n- 合并数组\n\n如果想在数组内合并数组，可以这样：\n\n``` javascript\nconst arr1 = ['two', 'three'];const arr2 = ['one', ...arr1, 'four', 'five'];// [\"one\", \"two\", \"three\", \"four\", \"five\"]\n\n```\n\n- 扩展运算符与解构赋值结合起来，用于生成数组\n\n``` javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest  // [2, 3, 4, 5]\n\n```\n\n需要注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。\n\n``` javascript\nconst [...rest, last] = [1, 2, 3, 4, 5];         // 报错const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错\n\n```\n\n- 将字符串转为真正的数组\n\n``` javascript\n[...'hello']    // [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n\n```\n\n- 任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组\n\n比较常见的应用是可以将某些数据结构转为数组：\n\n``` javascript\n// arguments对象\nfunction foo() {\n  const args = [...arguments];\n}\n\n```\n\n用于替换es5中的Array.prototype.slice.call(arguments)写法。\n\n- 使用Math函数获取数组中特定的值\n\n``` javascript\nconst numbers = [9, 4, 7, 1];\nMath.min(...numbers); // 1\nMath.max(...numbers); // 9\n\n```\n\n8. 对对象与数组的解构的理解\n\n解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 1）数组的解构 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：\n\n``` javascript\nconst [a, b, c] = [1, 2, 3]\n\n```\n最终，a、b、c分别被赋予了数组第0、1、2个索引位的值：\n\n数组里的0、1、2索引位的元素值，精准地被映射到了左侧的第0、1、2个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：\n\n``` javascript\nconst [a,,c] = [1,2,3]\n\n```\n\n通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量\n\n2）对象的解构 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：\n\n``` javascript\nconst stu = {\n  name: 'Bob',\n  age: 24\n}\n\n```\n\n假如想要解构它的两个自有属性，可以这样：\n\n``` javascript\nconst { name, age } = stu\n\n```\n\n这样就得到了 name 和 age 两个和 stu 平级的变量：\n\n注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：\n\n``` javascript\nconst { age, name } = stu\n```\n\n9. 如何提取高度嵌套的对象里的指定属性？\n\n有时会遇到一些嵌套程度非常深的对象：\n\n``` javascript\nconst school = {\n   classes: {\n      stu: {\n         name: 'Bob',\n         age: 24,\n      }\n   }\n}\n\n```\n\n像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：\n\n``` javascript\nconst { name } = school\n\n```\n显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的“儿子的儿子”对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：\n\n``` javascript\nconst { classes } = school\nconst { stu } = classes\nconst { name } = stu\nname // 'Bob'\n\n```\n\n但是还有一种更标准的做法，可以用一行代码来解决这个问题：\n\n``` javascript\nconst { classes: { stu: { name } }} = school\n       \nconsole.log(name)  // 'Bob'\n\n```\n\n可以在解构出来的变量名右侧，通过冒号+{目标属性名}这种形式，进一步解构它，一直解构到拿到目标数据为止。\n\n10. 对 rest 参数的理解\n\n扩展运算符被用在函数形参上时，它还可以把一个分离的参数序列整合成一个数组：\n\n``` javascript\nfunction mutiple(...args) {\n  let result = 1;\n  for (var val of args) {\n    result *= val;\n  }\n  return result;\n}\nmutiple(1, 2, 3, 4) // 24\n\n```\n\n这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：\n\n``` javascript\nfunction mutiple(...args) {\n  console.log(args)\n}\nmutiple(1, 2, 3, 4) // [1, 2, 3, 4]\n\n```\n\n这就是 … rest运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。\n\n11. ES6中模板语法与字符串处理\n\nES6 提出了“模板语法”的概念。在 ES6 以前，拼接字符串是很麻烦的事情：\n\n``` javascript\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = 'my name is ' + name + ', I work as a ' + career + ', I love ' + hobby[0] + ' and ' + hobby[1]\n\n```\n\n仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：\n\n``` javascript\nvar name = 'css'   \nvar career = 'coder' \nvar hobby = ['coding', 'writing']\nvar finalString = `my name is ${name}, I work as a ${career} I love ${hobby[0]} and ${hobby[1]}`\n\n```\n\n字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势——允许用${}的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：\n\n- 在模板字符串中，空格、缩进、换行都会被保留\n- 模板字符串完全支持“运算”式的表达式，可以在${}里完成一些计算\n\n基于第一点，可以在模板字符串里无障碍地直接写 html 代码：\n\n``` javascript\nlet list = `\n\t<ul>\n\t\t<li>列表项1</li>\n\t\t<li>列表项2</li>\n\t</ul>\n`;\nconsole.log(message); // 正确输出，不存在报错\n\n```\n\n基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：\n\n``` javascript\nfunction add(a, b) {\n  const finalString = `${a} + ${b} = ${a+b}`\n  console.log(finalString)\n}\nadd(1, 2) // 输出 '1 + 2 = 3'\n\n```\n\n除了模板语法外， ES6中还新增了一系列的字符串方法用于提升开发效率：\n\n（1）存在性判定：在过去，当判断一个字符/字符串是否在某字符串中时，只能用 indexOf > -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。\n\n- includes：判断字符串与子串的包含关系：\n\n``` javascript\nconst son = 'haha' \nconst father = 'xixi haha hehe'\nfather.includes(son) // true\n\n```\n\n- startsWith：判断字符串是否以指定子串开头：\n\n``` javascript\nconst father = 'xixi haha hehe'\nfather.startsWith('haha') // false\nfather.startsWith('xixi') // true\n\n```\n\n- endsWith：判断字符串是否以指定子串结尾：\n\n``` javascript\nconst father = 'xixi haha hehe'\n  father.endsWith('hehe') // true\n```\n\n（2）自动重复：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：\n\n``` javascript\nconst sourceCode = 'repeat for 3 times;'\nconst repeated = sourceCode.repeat(3) \nconsole.log(repeated) // repeat for 3 times;repeat for 3 times;repeat for 3 times;\n\n```\n\n","slug":"前端学习之JS篇（一）","published":1,"updated":"2025-01-08T08:46:39.528Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfh001lmcuybtdk7szf","content":"<h2 id=\"javascript学习总结\"><a class=\"anchor\" href=\"#javascript学习总结\">#</a> Javascript 学习总结</h2>\n<h3 id=\"一-数据类型\"><a class=\"anchor\" href=\"#一-数据类型\">#</a> 一、数据类型</h3>\n<ol>\n<li>JavaScript 有哪些数据类型，它们的区别？</li>\n</ol>\n<p>JavaScript 共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p>\n<p>其中 Symbol 和 BigInt 是 ES6 中新增的数据类型：</p>\n<ul>\n<li>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li>\n<li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li>\n</ul>\n<p>这些数据可以分为原始数据类型和引用数据类型：</p>\n<ul>\n<li>栈：原始数据类型（Undefined、Null、Boolean、Number、String）</li>\n<li>堆：引用数据类型（对象、数组和函数）</li>\n</ul>\n<p>两种类型的区别在于存储位置的不同：</p>\n<ul>\n<li>原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li>\n<li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li>\n</ul>\n<p>堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</p>\n<ul>\n<li>在数据结构中，栈中数据的存取方式为先进后出。</li>\n<li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li>\n</ul>\n<p>在操作系统中，内存被分为栈区和堆区：</p>\n<ul>\n<li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>\n<li>堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li>\n</ul>\n<ol start=\"2\">\n<li>数据类型检测的方式有哪些</li>\n</ol>\n<p>（1）typeof</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// number</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// boolean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// object</span></pre></td></tr></table></figure><p>其中数组、对象、null 都会被判断为 object，其他判断都正确。</p>\n<p>（2）instanceof</p>\n<p>instanceof 可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>可以看到，instanceof 只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p>\n<p>（3） constructor</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>constructor 有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。<br />\n需要注意，如果创建一个对象来改变它的原型，constructor 就不能用来判断数据类型了：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>（4）Object.prototype.toString.call()</p>\n<p>Object.prototype.toString.call () 使用 Object 对象的原型方法 toString 来判断数据类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样是检测对象 obj 调用 toString 方法，obj.toString () 的结果和 Object.prototype.toString.call (obj) 的结果不一样，这是为什么？</p>\n<p>这是因为 toString 是 Object 的原型方法，而 Array、function 等类型作为 Object 的实例，都重写了 toString 方法。不同的对象类型调用 toString 方法时，根据原型链的知识，调用的是对应的重写之后的 toString 方法（function 类型返回内容为函数体的字符串，Array 类型返回元素组成的字符串…），而不会去调用 Object 上原型 toString 方法（返回对象的具体类型），所以采用 obj.toString () 不能得到其对象类型，只能将 obj 转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用 Object 原型上的 toString 方法。</p>\n<ol start=\"3\">\n<li>判断数组的方式有哪些</li>\n</ol>\n<ul>\n<li>通过 Object.prototype.toString.call () 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'Array'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过原型链做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 ES6 的 Array.isArray () 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArrray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 instanceof 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span></pre></td></tr></table></figure><ul>\n<li>通过 Array.prototype.isPrototypeOf</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>null 和 undefined 区别</li>\n</ol>\n<p>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</p>\n<p>undefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null 主要用于赋值给一些可能会返回对象的变量，作为初始化。</p>\n<p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p>\n<p>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</p>\n<ol start=\"5\">\n<li>typeof null 的结果是什么，为什么？</li>\n</ol>\n<p>typeof null 的结果是 Object。</p>\n<p>在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签 (1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">000</span><span class=\"token operator\">:</span> object   <span class=\"token operator\">-</span> 当前存储的数据指向一个对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token number\">1</span><span class=\"token operator\">:</span> int      <span class=\"token operator\">-</span> 当前存储的数据是一个 <span class=\"token number\">31</span> 位的有符号整数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">010</span><span class=\"token operator\">:</span> double   <span class=\"token operator\">-</span> 当前存储的数据指向一个双精度的浮点数。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">100</span><span class=\"token operator\">:</span> string   <span class=\"token operator\">-</span> 当前存储的数据指向一个字符串。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">110</span><span class=\"token operator\">:</span> boolean  <span class=\"token operator\">-</span> 当前存储的数据是布尔值。</pre></td></tr></table></figure><p>如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。</p>\n<p>有两种特殊数据类型：</p>\n<ul>\n<li>undefined 的值是 (-2) 30 (一个超出整数范围的数字)；</li>\n<li>null 的值是机器码 NULL 指针 (null 指针的值全是 0)</li>\n</ul>\n<p>那也就是说 null 的类型标签也是 000，和 Object 的类型标签一样，所以会被判定为 Object。</p>\n<ol start=\"6\">\n<li>intanceof 操作符的实现原理及实现</li>\n</ol>\n<p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 获取对象的原型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 获取构造函数的 prototype 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> prototype <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>proto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> prototype<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 如果没有找到，就继续从其原型上找，Object.getPrototypeOf 方法用来获取指定对象的原型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>为什么 0.1+0.2 ! == 0.3，如何让其相等</li>\n</ol>\n<p>在开发过程中遇到类似这样的问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 0.30000000000000004</span></pre></td></tr></table></figure><p>这里得到的不是想要的结果，要想等于 0.3，就要把它进行转化：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注意，toFixed 为四舍五入</span></pre></td></tr></table></figure><p>toFixed (num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？</p>\n<p>计算机是通过二进制的方式存储数据的，所以计算机计算 0.1+0.2 的时候，实际上是计算的两个数的二进制的和。0.1 的二进制是 0.0001100110011001100...（1100 循环），0.2 的二进制是：0.00110011001100...（1100 循环），这两个数的二进制都是无限循环的数。那 JavaScript 是如何处理无限循环的二进制小数呢？</p>\n<p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循 IEEE 754 标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留 52 位，再加上前面的 1，其实就是保留 53 位有效数字，剩余的需要舍去，遵从 “0 舍 1 入” 的原则。</p>\n<p>根据这个原则，0.1 和 0.2 的二进制数相加，再转化为十进制数就是：0.30000000000000004。</p>\n<p>下面看一下双精度数是如何保存的：</p>\n<div align=center>\n    <style>.vbckmgdqyfjf{}</style><img data-src=\"/2025/01/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/01.jpg\" class=\"vbckmgdqyfjf\">\n</div>\n<ul>\n<li>第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0 表示正数，占用 1 位</li>\n<li>第二部分（绿色）：用来存储指数（exponent），占用 11 位</li>\n<li>第三部分（红色）：用来存储小数（fraction），占用 52 位</li>\n</ul>\n<p>对于 0.1，它的二进制为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0.00011001100110011001100110011001100110011001100110011001</span> <span class=\"token number\">10011.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>转为科学计数法（科学计数法的结果就是浮点数）：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.1001100110011001100110011001100110011001100110011001</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">^</span><span class=\"token operator\">-</span><span class=\"token number\">4</span></pre></td></tr></table></figure><p>可以看出 0.1 的符号位为 0，指数位为 - 4，小数位为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1001100110011001100110011001100110011001100110011001</span></pre></td></tr></table></figure><p>那么问题又来了，指数位是负数，该如何保存呢？</p>\n<p>IEEE 标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于 JavaScript 的数字是双精度数，这里就以双精度数为例，它的指数部分为 11 位，能表示的范围就是 0~2047，IEEE 固定双精度数的偏移量为 1023。</p>\n<ul>\n<li>当指数位不全是 0 也不全是 1 时 (规格化的数值)，IEEE 规定，阶码计算公式为 e-Bias。 此时 e 最小值是 1，则 1-1023= -1022，e 最大值是 2046，则 2046-1023=1023，可以看到，这种情况下取值范围是 - 1022~1013。</li>\n<li>当指数位全部是 0 的时候 (非规格化的数值)，IEEE 规定，阶码的计算公式为 1-Bias，即 1-1023= -1022。</li>\n<li>当指数位全部是 1 的时候 (特殊值)，IEEE 规定这个浮点数可用来表示 3 个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为 0 的时候表示 NaN；小数位为 0 时，当符号位 s=0 时表示正无穷，s=1 时候表示负无穷。</li>\n</ul>\n<p>对于上面的 0.1 的指数位为 - 4，-4+1023 = 1019 转化为二进制就是：1111111011.</p>\n<p>所以，0.1 表示为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">1111111011</span> <span class=\"token number\">1001100110011001100110011001100110011001100110011001</span></pre></td></tr></table></figure><p>说了这么多，是时候该最开始的问题了，如何实现 0.1+0.2=0.3 呢？</p>\n<p>对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为 “机器精度”。对 JavaScript 来说，这个值通常为 2-52，在 ES6 中，提供了 Number.EPSILON 属性，而它的值就是 2-52，只要判断 0.1+0.2-0.3 是否小于 Number.EPSILON，如果小于，就可以判断为 0.1+0.2 ===0.3</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">numberepsilon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span>arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">-</span> arg2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numberepsilon</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>如何获取安全的 undefined 值？</li>\n</ol>\n<p>因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。<br />\n表达式 void ___ 没有返回值，因此返回结果是 undefined。<br />\nvoid 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。</p>\n<ol start=\"9\">\n<li>typeof NaN 的结果是什么？</li>\n</ol>\n<p>NaN 指 “不是一个数字”（not a number），NaN 是一个 “警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即 “执行数学运算没有成功，这是失败后返回的结果”。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span></pre></td></tr></table></figure><p>NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。</p>\n<ol start=\"10\">\n<li>isNaN 和 Number.isNaN 函数的区别？</li>\n</ol>\n<ul>\n<li>函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。</li>\n<li>函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</li>\n</ul>\n<ol start=\"12\">\n<li>其他值到字符串的转换规则？</li>\n</ol>\n<ul>\n<li>Null 和 Undefined 类型 ，null 转换为 &quot;null&quot;，undefined 转换为 &quot;undefined&quot;，</li>\n<li>Boolean 类型，true 转换为 &quot;true&quot;，false 转换为 &quot;false&quot;。</li>\n<li>Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。</li>\n<li>Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</li>\n<li>对普通对象来说，除非自行定义 toString () 方法，否则会调用 toString ()（Object.prototype.toString ()）来返回内部属性 [[Class]] 的值，如 &quot;[object Object]&quot;。如果对象有自己的 toString () 方法，字符串化时就会调用该方法并使用其返回值。</li>\n</ul>\n<ol start=\"13\">\n<li>其他值到数字值的转换规则？</li>\n</ol>\n<ul>\n<li>Undefined 类型的值转换为 NaN。</li>\n<li>Null 类型的值转换为 0。</li>\n<li>Boolean 类型的值，true 转换为 1，false 转换为 0。</li>\n<li>String 类型的值转换如同使用 Number () 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</li>\n<li>Symbol 类型的值不能转换为数字，会报错。</li>\n<li>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</li>\n</ul>\n<p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有 valueOf () 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString () 的返回值（如果存在）来进行强制类型转换。</p>\n<p>如果 valueOf () 和 toString () 均不返回基本类型值，会产生 TypeError 错误。</p>\n<ol start=\"14\">\n<li>其他值到布尔类型的值的转换规则？</li>\n</ol>\n<p>以下这些是假值：  <code>• undefined • null • false • +0、-0 和 NaN •</code></p>\n<p>假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。</p>\n<ol start=\"15\">\n<li>|| 和 &amp;&amp; 操作符的返回值？</li>\n</ol>\n<p>|| 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。</p>\n<ul>\n<li>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</li>\n<li>&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</li>\n</ul>\n<p>|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果</p>\n<ol start=\"16\">\n<li><span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> () 与比较操作符  <code>“===”、“==” </code> 的区别？</li>\n</ol>\n<ul>\n<li>使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</li>\n<li>使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</li>\n<li>使用 <span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。</li>\n</ul>\n<ol start=\"17\">\n<li>什么是 JavaScript 中的包装类型？</li>\n</ol>\n<p>在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"ABC\"</span></pre></td></tr></table></figure><p>在访问 'abc'.length 时，JavaScript 将 'abc' 在后台转换成 String ('abc')，然后再访问其 length 属性。</p>\n<p>JavaScript 也可以使用 Object 函数显式地将基本类型转换为包装类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// String &#123;\"abc\"&#125;</span></pre></td></tr></table></figure><p>也可以使用 valueOf 方法将包装类型倒转成基本类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'abc'</span></pre></td></tr></table></figure><p>看看如下代码会打印出什么：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Oops\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never runs</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>答案是<strong>什么都不会打印</strong>，因为虽然包裹的基本类型是 false，但是 false 被包裹成包装类型后就成了对象，所以其非值为 false，所以循环体中的内容不会运行。</p>\n<ol start=\"18\">\n<li>JavaScript 中如何进行隐式类型转换？</li>\n</ol>\n<p>首先要介绍 ToPrimitive 方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* @obj 需要转换的对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @type 期望的结果类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ToPrimitive</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>type 的值为 number 或者 string。</p>\n<p>（1）当 type 为 number 时规则如下：</p>\n<ul>\n<li>调用 obj 的 valueOf 方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用 obj 的 toString 方法，后续同上；</li>\n<li>抛出 TypeError 异常。</li>\n</ul>\n<p>（2）当 type 为 string 时规则如下：</p>\n<ul>\n<li>调用 obj 的 toString 方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用 obj 的 valueOf 方法，后续同上；</li>\n<li>抛出 TypeError 异常。</li>\n</ul>\n<p>p.s.</p>\n<ul>\n<li>toString 方法用于将对象转换为字符串。</li>\n<li>valueOf 方法用于返回对象的原始值。</li>\n</ul>\n<p>可以看出两者的主要区别在于调用 toString 和 valueOf 的先后顺序。默认情况下：</p>\n<ul>\n<li>如果对象为 Date 对象，则 type 默认为 string；</li>\n<li>其他情况下，type 默认为 number。</li>\n</ul>\n<p>总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">objToNumber</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">objToNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">objToNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span></pre></td></tr></table></figure><p>而 JavaScript 中的隐式类型转换主要发生在 +、-、*、/ 以及 ==、&gt;、&lt; 这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用 ToPrimitive 转换成基本类型，再进行操作。</p>\n<p>以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被 ToPrimitive 转换成基本类型，所以最终还是要应用基本类型转换规则）：</p>\n<p>(1) + 操作符 + 操作符的两边有至少一个 string 类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'23'</span> <span class=\"token comment\">// '123'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught TypeError: Cannot convert a Symbol value to a number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// '1false'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>(2) -、*、\\ 操作符</p>\n<p>NaN 也是一个数字</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token string\">'23'</span> <span class=\"token comment\">// 23</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token string\">'aa'</span> <span class=\"token comment\">// NaN</span></pre></td></tr></table></figure><p>(3) 对于 == 操作符</p>\n<p>操作符两边的值都尽量转成 number：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//false, 3 转为 number 为 3，true 转为 number 为 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">//true, '0' 转为 number 为 0，false 转为 number 为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// '0' 转为 number 为 0</span></pre></td></tr></table></figure><p>(4) 对于 &lt; 和 &gt; 比较符</p>\n<p>如果两边都是字符串，则比较字母表顺序：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'ca'</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'bd'</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'a'</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'b'</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>其他情况下，转换为数字再比较：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'12'</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">13</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>以上说的是基本类型的隐式转换，而对象会被 ToPrimitive 转换为基本类型再进行转换：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>其对比过程如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;, 上面提到过，ToPrimitive 默认 type 为 number，所以先 valueOf，结果还是个对象，下一步</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"，现在是一个字符串了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN，根据上面 &lt; 和 > 操作符的规则，要转换成数字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token comment\">//false，得出比较结果</span></pre></td></tr></table></figure><p>又比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">+</span> b <span class=\"token comment\">// \"[object Object][object Object]\"</span></pre></td></tr></table></figure><p>运算过程如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;，上面提到过，ToPrimitive 默认 type 为 number，所以先 valueOf，结果还是个对象，下一步</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同理</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">+</span> b <span class=\"token comment\">// \"[object Object][object Object]\"</span></pre></td></tr></table></figure><ol start=\"19\">\n<li><code>+</code>  操作符什么时候用于字符串的拼接？</li>\n</ol>\n<p>根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。</p>\n<p>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。</p>\n<p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。</p>\n<ol start=\"20\">\n<li>为什么会有 BigInt 的提案？</li>\n</ol>\n<p>JavaScript 中 Number.MAX_SAFE_INTEGER 表示最⼤安全数字，计算结果是 9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js 就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了 BigInt 来解决此问题。</p>\n<ol start=\"21\">\n<li>object.assign 和扩展运算法是深拷贝还是浅拷贝，两者区别</li>\n</ol>\n<p>扩展运算符：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> outObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">inObj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>outObj<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>newObj<span class=\"token punctuation\">.</span>inObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></pre></td></tr></table></figure><p>Object.assign():</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> outObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">inObj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> outObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>newObj<span class=\"token punctuation\">.</span>inObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></pre></td></tr></table></figure><p>可以看到，两者都是浅拷贝。</p>\n<ul>\n<li>Object.assign () 方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。</li>\n<li>扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制 ES6 的 symbols 属性。</li>\n</ul>\n<h3 id=\"二-es6\"><a class=\"anchor\" href=\"#二-es6\">#</a> 二、ES6</h3>\n<ol>\n<li>let、const、var 的区别</li>\n</ol>\n<p>（1）块级作用域： 块作用域由 { } 包括，let 和 const 具有块级作用域，var 不存在块级作用域。块级作用域解决了 ES5 中的两个问题：</p>\n<ul>\n<li>内层变量可能覆盖外层变量</li>\n<li>用来计数的循环变量泄露为全局变量</li>\n</ul>\n<p>（2）变量提升： var 存在变量提升，let 和 const 不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p>\n<p>（3）给全局添加属性： 浏览器的全局对象是 window，Node 的全局对象是 global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是 let 和 const 不会。</p>\n<p>（4）重复声明： var 声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const 和 let 不允许重复声明变量。</p>\n<p>（5）暂时性死区： 在使用 let、const 命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用 var 声明的变量不存在暂时性死区。</p>\n<p>（6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而 const 声明变量必须设置初始值。</p>\n<p>（7）指针指向： let 和 const 都是 ES6 新增的用于创建变量的语法。 let 创建的变量是可以更改指针指向（可以重新赋值）。但 const 声明的变量是不允许改变指针的指向。</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>var</th>\n<th>let</th>\n<th>const</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否有块级作用域</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否有变量提升</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否添加全局属性</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>能否重复声明变量</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否有暂时性死区</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否需要初始化</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否必须设置初始值</td>\n<td>×</td>\n<td>×</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否可以改变指针指向</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>const 对象的属性可以修改吗</li>\n</ol>\n<p>const 保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。</p>\n<p>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const 只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>\n<ol start=\"3\">\n<li>如果 new 一个箭头函数会怎么样</li>\n</ol>\n<p>箭头函数是 ES6 中的提出来的，它没有 prototype，也没有自己的 this 指向，更不可以使用 arguments 参数，所以不能 New 一个箭头函数。</p>\n<p>new 操作符的实现步骤如下：<br />\n（1）创建一个对象<br />\n（2）将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的 prototype 属性）<br />\n（3）执行构造函数中的代码，构造函数中的 this 指向该对象（也就是为这个对象添加属性和方法）<br />\n（4）返回新对象</p>\n<p>所以，上面的第二、三步，箭头函数都是没有办法执行的。</p>\n<ol start=\"4\">\n<li>箭头函数与普通函数的区别</li>\n</ol>\n<p>（1）箭头函数比普通函数更加简洁</p>\n<ul>\n<li>如果没有参数，就直接写一个空括号即可</li>\n<li>如果只有一个参数，可以省去参数的括号</li>\n<li>如果有多个参数，用逗号分割</li>\n<li>如果函数体的返回值只有一句，可以省略大括号</li>\n<li>如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个 void 关键字。最常见的就是调用一个函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token function\">doesNotReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（2）箭头函数没有自己的 this<br />\n 箭头函数不会创建自己的 this， 所以它没有自己的 this，它只会在自己作用域的上一层继承 this。所以箭头函数中 this 的指向在它在定义时已经确定了，之后不会改变。</p>\n<p>（3）箭头函数继承来的 this 指向永远不会改变</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'GLOBAL'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'OBJ'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">a</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'OBJ'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'GLOBAL'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Uncaught TypeError: obj.b is not a constructor</span></pre></td></tr></table></figure><p>(b 是箭头函数，它的外层作用域是全局作用域，因此它的 this 被绑定到全局对象（（在浏览器中是 window 对象，在 Node.js 中是 global 对象））)</p>\n<p>对象 obj 的方法 b 是使用箭头函数定义的，这个函数中的 this 就永远指向它定义时所处的全局执行环境中的 this，即便这个函数是作为对象 obj 的方法调用，this 依旧指向 Window 对象。需要注意，定义对象的大括号 {} 是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</p>\n<p>（对象的大括号 {} 不会创建新的执行环境：它只是在当前的作用域中定义了一个对象字面量，所有的属性和方法都仍然是当前作用域的一部分。<br />\n函数会创建新的执行环境：定义一个函数时，函数内部会形成一个新的作用域，函数内部的变量和操作不会影响外部的作用域。）</p>\n<p>（4）call ()、apply ()、bind () 等方法不能改变箭头函数中 this 的指向</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'Global'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fun1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 'Global'</span></pre></td></tr></table></figure><p>（5）箭头函数不能作为构造函数使用</p>\n<p>构造函数在 new 的步骤在上面已经说过了，实际上第二步就是将函数中的 this 指向该对象。 但是由于箭头函数时没有自己的 this 的，且 this 指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<p>（6）箭头函数没有自己的 arguments</p>\n<p>箭头函数没有自己的 arguments 对象。在箭头函数中访问 arguments 实际上获得的是外层函数的 arguments。</p>\n<p>（7）箭头函数没有 prototype</p>\n<p>（8）箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</p>\n<ol start=\"5\">\n<li>箭头函数的 this 指向哪⾥？</li>\n</ol>\n<p>箭头函数不同于传统 JavaScript 中的函数，箭头函数并没有属于⾃⼰的 this，它所谓的 this 是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的 this，所以是不会被 new 调⽤的，这个所谓的 this 也不会被改变。</p>\n<p>可以⽤ Babel 理解⼀下箭头函数:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES6 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">getArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>转化后：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES5，由 Babel 转译</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function-variable function\">getArrow</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_this <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>扩展运算符的作用及使用场景</li>\n</ol>\n<p>（1）对象扩展运算符</p>\n<p>对象的扩展运算符 (...) 用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>bar <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; a: 1, b: 2 &#125;</span></pre></td></tr></table></figure><p>上述方法实际上等价于:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; a: 1, b: 2 &#125;</span></pre></td></tr></table></figure><p>Object.assign 方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign 方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。</p>\n<p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>bar<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &#123;a: 2, b: 4&#125;</span></pre></td></tr></table></figure><p>利用上述特性就可以很方便的修改对象的部分属性。在 redux 中的 reducer 函数规定必须是一个纯函数，reducer 中的 state 对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。</p>\n<p>需要注意：扩展运算符对对象实例的拷贝属于浅拷贝。</p>\n<p>（2）数组扩展运算符</p>\n<p>数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1 2 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1 [2, 3, 4] 5</span></pre></td></tr></table></figure><p>下面是数组的扩展运算符的应用：</p>\n<ul>\n<li>将数组转换为参数序列</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><ul>\n<li>复制数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>要记住：扩展运算符 (…) 用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p>\n<ul>\n<li>合并数组</li>\n</ul>\n<p>如果想在数组内合并数组，可以这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [\"one\", \"two\", \"three\", \"four\", \"five\"]</span></pre></td></tr></table></figure><ul>\n<li>扩展运算符与解构赋值结合起来，用于生成数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>first <span class=\"token comment\">// 1rest  // [2, 3, 4, 5]</span></pre></td></tr></table></figure><p>需要注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 报错 const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错</span></pre></td></tr></table></figure><ul>\n<li>将字符串转为真正的数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></pre></td></tr></table></figure><ul>\n<li>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</li>\n</ul>\n<p>比较常见的应用是可以将某些数据结构转为数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//arguments 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用于替换 es5 中的 Array.prototype.slice.call (arguments) 写法。</p>\n<ul>\n<li>使用 Math 函数获取数组中特定的值</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>对对象与数组的解构的理解</li>\n</ol>\n<p>解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 1）数组的解构 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>最终，a、b、c 分别被赋予了数组第 0、1、2 个索引位的值：</p>\n<p>数组里的 0、1、2 索引位的元素值，精准地被映射到了左侧的第 0、1、2 个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量</p>\n<p>2）对象的解构 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假如想要解构它的两个自有属性，可以这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr></table></figure><p>这样就得到了 name 和 age 两个和 stu 平级的变量：</p>\n<p>注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr></table></figure><ol start=\"9\">\n<li>如何提取高度嵌套的对象里的指定属性？</li>\n</ol>\n<p>有时会遇到一些嵌套程度非常深的对象：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">classes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">stu</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr></table></figure><p>显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的 “儿子的儿子” 对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> classes <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> stu <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> classes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name <span class=\"token comment\">// 'Bob'</span></pre></td></tr></table></figure><p>但是还有一种更标准的做法，可以用一行代码来解决这个问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">classes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">stu</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 'Bob'</span></pre></td></tr></table></figure><p>可以在解构出来的变量名右侧，通过冒号 +{目标属性名} 这种形式，进一步解构它，一直解构到拿到目标数据为止。</p>\n<ol start=\"10\">\n<li>对 rest 参数的理解</li>\n</ol>\n<p>扩展运算符被用在函数形参上时，它还可以把一个分离的参数序列整合成一个数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> val <span class=\"token keyword\">of</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result <span class=\"token operator\">*=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 24</span></pre></td></tr></table></figure><p>这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]</span></pre></td></tr></table></figure><p>这就是 … rest 运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。</p>\n<ol start=\"11\">\n<li>ES6 中模板语法与字符串处理</li>\n</ol>\n<p>ES6 提出了 “模板语法” 的概念。在 ES6 以前，拼接字符串是很麻烦的事情：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'css'</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> career <span class=\"token operator\">=</span> <span class=\"token string\">'coder'</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'coding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'writing'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> finalString <span class=\"token operator\">=</span> <span class=\"token string\">'my name is '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">', I work as a '</span> <span class=\"token operator\">+</span> career <span class=\"token operator\">+</span> <span class=\"token string\">', I love '</span> <span class=\"token operator\">+</span> hobby<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">' and '</span> <span class=\"token operator\">+</span> hobby<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'css'</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> career <span class=\"token operator\">=</span> <span class=\"token string\">'coder'</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'coding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'writing'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> finalString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, I work as a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>career<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> I love </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hobby<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hobby<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p>字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势 —— 允许用 ${} 的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：</p>\n<ul>\n<li>在模板字符串中，空格、缩进、换行都会被保留</li>\n<li>模板字符串完全支持 “运算” 式的表达式，可以在 ${} 里完成一些计算</li>\n</ul>\n<p>基于第一点，可以在模板字符串里无障碍地直接写 html 代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&lt;ul></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t&lt;li>列表项1&lt;/li></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t&lt;li>列表项2&lt;/li></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t&lt;/ul></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确输出，不存在报错</span></pre></td></tr></table></figure><p>基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> finalString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token operator\">+</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>finalString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 '1 + 2 = 3'</span></pre></td></tr></table></figure><p>除了模板语法外， ES6 中还新增了一系列的字符串方法用于提升开发效率：</p>\n<p>（1）存在性判定：在过去，当判断一个字符 / 字符串是否在某字符串中时，只能用 indexOf &gt; -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。</p>\n<ul>\n<li>includes：判断字符串与子串的包含关系：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> son <span class=\"token operator\">=</span> <span class=\"token string\">'haha'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ul>\n<li>startsWith：判断字符串是否以指定子串开头：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'haha'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xixi'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ul>\n<li>endsWith：判断字符串是否以指定子串结尾：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  father<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hehe'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>（2）自动重复：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sourceCode <span class=\"token operator\">=</span> <span class=\"token string\">'repeat for 3 times;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> repeated <span class=\"token operator\">=</span> sourceCode<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>repeated<span class=\"token punctuation\">)</span> <span class=\"token comment\">// repeat for 3 times;repeat for 3 times;repeat for 3 times;</span></pre></td></tr></table></figure>","length":18962,"excerpt":"","more":"<h2 id=\"javascript学习总结\"><a class=\"anchor\" href=\"#javascript学习总结\">#</a> Javascript 学习总结</h2>\n<h3 id=\"一-数据类型\"><a class=\"anchor\" href=\"#一-数据类型\">#</a> 一、数据类型</h3>\n<ol>\n<li>JavaScript 有哪些数据类型，它们的区别？</li>\n</ol>\n<p>JavaScript 共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p>\n<p>其中 Symbol 和 BigInt 是 ES6 中新增的数据类型：</p>\n<ul>\n<li>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li>\n<li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li>\n</ul>\n<p>这些数据可以分为原始数据类型和引用数据类型：</p>\n<ul>\n<li>栈：原始数据类型（Undefined、Null、Boolean、Number、String）</li>\n<li>堆：引用数据类型（对象、数组和函数）</li>\n</ul>\n<p>两种类型的区别在于存储位置的不同：</p>\n<ul>\n<li>原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li>\n<li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li>\n</ul>\n<p>堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</p>\n<ul>\n<li>在数据结构中，栈中数据的存取方式为先进后出。</li>\n<li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li>\n</ul>\n<p>在操作系统中，内存被分为栈区和堆区：</p>\n<ul>\n<li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>\n<li>堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li>\n</ul>\n<ol start=\"2\">\n<li>数据类型检测的方式有哪些</li>\n</ol>\n<p>（1）typeof</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// number</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// boolean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// object</span></pre></td></tr></table></figure><p>其中数组、对象、null 都会被判断为 object，其他判断都正确。</p>\n<p>（2）instanceof</p>\n<p>instanceof 可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>可以看到，instanceof 只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p>\n<p>（3） constructor</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>constructor 有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。<br />\n需要注意，如果创建一个对象来改变它的原型，constructor 就不能用来判断数据类型了：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>（4）Object.prototype.toString.call()</p>\n<p>Object.prototype.toString.call () 使用 Object 对象的原型方法 toString 来判断数据类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样是检测对象 obj 调用 toString 方法，obj.toString () 的结果和 Object.prototype.toString.call (obj) 的结果不一样，这是为什么？</p>\n<p>这是因为 toString 是 Object 的原型方法，而 Array、function 等类型作为 Object 的实例，都重写了 toString 方法。不同的对象类型调用 toString 方法时，根据原型链的知识，调用的是对应的重写之后的 toString 方法（function 类型返回内容为函数体的字符串，Array 类型返回元素组成的字符串…），而不会去调用 Object 上原型 toString 方法（返回对象的具体类型），所以采用 obj.toString () 不能得到其对象类型，只能将 obj 转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用 Object 原型上的 toString 方法。</p>\n<ol start=\"3\">\n<li>判断数组的方式有哪些</li>\n</ol>\n<ul>\n<li>通过 Object.prototype.toString.call () 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'Array'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过原型链做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 ES6 的 Array.isArray () 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArrray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 instanceof 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span></pre></td></tr></table></figure><ul>\n<li>通过 Array.prototype.isPrototypeOf</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>null 和 undefined 区别</li>\n</ol>\n<p>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</p>\n<p>undefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null 主要用于赋值给一些可能会返回对象的变量，作为初始化。</p>\n<p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p>\n<p>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</p>\n<ol start=\"5\">\n<li>typeof null 的结果是什么，为什么？</li>\n</ol>\n<p>typeof null 的结果是 Object。</p>\n<p>在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签 (1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">000</span><span class=\"token operator\">:</span> object   <span class=\"token operator\">-</span> 当前存储的数据指向一个对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token number\">1</span><span class=\"token operator\">:</span> int      <span class=\"token operator\">-</span> 当前存储的数据是一个 <span class=\"token number\">31</span> 位的有符号整数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">010</span><span class=\"token operator\">:</span> double   <span class=\"token operator\">-</span> 当前存储的数据指向一个双精度的浮点数。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">100</span><span class=\"token operator\">:</span> string   <span class=\"token operator\">-</span> 当前存储的数据指向一个字符串。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">110</span><span class=\"token operator\">:</span> boolean  <span class=\"token operator\">-</span> 当前存储的数据是布尔值。</pre></td></tr></table></figure><p>如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。</p>\n<p>有两种特殊数据类型：</p>\n<ul>\n<li>undefined 的值是 (-2) 30 (一个超出整数范围的数字)；</li>\n<li>null 的值是机器码 NULL 指针 (null 指针的值全是 0)</li>\n</ul>\n<p>那也就是说 null 的类型标签也是 000，和 Object 的类型标签一样，所以会被判定为 Object。</p>\n<ol start=\"6\">\n<li>intanceof 操作符的实现原理及实现</li>\n</ol>\n<p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 获取对象的原型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 获取构造函数的 prototype 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> prototype <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>proto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> prototype<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 如果没有找到，就继续从其原型上找，Object.getPrototypeOf 方法用来获取指定对象的原型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>为什么 0.1+0.2 ! == 0.3，如何让其相等</li>\n</ol>\n<p>在开发过程中遇到类似这样的问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 0.30000000000000004</span></pre></td></tr></table></figure><p>这里得到的不是想要的结果，要想等于 0.3，就要把它进行转化：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注意，toFixed 为四舍五入</span></pre></td></tr></table></figure><p>toFixed (num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？</p>\n<p>计算机是通过二进制的方式存储数据的，所以计算机计算 0.1+0.2 的时候，实际上是计算的两个数的二进制的和。0.1 的二进制是 0.0001100110011001100...（1100 循环），0.2 的二进制是：0.00110011001100...（1100 循环），这两个数的二进制都是无限循环的数。那 JavaScript 是如何处理无限循环的二进制小数呢？</p>\n<p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循 IEEE 754 标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留 52 位，再加上前面的 1，其实就是保留 53 位有效数字，剩余的需要舍去，遵从 “0 舍 1 入” 的原则。</p>\n<p>根据这个原则，0.1 和 0.2 的二进制数相加，再转化为十进制数就是：0.30000000000000004。</p>\n<p>下面看一下双精度数是如何保存的：</p>\n<div align=center>\n    <style>.vbckmgdqyfjf{}</style><img data-src=\"/2025/01/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/01.jpg\" class=\"vbckmgdqyfjf\">\n</div>\n<ul>\n<li>第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0 表示正数，占用 1 位</li>\n<li>第二部分（绿色）：用来存储指数（exponent），占用 11 位</li>\n<li>第三部分（红色）：用来存储小数（fraction），占用 52 位</li>\n</ul>\n<p>对于 0.1，它的二进制为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0.00011001100110011001100110011001100110011001100110011001</span> <span class=\"token number\">10011.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>转为科学计数法（科学计数法的结果就是浮点数）：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.1001100110011001100110011001100110011001100110011001</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">^</span><span class=\"token operator\">-</span><span class=\"token number\">4</span></pre></td></tr></table></figure><p>可以看出 0.1 的符号位为 0，指数位为 - 4，小数位为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1001100110011001100110011001100110011001100110011001</span></pre></td></tr></table></figure><p>那么问题又来了，指数位是负数，该如何保存呢？</p>\n<p>IEEE 标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于 JavaScript 的数字是双精度数，这里就以双精度数为例，它的指数部分为 11 位，能表示的范围就是 0~2047，IEEE 固定双精度数的偏移量为 1023。</p>\n<ul>\n<li>当指数位不全是 0 也不全是 1 时 (规格化的数值)，IEEE 规定，阶码计算公式为 e-Bias。 此时 e 最小值是 1，则 1-1023= -1022，e 最大值是 2046，则 2046-1023=1023，可以看到，这种情况下取值范围是 - 1022~1013。</li>\n<li>当指数位全部是 0 的时候 (非规格化的数值)，IEEE 规定，阶码的计算公式为 1-Bias，即 1-1023= -1022。</li>\n<li>当指数位全部是 1 的时候 (特殊值)，IEEE 规定这个浮点数可用来表示 3 个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为 0 的时候表示 NaN；小数位为 0 时，当符号位 s=0 时表示正无穷，s=1 时候表示负无穷。</li>\n</ul>\n<p>对于上面的 0.1 的指数位为 - 4，-4+1023 = 1019 转化为二进制就是：1111111011.</p>\n<p>所以，0.1 表示为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">1111111011</span> <span class=\"token number\">1001100110011001100110011001100110011001100110011001</span></pre></td></tr></table></figure><p>说了这么多，是时候该最开始的问题了，如何实现 0.1+0.2=0.3 呢？</p>\n<p>对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为 “机器精度”。对 JavaScript 来说，这个值通常为 2-52，在 ES6 中，提供了 Number.EPSILON 属性，而它的值就是 2-52，只要判断 0.1+0.2-0.3 是否小于 Number.EPSILON，如果小于，就可以判断为 0.1+0.2 ===0.3</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">numberepsilon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span>arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">-</span> arg2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numberepsilon</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>如何获取安全的 undefined 值？</li>\n</ol>\n<p>因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。<br />\n表达式 void ___ 没有返回值，因此返回结果是 undefined。<br />\nvoid 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。</p>\n<ol start=\"9\">\n<li>typeof NaN 的结果是什么？</li>\n</ol>\n<p>NaN 指 “不是一个数字”（not a number），NaN 是一个 “警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即 “执行数学运算没有成功，这是失败后返回的结果”。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span></pre></td></tr></table></figure><p>NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。</p>\n<ol start=\"10\">\n<li>isNaN 和 Number.isNaN 函数的区别？</li>\n</ol>\n<ul>\n<li>函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。</li>\n<li>函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</li>\n</ul>\n<ol start=\"12\">\n<li>其他值到字符串的转换规则？</li>\n</ol>\n<ul>\n<li>Null 和 Undefined 类型 ，null 转换为 &quot;null&quot;，undefined 转换为 &quot;undefined&quot;，</li>\n<li>Boolean 类型，true 转换为 &quot;true&quot;，false 转换为 &quot;false&quot;。</li>\n<li>Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。</li>\n<li>Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</li>\n<li>对普通对象来说，除非自行定义 toString () 方法，否则会调用 toString ()（Object.prototype.toString ()）来返回内部属性 [[Class]] 的值，如 &quot;[object Object]&quot;。如果对象有自己的 toString () 方法，字符串化时就会调用该方法并使用其返回值。</li>\n</ul>\n<ol start=\"13\">\n<li>其他值到数字值的转换规则？</li>\n</ol>\n<ul>\n<li>Undefined 类型的值转换为 NaN。</li>\n<li>Null 类型的值转换为 0。</li>\n<li>Boolean 类型的值，true 转换为 1，false 转换为 0。</li>\n<li>String 类型的值转换如同使用 Number () 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</li>\n<li>Symbol 类型的值不能转换为数字，会报错。</li>\n<li>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</li>\n</ul>\n<p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有 valueOf () 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString () 的返回值（如果存在）来进行强制类型转换。</p>\n<p>如果 valueOf () 和 toString () 均不返回基本类型值，会产生 TypeError 错误。</p>\n<ol start=\"14\">\n<li>其他值到布尔类型的值的转换规则？</li>\n</ol>\n<p>以下这些是假值：  <code>• undefined • null • false • +0、-0 和 NaN •</code></p>\n<p>假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。</p>\n<ol start=\"15\">\n<li>|| 和 &amp;&amp; 操作符的返回值？</li>\n</ol>\n<p>|| 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。</p>\n<ul>\n<li>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</li>\n<li>&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</li>\n</ul>\n<p>|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果</p>\n<ol start=\"16\">\n<li><span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> () 与比较操作符  <code>“===”、“==” </code> 的区别？</li>\n</ol>\n<ul>\n<li>使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</li>\n<li>使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</li>\n<li>使用 <span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。</li>\n</ul>\n<ol start=\"17\">\n<li>什么是 JavaScript 中的包装类型？</li>\n</ol>\n<p>在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"ABC\"</span></pre></td></tr></table></figure><p>在访问 'abc'.length 时，JavaScript 将 'abc' 在后台转换成 String ('abc')，然后再访问其 length 属性。</p>\n<p>JavaScript 也可以使用 Object 函数显式地将基本类型转换为包装类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// String &#123;\"abc\"&#125;</span></pre></td></tr></table></figure><p>也可以使用 valueOf 方法将包装类型倒转成基本类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'abc'</span></pre></td></tr></table></figure><p>看看如下代码会打印出什么：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Oops\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never runs</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>答案是<strong>什么都不会打印</strong>，因为虽然包裹的基本类型是 false，但是 false 被包裹成包装类型后就成了对象，所以其非值为 false，所以循环体中的内容不会运行。</p>\n<ol start=\"18\">\n<li>JavaScript 中如何进行隐式类型转换？</li>\n</ol>\n<p>首先要介绍 ToPrimitive 方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* @obj 需要转换的对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @type 期望的结果类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ToPrimitive</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>type 的值为 number 或者 string。</p>\n<p>（1）当 type 为 number 时规则如下：</p>\n<ul>\n<li>调用 obj 的 valueOf 方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用 obj 的 toString 方法，后续同上；</li>\n<li>抛出 TypeError 异常。</li>\n</ul>\n<p>（2）当 type 为 string 时规则如下：</p>\n<ul>\n<li>调用 obj 的 toString 方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用 obj 的 valueOf 方法，后续同上；</li>\n<li>抛出 TypeError 异常。</li>\n</ul>\n<p>p.s.</p>\n<ul>\n<li>toString 方法用于将对象转换为字符串。</li>\n<li>valueOf 方法用于返回对象的原始值。</li>\n</ul>\n<p>可以看出两者的主要区别在于调用 toString 和 valueOf 的先后顺序。默认情况下：</p>\n<ul>\n<li>如果对象为 Date 对象，则 type 默认为 string；</li>\n<li>其他情况下，type 默认为 number。</li>\n</ul>\n<p>总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">objToNumber</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">objToNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">objToNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span></pre></td></tr></table></figure><p>而 JavaScript 中的隐式类型转换主要发生在 +、-、*、/ 以及 ==、&gt;、&lt; 这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用 ToPrimitive 转换成基本类型，再进行操作。</p>\n<p>以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被 ToPrimitive 转换成基本类型，所以最终还是要应用基本类型转换规则）：</p>\n<p>(1) + 操作符 + 操作符的两边有至少一个 string 类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'23'</span> <span class=\"token comment\">// '123'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught TypeError: Cannot convert a Symbol value to a number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// '1false'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>(2) -、*、\\ 操作符</p>\n<p>NaN 也是一个数字</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token string\">'23'</span> <span class=\"token comment\">// 23</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token string\">'aa'</span> <span class=\"token comment\">// NaN</span></pre></td></tr></table></figure><p>(3) 对于 == 操作符</p>\n<p>操作符两边的值都尽量转成 number：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//false, 3 转为 number 为 3，true 转为 number 为 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">//true, '0' 转为 number 为 0，false 转为 number 为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// '0' 转为 number 为 0</span></pre></td></tr></table></figure><p>(4) 对于 &lt; 和 &gt; 比较符</p>\n<p>如果两边都是字符串，则比较字母表顺序：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'ca'</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'bd'</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'a'</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'b'</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>其他情况下，转换为数字再比较：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'12'</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">13</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>以上说的是基本类型的隐式转换，而对象会被 ToPrimitive 转换为基本类型再进行转换：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>其对比过程如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;, 上面提到过，ToPrimitive 默认 type 为 number，所以先 valueOf，结果还是个对象，下一步</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"，现在是一个字符串了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN，根据上面 &lt; 和 > 操作符的规则，要转换成数字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token comment\">//false，得出比较结果</span></pre></td></tr></table></figure><p>又比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">+</span> b <span class=\"token comment\">// \"[object Object][object Object]\"</span></pre></td></tr></table></figure><p>运算过程如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;，上面提到过，ToPrimitive 默认 type 为 number，所以先 valueOf，结果还是个对象，下一步</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同理</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">+</span> b <span class=\"token comment\">// \"[object Object][object Object]\"</span></pre></td></tr></table></figure><ol start=\"19\">\n<li><code>+</code>  操作符什么时候用于字符串的拼接？</li>\n</ol>\n<p>根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。</p>\n<p>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。</p>\n<p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。</p>\n<ol start=\"20\">\n<li>为什么会有 BigInt 的提案？</li>\n</ol>\n<p>JavaScript 中 Number.MAX_SAFE_INTEGER 表示最⼤安全数字，计算结果是 9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js 就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了 BigInt 来解决此问题。</p>\n<ol start=\"21\">\n<li>object.assign 和扩展运算法是深拷贝还是浅拷贝，两者区别</li>\n</ol>\n<p>扩展运算符：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> outObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">inObj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>outObj<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>newObj<span class=\"token punctuation\">.</span>inObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></pre></td></tr></table></figure><p>Object.assign():</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> outObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">inObj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> outObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>newObj<span class=\"token punctuation\">.</span>inObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></pre></td></tr></table></figure><p>可以看到，两者都是浅拷贝。</p>\n<ul>\n<li>Object.assign () 方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。</li>\n<li>扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制 ES6 的 symbols 属性。</li>\n</ul>\n<h3 id=\"二-es6\"><a class=\"anchor\" href=\"#二-es6\">#</a> 二、ES6</h3>\n<ol>\n<li>let、const、var 的区别</li>\n</ol>\n<p>（1）块级作用域： 块作用域由 { } 包括，let 和 const 具有块级作用域，var 不存在块级作用域。块级作用域解决了 ES5 中的两个问题：</p>\n<ul>\n<li>内层变量可能覆盖外层变量</li>\n<li>用来计数的循环变量泄露为全局变量</li>\n</ul>\n<p>（2）变量提升： var 存在变量提升，let 和 const 不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p>\n<p>（3）给全局添加属性： 浏览器的全局对象是 window，Node 的全局对象是 global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是 let 和 const 不会。</p>\n<p>（4）重复声明： var 声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const 和 let 不允许重复声明变量。</p>\n<p>（5）暂时性死区： 在使用 let、const 命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用 var 声明的变量不存在暂时性死区。</p>\n<p>（6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而 const 声明变量必须设置初始值。</p>\n<p>（7）指针指向： let 和 const 都是 ES6 新增的用于创建变量的语法。 let 创建的变量是可以更改指针指向（可以重新赋值）。但 const 声明的变量是不允许改变指针的指向。</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>var</th>\n<th>let</th>\n<th>const</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否有块级作用域</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否有变量提升</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否添加全局属性</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>能否重复声明变量</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否有暂时性死区</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否需要初始化</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否必须设置初始值</td>\n<td>×</td>\n<td>×</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否可以改变指针指向</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>const 对象的属性可以修改吗</li>\n</ol>\n<p>const 保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。</p>\n<p>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const 只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>\n<ol start=\"3\">\n<li>如果 new 一个箭头函数会怎么样</li>\n</ol>\n<p>箭头函数是 ES6 中的提出来的，它没有 prototype，也没有自己的 this 指向，更不可以使用 arguments 参数，所以不能 New 一个箭头函数。</p>\n<p>new 操作符的实现步骤如下：<br />\n（1）创建一个对象<br />\n（2）将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的 prototype 属性）<br />\n（3）执行构造函数中的代码，构造函数中的 this 指向该对象（也就是为这个对象添加属性和方法）<br />\n（4）返回新对象</p>\n<p>所以，上面的第二、三步，箭头函数都是没有办法执行的。</p>\n<ol start=\"4\">\n<li>箭头函数与普通函数的区别</li>\n</ol>\n<p>（1）箭头函数比普通函数更加简洁</p>\n<ul>\n<li>如果没有参数，就直接写一个空括号即可</li>\n<li>如果只有一个参数，可以省去参数的括号</li>\n<li>如果有多个参数，用逗号分割</li>\n<li>如果函数体的返回值只有一句，可以省略大括号</li>\n<li>如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个 void 关键字。最常见的就是调用一个函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token function\">doesNotReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（2）箭头函数没有自己的 this<br />\n 箭头函数不会创建自己的 this， 所以它没有自己的 this，它只会在自己作用域的上一层继承 this。所以箭头函数中 this 的指向在它在定义时已经确定了，之后不会改变。</p>\n<p>（3）箭头函数继承来的 this 指向永远不会改变</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'GLOBAL'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'OBJ'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">a</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'OBJ'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'GLOBAL'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Uncaught TypeError: obj.b is not a constructor</span></pre></td></tr></table></figure><p>(b 是箭头函数，它的外层作用域是全局作用域，因此它的 this 被绑定到全局对象（（在浏览器中是 window 对象，在 Node.js 中是 global 对象））)</p>\n<p>对象 obj 的方法 b 是使用箭头函数定义的，这个函数中的 this 就永远指向它定义时所处的全局执行环境中的 this，即便这个函数是作为对象 obj 的方法调用，this 依旧指向 Window 对象。需要注意，定义对象的大括号 {} 是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</p>\n<p>（对象的大括号 {} 不会创建新的执行环境：它只是在当前的作用域中定义了一个对象字面量，所有的属性和方法都仍然是当前作用域的一部分。<br />\n函数会创建新的执行环境：定义一个函数时，函数内部会形成一个新的作用域，函数内部的变量和操作不会影响外部的作用域。）</p>\n<p>（4）call ()、apply ()、bind () 等方法不能改变箭头函数中 this 的指向</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'Global'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fun1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 'Global'</span></pre></td></tr></table></figure><p>（5）箭头函数不能作为构造函数使用</p>\n<p>构造函数在 new 的步骤在上面已经说过了，实际上第二步就是将函数中的 this 指向该对象。 但是由于箭头函数时没有自己的 this 的，且 this 指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<p>（6）箭头函数没有自己的 arguments</p>\n<p>箭头函数没有自己的 arguments 对象。在箭头函数中访问 arguments 实际上获得的是外层函数的 arguments。</p>\n<p>（7）箭头函数没有 prototype</p>\n<p>（8）箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</p>\n<ol start=\"5\">\n<li>箭头函数的 this 指向哪⾥？</li>\n</ol>\n<p>箭头函数不同于传统 JavaScript 中的函数，箭头函数并没有属于⾃⼰的 this，它所谓的 this 是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的 this，所以是不会被 new 调⽤的，这个所谓的 this 也不会被改变。</p>\n<p>可以⽤ Babel 理解⼀下箭头函数:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES6 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">getArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>转化后：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES5，由 Babel 转译</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function-variable function\">getArrow</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_this <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>扩展运算符的作用及使用场景</li>\n</ol>\n<p>（1）对象扩展运算符</p>\n<p>对象的扩展运算符 (...) 用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>bar <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; a: 1, b: 2 &#125;</span></pre></td></tr></table></figure><p>上述方法实际上等价于:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; a: 1, b: 2 &#125;</span></pre></td></tr></table></figure><p>Object.assign 方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign 方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。</p>\n<p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>bar<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &#123;a: 2, b: 4&#125;</span></pre></td></tr></table></figure><p>利用上述特性就可以很方便的修改对象的部分属性。在 redux 中的 reducer 函数规定必须是一个纯函数，reducer 中的 state 对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。</p>\n<p>需要注意：扩展运算符对对象实例的拷贝属于浅拷贝。</p>\n<p>（2）数组扩展运算符</p>\n<p>数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1 2 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1 [2, 3, 4] 5</span></pre></td></tr></table></figure><p>下面是数组的扩展运算符的应用：</p>\n<ul>\n<li>将数组转换为参数序列</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><ul>\n<li>复制数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>要记住：扩展运算符 (…) 用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p>\n<ul>\n<li>合并数组</li>\n</ul>\n<p>如果想在数组内合并数组，可以这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [\"one\", \"two\", \"three\", \"four\", \"five\"]</span></pre></td></tr></table></figure><ul>\n<li>扩展运算符与解构赋值结合起来，用于生成数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>first <span class=\"token comment\">// 1rest  // [2, 3, 4, 5]</span></pre></td></tr></table></figure><p>需要注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 报错 const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错</span></pre></td></tr></table></figure><ul>\n<li>将字符串转为真正的数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></pre></td></tr></table></figure><ul>\n<li>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</li>\n</ul>\n<p>比较常见的应用是可以将某些数据结构转为数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//arguments 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用于替换 es5 中的 Array.prototype.slice.call (arguments) 写法。</p>\n<ul>\n<li>使用 Math 函数获取数组中特定的值</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>对对象与数组的解构的理解</li>\n</ol>\n<p>解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 1）数组的解构 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>最终，a、b、c 分别被赋予了数组第 0、1、2 个索引位的值：</p>\n<p>数组里的 0、1、2 索引位的元素值，精准地被映射到了左侧的第 0、1、2 个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量</p>\n<p>2）对象的解构 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假如想要解构它的两个自有属性，可以这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr></table></figure><p>这样就得到了 name 和 age 两个和 stu 平级的变量：</p>\n<p>注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr></table></figure><ol start=\"9\">\n<li>如何提取高度嵌套的对象里的指定属性？</li>\n</ol>\n<p>有时会遇到一些嵌套程度非常深的对象：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">classes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">stu</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr></table></figure><p>显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的 “儿子的儿子” 对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> classes <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> stu <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> classes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name <span class=\"token comment\">// 'Bob'</span></pre></td></tr></table></figure><p>但是还有一种更标准的做法，可以用一行代码来解决这个问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">classes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">stu</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 'Bob'</span></pre></td></tr></table></figure><p>可以在解构出来的变量名右侧，通过冒号 +{目标属性名} 这种形式，进一步解构它，一直解构到拿到目标数据为止。</p>\n<ol start=\"10\">\n<li>对 rest 参数的理解</li>\n</ol>\n<p>扩展运算符被用在函数形参上时，它还可以把一个分离的参数序列整合成一个数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> val <span class=\"token keyword\">of</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result <span class=\"token operator\">*=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 24</span></pre></td></tr></table></figure><p>这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]</span></pre></td></tr></table></figure><p>这就是 … rest 运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。</p>\n<ol start=\"11\">\n<li>ES6 中模板语法与字符串处理</li>\n</ol>\n<p>ES6 提出了 “模板语法” 的概念。在 ES6 以前，拼接字符串是很麻烦的事情：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'css'</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> career <span class=\"token operator\">=</span> <span class=\"token string\">'coder'</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'coding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'writing'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> finalString <span class=\"token operator\">=</span> <span class=\"token string\">'my name is '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">', I work as a '</span> <span class=\"token operator\">+</span> career <span class=\"token operator\">+</span> <span class=\"token string\">', I love '</span> <span class=\"token operator\">+</span> hobby<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">' and '</span> <span class=\"token operator\">+</span> hobby<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'css'</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> career <span class=\"token operator\">=</span> <span class=\"token string\">'coder'</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'coding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'writing'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> finalString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, I work as a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>career<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> I love </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hobby<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hobby<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p>字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势 —— 允许用 ${} 的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：</p>\n<ul>\n<li>在模板字符串中，空格、缩进、换行都会被保留</li>\n<li>模板字符串完全支持 “运算” 式的表达式，可以在 ${} 里完成一些计算</li>\n</ul>\n<p>基于第一点，可以在模板字符串里无障碍地直接写 html 代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&lt;ul></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t&lt;li>列表项1&lt;/li></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t&lt;li>列表项2&lt;/li></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t&lt;/ul></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确输出，不存在报错</span></pre></td></tr></table></figure><p>基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> finalString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token operator\">+</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>finalString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 '1 + 2 = 3'</span></pre></td></tr></table></figure><p>除了模板语法外， ES6 中还新增了一系列的字符串方法用于提升开发效率：</p>\n<p>（1）存在性判定：在过去，当判断一个字符 / 字符串是否在某字符串中时，只能用 indexOf &gt; -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。</p>\n<ul>\n<li>includes：判断字符串与子串的包含关系：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> son <span class=\"token operator\">=</span> <span class=\"token string\">'haha'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ul>\n<li>startsWith：判断字符串是否以指定子串开头：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'haha'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xixi'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ul>\n<li>endsWith：判断字符串是否以指定子串结尾：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  father<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hehe'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>（2）自动重复：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sourceCode <span class=\"token operator\">=</span> <span class=\"token string\">'repeat for 3 times;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> repeated <span class=\"token operator\">=</span> sourceCode<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>repeated<span class=\"token punctuation\">)</span> <span class=\"token comment\">// repeat for 3 times;repeat for 3 times;repeat for 3 times;</span></pre></td></tr></table></figure>"},{"title":"前端学习之JS篇（三）","date":"2025-01-12T05:25:58.000Z","_content":"\n### 六、this/call/apply/bind\n\n1. 对this对象的理解\n\nthis 是执行上下文中的一个属性，它指向**最后一次调用这个方法的对象**。在实际开发中，this 的指向可以通过四种调用模式来判断。\n\n- 第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\n\n- 第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\n\n- 第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\n\n- 第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。\n\n这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。\n\n2. call() 和 apply() 的区别？\n\n它们的作用一模一样，区别仅在于传入参数的形式的不同。\n\n- apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。\n\n- call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\n\n3. 实现call、apply 及 bind 函数\n\n（1）call 函数的实现步骤：\n\n- 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n- 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n- 处理传入的参数，截取第一个参数后的所有参数。\n- 将函数作为上下文对象的一个属性。\n- 使用上下文对象来调用这个方法，并保存返回结果。\n- 删除刚才新增的属性。\n- 返回结果。\n\n``` javascript\n\nFunction.prototype.myCall = function(context) {\n    // 判断调用对象\n    if (typeof this ! == 'function') {\n        console.error('type error')\n    }\n    // 获取参数\n    let args = [...arguments].slice(1),\n        result = null;\n    // 判断 context 是否传入，如果未传入则设置为 window\n    context = context || window;\n\n     // 将调用函数设为对象的方法\n    context.fn = this;\n    // 调用函数\n    result = context.fn(...args);\n    // 将属性删除\n    delete context.fn;\n    return result;\n}\n```\n\n（2）apply 函数的实现步骤：\n\n- 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n- 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n- 将函数作为上下文对象的一个属性。\n- 判断参数值是否传入\n- 使用上下文对象来调用这个方法，并保存返回结果。\n- 删除刚才新增的属性\n- 返回结果\n\n``` javascript\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n\n```\n\n（3）bind 函数的实现步骤：\n\n- 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n- 保存当前函数的引用，获取其余传入参数值。\n- 创建一个函数返回\n- 函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。\n\n``` javascript\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  // 获取参数\n  var args = [...arguments].slice(1),\n    fn = this;\n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n\n```\n\n### 七、异步编程\n\n1. 异步编程的实现方式？\n\n- 回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\n\n- Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\n\n- generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\n\n- async 函数 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\n\n2. setTimeout、Promise、Async/Await 的区别\n\nsetTimeout、Promise 和 Async/Await 都是 JavaScript 中用于处理异步操作的机制，但它们在使用方式、语法和功能上有所不同。\n\nsetTimeout 是一个全局函数，用于在指定的延迟时间后执行一个函数或一段代码。它是异步的，但不涉及任何状态管理或链式调用。\n\nPromise 是一个用于处理异步操作的对象，表示一个最终会完成（或失败）的操作，并返回一个值。它可以用于更好地管理异步操作的链式调用和错误处理。\n\nAsync/Await 是 Promise 的语法糖，用于简化异步代码的编写。它使得异步代码看起来更像同步代码，提高了代码的可读性和可维护性。\n\n（1）setTimeout\n\n``` javascript\nconsole.log('script start')\t//1. 打印 script start\nsetTimeout(function(){\n    console.log('settimeout')\t// 4. 打印 settimeout\n})\t// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数\nconsole.log('script end')\t//3. 打印 script start\n// 输出顺序：script start->script end->settimeout\n\n```\n\n（2）Promise\n\nPromise本身是同步的立即执行函数， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行，打印p的时候，是打印的返回结果，一个Promise实例。\n\n``` javascript\nconsole.log('script start')\nlet promise1 = new Promise(function (resolve) {\n    console.log('promise1')\n    resolve()\n    console.log('promise1 end')\n}).then(function () {\n    console.log('promise2')\n})\nsetTimeout(function(){\n    console.log('settimeout')\n})\nconsole.log('script end')\n// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout\n\n```\n\n当JS主线程执行到Promise对象时：\n\n- promise1.then() 的回调就是一个 task\n- promise1 是 resolved或rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue\n- promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中\n- setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况\n\n（3）async/await\n\n``` javascript\nasync function async1(){\n   console.log('async1 start');\n    await async2();\n    console.log('async1 end')\n}\nasync function async2(){\n    console.log('async2')\n}\nconsole.log('script start');\nasync1();\nconsole.log('script end')\n// 输出顺序：script start->async1 start->async2->script end->async1 end\n\n```\n\nasync 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。\n\n例如：\n\n``` javascript\nasync function func1() {\n    return 1\n}\nconsole.log(func1())\n\n```\n\nfunc1的运行结果其实就是一个Promise对象。因此也可以使用then来处理后续逻辑。\n\n``` javascript\nfunc1().then(res => {\n    console.log(res);  // 30\n})\n\n```\n\nawait的含义为等待，也就是 async 函数需要等待await后的函数执行完成并且有了返回结果（Promise对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。\n\n3. 对Promise的理解\n\nPromise是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。\n\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\n（1）Promise的实例有三个状态:\n\n- pending（进行中）\n- Resolved（已完成）\n- Rejected（已拒绝）\n\n当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。\n\n（2）Promise的实例有两个过程：\n\n- pending -> fulfilled : Resolved（已完成）\n- pending -> rejected：Rejected（已拒绝）\n\n注意：一旦从进行状态变成为其他状态就永远不能更改状态了。\n\nPromise的特点：\n\n- 对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是promise这个名字的由来——“承诺”；\n\n- 一旦状态改变就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从pending变为fulfilled，从pending变为rejected。这时就称为resolved（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。\n\nPromise的缺点：\n\n- 无法取消Promise，一旦新建它就会立即执行，无法中途取消。\n- 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。\n- 当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\n\n总结： Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。\n\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n\n注意： 在构造 Promise 的时候，构造函数内部的代码是立即执行的\n\n4. Promise的基本用法\n\n（1）创建Promise对象\n\nPromise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。\n\n``` javascript\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n```\n\n一般情况下都会使用new Promise()来创建promise对象，但是也可以使用promise.resolve和promise.reject这两个方法：\n\n- Promise.resolve\n\nPromise.resolve(value)的返回值也是一个promise对象，可以对返回值进行.then调用，代码如下：\n\n``` javascript\nPromise.resolve(11).then(function(value){\n  console.log(value); // 打印出11\n});\n\n```\n\nresolve(11)代码中，会让promise对象进入确定(resolve状态)，并将参数11传递给后面的then所指定的onFulfilled 函数；\n\n创建promise对象可以使用new Promise的形式创建对象，也可以使用Promise.resolve(value)的形式创建promise对象；\n\n- Promise.reject\n\nPromise.reject 也是new Promise的快捷形式，也创建一个promise对象。代码如下：\n\n``` javascript\nPromise.reject(new Error(“我错了，请原谅俺！！”));\n\n```\n\n就是下面的代码new Promise的简单形式：\n\n``` javascript\nnew Promise(function(resolve,reject){\n   reject(new Error(\"我错了！\"));\n});\n\n```\n\n下面是使用resolve方法和reject方法：\n\n``` javascript\nfunction testPromise(ready) {\n  return new Promise(function(resolve,reject){\n    if(ready) {\n      resolve(\"hello world\");\n    }else {\n      reject(\"No thanks\");\n    }\n  });\n};\n// 方法调用\ntestPromise(true).then(function(msg){\n  console.log(msg);\n},function(error){\n  console.log(error);\n});\n\n```\n\n上面的代码的含义是给testPromise方法传递一个参数，返回一个promise对象，如果为true的话，那么调用promise对象中的resolve()方法，并且把其中的参数传递给后面的then第一个函数内，因此打印出 “hello world”, 如果为false的话，会调用promise对象中的reject()方法，则会进入then的第二个函数内，会打印No thanks；\n\n（2）Promise方法\n\nPromise有五个常用的方法：then()、catch()、all()、race()、finally。下面就来看一下这些方法。\n\n- 1. then()\n\n当Promise执行的内容符合成功条件时，调用resolve函数，失败就调用reject函数。Promise创建完了，那该如何调用呢？\n\n``` javascript\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n```\n\nthen方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中第二个参数可以省略。 then方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n\n当要写有顺序的异步事件时，需要串行时，可以这样写：\n\n``` javascript\nlet promise = new Promise((resolve,reject)=>{\n    ajax('first').success(function(res){\n        resolve(res);\n    })\n})\npromise.then(res=>{\n    return new Promise((resovle,reject)=>{\n        ajax('second').success(function(res){\n            resolve(res)\n        })\n    })\n}).then(res=>{\n    return new Promise((resovle,reject)=>{\n        ajax('second').success(function(res){\n            resolve(res)\n        })\n    })\n}).then(res=>{\n    \n})\n\n```\n\n那当要写的事件没有顺序或者关系时，还如何写呢？可以使用all 方法来解决。\n\n- 2. catch()\n\nPromise对象除了有then方法，还有一个catch方法，该方法相当于then方法的第二个参数，指向reject的回调函数。不过catch方法还有一个作用，就是在执行resolve回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入catch方法中。\n\n``` javascript\np.then((data) => {\n     console.log('resolved',data);\n},(err) => {\n     console.log('rejected',err);\n     }\n); \np.then((data) => {\n    console.log('resolved',data);\n}).catch((err) => {\n    console.log('rejected',err);\n});\n\n```\n\n- 3. all()\n\nall方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个promise对象。\n当数组中所有的promise的状态都达到resolved的时候，all方法的状态就会变成resolved，如果有一个状态变成了rejected，那么all方法的状态就会变成rejected。\n\n``` javascript\njavascript\nlet promise1 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(1);\n\t},2000)\n});\nlet promise2 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(2);\n\t},1000)\n});\nlet promise3 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(3);\n\t},3000)\n});\nPromise.all([promise1,promise2,promise3]).then(res=>{\n    console.log(res);\n    //结果为：[1,2,3] \n})\n\n```\n\n调用all方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个promise对象resolve执行时的值。\n\n- 4. race()\n\nrace方法和all一样，接受的参数是一个每项都是promise的数组，但是与all不同的是，当最先执行完的事件执行完之后，就直接返回该promise对象的值。如果第一个promise对象状态变成resolved，那自身的状态变成了resolved；反之第一个promise变成rejected，那自身状态就会变成rejected。\n\n``` javascript\nlet promise1 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       reject(1);\n\t},2000)\n});\nlet promise2 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(2);\n\t},1000)\n});\nlet promise3 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(3);\n\t},3000)\n});\nPromise.race([promise1,promise2,promise3]).then(res=>{\n\tconsole.log(res);\n\t//结果：2\n},rej=>{\n    console.log(rej)};\n)\n\n```\n\n那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\n\n``` javascript\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{})\n\n```\n\n- 5. finally()\n\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\n\n``` javascript\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n\n```\n\n上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。\n\n下面是一个例子，服务器使用 Promise 处理请求，然后使用finally方法关掉服务器。\n\n``` javascript\nserver.listen(port)\n  .then(function () {\n    // ...\n  })\n  .finally(server.stop);\n\n```\n\nfinally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是fulfilled还是rejected。这表明，finally方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。finally本质上是then方法的特例：\n\n``` javascript\npromise\n.finally(() => {\n  // 语句\n});\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n\n```\n\n上面代码中，如果不使用finally方法，同样的语句需要为成功和失败两种情况各写一次。有了finally方法，则只需要写一次。\n\n5. Promise解决了什么问题\n\n在工作中经常会碰到这样一个需求，比如我使用ajax发一个A请求后，成功后拿到数据，需要把数据传给B请求；那么需要如下编写代码：\n\n``` javascript\nlet fs = require('fs')\nfs.readFile('./a.txt','utf8',function(err,data){\n  fs.readFile(data,'utf8',function(err,data){\n    fs.readFile(data,'utf8',function(err,data){\n      console.log(data)\n    })\n  })\n})\n\n```\n\n上面的代码有如下缺点：\n\n- 后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个ajax请求嵌套的情况，代码不够直观。\n- 如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。\n\nPromise出现之后，代码变成这样：\n\n``` javascript\nlet fs = require('fs')\nfunction read(url){\n  return new Promise((resolve,reject)=>{\n    fs.readFile(url,'utf8',function(error,data){\n      error && reject(error)\n      resolve(data)\n    })\n  })\n}\nread('./a.txt').then(data=>{\n  return read(data) \n}).then(data=>{\n  return read(data)  \n}).then(data=>{\n  console.log(data)\n})\n\n```\n\n这样代码看起了就简洁了很多，解决了地狱回调的问题。\n\n6. Promise.all和Promise.race的区别的使用场景\n\n（1）Promise.all \n\nPromise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。\n\nPromise.all中传入的是数组，返回的也是是数组，并且会将进行映射，传入的promise对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。\n\n需要注意，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决。\n\n（2）Promise.race\n\n顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\n\n``` javascript\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{})\n\n```\n\n7. 对async/await 的理解\n\nasync/await其实是Generator 的语法糖，它能实现的效果都能用then链来实现，它是为优化then链而开发出来的。\n从字面上来看，async是“异步”的简写，await则为等待，所以很好理解async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定await只能出现在asnyc函数中，先来看看async函数返回了什么：\n\n``` javascript\nasync function testAsy(){\n   return 'hello world';\n}\nlet result = testAsy(); \nconsole.log(result)\n\n```\n\n所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。\n\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：then() 链来处理这个 Promise 对象，就像这样：\n\n``` javascript\nasync function testAsy(){\n   return 'hello world'\n}\nlet result = testAsy() \nconsole.log(result)\nresult.then(v=>{\n    console.log(v)   // hello world\n})\n\n```\n\n那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 Promise.resolve(undefined)。\n\n联想一下 Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。\n\n注意：Promise.resolve(x) 可以看作是 new Promise(resolve => resolve(x)) 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\n8. await 到底在等啥？\n\nawait 在等待什么呢？ 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：\n\n``` javascript\nfunction getSomething() {\n    return \"something\";\n}\nasync function testAsync() {\n    return Promise.resolve(\"hello async\");\n}\nasync function test() {\n    const v1 = await getSomething();\n    const v2 = await testAsync();\n    console.log(v1, v2);\n}\ntest();\n\n```\n\nawait 表达式的运算结果取决于它等的是什么。\n\n- 如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n- 如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n来看一个例子：\n\n``` javascript\nfunction testAsy(x){\n   return new Promise(resolve=>{setTimeout(() => {\n       resolve(x);\n     }, 3000)\n    }\n   )\n}\nasync function testAwt(){    \n  let result =  await testAsy('hello world');\n  console.log(result);    // 3秒钟之后出现hello world\n  console.log('cuger')   // 3秒钟之后出现cug\n}\ntestAwt();\nconsole.log('cug')  //立即输出cug\n\n```\n\n9.  async/await的优势\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n\n``` javascript\n/**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n */\nfunction takeLongTime(n) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(n + 200), n);\n    });\n}\nfunction step1(n) {\n    console.log(`step1 with ${n}`);\n    return takeLongTime(n);\n}\nfunction step2(n) {\n    console.log(`step2 with ${n}`);\n    return takeLongTime(n);\n}\nfunction step3(n) {\n    console.log(`step3 with ${n}`);\n    return takeLongTime(n);\n}\n\n```\n\n现在用 Promise 方式来实现这三个步骤的处理：\n\n``` javascript\nfunction doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    step1(time1)\n        .then(time2 => step2(time2))\n        .then(time3 => step3(time3))\n        .then(result => {\n            console.log(`result is ${result}`);\n            console.timeEnd(\"doIt\");\n        });\n}\ndoIt();\n// c:\\var\\test>node --harmony_async_await .\n// step1 with 300\n// step2 with 500\n// step3 with 700\n// result is 900\n// doIt: 1507.251ms\n\n```\n\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt() 顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和 console.time()/console.timeEnd() 计算的结果一致。\n\n如果用 async/await 来实现呢，会是这样：\n\n``` javascript\nasync function doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time2);\n    const result = await step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd(\"doIt\");\n}\ndoIt();\n\n```\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n10. async/await对比Promise的优势\n\n- 代码读起来更加同步，Promise虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\n- Promise传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n- 错误处理友好，async/await可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n- 调试友好，Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。\n\n11. async/await 如何捕获异常\n\n``` javascript\nasync function fn(){\n    try{\n        let a = await Promise.reject('error')\n    }catch(error){\n        console.log(error)\n    }\n}\n\n```\n\n八、面向对象\n\n1. 对象创建的方式有哪些？\n\n一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：\n\n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\n\n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\n\n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\n\n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\n\n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\n\n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\n\n2. 对象继承的方式有哪些？\n\n（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。\n\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\n\n九、垃圾回收与内存泄漏\n\n1. 浏览器的垃圾回收机制\n\n（1）垃圾回收的概念\n\n垃圾回收：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。\n\n回收机制：\n\n- Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。\n- JavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。\n- 不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。\n\n（2）垃圾回收的方式\n\n浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。\n\n 1）标记清除\n\n- 标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。\n- 垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。\n\n 2）引用计数\n\n - 另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。\n - 这种方法会引起循环引用的问题：例如： obj1和obj2通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1和obj2还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。\n\n``` javascript\nfunction fun() {\n    let obj1 = {};\n    let obj2 = {};\n    obj1.a = obj2; // obj1 引用 obj2\n    obj2.a = obj1; // obj2 引用 obj1\n}\n\n```\n\n这种情况下，就要手动释放变量占用的内存：\n\n``` javascript\nobj1.a =  null\nobj2.a =  null\n\n```\n\n（3）减少垃圾回收\n虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。\n\n- 对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。\n- 对object进行优化： 对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。\n- 对函数进行优化： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。\n\n2. 哪些情况会导致内存泄漏\n\n以下四种情况会造成内存的泄漏：\n\n- 意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n- 被遗忘的计时器或回调函数： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。\n- 脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。\n- 闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。\n\nP.S. 引用是指向对象的变量。","source":"_posts/前端学习之JS篇（三）.md","raw":"---\ntitle: 前端学习之JS篇（三）\ndate: 2025-01-12 13:25:58\ncategories:\n- [前端开发]\ntags:\n- [前端开发]\n---\n\n### 六、this/call/apply/bind\n\n1. 对this对象的理解\n\nthis 是执行上下文中的一个属性，它指向**最后一次调用这个方法的对象**。在实际开发中，this 的指向可以通过四种调用模式来判断。\n\n- 第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。\n\n- 第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。\n\n- 第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。\n\n- 第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call() 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。\n\n这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。\n\n2. call() 和 apply() 的区别？\n\n它们的作用一模一样，区别仅在于传入参数的形式的不同。\n\n- apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。\n\n- call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。\n\n3. 实现call、apply 及 bind 函数\n\n（1）call 函数的实现步骤：\n\n- 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n- 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n- 处理传入的参数，截取第一个参数后的所有参数。\n- 将函数作为上下文对象的一个属性。\n- 使用上下文对象来调用这个方法，并保存返回结果。\n- 删除刚才新增的属性。\n- 返回结果。\n\n``` javascript\n\nFunction.prototype.myCall = function(context) {\n    // 判断调用对象\n    if (typeof this ! == 'function') {\n        console.error('type error')\n    }\n    // 获取参数\n    let args = [...arguments].slice(1),\n        result = null;\n    // 判断 context 是否传入，如果未传入则设置为 window\n    context = context || window;\n\n     // 将调用函数设为对象的方法\n    context.fn = this;\n    // 调用函数\n    result = context.fn(...args);\n    // 将属性删除\n    delete context.fn;\n    return result;\n}\n```\n\n（2）apply 函数的实现步骤：\n\n- 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n- 判断传入上下文对象是否存在，如果不存在，则设置为 window 。\n- 将函数作为上下文对象的一个属性。\n- 判断参数值是否传入\n- 使用上下文对象来调用这个方法，并保存返回结果。\n- 删除刚才新增的属性\n- 返回结果\n\n``` javascript\nFunction.prototype.myApply = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  let result = null;\n  // 判断 context 是否存在，如果未传入则为 window\n  context = context || window;\n  // 将函数设为对象的方法\n  context.fn = this;\n  // 调用方法\n  if (arguments[1]) {\n    result = context.fn(...arguments[1]);\n  } else {\n    result = context.fn();\n  }\n  // 将属性删除\n  delete context.fn;\n  return result;\n};\n\n```\n\n（3）bind 函数的实现步骤：\n\n- 判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。\n- 保存当前函数的引用，获取其余传入参数值。\n- 创建一个函数返回\n- 函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。\n\n``` javascript\nFunction.prototype.myBind = function(context) {\n  // 判断调用对象是否为函数\n  if (typeof this !== \"function\") {\n    throw new TypeError(\"Error\");\n  }\n  // 获取参数\n  var args = [...arguments].slice(1),\n    fn = this;\n  return function Fn() {\n    // 根据调用方式，传入不同绑定值\n    return fn.apply(\n      this instanceof Fn ? this : context,\n      args.concat(...arguments)\n    );\n  };\n};\n\n```\n\n### 七、异步编程\n\n1. 异步编程的实现方式？\n\n- 回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。\n\n- Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。\n\n- generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。\n\n- async 函数 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。\n\n2. setTimeout、Promise、Async/Await 的区别\n\nsetTimeout、Promise 和 Async/Await 都是 JavaScript 中用于处理异步操作的机制，但它们在使用方式、语法和功能上有所不同。\n\nsetTimeout 是一个全局函数，用于在指定的延迟时间后执行一个函数或一段代码。它是异步的，但不涉及任何状态管理或链式调用。\n\nPromise 是一个用于处理异步操作的对象，表示一个最终会完成（或失败）的操作，并返回一个值。它可以用于更好地管理异步操作的链式调用和错误处理。\n\nAsync/Await 是 Promise 的语法糖，用于简化异步代码的编写。它使得异步代码看起来更像同步代码，提高了代码的可读性和可维护性。\n\n（1）setTimeout\n\n``` javascript\nconsole.log('script start')\t//1. 打印 script start\nsetTimeout(function(){\n    console.log('settimeout')\t// 4. 打印 settimeout\n})\t// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数\nconsole.log('script end')\t//3. 打印 script start\n// 输出顺序：script start->script end->settimeout\n\n```\n\n（2）Promise\n\nPromise本身是同步的立即执行函数， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行，打印p的时候，是打印的返回结果，一个Promise实例。\n\n``` javascript\nconsole.log('script start')\nlet promise1 = new Promise(function (resolve) {\n    console.log('promise1')\n    resolve()\n    console.log('promise1 end')\n}).then(function () {\n    console.log('promise2')\n})\nsetTimeout(function(){\n    console.log('settimeout')\n})\nconsole.log('script end')\n// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout\n\n```\n\n当JS主线程执行到Promise对象时：\n\n- promise1.then() 的回调就是一个 task\n- promise1 是 resolved或rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue\n- promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个(可能下一个)回合的 microtask queue 中\n- setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况\n\n（3）async/await\n\n``` javascript\nasync function async1(){\n   console.log('async1 start');\n    await async2();\n    console.log('async1 end')\n}\nasync function async2(){\n    console.log('async2')\n}\nconsole.log('script start');\nasync1();\nconsole.log('script end')\n// 输出顺序：script start->async1 start->async2->script end->async1 end\n\n```\n\nasync 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。\n\n例如：\n\n``` javascript\nasync function func1() {\n    return 1\n}\nconsole.log(func1())\n\n```\n\nfunc1的运行结果其实就是一个Promise对象。因此也可以使用then来处理后续逻辑。\n\n``` javascript\nfunc1().then(res => {\n    console.log(res);  // 30\n})\n\n```\n\nawait的含义为等待，也就是 async 函数需要等待await后的函数执行完成并且有了返回结果（Promise对象）之后，才能继续执行下面的代码。await通过返回一个Promise对象来实现同步的效果。\n\n3. 对Promise的理解\n\nPromise是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。\n\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。\n\n（1）Promise的实例有三个状态:\n\n- pending（进行中）\n- Resolved（已完成）\n- Rejected（已拒绝）\n\n当把一件事情交给promise时，它的状态就是Pending，任务完成了状态就变成了Resolved、没有完成失败了就变成了Rejected。\n\n（2）Promise的实例有两个过程：\n\n- pending -> fulfilled : Resolved（已完成）\n- pending -> rejected：Rejected（已拒绝）\n\n注意：一旦从进行状态变成为其他状态就永远不能更改状态了。\n\nPromise的特点：\n\n- 对象的状态不受外界影响。promise对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是promise这个名字的由来——“承诺”；\n\n- 一旦状态改变就不会再变，任何时候都可以得到这个结果。promise对象的状态改变，只有两种可能：从pending变为fulfilled，从pending变为rejected。这时就称为resolved（已定型）。如果改变已经发生了，你再对promise对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。\n\nPromise的缺点：\n\n- 无法取消Promise，一旦新建它就会立即执行，无法中途取消。\n- 如果不设置回调函数，Promise内部抛出的错误，不会反应到外部。\n- 当处于pending状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。\n\n总结： Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。\n\n状态的改变是通过 resolve() 和 reject() 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。\n\n注意： 在构造 Promise 的时候，构造函数内部的代码是立即执行的\n\n4. Promise的基本用法\n\n（1）创建Promise对象\n\nPromise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。\n\n``` javascript\nconst promise = new Promise(function(resolve, reject) {\n  // ... some code\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\n```\n\n一般情况下都会使用new Promise()来创建promise对象，但是也可以使用promise.resolve和promise.reject这两个方法：\n\n- Promise.resolve\n\nPromise.resolve(value)的返回值也是一个promise对象，可以对返回值进行.then调用，代码如下：\n\n``` javascript\nPromise.resolve(11).then(function(value){\n  console.log(value); // 打印出11\n});\n\n```\n\nresolve(11)代码中，会让promise对象进入确定(resolve状态)，并将参数11传递给后面的then所指定的onFulfilled 函数；\n\n创建promise对象可以使用new Promise的形式创建对象，也可以使用Promise.resolve(value)的形式创建promise对象；\n\n- Promise.reject\n\nPromise.reject 也是new Promise的快捷形式，也创建一个promise对象。代码如下：\n\n``` javascript\nPromise.reject(new Error(“我错了，请原谅俺！！”));\n\n```\n\n就是下面的代码new Promise的简单形式：\n\n``` javascript\nnew Promise(function(resolve,reject){\n   reject(new Error(\"我错了！\"));\n});\n\n```\n\n下面是使用resolve方法和reject方法：\n\n``` javascript\nfunction testPromise(ready) {\n  return new Promise(function(resolve,reject){\n    if(ready) {\n      resolve(\"hello world\");\n    }else {\n      reject(\"No thanks\");\n    }\n  });\n};\n// 方法调用\ntestPromise(true).then(function(msg){\n  console.log(msg);\n},function(error){\n  console.log(error);\n});\n\n```\n\n上面的代码的含义是给testPromise方法传递一个参数，返回一个promise对象，如果为true的话，那么调用promise对象中的resolve()方法，并且把其中的参数传递给后面的then第一个函数内，因此打印出 “hello world”, 如果为false的话，会调用promise对象中的reject()方法，则会进入then的第二个函数内，会打印No thanks；\n\n（2）Promise方法\n\nPromise有五个常用的方法：then()、catch()、all()、race()、finally。下面就来看一下这些方法。\n\n- 1. then()\n\n当Promise执行的内容符合成功条件时，调用resolve函数，失败就调用reject函数。Promise创建完了，那该如何调用呢？\n\n``` javascript\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n```\n\nthen方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中第二个参数可以省略。 then方法返回的是一个新的Promise实例（不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。\n\n当要写有顺序的异步事件时，需要串行时，可以这样写：\n\n``` javascript\nlet promise = new Promise((resolve,reject)=>{\n    ajax('first').success(function(res){\n        resolve(res);\n    })\n})\npromise.then(res=>{\n    return new Promise((resovle,reject)=>{\n        ajax('second').success(function(res){\n            resolve(res)\n        })\n    })\n}).then(res=>{\n    return new Promise((resovle,reject)=>{\n        ajax('second').success(function(res){\n            resolve(res)\n        })\n    })\n}).then(res=>{\n    \n})\n\n```\n\n那当要写的事件没有顺序或者关系时，还如何写呢？可以使用all 方法来解决。\n\n- 2. catch()\n\nPromise对象除了有then方法，还有一个catch方法，该方法相当于then方法的第二个参数，指向reject的回调函数。不过catch方法还有一个作用，就是在执行resolve回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入catch方法中。\n\n``` javascript\np.then((data) => {\n     console.log('resolved',data);\n},(err) => {\n     console.log('rejected',err);\n     }\n); \np.then((data) => {\n    console.log('resolved',data);\n}).catch((err) => {\n    console.log('rejected',err);\n});\n\n```\n\n- 3. all()\n\nall方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个promise对象。\n当数组中所有的promise的状态都达到resolved的时候，all方法的状态就会变成resolved，如果有一个状态变成了rejected，那么all方法的状态就会变成rejected。\n\n``` javascript\njavascript\nlet promise1 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(1);\n\t},2000)\n});\nlet promise2 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(2);\n\t},1000)\n});\nlet promise3 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(3);\n\t},3000)\n});\nPromise.all([promise1,promise2,promise3]).then(res=>{\n    console.log(res);\n    //结果为：[1,2,3] \n})\n\n```\n\n调用all方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个promise对象resolve执行时的值。\n\n- 4. race()\n\nrace方法和all一样，接受的参数是一个每项都是promise的数组，但是与all不同的是，当最先执行完的事件执行完之后，就直接返回该promise对象的值。如果第一个promise对象状态变成resolved，那自身的状态变成了resolved；反之第一个promise变成rejected，那自身状态就会变成rejected。\n\n``` javascript\nlet promise1 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       reject(1);\n\t},2000)\n});\nlet promise2 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(2);\n\t},1000)\n});\nlet promise3 = new Promise((resolve,reject)=>{\n\tsetTimeout(()=>{\n       resolve(3);\n\t},3000)\n});\nPromise.race([promise1,promise2,promise3]).then(res=>{\n\tconsole.log(res);\n\t//结果：2\n},rej=>{\n    console.log(rej)};\n)\n\n```\n\n那么race方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\n\n``` javascript\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{})\n\n```\n\n- 5. finally()\n\nfinally方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。\n\n``` javascript\npromise\n.then(result => {···})\n.catch(error => {···})\n.finally(() => {···});\n\n```\n\n上面代码中，不管promise最后的状态，在执行完then或catch指定的回调函数以后，都会执行finally方法指定的回调函数。\n\n下面是一个例子，服务器使用 Promise 处理请求，然后使用finally方法关掉服务器。\n\n``` javascript\nserver.listen(port)\n  .then(function () {\n    // ...\n  })\n  .finally(server.stop);\n\n```\n\nfinally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是fulfilled还是rejected。这表明，finally方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。finally本质上是then方法的特例：\n\n``` javascript\npromise\n.finally(() => {\n  // 语句\n});\n// 等同于\npromise\n.then(\n  result => {\n    // 语句\n    return result;\n  },\n  error => {\n    // 语句\n    throw error;\n  }\n);\n\n```\n\n上面代码中，如果不使用finally方法，同样的语句需要为成功和失败两种情况各写一次。有了finally方法，则只需要写一次。\n\n5. Promise解决了什么问题\n\n在工作中经常会碰到这样一个需求，比如我使用ajax发一个A请求后，成功后拿到数据，需要把数据传给B请求；那么需要如下编写代码：\n\n``` javascript\nlet fs = require('fs')\nfs.readFile('./a.txt','utf8',function(err,data){\n  fs.readFile(data,'utf8',function(err,data){\n    fs.readFile(data,'utf8',function(err,data){\n      console.log(data)\n    })\n  })\n})\n\n```\n\n上面的代码有如下缺点：\n\n- 后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个ajax请求嵌套的情况，代码不够直观。\n- 如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。\n\nPromise出现之后，代码变成这样：\n\n``` javascript\nlet fs = require('fs')\nfunction read(url){\n  return new Promise((resolve,reject)=>{\n    fs.readFile(url,'utf8',function(error,data){\n      error && reject(error)\n      resolve(data)\n    })\n  })\n}\nread('./a.txt').then(data=>{\n  return read(data) \n}).then(data=>{\n  return read(data)  \n}).then(data=>{\n  console.log(data)\n})\n\n```\n\n这样代码看起了就简洁了很多，解决了地狱回调的问题。\n\n6. Promise.all和Promise.race的区别的使用场景\n\n（1）Promise.all \n\nPromise.all可以将多个Promise实例包装成一个新的Promise实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被reject失败状态的值。\n\nPromise.all中传入的是数组，返回的也是是数组，并且会将进行映射，传入的promise对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。\n\n需要注意，Promise.all获得的成功结果的数组里面的数据顺序和Promise.all接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用Promise.all来解决。\n\n（2）Promise.race\n\n顾名思义，Promse.race就是赛跑的意思，意思就是说，Promise.race([p1, p2, p3])里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：\n\n``` javascript\nPromise.race([promise1,timeOutPromise(5000)]).then(res=>{})\n\n```\n\n7. 对async/await 的理解\n\nasync/await其实是Generator 的语法糖，它能实现的效果都能用then链来实现，它是为优化then链而开发出来的。\n从字面上来看，async是“异步”的简写，await则为等待，所以很好理解async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定await只能出现在asnyc函数中，先来看看async函数返回了什么：\n\n``` javascript\nasync function testAsy(){\n   return 'hello world';\n}\nlet result = testAsy(); \nconsole.log(result)\n\n```\n\n所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve() 封装成 Promise 对象。\n\nasync 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：then() 链来处理这个 Promise 对象，就像这样：\n\n``` javascript\nasync function testAsy(){\n   return 'hello world'\n}\nlet result = testAsy() \nconsole.log(result)\nresult.then(v=>{\n    console.log(v)   // hello world\n})\n\n```\n\n那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 Promise.resolve(undefined)。\n\n联想一下 Promise 的特点——无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。\n\n注意：Promise.resolve(x) 可以看作是 new Promise(resolve => resolve(x)) 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。\n\n8. await 到底在等啥？\n\nawait 在等待什么呢？ 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。\n\n因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值——这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：\n\n``` javascript\nfunction getSomething() {\n    return \"something\";\n}\nasync function testAsync() {\n    return Promise.resolve(\"hello async\");\n}\nasync function test() {\n    const v1 = await getSomething();\n    const v2 = await testAsync();\n    console.log(v1, v2);\n}\ntest();\n\n```\n\nawait 表达式的运算结果取决于它等的是什么。\n\n- 如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n- 如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n来看一个例子：\n\n``` javascript\nfunction testAsy(x){\n   return new Promise(resolve=>{setTimeout(() => {\n       resolve(x);\n     }, 3000)\n    }\n   )\n}\nasync function testAwt(){    \n  let result =  await testAsy('hello world');\n  console.log(result);    // 3秒钟之后出现hello world\n  console.log('cuger')   // 3秒钟之后出现cug\n}\ntestAwt();\nconsole.log('cug')  //立即输出cug\n\n```\n\n9.  async/await的优势\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。\n\n假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：\n\n``` javascript\n/**\n * 传入参数 n，表示这个函数执行的时间（毫秒）\n * 执行的结果是 n + 200，这个值将用于下一步骤\n */\nfunction takeLongTime(n) {\n    return new Promise(resolve => {\n        setTimeout(() => resolve(n + 200), n);\n    });\n}\nfunction step1(n) {\n    console.log(`step1 with ${n}`);\n    return takeLongTime(n);\n}\nfunction step2(n) {\n    console.log(`step2 with ${n}`);\n    return takeLongTime(n);\n}\nfunction step3(n) {\n    console.log(`step3 with ${n}`);\n    return takeLongTime(n);\n}\n\n```\n\n现在用 Promise 方式来实现这三个步骤的处理：\n\n``` javascript\nfunction doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    step1(time1)\n        .then(time2 => step2(time2))\n        .then(time3 => step3(time3))\n        .then(result => {\n            console.log(`result is ${result}`);\n            console.timeEnd(\"doIt\");\n        });\n}\ndoIt();\n// c:\\var\\test>node --harmony_async_await .\n// step1 with 300\n// step2 with 500\n// step3 with 700\n// result is 900\n// doIt: 1507.251ms\n\n```\n\n输出结果 result 是 step3() 的参数 700 + 200 = 900。doIt() 顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和 console.time()/console.timeEnd() 计算的结果一致。\n\n如果用 async/await 来实现呢，会是这样：\n\n``` javascript\nasync function doIt() {\n    console.time(\"doIt\");\n    const time1 = 300;\n    const time2 = await step1(time1);\n    const time3 = await step2(time2);\n    const result = await step3(time3);\n    console.log(`result is ${result}`);\n    console.timeEnd(\"doIt\");\n}\ndoIt();\n\n```\n\n结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样\n\n10. async/await对比Promise的优势\n\n- 代码读起来更加同步，Promise虽然摆脱了回调地狱，但是then的链式调⽤也会带来额外的阅读负担\n- Promise传递中间值⾮常麻烦，⽽async/await⼏乎是同步的写法，⾮常优雅\n- 错误处理友好，async/await可以⽤成熟的try/catch，Promise的错误捕获⾮常冗余\n- 调试友好，Promise的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then代码块中使⽤调试器的步进(step-over)功能，调试器并不会进⼊后续的.then代码块，因为调试器只能跟踪同步代码的每⼀步。\n\n11. async/await 如何捕获异常\n\n``` javascript\nasync function fn(){\n    try{\n        let a = await Promise.reject('error')\n    }catch(error){\n        console.log(error)\n    }\n}\n\n```\n\n八、面向对象\n\n1. 对象创建的方式有哪些？\n\n一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：\n\n（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。\n\n（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。\n\n（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。\n\n（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。\n\n（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。\n\n（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。\n\n2. 对象继承的方式有哪些？\n\n（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。\n\n（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。\n\n（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。\n\n（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create() 方法就是原型式继承的实现。缺点与原型链方式相同。\n\n（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。\n\n（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。\n\n九、垃圾回收与内存泄漏\n\n1. 浏览器的垃圾回收机制\n\n（1）垃圾回收的概念\n\n垃圾回收：JavaScript代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。\n\n回收机制：\n\n- Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。\n- JavaScript中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。\n- 不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。\n\n（2）垃圾回收的方式\n\n浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。\n\n 1）标记清除\n\n- 标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量“进入环境”，被标记为“进入环境”的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为“离开环境”，被标记为“离开环境”的变量会被内存释放。\n- 垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。\n\n 2）引用计数\n\n - 另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减1。当这个引用次数变为0时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。\n - 这种方法会引起循环引用的问题：例如： obj1和obj2通过属性进行相互引用，两个对象的引用次数都是2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1和obj2还将会继续存在，因此它们的引用次数永远不会是0，就会引起循环引用。\n\n``` javascript\nfunction fun() {\n    let obj1 = {};\n    let obj2 = {};\n    obj1.a = obj2; // obj1 引用 obj2\n    obj2.a = obj1; // obj2 引用 obj1\n}\n\n```\n\n这种情况下，就要手动释放变量占用的内存：\n\n``` javascript\nobj1.a =  null\nobj2.a =  null\n\n```\n\n（3）减少垃圾回收\n虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。\n\n- 对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为[ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为0，以此来达到清空数组的目的。\n- 对object进行优化： 对象尽量复用，对于不再使用的对象，就将其设置为null，尽快被回收。\n- 对函数进行优化： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。\n\n2. 哪些情况会导致内存泄漏\n\n以下四种情况会造成内存的泄漏：\n\n- 意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。\n- 被遗忘的计时器或回调函数： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。\n- 脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。\n- 闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。\n\nP.S. 引用是指向对象的变量。","slug":"前端学习之JS篇（三）","published":1,"updated":"2025-01-12T09:51:56.394Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfh001omcuydvi93gca","content":"<h3 id=\"六-thiscallapplybind\"><a class=\"anchor\" href=\"#六-thiscallapplybind\">#</a> 六、this/call/apply/bind</h3>\n<ol>\n<li>对 this 对象的理解</li>\n</ol>\n<p>this 是执行上下文中的一个属性，它指向<strong>最后一次调用这个方法的对象</strong>。在实际开发中，this 的指向可以通过四种调用模式来判断。</p>\n<ul>\n<li>\n<p>第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</p>\n</li>\n<li>\n<p>第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</p>\n</li>\n<li>\n<p>第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</p>\n</li>\n<li>\n<p>第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call () 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</p>\n</li>\n</ul>\n<p>这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。</p>\n<ol start=\"2\">\n<li>call () 和 apply () 的区别？</li>\n</ol>\n<p>它们的作用一模一样，区别仅在于传入参数的形式的不同。</p>\n<ul>\n<li>\n<p>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。</p>\n</li>\n<li>\n<p>call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>实现 call、apply 及 bind 函数</li>\n</ol>\n<p>（1）call 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性。</li>\n<li>返回结果。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 判断调用对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!</span> <span class=\"token operator\">==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 判断 context 是否传入，如果未传入则设置为 window</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token comment\">// 将调用函数设为对象的方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 将属性删除</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（2）apply 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>判断参数值是否传入</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性</li>\n<li>返回结果</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 判断调用对象是否为函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 判断 context 是否存在，如果未传入则为 window</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 将函数设为对象的方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 调用方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 将属性删除</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（3）bind 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>保存当前函数的引用，获取其余传入参数值。</li>\n<li>创建一个函数返回</li>\n<li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 判断调用对象是否为函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 根据调用方式，传入不同绑定值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Fn</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"七-异步编程\"><a class=\"anchor\" href=\"#七-异步编程\">#</a> 七、异步编程</h3>\n<ol>\n<li>异步编程的实现方式？</li>\n</ol>\n<ul>\n<li>\n<p>回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</p>\n</li>\n<li>\n<p>Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</p>\n</li>\n<li>\n<p>generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。</p>\n</li>\n<li>\n<p>async 函数 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>setTimeout、Promise、Async/Await 的区别</li>\n</ol>\n<p>setTimeout、Promise 和 Async/Await 都是 JavaScript 中用于处理异步操作的机制，但它们在使用方式、语法和功能上有所不同。</p>\n<p>setTimeout 是一个全局函数，用于在指定的延迟时间后执行一个函数或一段代码。它是异步的，但不涉及任何状态管理或链式调用。</p>\n<p>Promise 是一个用于处理异步操作的对象，表示一个最终会完成（或失败）的操作，并返回一个值。它可以用于更好地管理异步操作的链式调用和错误处理。</p>\n<p>Async/Await 是 Promise 的语法糖，用于简化异步代码的编写。它使得异步代码看起来更像同步代码，提高了代码的可读性和可维护性。</p>\n<p>（1）setTimeout</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//1. 打印 script start</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'settimeout'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 4. 打印 settimeout</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//3. 打印 script start</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 输出顺序：script start->script end->settimeout</span></pre></td></tr></table></figure><p>（2）Promise</p>\n<p>Promise 本身是同步的立即执行函数， 当在 executor 中执行 resolve 或者 reject 的时候，此时是异步操作， 会先执行 then/catch 等，当主栈完成后，才会去调用 resolve/reject 中存放的方法执行，打印 p 的时候，是打印的返回结果，一个 Promise 实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'settimeout'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span></pre></td></tr></table></figure><p>当 JS 主线程执行到 Promise 对象时：</p>\n<ul>\n<li>promise1.then () 的回调就是一个 task</li>\n<li>promise1 是 resolved 或 rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue</li>\n<li>promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个 (可能下一个) 回合的 microtask queue 中</li>\n<li>setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况</li>\n</ul>\n<p>（3）async/await</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 输出顺序：script start->async1 start->async2->script end->async1 end</span></pre></td></tr></table></figure><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>func1 的运行结果其实就是一个 Promise 对象。因此也可以使用 then 来处理后续逻辑。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 30</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>await 的含义为等待，也就是 async 函数需要等待 await 后的函数执行完成并且有了返回结果（Promise 对象）之后，才能继续执行下面的代码。await 通过返回一个 Promise 对象来实现同步的效果。</p>\n<ol start=\"3\">\n<li>对 Promise 的理解</li>\n</ol>\n<p>Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。</p>\n<p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p>（1）Promise 的实例有三个状态:</p>\n<ul>\n<li>pending（进行中）</li>\n<li>Resolved（已完成）</li>\n<li>Rejected（已拒绝）</li>\n</ul>\n<p>当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了状态就变成了 Resolved、没有完成失败了就变成了 Rejected。</p>\n<p>（2）Promise 的实例有两个过程：</p>\n<ul>\n<li>pending -&gt; fulfilled : Resolved（已完成）</li>\n<li>pending -&gt; rejected：Rejected（已拒绝）</li>\n</ul>\n<p>注意：一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n<p>Promise 的特点：</p>\n<ul>\n<li>\n<p>对象的状态不受外界影响。promise 对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是 promise 这个名字的由来 ——“承诺”；</p>\n</li>\n<li>\n<p>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能：从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved（已定型）。如果改变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。</p>\n</li>\n</ul>\n<p>Promise 的缺点：</p>\n<ul>\n<li>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</li>\n<li>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</li>\n<li>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li>\n</ul>\n<p>总结： Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve () 和 reject () 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。</p>\n<p>注意： 在构造 Promise 的时候，构造函数内部的代码是立即执行的</p>\n<ol start=\"4\">\n<li>Promise 的基本用法</li>\n</ol>\n<p>（1）创建 Promise 对象</p>\n<p>Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。</p>\n<p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ... some code</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异步操作成功 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般情况下都会使用 new Promise () 来创建 promise 对象，但是也可以使用 promise.resolve 和 promise.reject 这两个方法：</p>\n<ul>\n<li>Promise.resolve</li>\n</ul>\n<p>Promise.resolve (value) 的返回值也是一个 promise 对象，可以对返回值进行.then 调用，代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印出 11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>resolve (11) 代码中，会让 promise 对象进入确定 (resolve 状态)，并将参数 11 传递给后面的 then 所指定的 onFulfilled 函数；</p>\n<p>创建 promise 对象可以使用 new Promise 的形式创建对象，也可以使用 Promise.resolve (value) 的形式创建 promise 对象；</p>\n<ul>\n<li>Promise.reject</li>\n</ul>\n<p>Promise.reject 也是 new Promise 的快捷形式，也创建一个 promise 对象。代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>“我错了，请原谅俺！！”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>就是下面的代码 new Promise 的简单形式：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我错了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面是使用 resolve 方法和 reject 方法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">testPromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ready</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ready<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No thanks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 方法调用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">testPromise</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的代码的含义是给 testPromise 方法传递一个参数，返回一个 promise 对象，如果为 true 的话，那么调用 promise 对象中的 resolve () 方法，并且把其中的参数传递给后面的 then 第一个函数内，因此打印出 “hello world”, 如果为 false 的话，会调用 promise 对象中的 reject () 方法，则会进入 then 的第二个函数内，会打印 No thanks；</p>\n<p>（2）Promise 方法</p>\n<p>Promise 有五个常用的方法：then ()、catch ()、all ()、race ()、finally。下面就来看一下这些方法。</p>\n<ul>\n<li>\n<ol>\n<li>then()</li>\n</ol>\n</li>\n</ul>\n<p>当 Promise 执行的内容符合成功条件时，调用 resolve 函数，失败就调用 reject 函数。Promise 创建完了，那该如何调用呢？</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// success</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// failure</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 resolved 时调用，第二个回调函数是 Promise 对象的状态变为 rejected 时调用。其中第二个参数可以省略。 then 方法返回的是一个新的 Promise 实例（不是原来那个 Promise 实例）。因此可以采用链式写法，即 then 方法后面再调用另一个 then 方法。</p>\n<p>当要写有顺序的异步事件时，需要串行时，可以这样写：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那当要写的事件没有顺序或者关系时，还如何写呢？可以使用 all 方法来解决。</p>\n<ul>\n<li>\n<ol start=\"2\">\n<li>catch()</li>\n</ol>\n</li>\n</ul>\n<p>Promise 对象除了有 then 方法，还有一个 catch 方法，该方法相当于 then 方法的第二个参数，指向 reject 的回调函数。不过 catch 方法还有一个作用，就是在执行 resolve 回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入 catch 方法中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"3\">\n<li>all()</li>\n</ol>\n</li>\n</ul>\n<p>all 方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个 promise 对象。<br />\n当数组中所有的 promise 的状态都达到 resolved 的时候，all 方法的状态就会变成 resolved，如果有一个状态变成了 rejected，那么 all 方法的状态就会变成 rejected。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 结果为：[1,2,3] </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>调用 all 方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个 promise 对象 resolve 执行时的值。</p>\n<ul>\n<li>\n<ol start=\"4\">\n<li>race()</li>\n</ol>\n</li>\n</ul>\n<p>race 方法和 all 一样，接受的参数是一个每项都是 promise 的数组，但是与 all 不同的是，当最先执行完的事件执行完之后，就直接返回该 promise 对象的值。如果第一个 promise 对象状态变成 resolved，那自身的状态变成了 resolved；反之第一个 promise 变成 rejected，那自身状态就会变成 rejected。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 结果：2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">rej</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那么 race 方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span><span class=\"token function\">timeOutPromise</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"5\">\n<li>finally()</li>\n</ol>\n</li>\n</ul>\n<p>finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，不管 promise 最后的状态，在执行完 then 或 catch 指定的回调函数以后，都会执行 finally 方法指定的回调函数。</p>\n<p>下面是一个例子，服务器使用 Promise 处理请求，然后使用 finally 方法关掉服务器。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>finally 方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是 fulfilled 还是 rejected。这表明，finally 方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。finally 本质上是 then 方法的特例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，如果不使用 finally 方法，同样的语句需要为成功和失败两种情况各写一次。有了 finally 方法，则只需要写一次。</p>\n<ol start=\"5\">\n<li>Promise 解决了什么问题</li>\n</ol>\n<p>在工作中经常会碰到这样一个需求，比如我使用 ajax 发一个 A 请求后，成功后拿到数据，需要把数据传给 B 请求；那么需要如下编写代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面的代码有如下缺点：</p>\n<ul>\n<li>后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个 ajax 请求嵌套的情况，代码不够直观。</li>\n<li>如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。</li>\n</ul>\n<p>Promise 出现之后，代码变成这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样代码看起了就简洁了很多，解决了地狱回调的问题。</p>\n<ol start=\"6\">\n<li>Promise.all 和 Promise.race 的区别的使用场景</li>\n</ol>\n<p>（1）Promise.all</p>\n<p>Promise.all 可以将多个 Promise 实例包装成一个新的 Promise 实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被 reject 失败状态的值。</p>\n<p>Promise.all 中传入的是数组，返回的也是是数组，并且会将进行映射，传入的 promise 对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</p>\n<p>需要注意，Promise.all 获得的成功结果的数组里面的数据顺序和 Promise.all 接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用 Promise.all 来解决。</p>\n<p>（2）Promise.race</p>\n<p>顾名思义，Promse.race 就是赛跑的意思，意思就是说，Promise.race ([p1, p2, p3]) 里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span><span class=\"token function\">timeOutPromise</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>对 async/await 的理解</li>\n</ol>\n<p>async/await 其实是 Generator 的语法糖，它能实现的效果都能用 then 链来实现，它是为优化 then 链而开发出来的。<br />\n从字面上来看，async 是 “异步” 的简写，await 则为等待，所以很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在 asnyc 函数中，先来看看 async 函数返回了什么：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve () 封装成 Promise 对象。</p>\n<p>async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：then () 链来处理这个 Promise 对象，就像这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// hello world</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 Promise.resolve (undefined)。</p>\n<p>联想一下 Promise 的特点 —— 无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p>\n<p>注意：Promise.resolve (x) 可以看作是 new Promise (resolve =&gt; resolve (x)) 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。</p>\n<ol start=\"8\">\n<li>await 到底在等啥？</li>\n</ol>\n<p>await 在等待什么呢？ 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>\n<p>因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值 —— 这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"something\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello async\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> v1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> v2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>await 表达式的运算结果取决于它等的是什么。</p>\n<ul>\n<li>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</li>\n<li>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</li>\n</ul>\n<p>来看一个例子：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span>  <span class=\"token keyword\">await</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 3 秒钟之后出现 hello world</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cuger'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 3 秒钟之后出现 cug</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">testAwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cug'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 立即输出 cug</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>async/await 的优势<br />\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</li>\n</ol>\n<p>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 传入参数 n，表示这个函数执行的时间（毫秒）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 执行的结果是 n + 200，这个值将用于下一步骤</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step1 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step2 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step3 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> time1 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time2</span> <span class=\"token operator\">=></span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span>time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time3</span> <span class=\"token operator\">=></span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>time3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">result is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// c:\\var\\test>node --harmony_async_await .</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// step1 with 300</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// step2 with 500</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// step3 with 700</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// result is 900</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// doIt: 1507.251ms</span></pre></td></tr></table></figure><p>输出结果 result 是 step3 () 的参数 700 + 200 = 900。doIt () 顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和 console.time ()/console.timeEnd () 计算的结果一致。</p>\n<p>如果用 async/await 来实现呢，会是这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> time1 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> time2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> time3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span>time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>time3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">result is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<ol start=\"10\">\n<li>async/await 对比 Promise 的优势</li>\n</ol>\n<ul>\n<li>代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是 then 的链式调⽤也会带来额外的阅读负担</li>\n<li>Promise 传递中间值⾮常麻烦，⽽ async/await ⼏乎是同步的写法，⾮常优雅</li>\n<li>错误处理友好，async/await 可以⽤成熟的 try/catch，Promise 的错误捕获⾮常冗余</li>\n<li>调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进 (step-over) 功能，调试器并不会进⼊后续的.then 代码块，因为调试器只能跟踪同步代码的每⼀步。</li>\n</ul>\n<ol start=\"11\">\n<li>async/await 如何捕获异常</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>八、面向对象</p>\n<ol>\n<li>对象创建的方式有哪些？</li>\n</ol>\n<p>一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js 和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：</p>\n<p>（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。</p>\n<p>（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。</p>\n<p>（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。</p>\n<p>（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。</p>\n<p>（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。</p>\n<p>（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。</p>\n<ol start=\"2\">\n<li>对象继承的方式有哪些？</li>\n</ol>\n<p>（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</p>\n<p>（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</p>\n<p>（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</p>\n<p>（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create () 方法就是原型式继承的实现。缺点与原型链方式相同。</p>\n<p>（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。</p>\n<p>（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</p>\n<p>九、垃圾回收与内存泄漏</p>\n<ol>\n<li>浏览器的垃圾回收机制</li>\n</ol>\n<p>（1）垃圾回收的概念</p>\n<p>垃圾回收：JavaScript 代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。</p>\n<p>回收机制：</p>\n<ul>\n<li>Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。</li>\n<li>JavaScript 中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。</li>\n<li>不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。</li>\n</ul>\n<p>（2）垃圾回收的方式</p>\n<p>浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。</p>\n<p>1）标记清除</p>\n<ul>\n<li>标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量 “进入环境”，被标记为 “进入环境” 的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为 “离开环境”，被标记为 “离开环境” 的变量会被内存释放。</li>\n<li>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</li>\n</ul>\n<p>2）引用计数</p>\n<ul>\n<li>另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减 1。当这个引用次数变为 0 时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。</li>\n<li>这种方法会引起循环引用的问题：例如： obj1 和 obj2 通过属性进行相互引用，两个对象的引用次数都是 2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1 和 obj2 还将会继续存在，因此它们的引用次数永远不会是 0，就会引起循环引用。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    obj1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> obj2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//obj1 引用 obj2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    obj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//obj2 引用 obj1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种情况下，就要手动释放变量占用的内存：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span>  <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>obj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span>  <span class=\"token keyword\">null</span></pre></td></tr></table></figure><p>（3）减少垃圾回收<br />\n虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。</p>\n<ul>\n<li>对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为 [ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为 0，以此来达到清空数组的目的。</li>\n<li>对 object 进行优化： 对象尽量复用，对于不再使用的对象，就将其设置为 null，尽快被回收。</li>\n<li>对函数进行优化： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。</li>\n</ul>\n<ol start=\"2\">\n<li>哪些情况会导致内存泄漏</li>\n</ol>\n<p>以下四种情况会造成内存的泄漏：</p>\n<ul>\n<li>意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</li>\n<li>被遗忘的计时器或回调函数： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li>\n<li>脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</li>\n<li>闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li>\n</ul>\n<p>P.S. 引用是指向对象的变量。</p>\n","length":19461,"excerpt":"","more":"<h3 id=\"六-thiscallapplybind\"><a class=\"anchor\" href=\"#六-thiscallapplybind\">#</a> 六、this/call/apply/bind</h3>\n<ol>\n<li>对 this 对象的理解</li>\n</ol>\n<p>this 是执行上下文中的一个属性，它指向<strong>最后一次调用这个方法的对象</strong>。在实际开发中，this 的指向可以通过四种调用模式来判断。</p>\n<ul>\n<li>\n<p>第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</p>\n</li>\n<li>\n<p>第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</p>\n</li>\n<li>\n<p>第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</p>\n</li>\n<li>\n<p>第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call () 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</p>\n</li>\n</ul>\n<p>这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。</p>\n<ol start=\"2\">\n<li>call () 和 apply () 的区别？</li>\n</ol>\n<p>它们的作用一模一样，区别仅在于传入参数的形式的不同。</p>\n<ul>\n<li>\n<p>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。</p>\n</li>\n<li>\n<p>call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>实现 call、apply 及 bind 函数</li>\n</ol>\n<p>（1）call 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性。</li>\n<li>返回结果。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 判断调用对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!</span> <span class=\"token operator\">==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 判断 context 是否传入，如果未传入则设置为 window</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token comment\">// 将调用函数设为对象的方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 将属性删除</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（2）apply 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>判断参数值是否传入</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性</li>\n<li>返回结果</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 判断调用对象是否为函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 判断 context 是否存在，如果未传入则为 window</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 将函数设为对象的方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 调用方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 将属性删除</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（3）bind 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>保存当前函数的引用，获取其余传入参数值。</li>\n<li>创建一个函数返回</li>\n<li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 判断调用对象是否为函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 根据调用方式，传入不同绑定值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Fn</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"七-异步编程\"><a class=\"anchor\" href=\"#七-异步编程\">#</a> 七、异步编程</h3>\n<ol>\n<li>异步编程的实现方式？</li>\n</ol>\n<ul>\n<li>\n<p>回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</p>\n</li>\n<li>\n<p>Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</p>\n</li>\n<li>\n<p>generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。</p>\n</li>\n<li>\n<p>async 函数 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>setTimeout、Promise、Async/Await 的区别</li>\n</ol>\n<p>setTimeout、Promise 和 Async/Await 都是 JavaScript 中用于处理异步操作的机制，但它们在使用方式、语法和功能上有所不同。</p>\n<p>setTimeout 是一个全局函数，用于在指定的延迟时间后执行一个函数或一段代码。它是异步的，但不涉及任何状态管理或链式调用。</p>\n<p>Promise 是一个用于处理异步操作的对象，表示一个最终会完成（或失败）的操作，并返回一个值。它可以用于更好地管理异步操作的链式调用和错误处理。</p>\n<p>Async/Await 是 Promise 的语法糖，用于简化异步代码的编写。它使得异步代码看起来更像同步代码，提高了代码的可读性和可维护性。</p>\n<p>（1）setTimeout</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//1. 打印 script start</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'settimeout'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 4. 打印 settimeout</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//3. 打印 script start</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 输出顺序：script start->script end->settimeout</span></pre></td></tr></table></figure><p>（2）Promise</p>\n<p>Promise 本身是同步的立即执行函数， 当在 executor 中执行 resolve 或者 reject 的时候，此时是异步操作， 会先执行 then/catch 等，当主栈完成后，才会去调用 resolve/reject 中存放的方法执行，打印 p 的时候，是打印的返回结果，一个 Promise 实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'settimeout'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span></pre></td></tr></table></figure><p>当 JS 主线程执行到 Promise 对象时：</p>\n<ul>\n<li>promise1.then () 的回调就是一个 task</li>\n<li>promise1 是 resolved 或 rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue</li>\n<li>promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个 (可能下一个) 回合的 microtask queue 中</li>\n<li>setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况</li>\n</ul>\n<p>（3）async/await</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 输出顺序：script start->async1 start->async2->script end->async1 end</span></pre></td></tr></table></figure><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>func1 的运行结果其实就是一个 Promise 对象。因此也可以使用 then 来处理后续逻辑。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 30</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>await 的含义为等待，也就是 async 函数需要等待 await 后的函数执行完成并且有了返回结果（Promise 对象）之后，才能继续执行下面的代码。await 通过返回一个 Promise 对象来实现同步的效果。</p>\n<ol start=\"3\">\n<li>对 Promise 的理解</li>\n</ol>\n<p>Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。</p>\n<p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p>（1）Promise 的实例有三个状态:</p>\n<ul>\n<li>pending（进行中）</li>\n<li>Resolved（已完成）</li>\n<li>Rejected（已拒绝）</li>\n</ul>\n<p>当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了状态就变成了 Resolved、没有完成失败了就变成了 Rejected。</p>\n<p>（2）Promise 的实例有两个过程：</p>\n<ul>\n<li>pending -&gt; fulfilled : Resolved（已完成）</li>\n<li>pending -&gt; rejected：Rejected（已拒绝）</li>\n</ul>\n<p>注意：一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n<p>Promise 的特点：</p>\n<ul>\n<li>\n<p>对象的状态不受外界影响。promise 对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是 promise 这个名字的由来 ——“承诺”；</p>\n</li>\n<li>\n<p>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能：从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved（已定型）。如果改变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。</p>\n</li>\n</ul>\n<p>Promise 的缺点：</p>\n<ul>\n<li>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</li>\n<li>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</li>\n<li>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li>\n</ul>\n<p>总结： Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve () 和 reject () 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。</p>\n<p>注意： 在构造 Promise 的时候，构造函数内部的代码是立即执行的</p>\n<ol start=\"4\">\n<li>Promise 的基本用法</li>\n</ol>\n<p>（1）创建 Promise 对象</p>\n<p>Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。</p>\n<p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ... some code</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异步操作成功 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般情况下都会使用 new Promise () 来创建 promise 对象，但是也可以使用 promise.resolve 和 promise.reject 这两个方法：</p>\n<ul>\n<li>Promise.resolve</li>\n</ul>\n<p>Promise.resolve (value) 的返回值也是一个 promise 对象，可以对返回值进行.then 调用，代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印出 11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>resolve (11) 代码中，会让 promise 对象进入确定 (resolve 状态)，并将参数 11 传递给后面的 then 所指定的 onFulfilled 函数；</p>\n<p>创建 promise 对象可以使用 new Promise 的形式创建对象，也可以使用 Promise.resolve (value) 的形式创建 promise 对象；</p>\n<ul>\n<li>Promise.reject</li>\n</ul>\n<p>Promise.reject 也是 new Promise 的快捷形式，也创建一个 promise 对象。代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>“我错了，请原谅俺！！”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>就是下面的代码 new Promise 的简单形式：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我错了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面是使用 resolve 方法和 reject 方法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">testPromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ready</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ready<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No thanks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 方法调用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">testPromise</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的代码的含义是给 testPromise 方法传递一个参数，返回一个 promise 对象，如果为 true 的话，那么调用 promise 对象中的 resolve () 方法，并且把其中的参数传递给后面的 then 第一个函数内，因此打印出 “hello world”, 如果为 false 的话，会调用 promise 对象中的 reject () 方法，则会进入 then 的第二个函数内，会打印 No thanks；</p>\n<p>（2）Promise 方法</p>\n<p>Promise 有五个常用的方法：then ()、catch ()、all ()、race ()、finally。下面就来看一下这些方法。</p>\n<ul>\n<li>\n<ol>\n<li>then()</li>\n</ol>\n</li>\n</ul>\n<p>当 Promise 执行的内容符合成功条件时，调用 resolve 函数，失败就调用 reject 函数。Promise 创建完了，那该如何调用呢？</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// success</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// failure</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 resolved 时调用，第二个回调函数是 Promise 对象的状态变为 rejected 时调用。其中第二个参数可以省略。 then 方法返回的是一个新的 Promise 实例（不是原来那个 Promise 实例）。因此可以采用链式写法，即 then 方法后面再调用另一个 then 方法。</p>\n<p>当要写有顺序的异步事件时，需要串行时，可以这样写：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那当要写的事件没有顺序或者关系时，还如何写呢？可以使用 all 方法来解决。</p>\n<ul>\n<li>\n<ol start=\"2\">\n<li>catch()</li>\n</ol>\n</li>\n</ul>\n<p>Promise 对象除了有 then 方法，还有一个 catch 方法，该方法相当于 then 方法的第二个参数，指向 reject 的回调函数。不过 catch 方法还有一个作用，就是在执行 resolve 回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入 catch 方法中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"3\">\n<li>all()</li>\n</ol>\n</li>\n</ul>\n<p>all 方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个 promise 对象。<br />\n当数组中所有的 promise 的状态都达到 resolved 的时候，all 方法的状态就会变成 resolved，如果有一个状态变成了 rejected，那么 all 方法的状态就会变成 rejected。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 结果为：[1,2,3] </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>调用 all 方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个 promise 对象 resolve 执行时的值。</p>\n<ul>\n<li>\n<ol start=\"4\">\n<li>race()</li>\n</ol>\n</li>\n</ul>\n<p>race 方法和 all 一样，接受的参数是一个每项都是 promise 的数组，但是与 all 不同的是，当最先执行完的事件执行完之后，就直接返回该 promise 对象的值。如果第一个 promise 对象状态变成 resolved，那自身的状态变成了 resolved；反之第一个 promise 变成 rejected，那自身状态就会变成 rejected。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 结果：2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">rej</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那么 race 方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span><span class=\"token function\">timeOutPromise</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"5\">\n<li>finally()</li>\n</ol>\n</li>\n</ul>\n<p>finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，不管 promise 最后的状态，在执行完 then 或 catch 指定的回调函数以后，都会执行 finally 方法指定的回调函数。</p>\n<p>下面是一个例子，服务器使用 Promise 处理请求，然后使用 finally 方法关掉服务器。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>finally 方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是 fulfilled 还是 rejected。这表明，finally 方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。finally 本质上是 then 方法的特例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，如果不使用 finally 方法，同样的语句需要为成功和失败两种情况各写一次。有了 finally 方法，则只需要写一次。</p>\n<ol start=\"5\">\n<li>Promise 解决了什么问题</li>\n</ol>\n<p>在工作中经常会碰到这样一个需求，比如我使用 ajax 发一个 A 请求后，成功后拿到数据，需要把数据传给 B 请求；那么需要如下编写代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面的代码有如下缺点：</p>\n<ul>\n<li>后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个 ajax 请求嵌套的情况，代码不够直观。</li>\n<li>如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。</li>\n</ul>\n<p>Promise 出现之后，代码变成这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样代码看起了就简洁了很多，解决了地狱回调的问题。</p>\n<ol start=\"6\">\n<li>Promise.all 和 Promise.race 的区别的使用场景</li>\n</ol>\n<p>（1）Promise.all</p>\n<p>Promise.all 可以将多个 Promise 实例包装成一个新的 Promise 实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被 reject 失败状态的值。</p>\n<p>Promise.all 中传入的是数组，返回的也是是数组，并且会将进行映射，传入的 promise 对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</p>\n<p>需要注意，Promise.all 获得的成功结果的数组里面的数据顺序和 Promise.all 接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用 Promise.all 来解决。</p>\n<p>（2）Promise.race</p>\n<p>顾名思义，Promse.race 就是赛跑的意思，意思就是说，Promise.race ([p1, p2, p3]) 里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span><span class=\"token function\">timeOutPromise</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>对 async/await 的理解</li>\n</ol>\n<p>async/await 其实是 Generator 的语法糖，它能实现的效果都能用 then 链来实现，它是为优化 then 链而开发出来的。<br />\n从字面上来看，async 是 “异步” 的简写，await 则为等待，所以很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在 asnyc 函数中，先来看看 async 函数返回了什么：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve () 封装成 Promise 对象。</p>\n<p>async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：then () 链来处理这个 Promise 对象，就像这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// hello world</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 Promise.resolve (undefined)。</p>\n<p>联想一下 Promise 的特点 —— 无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p>\n<p>注意：Promise.resolve (x) 可以看作是 new Promise (resolve =&gt; resolve (x)) 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。</p>\n<ol start=\"8\">\n<li>await 到底在等啥？</li>\n</ol>\n<p>await 在等待什么呢？ 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>\n<p>因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值 —— 这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"something\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello async\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> v1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> v2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>await 表达式的运算结果取决于它等的是什么。</p>\n<ul>\n<li>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</li>\n<li>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</li>\n</ul>\n<p>来看一个例子：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span>  <span class=\"token keyword\">await</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 3 秒钟之后出现 hello world</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cuger'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 3 秒钟之后出现 cug</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">testAwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cug'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 立即输出 cug</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>async/await 的优势<br />\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</li>\n</ol>\n<p>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 传入参数 n，表示这个函数执行的时间（毫秒）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 执行的结果是 n + 200，这个值将用于下一步骤</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step1 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step2 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step3 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> time1 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time2</span> <span class=\"token operator\">=></span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span>time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time3</span> <span class=\"token operator\">=></span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>time3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">result is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// c:\\var\\test>node --harmony_async_await .</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// step1 with 300</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// step2 with 500</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// step3 with 700</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// result is 900</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// doIt: 1507.251ms</span></pre></td></tr></table></figure><p>输出结果 result 是 step3 () 的参数 700 + 200 = 900。doIt () 顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和 console.time ()/console.timeEnd () 计算的结果一致。</p>\n<p>如果用 async/await 来实现呢，会是这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> time1 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> time2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> time3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span>time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>time3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">result is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<ol start=\"10\">\n<li>async/await 对比 Promise 的优势</li>\n</ol>\n<ul>\n<li>代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是 then 的链式调⽤也会带来额外的阅读负担</li>\n<li>Promise 传递中间值⾮常麻烦，⽽ async/await ⼏乎是同步的写法，⾮常优雅</li>\n<li>错误处理友好，async/await 可以⽤成熟的 try/catch，Promise 的错误捕获⾮常冗余</li>\n<li>调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进 (step-over) 功能，调试器并不会进⼊后续的.then 代码块，因为调试器只能跟踪同步代码的每⼀步。</li>\n</ul>\n<ol start=\"11\">\n<li>async/await 如何捕获异常</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>八、面向对象</p>\n<ol>\n<li>对象创建的方式有哪些？</li>\n</ol>\n<p>一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js 和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：</p>\n<p>（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。</p>\n<p>（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。</p>\n<p>（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。</p>\n<p>（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。</p>\n<p>（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。</p>\n<p>（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。</p>\n<ol start=\"2\">\n<li>对象继承的方式有哪些？</li>\n</ol>\n<p>（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</p>\n<p>（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</p>\n<p>（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</p>\n<p>（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create () 方法就是原型式继承的实现。缺点与原型链方式相同。</p>\n<p>（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。</p>\n<p>（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</p>\n<p>九、垃圾回收与内存泄漏</p>\n<ol>\n<li>浏览器的垃圾回收机制</li>\n</ol>\n<p>（1）垃圾回收的概念</p>\n<p>垃圾回收：JavaScript 代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。</p>\n<p>回收机制：</p>\n<ul>\n<li>Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。</li>\n<li>JavaScript 中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。</li>\n<li>不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。</li>\n</ul>\n<p>（2）垃圾回收的方式</p>\n<p>浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。</p>\n<p>1）标记清除</p>\n<ul>\n<li>标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量 “进入环境”，被标记为 “进入环境” 的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为 “离开环境”，被标记为 “离开环境” 的变量会被内存释放。</li>\n<li>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</li>\n</ul>\n<p>2）引用计数</p>\n<ul>\n<li>另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减 1。当这个引用次数变为 0 时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。</li>\n<li>这种方法会引起循环引用的问题：例如： obj1 和 obj2 通过属性进行相互引用，两个对象的引用次数都是 2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1 和 obj2 还将会继续存在，因此它们的引用次数永远不会是 0，就会引起循环引用。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    obj1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> obj2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//obj1 引用 obj2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    obj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//obj2 引用 obj1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种情况下，就要手动释放变量占用的内存：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span>  <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>obj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span>  <span class=\"token keyword\">null</span></pre></td></tr></table></figure><p>（3）减少垃圾回收<br />\n虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。</p>\n<ul>\n<li>对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为 [ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为 0，以此来达到清空数组的目的。</li>\n<li>对 object 进行优化： 对象尽量复用，对于不再使用的对象，就将其设置为 null，尽快被回收。</li>\n<li>对函数进行优化： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。</li>\n</ul>\n<ol start=\"2\">\n<li>哪些情况会导致内存泄漏</li>\n</ol>\n<p>以下四种情况会造成内存的泄漏：</p>\n<ul>\n<li>意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</li>\n<li>被遗忘的计时器或回调函数： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li>\n<li>脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</li>\n<li>闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li>\n</ul>\n<p>P.S. 引用是指向对象的变量。</p>\n"},{"title":"前端学习汇总-计算机网络篇（一）","date":"2024-12-31T06:06:28.000Z","_content":"\n## 计算机网络知识总结篇：HTTP，HTTPS\n### 一、HTTP协议\n\n#### 1. GET和POST的请求的区别 \nPost 和 Get 是 HTTP 请求的两种方法，其区别如下：\n- 应用场景： GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。\n- 是否缓存： 因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。\n- 发送的报文格式： Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。\n- 安全性： Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。\n- 请求长度： 浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。\n- 参数类型： post 的参数传递支持更多的数据类型。\n\n#### 2. POST和PUT请求的区别\n- PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。（可以理解为是**更新数据**）\n- POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是**创建数据**）\n\n#### 3.常见的HTTP请求头和响应头\nHTTP Request Header 常见的请求头：\n- Accept:浏览器能够处理的内容类型\n- Accept-Charset:浏览器能够显示的字符集\n- Accept-Encoding：浏览器能够处理的压缩编码\n- Accept-Language：浏览器当前设置的语言\n- Connection：浏览器与服务器之间连接的类型\n- Cookie：当前页面设置的任何Cookie\n- Host：发出请求的页面所在的域\n- Referer：发出请求的页面的URL\n- User-Agent：浏览器的用户代理字符串\n\nHTTP Responses Header 常见的响应头：\n- Date：表示消息发送的时间，时间的描述格式由rfc822定义\n- server:服务器名称\n- Connection：浏览器与服务器之间连接的类型\n- Cache-Control：控制HTTP缓存\n- content-type:表示后面的文档属于什么MIME类型\n\n常见的 Content-Type 属性值有以下四种：\n（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL转码。\n（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。\n（3）application/json：服务器消息主体是序列化后的 JSON 字符串。\n（4）text/xml：该种方式主要用来提交 XML 格式的数据。\n\n#### 4.HTTP状态码304是多好还是少好\n服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回304，此时客户端调用缓存内容，不必进行二次下载。\n\n状态码304不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应。\n\n搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于304的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。\n\n产生较多304状态码的原因：\n- 页面更新周期长或不更新\n- 纯静态页面或强制生成静态html\n\n304状态码出现过多会造成以下问题：\n- 网站快照停止；\n- 收录减少；\n- 权重下降。\n\n#### 5. 常见的HTTP请求方法\n- GET: 向服务器获取数据；\n- POST：将实体提交到指定的资源，通常会造成服务器资源的修改；\n- PUT：上传文件，更新数据；\n- DELETE：删除服务器上的对象；\n- HEAD：获取报文首部，与GET相比，不返回报文主体部分；\n- OPTIONS：询问支持的请求方法，用来跨域请求；\n- CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；\n- TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。\n\n#### 6. OPTIONS请求方法及使用场景\nOPTIONS是除了GET和POST之外的其中一种 HTTP请求方法。\n\nOPTIONS方法是用于请求获得由Request-URI标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。该请求方法的响应不能缓存。\n\nOPTIONS请求方法的主要用途有两个：\n\n- 获取服务器支持的所有HTTP请求方法；\n- 用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。\n\n#### 7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？\nHTTP 1.0和 HTTP 1.1 有以下区别：\n- 连接方面，http1.0 默认使用非持久连接，而 http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。\n- 资源请求方面，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n- 缓存方面，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。\n- http1.1 中新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。因此有了 host 字段，这样就可以将请求发往到同一台服务器上的不同网站。\n- http1.1 相对于 http1.0 还新增了很多请求方法，如 PUT、HEAD、OPTIONS 等。\n\n#### 8. HTTP 1.1 和 HTTP 2.0 的区别\n- 二进制协议：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为\"帧\"，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。\n- 多路复用： HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了\"队头堵塞\"【1】的问题。\n- 数据流： HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。\n- 头信息压缩：HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。\n- 服务器推送：HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是http2下服务器主要推送的是静态资源，和WebSocket以及使用SSE等方式向客户端发送即时数据的推送是不同的。\n\nP.S.队头堵塞：\n队头堵塞是由HTTP基本的“请求-应答”模型所导致的。HTTP规定报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。\n\n#### 9. HTTP和HTTPS协议的区别\nHTTP和HTTPS协议的主要区别如下：\n- HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；\n- HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；\n- 使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；\n- HTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。\n\n#### 10. GET方法URL长度限制的原因\n实际上HTTP协议规范并没有对get方法请求的url长度进行限制，这个限制是特定的浏览器及服务器对它的限制。\nIE对URL长度的限制是2083字节(2K+35)。由于IE浏览器对URL长度的允许值是最小的，所以开发过程中，只要URL不超过2083字节，那么在所有浏览器中工作都不会有问题。\n\n``` javascript\nGET的长度值 = URL（2083）- （你的Domain+Path）-2（2是get请求中?=两个字符的长度）\n```\n下面看一下主流浏览器对get方法中url的长度限制范围：\n- Microsoft Internet Explorer (Browser)：IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。\n- Firefox (Browser)：对于Firefox浏览器URL的长度限制为 65,536 个字符。\n- Safari (Browser)：URL最大长度限制为 80,000 个字符。\n- Opera (Browser)：URL最大长度限制为 190,000 个字符。\n- Google (chrome)：URL最大长度限制为 8182 个字符。\n\n主流的服务器对get方法中url的长度限制范围：\n- Apache (Server)：能接受最大url长度为8192个字符。\n- Microsoft Internet Information Server(IIS)：能接受最大url的长度为16384个字符。\n\n根据上面的数据，可以知道，get方法中的URL长度最长不超过2083个字符，这样所有的浏览器和服务器都可能正常工作。\n\n#### 11. 当在浏览器中输入 Google.com 并且按下回车之后发生了什么？\n（1）解析URL： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。\n\n（2）缓存判断： 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。\n\n（3）DNS解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。\n\n（4）获取MAC地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。\n\n（5）TCP三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。\n\n（6）HTTPS握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。\n\n（7）返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。\n\n（8）页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。\n\n（9）TCP四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。\n\n#### 12. 对keep-alive的理解\nHTTP1.0 中默认是在每次请求/应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是短连接。\n当使用Keep-Alive模式时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接，这就是长连接。其使用方法如下：\n- HTTP1.0版本是默认没有Keep-alive的（也就是默认会发送keep-alive），所以要想连接得到保持，必须手动配置发送Connection: keep-alive字段。若想断开keep-alive连接，需发送Connection:close字段；\n- HTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送Connection：close首部字段。\n\nKeep-Alive的建立过程：\n- 客户端向服务器在发送请求报文同时在首部添加发送Connection字段\n- 服务器收到请求并处理 Connection字段\n- 服务器回送Connection:Keep-Alive字段给客户端\n- 客户端接收到Connection字段\n- Keep-Alive连接建立成功\n\n服务端自动断开过程（也就是没有keep-alive）：\n- 客户端向服务器只是发送内容报文（不包含Connection字段）\n- 服务器收到请求并处理\n- 服务器返回客户端请求的资源并关闭连接\n- 客户端接收资源，发现没有Connection字段，断开连接\n\n客户端请求断开连接过程：\n- 客户端向服务器发送Connection:close字段\n- 服务器收到请求并处理connection字段\n- 服务器回送响应资源并断开连接\n- 客户端接收资源并断开连接\n\n开启Keep-Alive的优点：\n- 较少的CPU和内存的使⽤（由于同时打开的连接的减少了）；\n- 允许请求和应答的HTTP管线化；\n- 降低拥塞控制 （TCP连接减少了）；\n- 减少了后续请求的延迟（⽆需再进⾏握⼿）；\n- 报告错误⽆需关闭TCP连接；\n\n开启Keep-Alive的缺点：\n长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。\n\n#### 13. 页面有多张图片，HTTP是怎样的加载表现？\n- 在HTTP 1下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。\n- 在HTTP 2下，可以一瞬间加载出来很多资源，因为，HTTP2支持多路复用，可以在一个TCP连接中发送多个HTTP请求。\n\n#### 14. HTTP2的头部压缩算法是怎样的？\nHTTP2的头部压缩是HPACK算法。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。\n\n具体来说:\n- 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；\n- 首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新；\n- 每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。\n\n如有两个请求， 请求二只是和请求一的:path字段不同，其他都相同，请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。\n\n#### 15. HTTP请求报文是什么样的？\n\n请求报⽂有4部分组成:\n- 请求⾏\n- 请求头部\n- 空⾏\n- 请求体\n\n其中：\n（1）请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。 \n（2）请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔\n\n- User-Agent：产⽣请求的浏览器类型。\n- Accept：客户端可识别的内容类型列表。\n- Host：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。\n\n（3）请求体: post put等请求携带的数据\n\n#### 16.  HTTP响应报文是什么样的？\n\n响应报⽂有4部分组成:\n- 响应⾏\n- 响应头部\n- 空⾏\n- 响应体\n\n其中：\n- 响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。\n- 响应头部：响应部⾸组成\n- 响应体：服务器响应的数据\n\n#### 17. HTTP协议的优点和缺点\nHTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。\n\nHTTP协议具有以下优点：\n- 支持客户端/服务器模式\n- 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。\n- 无连接：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。\n- 无状态：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。\n- 灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。\n\nHTTP协议具有以下缺点：\n- 无状态： HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。\n- 明文传输： 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。\n- 不安全\n\n（1）通信使用明文（不加密），内容可能会被窃听； \n（2）不验证通信方的身份，因此有可能遭遇伪装； \n（3）无法证明报文的完整性，所以有可能已遭篡改；\n\n#### 18. 说一下HTTP 3.0\nHTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。\n1.流量控制、传输可靠性功能：QUIC在UDP的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些TCP中的特性。\n2.集成TLS加密功能：目前QUIC使用TLS1.3，减少了握手所花费的RTT数。\n3.多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了TCP的队头阻塞问题。\n4.快速握手：由于基于UDP，可以实现使用0 ~ 1个RTT来建立连接。\n\n\n#### 19. HTTP协议的性能怎么样\nHTTP 协议是基于 TCP/IP，并且使用了请求-应答的通信模式，所以性能的关键就在这两点里。\n\n- 长连接\nHTTP协议有两种连接模式，一种是持续连接，一种非持续连接。\n（1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。\n（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。\n\n对于不同版本的采用不同的连接方式：\n- 在HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无谓的 TCP 连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。\n- 在HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。\n- 管道网络传输\nHTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。\n管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（一）/http1长短连接.jpg\">\n</div>\n\n- 队头堵塞\nHTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是HTTP队头阻塞问题。\n\n队头阻塞的解决方案： \n（1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。\n（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。\n\n#### 20. URL有哪些组成部分\n以下面的URL为例：http://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name\n\n从上面的URL可以看出，一个完整的URL包括以下几部分：\n- 协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在\"HTTP\"后面的“//”为分隔符；\n- 域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用.\n- 端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口（HTTP协议默认端口是80，HTTPS协议默认端口是443）；\n- 虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”；\n- 文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。\n- 锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分；\n- 参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&ID=24618&page=1”。参数可以允许有多个参数，参数与参数之间用“&”作为分隔符。\n\n#### 21. 与缓存相关的HTTP请求头有哪些\n强缓存：\n- Expires\n- Cache-Control\n\n协商缓存：\n- Etag、If-None-Match\n- Last-Modified、If-Modified-Since\n\n### 二、HTTPS协议\n#### 1. 什么是HTTPS协议？\n超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（一）/HTTP与HTTPS.jpg\">\n</div>\n\nHTTP协议采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议TLS/SSL具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。而协议TLS/SSL具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。\n\n安全层的主要职责就是对发起的HTTP请求的数据进行加密操作 和 对接收到的HTTP的内容进行解密操作。\n\n#### 2. TLS/SSL的工作原理\nTLS/SSL全称安全传输层协议（Transport Layer Security）, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。\n\nTLS/SSL的功能实现主要依赖三类基本算法：散列函数hash、对称加密、非对称加密。这三类算法的作用如下：\n- 基于散列函数验证信息的完整性\n- 对称加密算法采用协商的秘钥对数据加密\n- 非对称加密实现身份认证和秘钥协商\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（一）/TLS加密.jpg\">\n</div>\n\n（1）散列函数hash\n常见的散列函数有MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。\n特点： 在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。\n\n（2）对称加密\n对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。\n常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。\n**特点**： 对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录且不能修改密码。\n\n（3）非对称加密\n非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。\n用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。\n我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。\n但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。\n常见的非对称加密算法有RSA、ECC、DH等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。\n特点： 非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。\n综合上述算法特点，TLS/SSL的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。\n\n#### 3. 数字证书是什么？\n现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。\n\n首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。\n\n这个方法最重要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。\n\n#### 4. HTTPS通信（握手）过程\nHTTPS的通信过程如下：\n- 客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。\n- 服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。\n- 客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。\n-  服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。\n- 客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。\n\n#### 5. HTTPS的特点\nHTTPS的优点如下：\n- 使用HTTPS协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；\n- 使用HTTPS协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；\n- HTTPS是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；\nHTTPS的缺点如下：\n- HTTPS需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；\n- HTTPS协议握手阶段比较费时，增加页面的加载时间；\n- SSL证书是收费的，功能越强大的证书费用越高；\n- HTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；\n- SSL证书需要绑定IP，不能再同一个IP上绑定多个域名。\n\n#### 6. HTTPS是如何保证安全的？\n先理解两个概念：\n- 对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。\n- ⾮对称加密：\n1. 私钥 + 公钥= 密钥对\n2. 即⽤私钥加密的数据,只有对应的公钥才能解密,⽤公钥加密的数据,只有对应的私钥才能解密\n3. 因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对,通信之前双⽅会先把⾃⼰的公钥都先发给对⽅\n4. 然后对⽅再拿着这个公钥来加密数据响应给对⽅,等到到了对⽅那⾥,对⽅再⽤⾃⼰的私钥进⾏解密\n\n⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。\n\n解决⽅案：\n\n结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。\n\n此时⼜带来⼀个问题，中间⼈问题： 如果此时在客户端和服务器之间存在⼀个中间⼈,这个中间⼈只需要把原本双⽅通信互发的公钥,换成⾃⼰的公钥,这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。\n\n所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。 证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的HASH算法、证书到期时间等。\n\n但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。\n\n数字签名就是⽤CA⾃带的HASH算法对证书的内容进⾏HASH得到⼀个摘要，再⽤CA的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候,我再⽤同样的Hash算法,再次⽣成消息摘要，然后⽤CA的公钥对数字签名解密,得到CA创建的消息摘要,两者⼀⽐,就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。\n\n### 三、HTTP状态码\n\n状态码的类别：\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（一）/状态码类别.jpg\">\n</div>\n\n1. 2XX (Success 成功状态码)\n状态码2XX表示请求被正常处理了。\n（1）200 OK\n200 OK表示客户端发来的请求被服务器端正常处理了。\n（2）204 No Content\n该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。\n（3）206 Partial Content\n该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。\n\n2. 3XX (Redirection 重定向状态码)\n\n3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。\n\n（1）301 Moved Permanently\n永久重定向。 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的URI保存为书签，此时会按照 Location 中新的URI重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。\n\n使用场景：\n- 当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。\n- 在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。\n\n（2）302 Found\n临时重定向。 该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。\n\n使用场景：\n- 当我们在做活动时，登录到首页自动重定向，进入活动页面。\n- 未登陆的用户访问用户中心重定向到登录页面。\n- 访问404页面重新定向到首页。\n\n（3）303 See Other\n该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。 303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。\n303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。\n\n注意：\n- 当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成GET，并删除请求报文内的主体，之后请求会再次自动发送。\n- 301、302 标准是禁止将 POST 方法变成 GET方法的，但实际大家都会这么做。\n\n（4）304 Not Modified\n浏览器缓存相关。 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。\n带条件的请求（Http 条件请求）：使用 Get方法 请求，请求报文中包含（if-match、if-none-match、if-modified-since、if-unmodified-since、if-range）中任意首部。\n状态码304并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。\n\n（5）307 Temporary Redirect\n307表示临时重定向。 该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。307 会遵守浏览器标准，不会从 POST 变成 GET。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。\n\n3. 4XX (Client Error 客户端错误状态码)\n\n4XX 的响应结果表明客户端是发生错误的原因所在。\n（1）400 Bad Request\n该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。\n\n（2）401 Unauthorized\n该状态码表示发送的请求需要有通过 HTTP 认证(BASIC 认证、DIGEST 认证)的认证信息。若之前已进行过一次请求，则表示用户认证失败。\n返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询(challenge)用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。\n以下情况会出现401：\n- 401.1 - 登录失败。\n- 401.2 - 服务器配置导致登录失败。\n- 401.3 - 由于 ACL 对资源的限制而未获得授权。\n- 401.4 - 筛选器授权失败。\n- 401.5 - ISAPI/CGI 应用程序授权失败。\n- 401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。\n\n（3）403 Forbidden\n该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。\nIIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：\n- 403.1 - 执行访问被禁止。\n- 403.2 - 读访问被禁止。\n- 403.3 - 写访问被禁止。\n- 403.4 - 要求 SSL。\n- 403.5 - 要求 SSL 128。\n- 403.6 - IP 地址被拒绝。\n- 403.7 - 要求客户端证书。\n- 403.8 - 站点访问被拒绝。\n- 403.9 - 用户数过多。\n- 403.10 - 配置无效。\n- 403.11 - 密码更改。\n- 403.12 - 拒绝访问映射表。\n- 403.13 - 客户端证书被吊销。\n- 403.14 - 拒绝目录列表。\n- 403.15 - 超出客户端访问许可。\n- 403.16 - 客户端证书不受信任或无效。\n- 403.17 - 客户端证书已过期或尚未生效\n- 403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。\n- 403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。\n- 403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。\n\n（4）404 Not Found\n该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 以下情况会出现404：\n\n- 404.0 -（无） – 没有找到文件或目录。\n- 404.1 - 无法在所请求的端口上访问 Web 站点。\n- 404.2 - Web 服务扩展锁定策略阻止本请求。\n- 404.3 - MIME 映射策略阻止本请求。\n\n（5）405 Method Not Allowed\n该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法, 如下：\n\n``` javascript\nAccess-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE\n```\n\n4. 5XX (Server Error 服务器错误状态码)\n5XX 的响应结果表明服务器本身发生错误。\n\n（1）500 Internal Server Error\n该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。\n\n（2）502 Bad Gateway\n该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复。以下情况会出现502：\n- 502.1 - CGI （通用网关接口）应用程序超时。\n- 502.2 - CGI （通用网关接口）应用程序出错。\n\n（3）503 Service Unavailable\n该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。\n使用场景：\n- 服务器停机维护时，主动用503响应请求；\n- nginx 设置限速，超过限速，会返回503。\n\n（4）504 Gateway Timeout\n该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是HTTP 1.1中新加入的。\n使用场景：代码执行时间超时，或者发生了死循环。\n\n5. 总结\n（1）2XX 成功\n\n200 OK，表示从客户端发来的请求在服务器端被正确处理\n204 No content，表示请求成功，但响应报文不含实体的主体部分\n205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容\n206 Partial Content，进行范围请求\n\n（2）3XX 重定向\n\n301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\n302 found，临时性重定向，表示资源临时被分配了新的 URL\n303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\n304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况\n307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求\n\n（3）4XX 客户端错误\n\n400 bad request，请求报文存在语法错误\n401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n403 forbidden，表示对请求资源的访问被服务器拒绝\n404 not found，表示在服务器上没有找到请求的资源\n\n（4）5XX 服务器错误\n\n500 internal sever error，表示服务器端在执行请求时发生了错误\n501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\n503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求\n\n6. 同样是重定向，307，303，302的区别？\n302是http1.0的协议状态码，在http1.1版本的时候为了细化302状态码⼜出来了两个303和307。 303明确表示客户端应当采⽤get⽅法获取资源，他会把POST请求变为GET请求进⾏重定向。 307会遵照浏览器标准，不会从post变为get。\n\n\n","source":"_posts/前端学习汇总-计算机网络篇（一）.md","raw":"---\ntitle: 前端学习汇总-计算机网络篇（一）\ndate: 2024-12-31 14:06:28\ncategories:\n- [计算机科学]\ntags:\n- [前端]\n---\n\n## 计算机网络知识总结篇：HTTP，HTTPS\n### 一、HTTP协议\n\n#### 1. GET和POST的请求的区别 \nPost 和 Get 是 HTTP 请求的两种方法，其区别如下：\n- 应用场景： GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。\n- 是否缓存： 因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。\n- 发送的报文格式： Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。\n- 安全性： Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。\n- 请求长度： 浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。\n- 参数类型： post 的参数传递支持更多的数据类型。\n\n#### 2. POST和PUT请求的区别\n- PUT请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次PUT操作，其结果并没有不同。（可以理解为是**更新数据**）\n- POST请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是**创建数据**）\n\n#### 3.常见的HTTP请求头和响应头\nHTTP Request Header 常见的请求头：\n- Accept:浏览器能够处理的内容类型\n- Accept-Charset:浏览器能够显示的字符集\n- Accept-Encoding：浏览器能够处理的压缩编码\n- Accept-Language：浏览器当前设置的语言\n- Connection：浏览器与服务器之间连接的类型\n- Cookie：当前页面设置的任何Cookie\n- Host：发出请求的页面所在的域\n- Referer：发出请求的页面的URL\n- User-Agent：浏览器的用户代理字符串\n\nHTTP Responses Header 常见的响应头：\n- Date：表示消息发送的时间，时间的描述格式由rfc822定义\n- server:服务器名称\n- Connection：浏览器与服务器之间连接的类型\n- Cache-Control：控制HTTP缓存\n- content-type:表示后面的文档属于什么MIME类型\n\n常见的 Content-Type 属性值有以下四种：\n（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&key2=val2 的方式进行编码，key 和 val 都进行了 URL转码。\n（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。\n（3）application/json：服务器消息主体是序列化后的 JSON 字符串。\n（4）text/xml：该种方式主要用来提交 XML 格式的数据。\n\n#### 4.HTTP状态码304是多好还是少好\n服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回304，此时客户端调用缓存内容，不必进行二次下载。\n\n状态码304不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应。\n\n搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于304的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。\n\n产生较多304状态码的原因：\n- 页面更新周期长或不更新\n- 纯静态页面或强制生成静态html\n\n304状态码出现过多会造成以下问题：\n- 网站快照停止；\n- 收录减少；\n- 权重下降。\n\n#### 5. 常见的HTTP请求方法\n- GET: 向服务器获取数据；\n- POST：将实体提交到指定的资源，通常会造成服务器资源的修改；\n- PUT：上传文件，更新数据；\n- DELETE：删除服务器上的对象；\n- HEAD：获取报文首部，与GET相比，不返回报文主体部分；\n- OPTIONS：询问支持的请求方法，用来跨域请求；\n- CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行TCP通信；\n- TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。\n\n#### 6. OPTIONS请求方法及使用场景\nOPTIONS是除了GET和POST之外的其中一种 HTTP请求方法。\n\nOPTIONS方法是用于请求获得由Request-URI标识的资源在请求/响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。该请求方法的响应不能缓存。\n\nOPTIONS请求方法的主要用途有两个：\n\n- 获取服务器支持的所有HTTP请求方法；\n- 用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。\n\n#### 7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？\nHTTP 1.0和 HTTP 1.1 有以下区别：\n- 连接方面，http1.0 默认使用非持久连接，而 http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。\n- 资源请求方面，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。\n- 缓存方面，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。\n- http1.1 中新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个IP地址。因此有了 host 字段，这样就可以将请求发往到同一台服务器上的不同网站。\n- http1.1 相对于 http1.0 还新增了很多请求方法，如 PUT、HEAD、OPTIONS 等。\n\n#### 8. HTTP 1.1 和 HTTP 2.0 的区别\n- 二进制协议：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为\"帧\"，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。\n- 多路复用： HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了\"队头堵塞\"【1】的问题。\n- 数据流： HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。\n- 头信息压缩：HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。\n- 服务器推送：HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是http2下服务器主要推送的是静态资源，和WebSocket以及使用SSE等方式向客户端发送即时数据的推送是不同的。\n\nP.S.队头堵塞：\n队头堵塞是由HTTP基本的“请求-应答”模型所导致的。HTTP规定报文必须是“一发一收”，这就形成了一个先进先出的“串行”队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。\n\n#### 9. HTTP和HTTPS协议的区别\nHTTP和HTTPS协议的主要区别如下：\n- HTTPS协议需要CA证书，费用较高；而HTTP协议不需要；\n- HTTP协议是超文本传输协议，信息是明文传输的，HTTPS则是具有安全性的SSL加密传输协议；\n- 使用不同的连接方式，端口也不同，HTTP协议端口是80，HTTPS协议端口是443；\n- HTTP协议连接很简单，是无状态的；HTTPS协议是有SSL和HTTP协议构建的可进行加密传输、身份认证的网络协议，比HTTP更加安全。\n\n#### 10. GET方法URL长度限制的原因\n实际上HTTP协议规范并没有对get方法请求的url长度进行限制，这个限制是特定的浏览器及服务器对它的限制。\nIE对URL长度的限制是2083字节(2K+35)。由于IE浏览器对URL长度的允许值是最小的，所以开发过程中，只要URL不超过2083字节，那么在所有浏览器中工作都不会有问题。\n\n``` javascript\nGET的长度值 = URL（2083）- （你的Domain+Path）-2（2是get请求中?=两个字符的长度）\n```\n下面看一下主流浏览器对get方法中url的长度限制范围：\n- Microsoft Internet Explorer (Browser)：IE浏览器对URL的最大限制为2083个字符，如果超过这个数字，提交按钮没有任何反应。\n- Firefox (Browser)：对于Firefox浏览器URL的长度限制为 65,536 个字符。\n- Safari (Browser)：URL最大长度限制为 80,000 个字符。\n- Opera (Browser)：URL最大长度限制为 190,000 个字符。\n- Google (chrome)：URL最大长度限制为 8182 个字符。\n\n主流的服务器对get方法中url的长度限制范围：\n- Apache (Server)：能接受最大url长度为8192个字符。\n- Microsoft Internet Information Server(IIS)：能接受最大url的长度为16384个字符。\n\n根据上面的数据，可以知道，get方法中的URL长度最长不超过2083个字符，这样所有的浏览器和服务器都可能正常工作。\n\n#### 11. 当在浏览器中输入 Google.com 并且按下回车之后发生了什么？\n（1）解析URL： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。\n\n（2）缓存判断： 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。\n\n（3）DNS解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。\n\n（4）获取MAC地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。\n\n（5）TCP三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。\n\n（6）HTTPS握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。\n\n（7）返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。\n\n（8）页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。\n\n（9）TCP四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。\n\n#### 12. 对keep-alive的理解\nHTTP1.0 中默认是在每次请求/应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是短连接。\n当使用Keep-Alive模式时，Keep-Alive功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive功能避免了建立或者重新建立连接，这就是长连接。其使用方法如下：\n- HTTP1.0版本是默认没有Keep-alive的（也就是默认会发送keep-alive），所以要想连接得到保持，必须手动配置发送Connection: keep-alive字段。若想断开keep-alive连接，需发送Connection:close字段；\n- HTTP1.1规定了默认保持长连接，数据传输完成了保持TCP连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送Connection：close首部字段。\n\nKeep-Alive的建立过程：\n- 客户端向服务器在发送请求报文同时在首部添加发送Connection字段\n- 服务器收到请求并处理 Connection字段\n- 服务器回送Connection:Keep-Alive字段给客户端\n- 客户端接收到Connection字段\n- Keep-Alive连接建立成功\n\n服务端自动断开过程（也就是没有keep-alive）：\n- 客户端向服务器只是发送内容报文（不包含Connection字段）\n- 服务器收到请求并处理\n- 服务器返回客户端请求的资源并关闭连接\n- 客户端接收资源，发现没有Connection字段，断开连接\n\n客户端请求断开连接过程：\n- 客户端向服务器发送Connection:close字段\n- 服务器收到请求并处理connection字段\n- 服务器回送响应资源并断开连接\n- 客户端接收资源并断开连接\n\n开启Keep-Alive的优点：\n- 较少的CPU和内存的使⽤（由于同时打开的连接的减少了）；\n- 允许请求和应答的HTTP管线化；\n- 降低拥塞控制 （TCP连接减少了）；\n- 减少了后续请求的延迟（⽆需再进⾏握⼿）；\n- 报告错误⽆需关闭TCP连接；\n\n开启Keep-Alive的缺点：\n长时间的Tcp连接容易导致系统资源无效占用，浪费系统资源。\n\n#### 13. 页面有多张图片，HTTP是怎样的加载表现？\n- 在HTTP 1下，浏览器对一个域名下最大TCP连接数为6，所以会请求多次。可以用多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。\n- 在HTTP 2下，可以一瞬间加载出来很多资源，因为，HTTP2支持多路复用，可以在一个TCP连接中发送多个HTTP请求。\n\n#### 14. HTTP2的头部压缩算法是怎样的？\nHTTP2的头部压缩是HPACK算法。在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。\n\n具体来说:\n- 在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；\n- 首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新；\n- 每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。\n\n如有两个请求， 请求二只是和请求一的:path字段不同，其他都相同，请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。\n\n#### 15. HTTP请求报文是什么样的？\n\n请求报⽂有4部分组成:\n- 请求⾏\n- 请求头部\n- 空⾏\n- 请求体\n\n其中：\n（1）请求⾏包括：请求⽅法字段、URL字段、HTTP协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。 \n（2）请求头部:请求头部由关键字/值对组成，每⾏⼀对，关键字和值⽤英⽂冒号“:”分隔\n\n- User-Agent：产⽣请求的浏览器类型。\n- Accept：客户端可识别的内容类型列表。\n- Host：请求的主机名，允许多个域名同处⼀个IP地址，即虚拟主机。\n\n（3）请求体: post put等请求携带的数据\n\n#### 16.  HTTP响应报文是什么样的？\n\n响应报⽂有4部分组成:\n- 响应⾏\n- 响应头部\n- 空⾏\n- 响应体\n\n其中：\n- 响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。\n- 响应头部：响应部⾸组成\n- 响应体：服务器响应的数据\n\n#### 17. HTTP协议的优点和缺点\nHTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。\n\nHTTP协议具有以下优点：\n- 支持客户端/服务器模式\n- 简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。\n- 无连接：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。\n- 无状态：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。\n- 灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。\n\nHTTP协议具有以下缺点：\n- 无状态： HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。\n- 明文传输： 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。\n- 不安全\n\n（1）通信使用明文（不加密），内容可能会被窃听； \n（2）不验证通信方的身份，因此有可能遭遇伪装； \n（3）无法证明报文的完整性，所以有可能已遭篡改；\n\n#### 18. 说一下HTTP 3.0\nHTTP/3基于UDP协议实现了类似于TCP的多路复用数据流、传输可靠性等功能，这套功能被称为QUIC协议。\n1.流量控制、传输可靠性功能：QUIC在UDP的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些TCP中的特性。\n2.集成TLS加密功能：目前QUIC使用TLS1.3，减少了握手所花费的RTT数。\n3.多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了TCP的队头阻塞问题。\n4.快速握手：由于基于UDP，可以实现使用0 ~ 1个RTT来建立连接。\n\n\n#### 19. HTTP协议的性能怎么样\nHTTP 协议是基于 TCP/IP，并且使用了请求-应答的通信模式，所以性能的关键就在这两点里。\n\n- 长连接\nHTTP协议有两种连接模式，一种是持续连接，一种非持续连接。\n（1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。\n（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。\n\n对于不同版本的采用不同的连接方式：\n- 在HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无谓的 TCP 连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。\n- 在HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。\n- 管道网络传输\nHTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。\n管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（一）/http1长短连接.jpg\">\n</div>\n\n- 队头堵塞\nHTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是HTTP队头阻塞问题。\n\n队头阻塞的解决方案： \n（1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。\n（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。\n\n#### 20. URL有哪些组成部分\n以下面的URL为例：http://www.aspxfans.com:8080/news/index.asp?boardID=5&ID=24618&page=1#name\n\n从上面的URL可以看出，一个完整的URL包括以下几部分：\n- 协议部分：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在\"HTTP\"后面的“//”为分隔符；\n- 域名部分：该URL的域名部分为“www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用.\n- 端口部分：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口（HTTP协议默认端口是80，HTTPS协议默认端口是443）；\n- 虚拟目录部分：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”；\n- 文件名部分：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。\n- 锚部分：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分；\n- 参数部分：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&ID=24618&page=1”。参数可以允许有多个参数，参数与参数之间用“&”作为分隔符。\n\n#### 21. 与缓存相关的HTTP请求头有哪些\n强缓存：\n- Expires\n- Cache-Control\n\n协商缓存：\n- Etag、If-None-Match\n- Last-Modified、If-Modified-Since\n\n### 二、HTTPS协议\n#### 1. 什么是HTTPS协议？\n超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS经由HTTP进行通信，利用SSL/TLS来加密数据包。HTTPS的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（一）/HTTP与HTTPS.jpg\">\n</div>\n\nHTTP协议采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议TLS/SSL具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。而协议TLS/SSL具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。\n\n安全层的主要职责就是对发起的HTTP请求的数据进行加密操作 和 对接收到的HTTP的内容进行解密操作。\n\n#### 2. TLS/SSL的工作原理\nTLS/SSL全称安全传输层协议（Transport Layer Security）, 是介于TCP和HTTP之间的一层安全协议，不影响原有的TCP协议和HTTP协议，所以使用HTTPS基本上不需要对HTTP页面进行太多的改造。\n\nTLS/SSL的功能实现主要依赖三类基本算法：散列函数hash、对称加密、非对称加密。这三类算法的作用如下：\n- 基于散列函数验证信息的完整性\n- 对称加密算法采用协商的秘钥对数据加密\n- 非对称加密实现身份认证和秘钥协商\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（一）/TLS加密.jpg\">\n</div>\n\n（1）散列函数hash\n常见的散列函数有MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。\n特点： 在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。\n\n（2）对称加密\n对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。\n常见的对称加密算法有AES-CBC、DES、3DES、AES-GCM等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。\n**特点**： 对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和N个客户端通信，需要维持N个密码记录且不能修改密码。\n\n（3）非对称加密\n非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。\n用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。\n我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。\n但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。\n常见的非对称加密算法有RSA、ECC、DH等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。\n特点： 非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。\n综合上述算法特点，TLS/SSL的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。\n\n#### 3. 数字证书是什么？\n现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。\n\n首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。\n\n这个方法最重要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。\n\n#### 4. HTTPS通信（握手）过程\nHTTPS的通信过程如下：\n- 客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。\n- 服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。\n- 客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。\n-  服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。\n- 客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。\n\n#### 5. HTTPS的特点\nHTTPS的优点如下：\n- 使用HTTPS协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；\n- 使用HTTPS协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；\n- HTTPS是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；\nHTTPS的缺点如下：\n- HTTPS需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；\n- HTTPS协议握手阶段比较费时，增加页面的加载时间；\n- SSL证书是收费的，功能越强大的证书费用越高；\n- HTTPS连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；\n- SSL证书需要绑定IP，不能再同一个IP上绑定多个域名。\n\n#### 6. HTTPS是如何保证安全的？\n先理解两个概念：\n- 对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。\n- ⾮对称加密：\n1. 私钥 + 公钥= 密钥对\n2. 即⽤私钥加密的数据,只有对应的公钥才能解密,⽤公钥加密的数据,只有对应的私钥才能解密\n3. 因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对,通信之前双⽅会先把⾃⼰的公钥都先发给对⽅\n4. 然后对⽅再拿着这个公钥来加密数据响应给对⽅,等到到了对⽅那⾥,对⽅再⽤⾃⼰的私钥进⾏解密\n\n⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。\n\n解决⽅案：\n\n结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。\n\n此时⼜带来⼀个问题，中间⼈问题： 如果此时在客户端和服务器之间存在⼀个中间⼈,这个中间⼈只需要把原本双⽅通信互发的公钥,换成⾃⼰的公钥,这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。\n\n所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。 证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的HASH算法、证书到期时间等。\n\n但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。\n\n数字签名就是⽤CA⾃带的HASH算法对证书的内容进⾏HASH得到⼀个摘要，再⽤CA的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候,我再⽤同样的Hash算法,再次⽣成消息摘要，然后⽤CA的公钥对数字签名解密,得到CA创建的消息摘要,两者⼀⽐,就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。\n\n### 三、HTTP状态码\n\n状态码的类别：\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（一）/状态码类别.jpg\">\n</div>\n\n1. 2XX (Success 成功状态码)\n状态码2XX表示请求被正常处理了。\n（1）200 OK\n200 OK表示客户端发来的请求被服务器端正常处理了。\n（2）204 No Content\n该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。\n（3）206 Partial Content\n该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。\n\n2. 3XX (Redirection 重定向状态码)\n\n3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。\n\n（1）301 Moved Permanently\n永久重定向。 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的URI保存为书签，此时会按照 Location 中新的URI重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。\n\n使用场景：\n- 当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。\n- 在搜索引擎的搜索结果中出现了不带www的域名，而带www的域名却没有收录，这个时候可以用301重定向来告诉搜索引擎我们目标的域名是哪一个。\n\n（2）302 Found\n临时重定向。 该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回302代码，搜索引擎认为新的网址只是暂时的。\n\n使用场景：\n- 当我们在做活动时，登录到首页自动重定向，进入活动页面。\n- 未登陆的用户访问用户中心重定向到登录页面。\n- 访问404页面重新定向到首页。\n\n（3）303 See Other\n该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。 303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。\n303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。\n\n注意：\n- 当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成GET，并删除请求报文内的主体，之后请求会再次自动发送。\n- 301、302 标准是禁止将 POST 方法变成 GET方法的，但实际大家都会这么做。\n\n（4）304 Not Modified\n浏览器缓存相关。 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。\n带条件的请求（Http 条件请求）：使用 Get方法 请求，请求报文中包含（if-match、if-none-match、if-modified-since、if-unmodified-since、if-range）中任意首部。\n状态码304并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。\n\n（5）307 Temporary Redirect\n307表示临时重定向。 该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。307 会遵守浏览器标准，不会从 POST 变成 GET。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。\n\n3. 4XX (Client Error 客户端错误状态码)\n\n4XX 的响应结果表明客户端是发生错误的原因所在。\n（1）400 Bad Request\n该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。\n\n（2）401 Unauthorized\n该状态码表示发送的请求需要有通过 HTTP 认证(BASIC 认证、DIGEST 认证)的认证信息。若之前已进行过一次请求，则表示用户认证失败。\n返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询(challenge)用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。\n以下情况会出现401：\n- 401.1 - 登录失败。\n- 401.2 - 服务器配置导致登录失败。\n- 401.3 - 由于 ACL 对资源的限制而未获得授权。\n- 401.4 - 筛选器授权失败。\n- 401.5 - ISAPI/CGI 应用程序授权失败。\n- 401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。\n\n（3）403 Forbidden\n该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。\nIIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：\n- 403.1 - 执行访问被禁止。\n- 403.2 - 读访问被禁止。\n- 403.3 - 写访问被禁止。\n- 403.4 - 要求 SSL。\n- 403.5 - 要求 SSL 128。\n- 403.6 - IP 地址被拒绝。\n- 403.7 - 要求客户端证书。\n- 403.8 - 站点访问被拒绝。\n- 403.9 - 用户数过多。\n- 403.10 - 配置无效。\n- 403.11 - 密码更改。\n- 403.12 - 拒绝访问映射表。\n- 403.13 - 客户端证书被吊销。\n- 403.14 - 拒绝目录列表。\n- 403.15 - 超出客户端访问许可。\n- 403.16 - 客户端证书不受信任或无效。\n- 403.17 - 客户端证书已过期或尚未生效\n- 403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。\n- 403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。\n- 403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。\n\n（4）404 Not Found\n该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 以下情况会出现404：\n\n- 404.0 -（无） – 没有找到文件或目录。\n- 404.1 - 无法在所请求的端口上访问 Web 站点。\n- 404.2 - Web 服务扩展锁定策略阻止本请求。\n- 404.3 - MIME 映射策略阻止本请求。\n\n（5）405 Method Not Allowed\n该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法, 如下：\n\n``` javascript\nAccess-Control-Allow-Methods: GET,HEAD,PUT,PATCH,POST,DELETE\n```\n\n4. 5XX (Server Error 服务器错误状态码)\n5XX 的响应结果表明服务器本身发生错误。\n\n（1）500 Internal Server Error\n该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。\n\n（2）502 Bad Gateway\n该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复。以下情况会出现502：\n- 502.1 - CGI （通用网关接口）应用程序超时。\n- 502.2 - CGI （通用网关接口）应用程序出错。\n\n（3）503 Service Unavailable\n该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。\n使用场景：\n- 服务器停机维护时，主动用503响应请求；\n- nginx 设置限速，超过限速，会返回503。\n\n（4）504 Gateway Timeout\n该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是HTTP 1.1中新加入的。\n使用场景：代码执行时间超时，或者发生了死循环。\n\n5. 总结\n（1）2XX 成功\n\n200 OK，表示从客户端发来的请求在服务器端被正确处理\n204 No content，表示请求成功，但响应报文不含实体的主体部分\n205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容\n206 Partial Content，进行范围请求\n\n（2）3XX 重定向\n\n301 moved permanently，永久性重定向，表示资源已被分配了新的 URL\n302 found，临时性重定向，表示资源临时被分配了新的 URL\n303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源\n304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况\n307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求\n\n（3）4XX 客户端错误\n\n400 bad request，请求报文存在语法错误\n401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息\n403 forbidden，表示对请求资源的访问被服务器拒绝\n404 not found，表示在服务器上没有找到请求的资源\n\n（4）5XX 服务器错误\n\n500 internal sever error，表示服务器端在执行请求时发生了错误\n501 Not Implemented，表示服务器不支持当前请求所需要的某个功能\n503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求\n\n6. 同样是重定向，307，303，302的区别？\n302是http1.0的协议状态码，在http1.1版本的时候为了细化302状态码⼜出来了两个303和307。 303明确表示客户端应当采⽤get⽅法获取资源，他会把POST请求变为GET请求进⾏重定向。 307会遵照浏览器标准，不会从post变为get。\n\n\n","slug":"前端学习汇总-计算机网络篇（一）","published":1,"updated":"2024-12-31T10:06:08.980Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfi001smcuy24fyhi5e","content":"<h2 id=\"计算机网络知识总结篇httphttps\"><a class=\"anchor\" href=\"#计算机网络知识总结篇httphttps\">#</a> 计算机网络知识总结篇：HTTP，HTTPS</h2>\n<h3 id=\"一-http协议\"><a class=\"anchor\" href=\"#一-http协议\">#</a> 一、HTTP 协议</h3>\n<h4 id=\"1-get和post的请求的区别\"><a class=\"anchor\" href=\"#1-get和post的请求的区别\">#</a> 1. GET 和 POST 的请求的区别</h4>\n<p>Post 和 Get 是 HTTP 请求的两种方法，其区别如下：</p>\n<ul>\n<li>应用场景： GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</li>\n<li>是否缓存： 因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。</li>\n<li>发送的报文格式： Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</li>\n<li>安全性： Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。</li>\n<li>请求长度： 浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</li>\n<li>参数类型： post 的参数传递支持更多的数据类型。</li>\n</ul>\n<h4 id=\"2-post和put请求的区别\"><a class=\"anchor\" href=\"#2-post和put请求的区别\">#</a> 2. POST 和 PUT 请求的区别</h4>\n<ul>\n<li>PUT 请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次 PUT 操作，其结果并没有不同。（可以理解为是<strong>更新数据</strong>）</li>\n<li>POST 请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是<strong>创建数据</strong>）</li>\n</ul>\n<h4 id=\"3常见的http请求头和响应头\"><a class=\"anchor\" href=\"#3常见的http请求头和响应头\">#</a> 3. 常见的 HTTP 请求头和响应头</h4>\n<p>HTTP Request Header 常见的请求头：</p>\n<ul>\n<li>Accept: 浏览器能够处理的内容类型</li>\n<li>Accept-Charset: 浏览器能够显示的字符集</li>\n<li>Accept-Encoding：浏览器能够处理的压缩编码</li>\n<li>Accept-Language：浏览器当前设置的语言</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cookie：当前页面设置的任何 Cookie</li>\n<li>Host：发出请求的页面所在的域</li>\n<li>Referer：发出请求的页面的 URL</li>\n<li>User-Agent：浏览器的用户代理字符串</li>\n</ul>\n<p>HTTP Responses Header 常见的响应头：</p>\n<ul>\n<li>Date：表示消息发送的时间，时间的描述格式由 rfc822 定义</li>\n<li>server: 服务器名称</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cache-Control：控制 HTTP 缓存</li>\n<li>content-type: 表示后面的文档属于什么 MIME 类型</li>\n</ul>\n<p>常见的 Content-Type 属性值有以下四种：<br />\n（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。<br />\n（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。<br />\n（3）application/json：服务器消息主体是序列化后的 JSON 字符串。<br />\n（4）text/xml：该种方式主要用来提交 XML 格式的数据。</p>\n<h4 id=\"4http状态码304是多好还是少好\"><a class=\"anchor\" href=\"#4http状态码304是多好还是少好\">#</a> 4.HTTP 状态码 304 是多好还是少好</h4>\n<p>服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回 304，此时客户端调用缓存内容，不必进行二次下载。</p>\n<p>状态码 304 不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应。</p>\n<p>搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于 304 的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。</p>\n<p>产生较多 304 状态码的原因：</p>\n<ul>\n<li>页面更新周期长或不更新</li>\n<li>纯静态页面或强制生成静态 html</li>\n</ul>\n<p>304 状态码出现过多会造成以下问题：</p>\n<ul>\n<li>网站快照停止；</li>\n<li>收录减少；</li>\n<li>权重下降。</li>\n</ul>\n<h4 id=\"5-常见的http请求方法\"><a class=\"anchor\" href=\"#5-常见的http请求方法\">#</a> 5. 常见的 HTTP 请求方法</h4>\n<ul>\n<li>GET: 向服务器获取数据；</li>\n<li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</li>\n<li>PUT：上传文件，更新数据；</li>\n<li>DELETE：删除服务器上的对象；</li>\n<li>HEAD：获取报文首部，与 GET 相比，不返回报文主体部分；</li>\n<li>OPTIONS：询问支持的请求方法，用来跨域请求；</li>\n<li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行 TCP 通信；</li>\n<li>TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。</li>\n</ul>\n<h4 id=\"6-options请求方法及使用场景\"><a class=\"anchor\" href=\"#6-options请求方法及使用场景\">#</a> 6. OPTIONS 请求方法及使用场景</h4>\n<p>OPTIONS 是除了 GET 和 POST 之外的其中一种 HTTP 请求方法。</p>\n<p>OPTIONS 方法是用于请求获得由 Request-URI 标识的资源在请求 / 响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。该请求方法的响应不能缓存。</p>\n<p>OPTIONS 请求方法的主要用途有两个：</p>\n<ul>\n<li>获取服务器支持的所有 HTTP 请求方法；</li>\n<li>用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</li>\n</ul>\n<h4 id=\"7-http-10-和-http-11-之间有哪些区别\"><a class=\"anchor\" href=\"#7-http-10-和-http-11-之间有哪些区别\">#</a> 7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？</h4>\n<p>HTTP 1.0 和 HTTP 1.1 有以下区别：</p>\n<ul>\n<li>连接方面，http1.0 默认使用非持久连接，而 http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。</li>\n<li>资源请求方面，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li>\n<li>缓存方面，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li>\n<li>http1.1 中新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个 IP 地址。因此有了 host 字段，这样就可以将请求发往到同一台服务器上的不同网站。</li>\n<li>http1.1 相对于 http1.0 还新增了很多请求方法，如 PUT、HEAD、OPTIONS 等。</li>\n</ul>\n<h4 id=\"8-http-11-和-http-20-的区别\"><a class=\"anchor\" href=\"#8-http-11-和-http-20-的区别\">#</a> 8. HTTP 1.1 和 HTTP 2.0 的区别</h4>\n<ul>\n<li>二进制协议：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为 &quot;帧&quot;，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。</li>\n<li>多路复用： HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了 &quot;队头堵塞&quot;【1】的问题。</li>\n<li>数据流： HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。</li>\n<li>头信息压缩：HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</li>\n<li>服务器推送：HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主要推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</li>\n</ul>\n<p>P.S. 队头堵塞：<br />\n队头堵塞是由 HTTP 基本的 “请求 - 应答” 模型所导致的。HTTP 规定报文必须是 “一发一收”，这就形成了一个先进先出的 “串行” 队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。</p>\n<h4 id=\"9-http和https协议的区别\"><a class=\"anchor\" href=\"#9-http和https协议的区别\">#</a> 9. HTTP 和 HTTPS 协议的区别</h4>\n<p>HTTP 和 HTTPS 协议的主要区别如下：</p>\n<ul>\n<li>HTTPS 协议需要 CA 证书，费用较高；而 HTTP 协议不需要；</li>\n<li>HTTP 协议是超文本传输协议，信息是明文传输的，HTTPS 则是具有安全性的 SSL 加密传输协议；</li>\n<li>使用不同的连接方式，端口也不同，HTTP 协议端口是 80，HTTPS 协议端口是 443；</li>\n<li>HTTP 协议连接很简单，是无状态的；HTTPS 协议是有 SSL 和 HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全。</li>\n</ul>\n<h4 id=\"10-get方法url长度限制的原因\"><a class=\"anchor\" href=\"#10-get方法url长度限制的原因\">#</a> 10. GET 方法 URL 长度限制的原因</h4>\n<p>实际上 HTTP 协议规范并没有对 get 方法请求的 url 长度进行限制，这个限制是特定的浏览器及服务器对它的限制。<br />\nIE 对 URL 长度的限制是 2083 字节 (2K+35)。由于 IE 浏览器对 URL 长度的允许值是最小的，所以开发过程中，只要 URL 不超过 2083 字节，那么在所有浏览器中工作都不会有问题。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">GET</span>的长度值 <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span>（<span class=\"token number\">2083</span>）<span class=\"token operator\">-</span> （你的Domain<span class=\"token operator\">+</span>Path）<span class=\"token operator\">-</span><span class=\"token number\">2</span>（<span class=\"token number\">2</span>是<span class=\"token keyword\">get</span>请求中<span class=\"token operator\">?</span><span class=\"token operator\">=</span>两个字符的长度）</pre></td></tr></table></figure><p>下面看一下主流浏览器对 get 方法中 url 的长度限制范围：</p>\n<ul>\n<li>Microsoft Internet Explorer (Browser)：IE 浏览器对 URL 的最大限制为 2083 个字符，如果超过这个数字，提交按钮没有任何反应。</li>\n<li>Firefox (Browser)：对于 Firefox 浏览器 URL 的长度限制为 65,536 个字符。</li>\n<li>Safari (Browser)：URL 最大长度限制为 80,000 个字符。</li>\n<li>Opera (Browser)：URL 最大长度限制为 190,000 个字符。</li>\n<li>Google (chrome)：URL 最大长度限制为 8182 个字符。</li>\n</ul>\n<p>主流的服务器对 get 方法中 url 的长度限制范围：</p>\n<ul>\n<li>Apache (Server)：能接受最大 url 长度为 8192 个字符。</li>\n<li>Microsoft Internet Information Server (IIS)：能接受最大 url 的长度为 16384 个字符。</li>\n</ul>\n<p>根据上面的数据，可以知道，get 方法中的 URL 长度最长不超过 2083 个字符，这样所有的浏览器和服务器都可能正常工作。</p>\n<h4 id=\"11-当在浏览器中输入-googlecom-并且按下回车之后发生了什么\"><a class=\"anchor\" href=\"#11-当在浏览器中输入-googlecom-并且按下回车之后发生了什么\">#</a> 11. 当在浏览器中输入 <span class=\"exturl\" data-url=\"aHR0cDovL0dvb2dsZS5jb20=\">Google.com</span> 并且按下回车之后发生了什么？</h4>\n<p>（1）解析 URL： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</p>\n<p>（2）缓存判断： 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</p>\n<p>（3）DNS 解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</p>\n<p>（4）获取 MAC 地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</p>\n<p>（5）TCP 三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</p>\n<p>（6）HTTPS 握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</p>\n<p>（7）返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</p>\n<p>（8）页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p>\n<p>（9）TCP 四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</p>\n<h4 id=\"12-对keep-alive的理解\"><a class=\"anchor\" href=\"#12-对keep-alive的理解\">#</a> 12. 对 keep-alive 的理解</h4>\n<p>HTTP1.0 中默认是在每次请求 / 应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是短连接。<br />\n当使用 Keep-Alive 模式时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接，这就是长连接。其使用方法如下：</p>\n<ul>\n<li>HTTP1.0 版本是默认没有 Keep-alive 的（也就是默认会发送 keep-alive），所以要想连接得到保持，必须手动配置发送 Connection: keep-alive 字段。若想断开 keep-alive 连接，需发送 Connection:close 字段；</li>\n<li>HTTP1.1 规定了默认保持长连接，数据传输完成了保持 TCP 连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送 Connection：close 首部字段。</li>\n</ul>\n<p>Keep-Alive 的建立过程：</p>\n<ul>\n<li>客户端向服务器在发送请求报文同时在首部添加发送 Connection 字段</li>\n<li>服务器收到请求并处理 Connection 字段</li>\n<li>服务器回送 Connection:Keep-Alive 字段给客户端</li>\n<li>客户端接收到 Connection 字段</li>\n<li>Keep-Alive 连接建立成功</li>\n</ul>\n<p>服务端自动断开过程（也就是没有 keep-alive）：</p>\n<ul>\n<li>客户端向服务器只是发送内容报文（不包含 Connection 字段）</li>\n<li>服务器收到请求并处理</li>\n<li>服务器返回客户端请求的资源并关闭连接</li>\n<li>客户端接收资源，发现没有 Connection 字段，断开连接</li>\n</ul>\n<p>客户端请求断开连接过程：</p>\n<ul>\n<li>客户端向服务器发送 Connection:close 字段</li>\n<li>服务器收到请求并处理 connection 字段</li>\n<li>服务器回送响应资源并断开连接</li>\n<li>客户端接收资源并断开连接</li>\n</ul>\n<p>开启 Keep-Alive 的优点：</p>\n<ul>\n<li>较少的 CPU 和内存的使⽤（由于同时打开的连接的减少了）；</li>\n<li>允许请求和应答的 HTTP 管线化；</li>\n<li>降低拥塞控制 （TCP 连接减少了）；</li>\n<li>减少了后续请求的延迟（⽆需再进⾏握⼿）；</li>\n<li>报告错误⽆需关闭 TCP 连接；</li>\n</ul>\n<p>开启 Keep-Alive 的缺点：<br />\n长时间的 Tcp 连接容易导致系统资源无效占用，浪费系统资源。</p>\n<h4 id=\"13-页面有多张图片http是怎样的加载表现\"><a class=\"anchor\" href=\"#13-页面有多张图片http是怎样的加载表现\">#</a> 13. 页面有多张图片，HTTP 是怎样的加载表现？</h4>\n<ul>\n<li>在 HTTP 1 下，浏览器对一个域名下最大 TCP 连接数为 6，所以会请求多次。可以用多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。</li>\n<li>在 HTTP 2 下，可以一瞬间加载出来很多资源，因为，HTTP2 支持多路复用，可以在一个 TCP 连接中发送多个 HTTP 请求。</li>\n</ul>\n<h4 id=\"14-http2的头部压缩算法是怎样的\"><a class=\"anchor\" href=\"#14-http2的头部压缩算法是怎样的\">#</a> 14. HTTP2 的头部压缩算法是怎样的？</h4>\n<p>HTTP2 的头部压缩是 HPACK 算法。在客户端和服务器两端建立 “字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。</p>\n<p>具体来说:</p>\n<ul>\n<li>在客户端和服务器端使用 “首部表” 来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；</li>\n<li>首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新；</li>\n<li>每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。</li>\n</ul>\n<p>如有两个请求， 请求二只是和请求一的:path 字段不同，其他都相同，请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p>\n<h4 id=\"15-http请求报文是什么样的\"><a class=\"anchor\" href=\"#15-http请求报文是什么样的\">#</a> 15. HTTP 请求报文是什么样的？</h4>\n<p>请求报⽂有 4 部分组成:</p>\n<ul>\n<li>请求⾏</li>\n<li>请求头部</li>\n<li>空⾏</li>\n<li>请求体</li>\n</ul>\n<p>其中：<br />\n（1）请求⾏包括：请求⽅法字段、URL 字段、HTTP 协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。<br />\n（2）请求头部：请求头部由关键字 / 值对组成，每⾏⼀对，关键字和值⽤英⽂冒号 “:” 分隔</p>\n<ul>\n<li>User-Agent：产⽣请求的浏览器类型。</li>\n<li>Accept：客户端可识别的内容类型列表。</li>\n<li>Host：请求的主机名，允许多个域名同处⼀个 IP 地址，即虚拟主机。</li>\n</ul>\n<p>（3）请求体: post put 等请求携带的数据</p>\n<h4 id=\"16-http响应报文是什么样的\"><a class=\"anchor\" href=\"#16-http响应报文是什么样的\">#</a> 16.  HTTP 响应报文是什么样的？</h4>\n<p>响应报⽂有 4 部分组成:</p>\n<ul>\n<li>响应⾏</li>\n<li>响应头部</li>\n<li>空⾏</li>\n<li>响应体</li>\n</ul>\n<p>其中：</p>\n<ul>\n<li>响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。</li>\n<li>响应头部：响应部⾸组成</li>\n<li>响应体：服务器响应的数据</li>\n</ul>\n<h4 id=\"17-http协议的优点和缺点\"><a class=\"anchor\" href=\"#17-http协议的优点和缺点\">#</a> 17. HTTP 协议的优点和缺点</h4>\n<p>HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。</p>\n<p>HTTP 协议具有以下优点：</p>\n<ul>\n<li>支持客户端 / 服务器模式</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</li>\n<li>无连接：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。</li>\n<li>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</li>\n</ul>\n<p>HTTP 协议具有以下缺点：</p>\n<ul>\n<li>无状态： HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。</li>\n<li>明文传输： 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。</li>\n<li>不安全</li>\n</ul>\n<p>（1）通信使用明文（不加密），内容可能会被窃听；<br />\n（2）不验证通信方的身份，因此有可能遭遇伪装；<br />\n（3）无法证明报文的完整性，所以有可能已遭篡改；</p>\n<h4 id=\"18-说一下http-30\"><a class=\"anchor\" href=\"#18-说一下http-30\">#</a> 18. 说一下 HTTP 3.0</h4>\n<p>HTTP/3 基于 UDP 协议实现了类似于 TCP 的多路复用数据流、传输可靠性等功能，这套功能被称为 QUIC 协议。<br />\n1. 流量控制、传输可靠性功能：QUIC 在 UDP 的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些 TCP 中的特性。<br />\n2. 集成 TLS 加密功能：目前 QUIC 使用 TLS1.3，减少了握手所花费的 RTT 数。<br />\n3. 多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了 TCP 的队头阻塞问题。<br />\n4. 快速握手：由于基于 UDP，可以实现使用 0 ~ 1 个 RTT 来建立连接。</p>\n<h4 id=\"19-http协议的性能怎么样\"><a class=\"anchor\" href=\"#19-http协议的性能怎么样\">#</a> 19. HTTP 协议的性能怎么样</h4>\n<p>HTTP 协议是基于 TCP/IP，并且使用了请求 - 应答的通信模式，所以性能的关键就在这两点里。</p>\n<ul>\n<li>长连接<br />\n HTTP 协议有两种连接模式，一种是持续连接，一种非持续连接。<br />\n（1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。<br />\n（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。</li>\n</ul>\n<p>对于不同版本的采用不同的连接方式：</p>\n<ul>\n<li>在 HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无谓的 TCP 连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。</li>\n<li>在 HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。</li>\n<li>管道网络传输<br />\n HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。<br />\n管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。</li>\n</ul>\n<div align=\"center\">\n    <style>.wwissvhvafua{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/http1%E9%95%BF%E7%9F%AD%E8%BF%9E%E6%8E%A5.jpg\" class=\"wwissvhvafua\">\n</div>\n<ul>\n<li>队头堵塞<br />\n HTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是 HTTP 队头阻塞问题。</li>\n</ul>\n<p>队头阻塞的解决方案：<br />\n（1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。<br />\n（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。</p>\n<h4 id=\"20-url有哪些组成部分\"><a class=\"anchor\" href=\"#20-url有哪些组成部分\">#</a> 20. URL 有哪些组成部分</h4>\n<p>以下面的 URL 为例：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hc3B4ZmFucy5jb206ODA4MC9uZXdzL2luZGV4LmFzcD9ib2FyZElEPTUmYW1wO0lEPTI0NjE4JmFtcDtwYWdlPTEjbmFtZQ==\">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</span></p>\n<p>从上面的 URL 可以看出，一个完整的 URL 包括以下几部分：</p>\n<ul>\n<li>协议部分：该 URL 的协议部分为 “http：”，这代表网页使用的是 HTTP 协议。在 Internet 中可以使用多种协议，如 HTTP，FTP 等等本例中使用的是 HTTP 协议。在 &quot;HTTP&quot; 后面的 “//” 为分隔符；</li>\n<li>域名部分：该 URL 的域名部分为 “<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hc3B4ZmFucy5jb20=\">www.aspxfans.com</span>”。一个 URL 中，也可以使用 IP 地址作为域名使用.</li>\n<li>端口部分：跟在域名后面的是端口，域名和端口之间使用 “:” 作为分隔符。端口不是一个 URL 必须的部分，如果省略端口部分，将采用默认端口（HTTP 协议默认端口是 80，HTTPS 协议默认端口是 443）；</li>\n<li>虚拟目录部分：从域名后的第一个 “/” 开始到最后一个 “/” 为止，是虚拟目录部分。虚拟目录也不是一个 URL 必须的部分。本例中的虚拟目录是 “/news/”；</li>\n<li>文件名部分：从域名后的最后一个 “/” 开始到 “？” 为止，是文件名部分，如果没有 “?”, 则是从域名后的最后一个 “/” 开始到 “#” 为止，是文件部分，如果没有 “？” 和 “#”，那么从域名后的最后一个 “/” 开始到结束，都是文件名部分。</li>\n<li>锚部分：从 “#” 开始到最后，都是锚部分。本例中的锚部分是 “name”。锚部分也不是一个 URL 必须的部分；</li>\n<li>参数部分：从 “？” 开始到 “#” 为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为 “boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用 “&amp;” 作为分隔符。</li>\n</ul>\n<h4 id=\"21-与缓存相关的http请求头有哪些\"><a class=\"anchor\" href=\"#21-与缓存相关的http请求头有哪些\">#</a> 21. 与缓存相关的 HTTP 请求头有哪些</h4>\n<p>强缓存：</p>\n<ul>\n<li>Expires</li>\n<li>Cache-Control</li>\n</ul>\n<p>协商缓存：</p>\n<ul>\n<li>Etag、If-None-Match</li>\n<li>Last-Modified、If-Modified-Since</li>\n</ul>\n<h3 id=\"二-https协议\"><a class=\"anchor\" href=\"#二-https协议\">#</a> 二、HTTPS 协议</h3>\n<h4 id=\"1-什么是https协议\"><a class=\"anchor\" href=\"#1-什么是https协议\">#</a> 1. 什么是 HTTPS 协议？</h4>\n<p>超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，利用 SSL/TLS 来加密数据包。HTTPS 的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>\n<div align=\"center\">\n    <style>.qqfxpnwldpmc{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/HTTP%E4%B8%8EHTTPS.jpg\" class=\"qqfxpnwldpmc\">\n</div>\n<p>HTTP 协议采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议 TLS/SSL 具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。而协议 TLS/SSL 具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。</p>\n<p>安全层的主要职责就是对发起的 HTTP 请求的数据进行加密操作 和 对接收到的 HTTP 的内容进行解密操作。</p>\n<h4 id=\"2-tlsssl的工作原理\"><a class=\"anchor\" href=\"#2-tlsssl的工作原理\">#</a> 2. TLS/SSL 的工作原理</h4>\n<p>TLS/SSL 全称安全传输层协议（Transport Layer Security）, 是介于 TCP 和 HTTP 之间的一层安全协议，不影响原有的 TCP 协议和 HTTP 协议，所以使用 HTTPS 基本上不需要对 HTTP 页面进行太多的改造。</p>\n<p>TLS/SSL 的功能实现主要依赖三类基本算法：散列函数 hash、对称加密、非对称加密。这三类算法的作用如下：</p>\n<ul>\n<li>基于散列函数验证信息的完整性</li>\n<li>对称加密算法采用协商的秘钥对数据加密</li>\n<li>非对称加密实现身份认证和秘钥协商</li>\n</ul>\n<div align=\"center\">\n    <style>.dozbpphzziee{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/TLS%E5%8A%A0%E5%AF%86.jpg\" class=\"dozbpphzziee\">\n</div>\n<p>（1）散列函数 hash<br />\n 常见的散列函数有 MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。<br />\n特点： 在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。</p>\n<p>（2）对称加密<br />\n对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。<br />\n常见的对称加密算法有 AES-CBC、DES、3DES、AES-GCM 等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。<br />\n<strong>特点</strong>： 对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和 N 个客户端通信，需要维持 N 个密码记录且不能修改密码。</p>\n<p>（3）非对称加密<br />\n非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。<br />\n用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。<br />\n我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。<br />\n但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。<br />\n常见的非对称加密算法有 RSA、ECC、DH 等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。<br />\n特点： 非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。<br />\n综合上述算法特点，TLS/SSL 的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。</p>\n<h4 id=\"3-数字证书是什么\"><a class=\"anchor\" href=\"#3-数字证书是什么\">#</a> 3. 数字证书是什么？</h4>\n<p>现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。</p>\n<p>首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。</p>\n<p>这个方法最重要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。</p>\n<h4 id=\"4-https通信握手过程\"><a class=\"anchor\" href=\"#4-https通信握手过程\">#</a> 4. HTTPS 通信（握手）过程</h4>\n<p>HTTPS 的通信过程如下：</p>\n<ul>\n<li>客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。</li>\n<li>服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。</li>\n<li>客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。</li>\n<li>服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。</li>\n<li>客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。</li>\n</ul>\n<h4 id=\"5-https的特点\"><a class=\"anchor\" href=\"#5-https的特点\">#</a> 5. HTTPS 的特点</h4>\n<p>HTTPS 的优点如下：</p>\n<ul>\n<li>使用 HTTPS 协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；</li>\n<li>使用 HTTPS 协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；</li>\n<li>HTTPS 是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；<br />\nHTTPS 的缺点如下：</li>\n<li>HTTPS 需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；</li>\n<li>HTTPS 协议握手阶段比较费时，增加页面的加载时间；</li>\n<li>SSL 证书是收费的，功能越强大的证书费用越高；</li>\n<li>HTTPS 连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；</li>\n<li>SSL 证书需要绑定 IP，不能再同一个 IP 上绑定多个域名。</li>\n</ul>\n<h4 id=\"6-https是如何保证安全的\"><a class=\"anchor\" href=\"#6-https是如何保证安全的\">#</a> 6. HTTPS 是如何保证安全的？</h4>\n<p>先理解两个概念：</p>\n<ul>\n<li>对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。</li>\n<li>⾮对称加密：</li>\n</ul>\n<ol>\n<li>私钥 + 公钥 = 密钥对</li>\n<li>即⽤私钥加密的数据，只有对应的公钥才能解密，⽤公钥加密的数据，只有对应的私钥才能解密</li>\n<li>因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对，通信之前双⽅会先把⾃⼰的公钥都先发给对⽅</li>\n<li>然后对⽅再拿着这个公钥来加密数据响应给对⽅，等到到了对⽅那⾥，对⽅再⽤⾃⼰的私钥进⾏解密</li>\n</ol>\n<p>⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。</p>\n<p>解决⽅案：</p>\n<p>结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。</p>\n<p>此时⼜带来⼀个问题，中间⼈问题： 如果此时在客户端和服务器之间存在⼀个中间⼈，这个中间⼈只需要把原本双⽅通信互发的公钥，换成⾃⼰的公钥，这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。</p>\n<p>所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。 证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的 HASH 算法、证书到期时间等。</p>\n<p>但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。</p>\n<p>数字签名就是⽤ CA ⾃带的 HASH 算法对证书的内容进⾏ HASH 得到⼀个摘要，再⽤ CA 的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候，我再⽤同样的 Hash 算法，再次⽣成消息摘要，然后⽤ CA 的公钥对数字签名解密，得到 CA 创建的消息摘要，两者⼀⽐，就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。</p>\n<h3 id=\"三-http状态码\"><a class=\"anchor\" href=\"#三-http状态码\">#</a> 三、HTTP 状态码</h3>\n<p>状态码的类别：</p>\n<div align=\"center\">\n    <style>.bfnppyqhmtjk{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/%E7%8A%B6%E6%80%81%E7%A0%81%E7%B1%BB%E5%88%AB.jpg\" class=\"bfnppyqhmtjk\">\n</div>\n<ol>\n<li>\n<p>2XX (Success 成功状态码)<br />\n 状态码 2XX 表示请求被正常处理了。<br />\n（1）200 OK<br />\n200 OK 表示客户端发来的请求被服务器端正常处理了。<br />\n（2）204 No Content<br />\n 该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。<br />\n（3）206 Partial Content<br />\n 该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p>\n</li>\n<li>\n<p>3XX (Redirection 重定向状态码)</p>\n</li>\n</ol>\n<p>3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p>\n<p>（1）301 Moved Permanently<br />\n 永久重定向。 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的 URI 保存为书签，此时会按照 Location 中新的 URI 重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</p>\n<p>使用场景：</p>\n<ul>\n<li>当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用 301 就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。</li>\n<li>在搜索引擎的搜索结果中出现了不带 www 的域名，而带 www 的域名却没有收录，这个时候可以用 301 重定向来告诉搜索引擎我们目标的域名是哪一个。</li>\n</ul>\n<p>（2）302 Found<br />\n 临时重定向。 该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回 302 代码，搜索引擎认为新的网址只是暂时的。</p>\n<p>使用场景：</p>\n<ul>\n<li>当我们在做活动时，登录到首页自动重定向，进入活动页面。</li>\n<li>未登陆的用户访问用户中心重定向到登录页面。</li>\n<li>访问 404 页面重新定向到首页。</li>\n</ul>\n<p>（3）303 See Other<br />\n 该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。 303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。<br />\n303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。</p>\n<p>注意：</p>\n<ul>\n<li>当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成 GET，并删除请求报文内的主体，之后请求会再次自动发送。</li>\n<li>301、302 标准是禁止将 POST 方法变成 GET 方法的，但实际大家都会这么做。</li>\n</ul>\n<p>（4）304 Not Modified<br />\n 浏览器缓存相关。 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。<br />\n带条件的请求（Http 条件请求）：使用 Get 方法 请求，请求报文中包含（if-match、if-none-match、if-modified-since、if-unmodified-since、if-range）中任意首部。<br />\n状态码 304 并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。</p>\n<p>（5）307 Temporary Redirect<br />\n307 表示临时重定向。 该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。307 会遵守浏览器标准，不会从 POST 变成 GET。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。</p>\n<ol start=\"3\">\n<li>4XX (Client Error 客户端错误状态码)</li>\n</ol>\n<p>4XX 的响应结果表明客户端是发生错误的原因所在。<br />\n（1）400 Bad Request<br />\n 该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</p>\n<p>（2）401 Unauthorized<br />\n 该状态码表示发送的请求需要有通过 HTTP 认证 (BASIC 认证、DIGEST 认证) 的认证信息。若之前已进行过一次请求，则表示用户认证失败。<br />\n返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询 (challenge) 用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。<br />\n以下情况会出现 401：</p>\n<ul>\n<li>401.1 - 登录失败。</li>\n<li>401.2 - 服务器配置导致登录失败。</li>\n<li>401.3 - 由于 ACL 对资源的限制而未获得授权。</li>\n<li>401.4 - 筛选器授权失败。</li>\n<li>401.5 - ISAPI/CGI 应用程序授权失败。</li>\n<li>401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</li>\n</ul>\n<p>（3）403 Forbidden<br />\n 该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。<br />\nIIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：</p>\n<ul>\n<li>403.1 - 执行访问被禁止。</li>\n<li>403.2 - 读访问被禁止。</li>\n<li>403.3 - 写访问被禁止。</li>\n<li>403.4 - 要求 SSL。</li>\n<li>403.5 - 要求 SSL 128。</li>\n<li>403.6 - IP 地址被拒绝。</li>\n<li>403.7 - 要求客户端证书。</li>\n<li>403.8 - 站点访问被拒绝。</li>\n<li>403.9 - 用户数过多。</li>\n<li>403.10 - 配置无效。</li>\n<li>403.11 - 密码更改。</li>\n<li>403.12 - 拒绝访问映射表。</li>\n<li>403.13 - 客户端证书被吊销。</li>\n<li>403.14 - 拒绝目录列表。</li>\n<li>403.15 - 超出客户端访问许可。</li>\n<li>403.16 - 客户端证书不受信任或无效。</li>\n<li>403.17 - 客户端证书已过期或尚未生效</li>\n<li>403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</li>\n<li>403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</li>\n<li>403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</li>\n</ul>\n<p>（4）404 Not Found<br />\n 该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 以下情况会出现 404：</p>\n<ul>\n<li>404.0 -（无） – 没有找到文件或目录。</li>\n<li>404.1 - 无法在所请求的端口上访问 Web 站点。</li>\n<li>404.2 - Web 服务扩展锁定策略阻止本请求。</li>\n<li>404.3 - MIME 映射策略阻止本请求。</li>\n</ul>\n<p>（5）405 Method Not Allowed<br />\n 该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法，如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Methods<span class=\"token operator\">:</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span><span class=\"token constant\">HEAD</span><span class=\"token punctuation\">,</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">,</span><span class=\"token constant\">PATCH</span><span class=\"token punctuation\">,</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span><span class=\"token constant\">DELETE</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>5XX (Server Error 服务器错误状态码)<br />\n 5XX 的响应结果表明服务器本身发生错误。</li>\n</ol>\n<p>（1）500 Internal Server Error<br />\n 该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</p>\n<p>（2）502 Bad Gateway<br />\n 该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复。以下情况会出现 502：</p>\n<ul>\n<li>502.1 - CGI （通用网关接口）应用程序超时。</li>\n<li>502.2 - CGI （通用网关接口）应用程序出错。</li>\n</ul>\n<p>（3）503 Service Unavailable<br />\n 该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。<br />\n使用场景：</p>\n<ul>\n<li>服务器停机维护时，主动用 503 响应请求；</li>\n<li>nginx 设置限速，超过限速，会返回 503。</li>\n</ul>\n<p>（4）504 Gateway Timeout<br />\n 该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是 HTTP 1.1 中新加入的。<br />\n使用场景：代码执行时间超时，或者发生了死循环。</p>\n<ol start=\"5\">\n<li>总结<br />\n（1）2XX 成功</li>\n</ol>\n<p>200 OK，表示从客户端发来的请求在服务器端被正确处理<br />\n 204 No content，表示请求成功，但响应报文不含实体的主体部分<br />\n 205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容<br />\n 206 Partial Content，进行范围请求</p>\n<p>（2）3XX 重定向</p>\n<p>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL<br />\n302 found，临时性重定向，表示资源临时被分配了新的 URL<br />\n303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源<br />\n 304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况<br />\n 307 temporary redirect，临时重定向，和 302 含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</p>\n<p>（3）4XX 客户端错误</p>\n<p>400 bad request，请求报文存在语法错误<br />\n 401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息<br />\n 403 forbidden，表示对请求资源的访问被服务器拒绝<br />\n 404 not found，表示在服务器上没有找到请求的资源</p>\n<p>（4）5XX 服务器错误</p>\n<p>500 internal sever error，表示服务器端在执行请求时发生了错误<br />\n 501 Not Implemented，表示服务器不支持当前请求所需要的某个功能<br />\n 503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</p>\n<ol start=\"6\">\n<li>同样是重定向，307，303，302 的区别？<br />\n302 是 http1.0 的协议状态码，在 http1.1 版本的时候为了细化 302 状态码⼜出来了两个 303 和 307。 303 明确表示客户端应当采⽤ get ⽅法获取资源，他会把 POST 请求变为 GET 请求进⾏重定向。 307 会遵照浏览器标准，不会从 post 变为 get。</li>\n</ol>\n","length":18892,"excerpt":"","more":"<h2 id=\"计算机网络知识总结篇httphttps\"><a class=\"anchor\" href=\"#计算机网络知识总结篇httphttps\">#</a> 计算机网络知识总结篇：HTTP，HTTPS</h2>\n<h3 id=\"一-http协议\"><a class=\"anchor\" href=\"#一-http协议\">#</a> 一、HTTP 协议</h3>\n<h4 id=\"1-get和post的请求的区别\"><a class=\"anchor\" href=\"#1-get和post的请求的区别\">#</a> 1. GET 和 POST 的请求的区别</h4>\n<p>Post 和 Get 是 HTTP 请求的两种方法，其区别如下：</p>\n<ul>\n<li>应用场景： GET 请求是一个幂等的请求，一般 Get 请求用于对服务器资源不会产生影响的场景，比如说请求一个网页的资源。而 Post 不是一个幂等的请求，一般用于对服务器资源会产生影响的情景，比如注册用户这一类的操作。</li>\n<li>是否缓存： 因为两者应用场景不同，浏览器一般会对 Get 请求缓存，但很少对 Post 请求缓存。</li>\n<li>发送的报文格式： Get 请求的报文中实体部分为空，Post 请求的报文中实体部分一般为向服务器发送的数据。</li>\n<li>安全性： Get 请求可以将请求的参数放入 url 中向服务器发送，这样的做法相对于 Post 请求来说是不太安全的，因为请求的 url 会被保留在历史记录中。</li>\n<li>请求长度： 浏览器由于对 url 长度的限制，所以会影响 get 请求发送数据时的长度。这个限制是浏览器规定的，并不是 RFC 规定的。</li>\n<li>参数类型： post 的参数传递支持更多的数据类型。</li>\n</ul>\n<h4 id=\"2-post和put请求的区别\"><a class=\"anchor\" href=\"#2-post和put请求的区别\">#</a> 2. POST 和 PUT 请求的区别</h4>\n<ul>\n<li>PUT 请求是向服务器端发送数据，从而修改数据的内容，但是不会增加数据的种类等，也就是说无论进行多少次 PUT 操作，其结果并没有不同。（可以理解为是<strong>更新数据</strong>）</li>\n<li>POST 请求是向服务器端发送数据，该请求会改变数据的种类等资源，它会创建新的内容。（可以理解为是<strong>创建数据</strong>）</li>\n</ul>\n<h4 id=\"3常见的http请求头和响应头\"><a class=\"anchor\" href=\"#3常见的http请求头和响应头\">#</a> 3. 常见的 HTTP 请求头和响应头</h4>\n<p>HTTP Request Header 常见的请求头：</p>\n<ul>\n<li>Accept: 浏览器能够处理的内容类型</li>\n<li>Accept-Charset: 浏览器能够显示的字符集</li>\n<li>Accept-Encoding：浏览器能够处理的压缩编码</li>\n<li>Accept-Language：浏览器当前设置的语言</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cookie：当前页面设置的任何 Cookie</li>\n<li>Host：发出请求的页面所在的域</li>\n<li>Referer：发出请求的页面的 URL</li>\n<li>User-Agent：浏览器的用户代理字符串</li>\n</ul>\n<p>HTTP Responses Header 常见的响应头：</p>\n<ul>\n<li>Date：表示消息发送的时间，时间的描述格式由 rfc822 定义</li>\n<li>server: 服务器名称</li>\n<li>Connection：浏览器与服务器之间连接的类型</li>\n<li>Cache-Control：控制 HTTP 缓存</li>\n<li>content-type: 表示后面的文档属于什么 MIME 类型</li>\n</ul>\n<p>常见的 Content-Type 属性值有以下四种：<br />\n（1）application/x-www-form-urlencoded：浏览器的原生 form 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。该种方式提交的数据放在 body 里面，数据按照 key1=val1&amp;key2=val2 的方式进行编码，key 和 val 都进行了 URL 转码。<br />\n（2）multipart/form-data：该种方式也是一个常见的 POST 提交方式，通常表单上传文件时使用该种方式。<br />\n（3）application/json：服务器消息主体是序列化后的 JSON 字符串。<br />\n（4）text/xml：该种方式主要用来提交 XML 格式的数据。</p>\n<h4 id=\"4http状态码304是多好还是少好\"><a class=\"anchor\" href=\"#4http状态码304是多好还是少好\">#</a> 4.HTTP 状态码 304 是多好还是少好</h4>\n<p>服务器为了提高网站访问速度，对之前访问的部分页面指定缓存机制，当客户端在此对这些页面进行请求，服务器会根据缓存内容判断页面与之前是否相同，若相同便直接返回 304，此时客户端调用缓存内容，不必进行二次下载。</p>\n<p>状态码 304 不应该认为是一种错误，而是对客户端有缓存情况下服务端的一种响应。</p>\n<p>搜索引擎蜘蛛会更加青睐内容源更新频繁的网站。通过特定时间内对网站抓取返回的状态码来调节对该网站的抓取频次。若网站在一定时间内一直处于 304 的状态，那么蜘蛛可能会降低对网站的抓取次数。相反，若网站变化的频率非常之快，每次抓取都能获取新内容，那么日积月累，的回访率也会提高。</p>\n<p>产生较多 304 状态码的原因：</p>\n<ul>\n<li>页面更新周期长或不更新</li>\n<li>纯静态页面或强制生成静态 html</li>\n</ul>\n<p>304 状态码出现过多会造成以下问题：</p>\n<ul>\n<li>网站快照停止；</li>\n<li>收录减少；</li>\n<li>权重下降。</li>\n</ul>\n<h4 id=\"5-常见的http请求方法\"><a class=\"anchor\" href=\"#5-常见的http请求方法\">#</a> 5. 常见的 HTTP 请求方法</h4>\n<ul>\n<li>GET: 向服务器获取数据；</li>\n<li>POST：将实体提交到指定的资源，通常会造成服务器资源的修改；</li>\n<li>PUT：上传文件，更新数据；</li>\n<li>DELETE：删除服务器上的对象；</li>\n<li>HEAD：获取报文首部，与 GET 相比，不返回报文主体部分；</li>\n<li>OPTIONS：询问支持的请求方法，用来跨域请求；</li>\n<li>CONNECT：要求在与代理服务器通信时建立隧道，使用隧道进行 TCP 通信；</li>\n<li>TRACE: 回显服务器收到的请求，主要⽤于测试或诊断。</li>\n</ul>\n<h4 id=\"6-options请求方法及使用场景\"><a class=\"anchor\" href=\"#6-options请求方法及使用场景\">#</a> 6. OPTIONS 请求方法及使用场景</h4>\n<p>OPTIONS 是除了 GET 和 POST 之外的其中一种 HTTP 请求方法。</p>\n<p>OPTIONS 方法是用于请求获得由 Request-URI 标识的资源在请求 / 响应的通信过程中可以使用的功能选项。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。该请求方法的响应不能缓存。</p>\n<p>OPTIONS 请求方法的主要用途有两个：</p>\n<ul>\n<li>获取服务器支持的所有 HTTP 请求方法；</li>\n<li>用来检查访问权限。例如：在进行 CORS 跨域资源共享时，对于复杂请求，就是使用 OPTIONS 方法发送嗅探请求，以判断是否有对指定资源的访问权限。</li>\n</ul>\n<h4 id=\"7-http-10-和-http-11-之间有哪些区别\"><a class=\"anchor\" href=\"#7-http-10-和-http-11-之间有哪些区别\">#</a> 7. HTTP 1.0 和 HTTP 1.1 之间有哪些区别？</h4>\n<p>HTTP 1.0 和 HTTP 1.1 有以下区别：</p>\n<ul>\n<li>连接方面，http1.0 默认使用非持久连接，而 http1.1 默认使用持久连接。http1.1 通过使用持久连接来使多个 http 请求复用同一个 TCP 连接，以此来避免使用非持久连接时每次需要建立连接的时延。</li>\n<li>资源请求方面，在 http1.0 中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，http1.1 则在请求头引入了 range 头域，它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</li>\n<li>缓存方面，在 http1.0 中主要使用 header 里的 If-Modified-Since、Expires 来做为缓存判断的标准，http1.1 则引入了更多的缓存控制策略，例如 Etag、If-Unmodified-Since、If-Match、If-None-Match 等更多可供选择的缓存头来控制缓存策略。</li>\n<li>http1.1 中新增了 host 字段，用来指定服务器的域名。http1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机，并且它们共享一个 IP 地址。因此有了 host 字段，这样就可以将请求发往到同一台服务器上的不同网站。</li>\n<li>http1.1 相对于 http1.0 还新增了很多请求方法，如 PUT、HEAD、OPTIONS 等。</li>\n</ul>\n<h4 id=\"8-http-11-和-http-20-的区别\"><a class=\"anchor\" href=\"#8-http-11-和-http-20-的区别\">#</a> 8. HTTP 1.1 和 HTTP 2.0 的区别</h4>\n<ul>\n<li>二进制协议：HTTP/2 是一个二进制协议。在 HTTP/1.1 版中，报文的头信息必须是文本（ASCII 编码），数据体可以是文本，也可以是二进制。HTTP/2 则是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为 &quot;帧&quot;，可以分为头信息帧和数据帧。 帧的概念是它实现多路复用的基础。</li>\n<li>多路复用： HTTP/2 实现了多路复用，HTTP/2 仍然复用 TCP 连接，但是在一个连接里，客户端和服务器都可以同时发送多个请求或回应，而且不用按照顺序一一发送，这样就避免了 &quot;队头堵塞&quot;【1】的问题。</li>\n<li>数据流： HTTP/2 使用了数据流的概念，因为 HTTP/2 的数据包是不按顺序发送的，同一个连接里面连续的数据包，可能属于不同的请求。因此，必须要对数据包做标记，指出它属于哪个请求。HTTP/2 将每个请求或回应的所有数据包，称为一个数据流。每个数据流都有一个独一无二的编号。数据包发送时，都必须标记数据流 ID ，用来区分它属于哪个数据流。</li>\n<li>头信息压缩：HTTP/2 实现了头信息压缩，由于 HTTP 1.1 协议不带状态，每次请求都必须附上所有信息。所以，请求的很多字段都是重复的，比如 Cookie 和 User Agent ，一模一样的内容，每次请求都必须附带，这会浪费很多带宽，也影响速度。HTTP/2 对这一点做了优化，引入了头信息压缩机制。一方面，头信息使用 gzip 或 compress 压缩后再发送；另一方面，客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就能提高速度了。</li>\n<li>服务器推送：HTTP/2 允许服务器未经请求，主动向客户端发送资源，这叫做服务器推送。使用服务器推送提前给客户端推送必要的资源，这样就可以相对减少一些延迟时间。这里需要注意的是 http2 下服务器主要推送的是静态资源，和 WebSocket 以及使用 SSE 等方式向客户端发送即时数据的推送是不同的。</li>\n</ul>\n<p>P.S. 队头堵塞：<br />\n队头堵塞是由 HTTP 基本的 “请求 - 应答” 模型所导致的。HTTP 规定报文必须是 “一发一收”，这就形成了一个先进先出的 “串行” 队列。队列里的请求是没有优先级的，只有入队的先后顺序，排在最前面的请求会被最优先处理。如果队首的请求因为处理的太慢耽误了时间，那么队列里后面的所有请求也不得不跟着一起等待，结果就是其他的请求承担了不应有的时间成本，造成了队头堵塞的现象。</p>\n<h4 id=\"9-http和https协议的区别\"><a class=\"anchor\" href=\"#9-http和https协议的区别\">#</a> 9. HTTP 和 HTTPS 协议的区别</h4>\n<p>HTTP 和 HTTPS 协议的主要区别如下：</p>\n<ul>\n<li>HTTPS 协议需要 CA 证书，费用较高；而 HTTP 协议不需要；</li>\n<li>HTTP 协议是超文本传输协议，信息是明文传输的，HTTPS 则是具有安全性的 SSL 加密传输协议；</li>\n<li>使用不同的连接方式，端口也不同，HTTP 协议端口是 80，HTTPS 协议端口是 443；</li>\n<li>HTTP 协议连接很简单，是无状态的；HTTPS 协议是有 SSL 和 HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 更加安全。</li>\n</ul>\n<h4 id=\"10-get方法url长度限制的原因\"><a class=\"anchor\" href=\"#10-get方法url长度限制的原因\">#</a> 10. GET 方法 URL 长度限制的原因</h4>\n<p>实际上 HTTP 协议规范并没有对 get 方法请求的 url 长度进行限制，这个限制是特定的浏览器及服务器对它的限制。<br />\nIE 对 URL 长度的限制是 2083 字节 (2K+35)。由于 IE 浏览器对 URL 长度的允许值是最小的，所以开发过程中，只要 URL 不超过 2083 字节，那么在所有浏览器中工作都不会有问题。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">GET</span>的长度值 <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span>（<span class=\"token number\">2083</span>）<span class=\"token operator\">-</span> （你的Domain<span class=\"token operator\">+</span>Path）<span class=\"token operator\">-</span><span class=\"token number\">2</span>（<span class=\"token number\">2</span>是<span class=\"token keyword\">get</span>请求中<span class=\"token operator\">?</span><span class=\"token operator\">=</span>两个字符的长度）</pre></td></tr></table></figure><p>下面看一下主流浏览器对 get 方法中 url 的长度限制范围：</p>\n<ul>\n<li>Microsoft Internet Explorer (Browser)：IE 浏览器对 URL 的最大限制为 2083 个字符，如果超过这个数字，提交按钮没有任何反应。</li>\n<li>Firefox (Browser)：对于 Firefox 浏览器 URL 的长度限制为 65,536 个字符。</li>\n<li>Safari (Browser)：URL 最大长度限制为 80,000 个字符。</li>\n<li>Opera (Browser)：URL 最大长度限制为 190,000 个字符。</li>\n<li>Google (chrome)：URL 最大长度限制为 8182 个字符。</li>\n</ul>\n<p>主流的服务器对 get 方法中 url 的长度限制范围：</p>\n<ul>\n<li>Apache (Server)：能接受最大 url 长度为 8192 个字符。</li>\n<li>Microsoft Internet Information Server (IIS)：能接受最大 url 的长度为 16384 个字符。</li>\n</ul>\n<p>根据上面的数据，可以知道，get 方法中的 URL 长度最长不超过 2083 个字符，这样所有的浏览器和服务器都可能正常工作。</p>\n<h4 id=\"11-当在浏览器中输入-googlecom-并且按下回车之后发生了什么\"><a class=\"anchor\" href=\"#11-当在浏览器中输入-googlecom-并且按下回车之后发生了什么\">#</a> 11. 当在浏览器中输入 <span class=\"exturl\" data-url=\"aHR0cDovL0dvb2dsZS5jb20=\">Google.com</span> 并且按下回车之后发生了什么？</h4>\n<p>（1）解析 URL： 首先会对 URL 进行解析，分析所需要使用的传输协议和请求的资源的路径。如果输入的 URL 中的协议或者主机名不合法，将会把地址栏中输入的内容传递给搜索引擎。如果没有问题，浏览器会检查 URL 中是否出现了非法字符，如果存在非法字符，则对非法字符进行转义后再进行下一过程。</p>\n<p>（2）缓存判断： 浏览器会判断所请求的资源是否在缓存里，如果请求的资源在缓存里并且没有失效，那么就直接使用，否则向服务器发起新的请求。</p>\n<p>（3）DNS 解析： 下一步首先需要获取的是输入的 URL 中的域名的 IP 地址，首先会判断本地是否有该域名的 IP 地址的缓存，如果有则使用，如果没有则向本地 DNS 服务器发起请求。本地 DNS 服务器也会先检查是否存在缓存，如果没有就会先向根域名服务器发起请求，获得负责的顶级域名服务器的地址后，再向顶级域名服务器请求，然后获得负责的权威域名服务器的地址后，再向权威域名服务器发起请求，最终获得域名的 IP 地址后，本地 DNS 服务器再将这个 IP 地址返回给请求的用户。用户向本地 DNS 服务器发起请求属于递归请求，本地 DNS 服务器向各级域名服务器发起请求属于迭代请求。</p>\n<p>（4）获取 MAC 地址： 当浏览器得到 IP 地址后，数据传输还需要知道目的主机 MAC 地址，因为应用层下发数据给传输层，TCP 协议会指定源端口号和目的端口号，然后下发给网络层。网络层会将本机地址作为源地址，获取的 IP 地址作为目的地址。然后将下发给数据链路层，数据链路层的发送需要加入通信双方的 MAC 地址，本机的 MAC 地址作为源 MAC 地址，目的 MAC 地址需要分情况处理。通过将 IP 地址与本机的子网掩码相与，可以判断是否与请求主机在同一个子网里，如果在同一个子网里，可以使用 APR 协议获取到目的主机的 MAC 地址，如果不在一个子网里，那么请求应该转发给网关，由它代为转发，此时同样可以通过 ARP 协议来获取网关的 MAC 地址，此时目的主机的 MAC 地址应该为网关的地址。</p>\n<p>（5）TCP 三次握手： 下面是 TCP 建立连接的三次握手的过程，首先客户端向服务器发送一个 SYN 连接请求报文段和一个随机序号，服务端接收到请求后向服务器端发送一个 SYN ACK 报文段，确认连接请求，并且也向客户端发送一个随机序号。客户端接收服务器的确认应答后，进入连接建立的状态，同时向服务器也发送一个 ACK 确认报文段，服务器端接收到确认后，也进入连接建立状态，此时双方的连接就建立起来了。</p>\n<p>（6）HTTPS 握手： 如果使用的是 HTTPS 协议，在通信前还存在 TLS 的一个四次握手的过程。首先由客户端向服务器端发送使用的协议的版本号、一个随机数和可以使用的加密方法。服务器端收到后，确认加密的方法，也向客户端发送一个随机数和自己的数字证书。客户端收到后，首先检查数字证书是否有效，如果有效，则再生成一个随机数，并使用证书中的公钥对随机数加密，然后发送给服务器端，并且还会提供一个前面所有内容的 hash 值供服务器端检验。服务器端接收后，使用自己的私钥对数据解密，同时向客户端发送一个前面所有内容的 hash 值供客户端检验。这个时候双方都有了三个随机数，按照之前所约定的加密方法，使用这三个随机数生成一把秘钥，以后双方通信前，就使用这个秘钥对数据进行加密后再传输。</p>\n<p>（7）返回数据： 当页面请求发送到服务器端后，服务器端会返回一个 html 文件作为响应，浏览器接收到响应后，开始对 html 文件进行解析，开始页面的渲染过程。</p>\n<p>（8）页面渲染： 浏览器首先会根据 html 文件构建 DOM 树，根据解析到的 css 文件构建 CSSOM 树，如果遇到 script 标签，则判端是否含有 defer 或者 async 属性，要不然 script 的加载和执行会造成页面的渲染的阻塞。当 DOM 树和 CSSOM 树建立好后，根据它们来构建渲染树。渲染树构建好后，会根据渲染树来进行布局。布局完成后，最后使用浏览器的 UI 接口对页面进行绘制。这个时候整个页面就显示出来了。</p>\n<p>（9）TCP 四次挥手： 最后一步是 TCP 断开连接的四次挥手过程。若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</p>\n<h4 id=\"12-对keep-alive的理解\"><a class=\"anchor\" href=\"#12-对keep-alive的理解\">#</a> 12. 对 keep-alive 的理解</h4>\n<p>HTTP1.0 中默认是在每次请求 / 应答，客户端和服务器都要新建一个连接，完成之后立即断开连接，这就是短连接。<br />\n当使用 Keep-Alive 模式时，Keep-Alive 功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接，这就是长连接。其使用方法如下：</p>\n<ul>\n<li>HTTP1.0 版本是默认没有 Keep-alive 的（也就是默认会发送 keep-alive），所以要想连接得到保持，必须手动配置发送 Connection: keep-alive 字段。若想断开 keep-alive 连接，需发送 Connection:close 字段；</li>\n<li>HTTP1.1 规定了默认保持长连接，数据传输完成了保持 TCP 连接不断开，等待在同域名下继续用这个通道传输数据。如果需要关闭，需要客户端发送 Connection：close 首部字段。</li>\n</ul>\n<p>Keep-Alive 的建立过程：</p>\n<ul>\n<li>客户端向服务器在发送请求报文同时在首部添加发送 Connection 字段</li>\n<li>服务器收到请求并处理 Connection 字段</li>\n<li>服务器回送 Connection:Keep-Alive 字段给客户端</li>\n<li>客户端接收到 Connection 字段</li>\n<li>Keep-Alive 连接建立成功</li>\n</ul>\n<p>服务端自动断开过程（也就是没有 keep-alive）：</p>\n<ul>\n<li>客户端向服务器只是发送内容报文（不包含 Connection 字段）</li>\n<li>服务器收到请求并处理</li>\n<li>服务器返回客户端请求的资源并关闭连接</li>\n<li>客户端接收资源，发现没有 Connection 字段，断开连接</li>\n</ul>\n<p>客户端请求断开连接过程：</p>\n<ul>\n<li>客户端向服务器发送 Connection:close 字段</li>\n<li>服务器收到请求并处理 connection 字段</li>\n<li>服务器回送响应资源并断开连接</li>\n<li>客户端接收资源并断开连接</li>\n</ul>\n<p>开启 Keep-Alive 的优点：</p>\n<ul>\n<li>较少的 CPU 和内存的使⽤（由于同时打开的连接的减少了）；</li>\n<li>允许请求和应答的 HTTP 管线化；</li>\n<li>降低拥塞控制 （TCP 连接减少了）；</li>\n<li>减少了后续请求的延迟（⽆需再进⾏握⼿）；</li>\n<li>报告错误⽆需关闭 TCP 连接；</li>\n</ul>\n<p>开启 Keep-Alive 的缺点：<br />\n长时间的 Tcp 连接容易导致系统资源无效占用，浪费系统资源。</p>\n<h4 id=\"13-页面有多张图片http是怎样的加载表现\"><a class=\"anchor\" href=\"#13-页面有多张图片http是怎样的加载表现\">#</a> 13. 页面有多张图片，HTTP 是怎样的加载表现？</h4>\n<ul>\n<li>在 HTTP 1 下，浏览器对一个域名下最大 TCP 连接数为 6，所以会请求多次。可以用多域名部署解决。这样可以提高同时请求的数目，加快页面图片的获取速度。</li>\n<li>在 HTTP 2 下，可以一瞬间加载出来很多资源，因为，HTTP2 支持多路复用，可以在一个 TCP 连接中发送多个 HTTP 请求。</li>\n</ul>\n<h4 id=\"14-http2的头部压缩算法是怎样的\"><a class=\"anchor\" href=\"#14-http2的头部压缩算法是怎样的\">#</a> 14. HTTP2 的头部压缩算法是怎样的？</h4>\n<p>HTTP2 的头部压缩是 HPACK 算法。在客户端和服务器两端建立 “字典”，用索引号表示重复的字符串，采用哈夫曼编码来压缩整数和字符串，可以达到 50%~90% 的高压缩率。</p>\n<p>具体来说:</p>\n<ul>\n<li>在客户端和服务器端使用 “首部表” 来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送；</li>\n<li>首部表在 HTTP/2 的连接存续期内始终存在，由客户端和服务器共同渐进地更新；</li>\n<li>每个新的首部键值对要么被追加到当前表的末尾，要么替换表中之前的值。</li>\n</ul>\n<p>如有两个请求， 请求二只是和请求一的:path 字段不同，其他都相同，请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销。</p>\n<h4 id=\"15-http请求报文是什么样的\"><a class=\"anchor\" href=\"#15-http请求报文是什么样的\">#</a> 15. HTTP 请求报文是什么样的？</h4>\n<p>请求报⽂有 4 部分组成:</p>\n<ul>\n<li>请求⾏</li>\n<li>请求头部</li>\n<li>空⾏</li>\n<li>请求体</li>\n</ul>\n<p>其中：<br />\n（1）请求⾏包括：请求⽅法字段、URL 字段、HTTP 协议版本字段。它们⽤空格分隔。例如，GET /index.html HTTP/1.1。<br />\n（2）请求头部：请求头部由关键字 / 值对组成，每⾏⼀对，关键字和值⽤英⽂冒号 “:” 分隔</p>\n<ul>\n<li>User-Agent：产⽣请求的浏览器类型。</li>\n<li>Accept：客户端可识别的内容类型列表。</li>\n<li>Host：请求的主机名，允许多个域名同处⼀个 IP 地址，即虚拟主机。</li>\n</ul>\n<p>（3）请求体: post put 等请求携带的数据</p>\n<h4 id=\"16-http响应报文是什么样的\"><a class=\"anchor\" href=\"#16-http响应报文是什么样的\">#</a> 16.  HTTP 响应报文是什么样的？</h4>\n<p>响应报⽂有 4 部分组成:</p>\n<ul>\n<li>响应⾏</li>\n<li>响应头部</li>\n<li>空⾏</li>\n<li>响应体</li>\n</ul>\n<p>其中：</p>\n<ul>\n<li>响应⾏：由网络协议版本，状态码和状态码的原因短语组成，例如 HTTP/1.1 200 OK 。</li>\n<li>响应头部：响应部⾸组成</li>\n<li>响应体：服务器响应的数据</li>\n</ul>\n<h4 id=\"17-http协议的优点和缺点\"><a class=\"anchor\" href=\"#17-http协议的优点和缺点\">#</a> 17. HTTP 协议的优点和缺点</h4>\n<p>HTTP 是超文本传输协议，它定义了客户端和服务器之间交换报文的格式和方式，默认使用 80 端口。它使用 TCP 作为传输层协议，保证了数据传输的可靠性。</p>\n<p>HTTP 协议具有以下优点：</p>\n<ul>\n<li>支持客户端 / 服务器模式</li>\n<li>简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于 HTTP 协议简单，使得 HTTP 服务器的程序规模小，因而通信速度很快。</li>\n<li>无连接：无连接就是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接，采用这种方式可以节省传输时间。</li>\n<li>无状态：HTTP 协议是无状态协议，这里的状态是指通信过程的上下文信息。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能会导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就比较快。</li>\n<li>灵活：HTTP 允许传输任意类型的数据对象。正在传输的类型由 Content-Type 加以标记。</li>\n</ul>\n<p>HTTP 协议具有以下缺点：</p>\n<ul>\n<li>无状态： HTTP 是一个无状态的协议，HTTP 服务器不会保存关于客户的任何信息。</li>\n<li>明文传输： 协议中的报文使用的是文本形式，这就直接暴露给外界，不安全。</li>\n<li>不安全</li>\n</ul>\n<p>（1）通信使用明文（不加密），内容可能会被窃听；<br />\n（2）不验证通信方的身份，因此有可能遭遇伪装；<br />\n（3）无法证明报文的完整性，所以有可能已遭篡改；</p>\n<h4 id=\"18-说一下http-30\"><a class=\"anchor\" href=\"#18-说一下http-30\">#</a> 18. 说一下 HTTP 3.0</h4>\n<p>HTTP/3 基于 UDP 协议实现了类似于 TCP 的多路复用数据流、传输可靠性等功能，这套功能被称为 QUIC 协议。<br />\n1. 流量控制、传输可靠性功能：QUIC 在 UDP 的基础上增加了一层来保证数据传输可靠性，它提供了数据包重传、拥塞控制、以及其他一些 TCP 中的特性。<br />\n2. 集成 TLS 加密功能：目前 QUIC 使用 TLS1.3，减少了握手所花费的 RTT 数。<br />\n3. 多路复用：同一物理连接上可以有多个独立的逻辑数据流，实现了数据流的单独传输，解决了 TCP 的队头阻塞问题。<br />\n4. 快速握手：由于基于 UDP，可以实现使用 0 ~ 1 个 RTT 来建立连接。</p>\n<h4 id=\"19-http协议的性能怎么样\"><a class=\"anchor\" href=\"#19-http协议的性能怎么样\">#</a> 19. HTTP 协议的性能怎么样</h4>\n<p>HTTP 协议是基于 TCP/IP，并且使用了请求 - 应答的通信模式，所以性能的关键就在这两点里。</p>\n<ul>\n<li>长连接<br />\n HTTP 协议有两种连接模式，一种是持续连接，一种非持续连接。<br />\n（1）非持续连接指的是服务器必须为每一个请求的对象建立和维护一个全新的连接。<br />\n（2）持续连接下，TCP 连接默认不关闭，可以被多个请求复用。采用持续连接的好处是可以避免每次建立 TCP 连接三次握手时所花费的时间。</li>\n</ul>\n<p>对于不同版本的采用不同的连接方式：</p>\n<ul>\n<li>在 HTTP/1.0 每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无谓的 TCP 连接建立和断开，增加了通信开销。该版本使用的非持续的连接，但是可以在请求时，加上 Connection: keep-a live 来要求服务器不要关闭 TCP 连接。</li>\n<li>在 HTTP/1.1 提出了长连接的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。该版本及以后版本默认采用的是持续的连接。目前对于同一个域，大多数浏览器支持同时建立 6 个持久连接。</li>\n<li>管道网络传输<br />\n HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。<br />\n管道（pipeline）网络传输是指：可以在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。但是服务器还是按照顺序回应请求。如果前面的回应特别慢，后面就会有许多请求排队等着。这称为队头堵塞。</li>\n</ul>\n<div align=\"center\">\n    <style>.wwissvhvafua{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/http1%E9%95%BF%E7%9F%AD%E8%BF%9E%E6%8E%A5.jpg\" class=\"wwissvhvafua\">\n</div>\n<ul>\n<li>队头堵塞<br />\n HTTP 传输的报文必须是一发一收，但是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是 HTTP 队头阻塞问题。</li>\n</ul>\n<p>队头阻塞的解决方案：<br />\n（1）并发连接：对于一个域名允许分配多个长连接，那么相当于增加了任务队列，不至于一个队伍的任务阻塞其它所有任务。<br />\n（2）域名分片：将域名分出很多二级域名，它们都指向同样的一台服务器，能够并发的长连接数变多，解决了队头阻塞的问题。</p>\n<h4 id=\"20-url有哪些组成部分\"><a class=\"anchor\" href=\"#20-url有哪些组成部分\">#</a> 20. URL 有哪些组成部分</h4>\n<p>以下面的 URL 为例：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hc3B4ZmFucy5jb206ODA4MC9uZXdzL2luZGV4LmFzcD9ib2FyZElEPTUmYW1wO0lEPTI0NjE4JmFtcDtwYWdlPTEjbmFtZQ==\">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name</span></p>\n<p>从上面的 URL 可以看出，一个完整的 URL 包括以下几部分：</p>\n<ul>\n<li>协议部分：该 URL 的协议部分为 “http：”，这代表网页使用的是 HTTP 协议。在 Internet 中可以使用多种协议，如 HTTP，FTP 等等本例中使用的是 HTTP 协议。在 &quot;HTTP&quot; 后面的 “//” 为分隔符；</li>\n<li>域名部分：该 URL 的域名部分为 “<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5hc3B4ZmFucy5jb20=\">www.aspxfans.com</span>”。一个 URL 中，也可以使用 IP 地址作为域名使用.</li>\n<li>端口部分：跟在域名后面的是端口，域名和端口之间使用 “:” 作为分隔符。端口不是一个 URL 必须的部分，如果省略端口部分，将采用默认端口（HTTP 协议默认端口是 80，HTTPS 协议默认端口是 443）；</li>\n<li>虚拟目录部分：从域名后的第一个 “/” 开始到最后一个 “/” 为止，是虚拟目录部分。虚拟目录也不是一个 URL 必须的部分。本例中的虚拟目录是 “/news/”；</li>\n<li>文件名部分：从域名后的最后一个 “/” 开始到 “？” 为止，是文件名部分，如果没有 “?”, 则是从域名后的最后一个 “/” 开始到 “#” 为止，是文件部分，如果没有 “？” 和 “#”，那么从域名后的最后一个 “/” 开始到结束，都是文件名部分。</li>\n<li>锚部分：从 “#” 开始到最后，都是锚部分。本例中的锚部分是 “name”。锚部分也不是一个 URL 必须的部分；</li>\n<li>参数部分：从 “？” 开始到 “#” 为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为 “boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用 “&amp;” 作为分隔符。</li>\n</ul>\n<h4 id=\"21-与缓存相关的http请求头有哪些\"><a class=\"anchor\" href=\"#21-与缓存相关的http请求头有哪些\">#</a> 21. 与缓存相关的 HTTP 请求头有哪些</h4>\n<p>强缓存：</p>\n<ul>\n<li>Expires</li>\n<li>Cache-Control</li>\n</ul>\n<p>协商缓存：</p>\n<ul>\n<li>Etag、If-None-Match</li>\n<li>Last-Modified、If-Modified-Since</li>\n</ul>\n<h3 id=\"二-https协议\"><a class=\"anchor\" href=\"#二-https协议\">#</a> 二、HTTPS 协议</h3>\n<h4 id=\"1-什么是https协议\"><a class=\"anchor\" href=\"#1-什么是https协议\">#</a> 1. 什么是 HTTPS 协议？</h4>\n<p>超文本传输安全协议（Hypertext Transfer Protocol Secure，简称：HTTPS）是一种通过计算机网络进行安全通信的传输协议。HTTPS 经由 HTTP 进行通信，利用 SSL/TLS 来加密数据包。HTTPS 的主要目的是提供对网站服务器的身份认证，保护交换数据的隐私与完整性。</p>\n<div align=\"center\">\n    <style>.qqfxpnwldpmc{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/HTTP%E4%B8%8EHTTPS.jpg\" class=\"qqfxpnwldpmc\">\n</div>\n<p>HTTP 协议采用明文传输信息，存在信息窃听、信息篡改和信息劫持的风险，而协议 TLS/SSL 具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。而协议 TLS/SSL 具有身份验证、信息加密和完整性校验的功能，可以避免此类问题发生。</p>\n<p>安全层的主要职责就是对发起的 HTTP 请求的数据进行加密操作 和 对接收到的 HTTP 的内容进行解密操作。</p>\n<h4 id=\"2-tlsssl的工作原理\"><a class=\"anchor\" href=\"#2-tlsssl的工作原理\">#</a> 2. TLS/SSL 的工作原理</h4>\n<p>TLS/SSL 全称安全传输层协议（Transport Layer Security）, 是介于 TCP 和 HTTP 之间的一层安全协议，不影响原有的 TCP 协议和 HTTP 协议，所以使用 HTTPS 基本上不需要对 HTTP 页面进行太多的改造。</p>\n<p>TLS/SSL 的功能实现主要依赖三类基本算法：散列函数 hash、对称加密、非对称加密。这三类算法的作用如下：</p>\n<ul>\n<li>基于散列函数验证信息的完整性</li>\n<li>对称加密算法采用协商的秘钥对数据加密</li>\n<li>非对称加密实现身份认证和秘钥协商</li>\n</ul>\n<div align=\"center\">\n    <style>.dozbpphzziee{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/TLS%E5%8A%A0%E5%AF%86.jpg\" class=\"dozbpphzziee\">\n</div>\n<p>（1）散列函数 hash<br />\n 常见的散列函数有 MD5、SHA1、SHA256。该函数的特点是单向不可逆，对输入数据非常敏感，输出的长度固定，任何数据的修改都会改变散列函数的结果，可以用于防止信息篡改并验证数据的完整性。<br />\n特点： 在信息传输过程中，散列函数不能三都实现信息防篡改，由于传输是明文传输，中间人可以修改信息后重新计算信息的摘要，所以需要对传输的信息和信息摘要进行加密。</p>\n<p>（2）对称加密<br />\n对称加密的方法是，双方使用同一个秘钥对数据进行加密和解密。但是对称加密的存在一个问题，就是如何保证秘钥传输的安全性，因为秘钥还是会通过网络传输的，一旦秘钥被其他人获取到，那么整个加密过程就毫无作用了。 这就要用到非对称加密的方法。<br />\n常见的对称加密算法有 AES-CBC、DES、3DES、AES-GCM 等。相同的秘钥可以用于信息的加密和解密。掌握秘钥才能获取信息，防止信息窃听，其通讯方式是一对一。<br />\n<strong>特点</strong>： 对称加密的优势就是信息传输使用一对一，需要共享相同的密码，密码的安全是保证信息安全的基础，服务器和 N 个客户端通信，需要维持 N 个密码记录且不能修改密码。</p>\n<p>（3）非对称加密<br />\n非对称加密的方法是，我们拥有两个秘钥，一个是公钥，一个是私钥。公钥是公开的，私钥是保密的。<br />\n用私钥加密的数据，只有对应的公钥才能解密，用公钥加密的数据，只有对应的私钥才能解密。<br />\n我们可以将公钥公布出去，任何想和我们通信的客户， 都可以使用我们提供的公钥对数据进行加密，这样我们就可以使用私钥进行解密，这样就能保证数据的安全了。<br />\n但是非对称加密有一个缺点就是加密的过程很慢，因此如果每次通信都使用非对称加密的方式的话，反而会造成等待时间过长的问题。<br />\n常见的非对称加密算法有 RSA、ECC、DH 等。秘钥成对出现，一般称为公钥（公开）和私钥（保密）。公钥加密的信息只有私钥可以解开，私钥加密的信息只能公钥解开，因此掌握公钥的不同客户端之间不能相互解密信息，只能和服务器进行加密通信，服务器可以实现一对多的的通信，客户端也可以用来验证掌握私钥的服务器的身份。<br />\n特点： 非对称加密的特点就是信息一对多，服务器只需要维持一个私钥就可以和多个客户端进行通信，但服务器发出的信息能够被所有的客户端解密，且该算法的计算复杂，加密的速度慢。<br />\n综合上述算法特点，TLS/SSL 的工作方式就是客户端使用非对称加密与服务器进行通信，实现身份的验证并协商对称加密使用的秘钥。对称加密算法采用协商秘钥对信息以及信息摘要进行加密通信，不同节点之间采用的对称秘钥不同，从而保证信息只能通信双方获取。这样就解决了两个方法各自存在的问题。</p>\n<h4 id=\"3-数字证书是什么\"><a class=\"anchor\" href=\"#3-数字证书是什么\">#</a> 3. 数字证书是什么？</h4>\n<p>现在的方法也不一定是安全的，因为没有办法确定得到的公钥就一定是安全的公钥。可能存在一个中间人，截取了对方发给我们的公钥，然后将他自己的公钥发送给我们，当我们使用他的公钥加密后发送的信息，就可以被他用自己的私钥解密。然后他伪装成我们以同样的方法向对方发送信息，这样我们的信息就被窃取了，然而自己还不知道。为了解决这样的问题，可以使用数字证书。</p>\n<p>首先使用一种 Hash 算法来对公钥和其他信息进行加密，生成一个信息摘要，然后让有公信力的认证中心（简称 CA ）用它的私钥对消息摘要加密，形成签名。最后将原始的信息和签名合在一起，称为数字证书。当接收方收到数字证书的时候，先根据原始信息使用同样的 Hash 算法生成一个摘要，然后使用公证处的公钥来对数字证书中的摘要进行解密，最后将解密的摘要和生成的摘要进行对比，就能发现得到的信息是否被更改了。</p>\n<p>这个方法最重要的是认证中心的可靠性，一般浏览器里会内置一些顶层的认证中心的证书，相当于我们自动信任了他们，只有这样才能保证数据的安全。</p>\n<h4 id=\"4-https通信握手过程\"><a class=\"anchor\" href=\"#4-https通信握手过程\">#</a> 4. HTTPS 通信（握手）过程</h4>\n<p>HTTPS 的通信过程如下：</p>\n<ul>\n<li>客户端向服务器发起请求，请求中包含使用的协议版本号、生成的一个随机数、以及客户端支持的加密方法。</li>\n<li>服务器端接收到请求后，确认双方使用的加密方法、并给出服务器的证书、以及一个服务器生成的随机数。</li>\n<li>客户端确认服务器证书有效后，生成一个新的随机数，并使用数字证书中的公钥，加密这个随机数，然后发给服 务器。并且还会提供一个前面所有内容的 hash 的值，用来供服务器检验。</li>\n<li>服务器使用自己的私钥，来解密客户端发送过来的随机数。并提供前面所有内容的 hash 值来供客户端检验。</li>\n<li>客户端和服务器端根据约定的加密方法使用前面的三个随机数，生成对话秘钥，以后的对话过程都使用这个秘钥来加密信息。</li>\n</ul>\n<h4 id=\"5-https的特点\"><a class=\"anchor\" href=\"#5-https的特点\">#</a> 5. HTTPS 的特点</h4>\n<p>HTTPS 的优点如下：</p>\n<ul>\n<li>使用 HTTPS 协议可以认证用户和服务器，确保数据发送到正确的客户端和服务器；</li>\n<li>使用 HTTPS 协议可以进行加密传输、身份认证，通信更加安全，防止数据在传输过程中被窃取、修改，确保数据安全性；</li>\n<li>HTTPS 是现行架构下最安全的解决方案，虽然不是绝对的安全，但是大幅增加了中间人攻击的成本；<br />\nHTTPS 的缺点如下：</li>\n<li>HTTPS 需要做服务器和客户端双方的加密个解密处理，耗费更多服务器资源，过程复杂；</li>\n<li>HTTPS 协议握手阶段比较费时，增加页面的加载时间；</li>\n<li>SSL 证书是收费的，功能越强大的证书费用越高；</li>\n<li>HTTPS 连接服务器端资源占用高很多，支持访客稍多的网站需要投入更大的成本；</li>\n<li>SSL 证书需要绑定 IP，不能再同一个 IP 上绑定多个域名。</li>\n</ul>\n<h4 id=\"6-https是如何保证安全的\"><a class=\"anchor\" href=\"#6-https是如何保证安全的\">#</a> 6. HTTPS 是如何保证安全的？</h4>\n<p>先理解两个概念：</p>\n<ul>\n<li>对称加密：即通信的双⽅都使⽤同⼀个秘钥进⾏加解密，对称加密虽然很简单性能也好，但是⽆法解决⾸次把秘钥发给对⽅的问题，很容易被⿊客拦截秘钥。</li>\n<li>⾮对称加密：</li>\n</ul>\n<ol>\n<li>私钥 + 公钥 = 密钥对</li>\n<li>即⽤私钥加密的数据，只有对应的公钥才能解密，⽤公钥加密的数据，只有对应的私钥才能解密</li>\n<li>因为通信双⽅的⼿⾥都有⼀套⾃⼰的密钥对，通信之前双⽅会先把⾃⼰的公钥都先发给对⽅</li>\n<li>然后对⽅再拿着这个公钥来加密数据响应给对⽅，等到到了对⽅那⾥，对⽅再⽤⾃⼰的私钥进⾏解密</li>\n</ol>\n<p>⾮对称加密虽然安全性更⾼，但是带来的问题就是速度很慢，影响性能。</p>\n<p>解决⽅案：</p>\n<p>结合两种加密⽅式，将对称加密的密钥使⽤⾮对称加密的公钥进⾏加密，然后发送出去，接收⽅使⽤私钥进⾏解密得到对称加密的密钥，然后双⽅可以使⽤对称加密来进⾏沟通。</p>\n<p>此时⼜带来⼀个问题，中间⼈问题： 如果此时在客户端和服务器之间存在⼀个中间⼈，这个中间⼈只需要把原本双⽅通信互发的公钥，换成⾃⼰的公钥，这样中间⼈就可以轻松解密通信双⽅所发送的所有数据。</p>\n<p>所以这个时候需要⼀个安全的第三⽅颁发证书（CA），证明身份的身份，防⽌被中间⼈攻击。 证书中包括：签发者、证书⽤途、使⽤者公钥、使⽤者私钥、使⽤者的 HASH 算法、证书到期时间等。</p>\n<p>但是问题来了，如果中间⼈篡改了证书，那么身份证明是不是就⽆效了？这个证明就⽩买了，这个时候需要⼀个新的技术，数字签名。</p>\n<p>数字签名就是⽤ CA ⾃带的 HASH 算法对证书的内容进⾏ HASH 得到⼀个摘要，再⽤ CA 的私钥加密，最终组成数字签名。当别⼈把他的证书发过来的时候，我再⽤同样的 Hash 算法，再次⽣成消息摘要，然后⽤ CA 的公钥对数字签名解密，得到 CA 创建的消息摘要，两者⼀⽐，就知道中间有没有被⼈篡改了。这个时候就能最⼤程度保证通信的安全了。</p>\n<h3 id=\"三-http状态码\"><a class=\"anchor\" href=\"#三-http状态码\">#</a> 三、HTTP 状态码</h3>\n<p>状态码的类别：</p>\n<div align=\"center\">\n    <style>.bfnppyqhmtjk{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/%E7%8A%B6%E6%80%81%E7%A0%81%E7%B1%BB%E5%88%AB.jpg\" class=\"bfnppyqhmtjk\">\n</div>\n<ol>\n<li>\n<p>2XX (Success 成功状态码)<br />\n 状态码 2XX 表示请求被正常处理了。<br />\n（1）200 OK<br />\n200 OK 表示客户端发来的请求被服务器端正常处理了。<br />\n（2）204 No Content<br />\n 该状态码表示客户端发送的请求已经在服务器端正常处理了，但是没有返回的内容，响应报文中不包含实体的主体部分。一般在只需要从客户端往服务器端发送信息，而服务器端不需要往客户端发送内容时使用。<br />\n（3）206 Partial Content<br />\n 该状态码表示客户端进行了范围请求，而服务器端执行了这部分的 GET 请求。响应报文中包含由 Content-Range 指定范围的实体内容。</p>\n</li>\n<li>\n<p>3XX (Redirection 重定向状态码)</p>\n</li>\n</ol>\n<p>3XX 响应结果表明浏览器需要执行某些特殊的处理以正确处理请求。</p>\n<p>（1）301 Moved Permanently<br />\n 永久重定向。 该状态码表示请求的资源已经被分配了新的 URI，以后应使用资源指定的 URI。新的 URI 会在 HTTP 响应头中的 Location 首部字段指定。若用户已经把原来的 URI 保存为书签，此时会按照 Location 中新的 URI 重新保存该书签。同时，搜索引擎在抓取新内容的同时也将旧的网址替换为重定向之后的网址。</p>\n<p>使用场景：</p>\n<ul>\n<li>当我们想换个域名，旧的域名不再使用时，用户访问旧域名时用 301 就重定向到新的域名。其实也是告诉搜索引擎收录的域名需要对新的域名进行收录。</li>\n<li>在搜索引擎的搜索结果中出现了不带 www 的域名，而带 www 的域名却没有收录，这个时候可以用 301 重定向来告诉搜索引擎我们目标的域名是哪一个。</li>\n</ul>\n<p>（2）302 Found<br />\n 临时重定向。 该状态码表示请求的资源被分配到了新的 URI，希望用户（本次）能使用新的 URI 访问资源。和 301 Moved Permanently 状态码相似，但是 302 代表的资源不是被永久重定向，只是临时性质的。也就是说已移动的资源对应的 URI 将来还有可能发生改变。若用户把 URI 保存成书签，但不会像 301 状态码出现时那样去更新书签，而是仍旧保留返回 302 状态码的页面对应的 URI。同时，搜索引擎会抓取新的内容而保留旧的网址。因为服务器返回 302 代码，搜索引擎认为新的网址只是暂时的。</p>\n<p>使用场景：</p>\n<ul>\n<li>当我们在做活动时，登录到首页自动重定向，进入活动页面。</li>\n<li>未登陆的用户访问用户中心重定向到登录页面。</li>\n<li>访问 404 页面重新定向到首页。</li>\n</ul>\n<p>（3）303 See Other<br />\n 该状态码表示由于请求对应的资源存在着另一个 URI，应使用 GET 方法定向获取请求的资源。 303 状态码和 302 Found 状态码有着相似的功能，但是 303 状态码明确表示客户端应当采用 GET 方法获取资源。<br />\n303 状态码通常作为 PUT 或 POST 操作的返回结果，它表示重定向链接指向的不是新上传的资源，而是另外一个页面，比如消息确认页面或上传进度页面。而请求重定向页面的方法要总是使用 GET。</p>\n<p>注意：</p>\n<ul>\n<li>当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把 POST 改成 GET，并删除请求报文内的主体，之后请求会再次自动发送。</li>\n<li>301、302 标准是禁止将 POST 方法变成 GET 方法的，但实际大家都会这么做。</li>\n</ul>\n<p>（4）304 Not Modified<br />\n 浏览器缓存相关。 该状态码表示客户端发送附带条件的请求时，服务器端允许请求访问资源，但未满足条件的情况。304 状态码返回时，不包含任何响应的主体部分。304 虽然被划分在 3XX 类别中，但是和重定向没有关系。<br />\n带条件的请求（Http 条件请求）：使用 Get 方法 请求，请求报文中包含（if-match、if-none-match、if-modified-since、if-unmodified-since、if-range）中任意首部。<br />\n状态码 304 并不是一种错误，而是告诉客户端有缓存，直接使用缓存中的数据。返回页面的只有头部信息，是没有内容部分的，这样在一定程度上提高了网页的性能。</p>\n<p>（5）307 Temporary Redirect<br />\n307 表示临时重定向。 该状态码与 302 Found 有着相同含义，尽管 302 标准禁止 POST 变成 GET，但是实际使用时还是这样做了。307 会遵守浏览器标准，不会从 POST 变成 GET。但是对于处理请求的行为时，不同浏览器还是会出现不同的情况。规范要求浏览器继续向 Location 的地址 POST 内容。</p>\n<ol start=\"3\">\n<li>4XX (Client Error 客户端错误状态码)</li>\n</ol>\n<p>4XX 的响应结果表明客户端是发生错误的原因所在。<br />\n（1）400 Bad Request<br />\n 该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像 200 OK 一样对待该状态码。</p>\n<p>（2）401 Unauthorized<br />\n 该状态码表示发送的请求需要有通过 HTTP 认证 (BASIC 认证、DIGEST 认证) 的认证信息。若之前已进行过一次请求，则表示用户认证失败。<br />\n返回含有 401 的响应必须包含一个适用于被请求资源的 WWW-Authenticate 首部用以质询 (challenge) 用户信息。当浏览器初次接收到 401 响应，会弹出认证用的对话窗口。<br />\n以下情况会出现 401：</p>\n<ul>\n<li>401.1 - 登录失败。</li>\n<li>401.2 - 服务器配置导致登录失败。</li>\n<li>401.3 - 由于 ACL 对资源的限制而未获得授权。</li>\n<li>401.4 - 筛选器授权失败。</li>\n<li>401.5 - ISAPI/CGI 应用程序授权失败。</li>\n<li>401.7 - 访问被 Web 服务器上的 URL 授权策略拒绝。这个错误代码为 IIS 6.0 所专用。</li>\n</ul>\n<p>（3）403 Forbidden<br />\n 该状态码表明请求资源的访问被服务器拒绝了，服务器端没有必要给出详细理由，但是可以在响应报文实体的主体中进行说明。进入该状态后，不能再继续进行验证。该访问是永久禁止的，并且与应用逻辑密切相关。<br />\nIIS 定义了许多不同的 403 错误，它们指明更为具体的错误原因：</p>\n<ul>\n<li>403.1 - 执行访问被禁止。</li>\n<li>403.2 - 读访问被禁止。</li>\n<li>403.3 - 写访问被禁止。</li>\n<li>403.4 - 要求 SSL。</li>\n<li>403.5 - 要求 SSL 128。</li>\n<li>403.6 - IP 地址被拒绝。</li>\n<li>403.7 - 要求客户端证书。</li>\n<li>403.8 - 站点访问被拒绝。</li>\n<li>403.9 - 用户数过多。</li>\n<li>403.10 - 配置无效。</li>\n<li>403.11 - 密码更改。</li>\n<li>403.12 - 拒绝访问映射表。</li>\n<li>403.13 - 客户端证书被吊销。</li>\n<li>403.14 - 拒绝目录列表。</li>\n<li>403.15 - 超出客户端访问许可。</li>\n<li>403.16 - 客户端证书不受信任或无效。</li>\n<li>403.17 - 客户端证书已过期或尚未生效</li>\n<li>403.18 - 在当前的应用程序池中不能执行所请求的 URL。这个错误代码为 IIS 6.0 所专用。</li>\n<li>403.19 - 不能为这个应用程序池中的客户端执行 CGI。这个错误代码为 IIS 6.0 所专用。</li>\n<li>403.20 - Passport 登录失败。这个错误代码为 IIS 6.0 所专用。</li>\n</ul>\n<p>（4）404 Not Found<br />\n 该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。 以下情况会出现 404：</p>\n<ul>\n<li>404.0 -（无） – 没有找到文件或目录。</li>\n<li>404.1 - 无法在所请求的端口上访问 Web 站点。</li>\n<li>404.2 - Web 服务扩展锁定策略阻止本请求。</li>\n<li>404.3 - MIME 映射策略阻止本请求。</li>\n</ul>\n<p>（5）405 Method Not Allowed<br />\n 该状态码表示客户端请求的方法虽然能被服务器识别，但是服务器禁止使用该方法。GET 和 HEAD 方法，服务器应该总是允许客户端进行访问。客户端可以通过 OPTIONS 方法（预检）来查看服务器允许的访问方法，如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Access<span class=\"token operator\">-</span>Control<span class=\"token operator\">-</span>Allow<span class=\"token operator\">-</span>Methods<span class=\"token operator\">:</span> <span class=\"token constant\">GET</span><span class=\"token punctuation\">,</span><span class=\"token constant\">HEAD</span><span class=\"token punctuation\">,</span><span class=\"token constant\">PUT</span><span class=\"token punctuation\">,</span><span class=\"token constant\">PATCH</span><span class=\"token punctuation\">,</span><span class=\"token constant\">POST</span><span class=\"token punctuation\">,</span><span class=\"token constant\">DELETE</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>5XX (Server Error 服务器错误状态码)<br />\n 5XX 的响应结果表明服务器本身发生错误。</li>\n</ol>\n<p>（1）500 Internal Server Error<br />\n 该状态码表明服务器端在执行请求时发生了错误。也有可能是 Web 应用存在的 bug 或某些临时的故障。</p>\n<p>（2）502 Bad Gateway<br />\n 该状态码表明扮演网关或代理角色的服务器，从上游服务器中接收到的响应是无效的。注意，502 错误通常不是客户端能够修复的，而是需要由途经的 Web 服务器或者代理服务器对其进行修复。以下情况会出现 502：</p>\n<ul>\n<li>502.1 - CGI （通用网关接口）应用程序超时。</li>\n<li>502.2 - CGI （通用网关接口）应用程序出错。</li>\n</ul>\n<p>（3）503 Service Unavailable<br />\n 该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入 RetryAfter 首部字段再返回给客户端。<br />\n使用场景：</p>\n<ul>\n<li>服务器停机维护时，主动用 503 响应请求；</li>\n<li>nginx 设置限速，超过限速，会返回 503。</li>\n</ul>\n<p>（4）504 Gateway Timeout<br />\n 该状态码表示网关或者代理的服务器无法在规定的时间内获得想要的响应。他是 HTTP 1.1 中新加入的。<br />\n使用场景：代码执行时间超时，或者发生了死循环。</p>\n<ol start=\"5\">\n<li>总结<br />\n（1）2XX 成功</li>\n</ol>\n<p>200 OK，表示从客户端发来的请求在服务器端被正确处理<br />\n 204 No content，表示请求成功，但响应报文不含实体的主体部分<br />\n 205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容<br />\n 206 Partial Content，进行范围请求</p>\n<p>（2）3XX 重定向</p>\n<p>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL<br />\n302 found，临时性重定向，表示资源临时被分配了新的 URL<br />\n303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源<br />\n 304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况<br />\n 307 temporary redirect，临时重定向，和 302 含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</p>\n<p>（3）4XX 客户端错误</p>\n<p>400 bad request，请求报文存在语法错误<br />\n 401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息<br />\n 403 forbidden，表示对请求资源的访问被服务器拒绝<br />\n 404 not found，表示在服务器上没有找到请求的资源</p>\n<p>（4）5XX 服务器错误</p>\n<p>500 internal sever error，表示服务器端在执行请求时发生了错误<br />\n 501 Not Implemented，表示服务器不支持当前请求所需要的某个功能<br />\n 503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</p>\n<ol start=\"6\">\n<li>同样是重定向，307，303，302 的区别？<br />\n302 是 http1.0 的协议状态码，在 http1.1 版本的时候为了细化 302 状态码⼜出来了两个 303 和 307。 303 明确表示客户端应当采⽤ get ⽅法获取资源，他会把 POST 请求变为 GET 请求进⾏重定向。 307 会遵照浏览器标准，不会从 post 变为 get。</li>\n</ol>\n"},{"title":"前端学习之JS篇（二）","date":"2025-01-09T08:26:08.000Z","_content":"\n续接上一篇文章：前端学习之JS篇（一）\n\n### 三、JavaScript基础\n\n1. new操作符的实现原理\n\nnew操作符的执行过程：\n\n（1）首先创建了一个新的空对象\n\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n具体实现：\n\n```javascript\nfunction objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n```\n\n2. map和Object的区别\n\n|     | Map | Object |\n| --- | --- | --- |\n| 意外的键 | Map默认情况不包含任何键，只包含显式插入的键。 | Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。 |\n| 键的类型 | Map的键可以是任意值，包括函数、对象或任意基本类型。 | Object 的键必须是 String 或是Symbol。 |\n| 键的顺序 | Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。 | Object 的键是无序的 |\n| Size | Map 的键值对个数可以轻易地通过size 属性获取 | Object 的键值对个数只能手动计算 |\n| 迭代 | Map 是 iterable 的，所以可以直接被迭代。 | 迭代Object需要以某种方式获取它的键然后才能迭代。 |\n| 性能 | 在频繁增删键值对的场景下表现更好。 | 在频繁添加和删除键值对的场景下未作出优化。 |\n\n3. map和weakMap的区别\n\n（1）Map\nmap本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。\n\n实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\n\n```javascript\nconst map = [\n     [\"name\",\"张三\"],\n     [\"age\",18],\n]\n\n```\n\nMap数据结构有以下操作方法：\n\n- size： map.size 返回Map结构的成员总数。\n- set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- get(key)：该方法读取key对应的键值，如果找不到key，返回undefined。\n- has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n- delete(key)：该方法删除某个键，返回true，如果删除失败，返回false。\n- clear()：map.clear()清除所有成员，没有返回值。\n\nMap结构原生提供是三个遍历器生成函数和一个遍历方法\n\n- keys()：返回键名的遍历器。\n- values()：返回键值的遍历器。\n- entries()：返回所有成员的遍历器。\n- forEach()：遍历Map的所有成员。\n\n``` javascript\nconst map = new Map([\n     [\"foo\",1],\n     [\"bar\",2],\n])\nfor(let key of map.keys()){\n    console.log(key);  // foo bar\n}\nfor(let value of map.values()){\n     console.log(value); // 1 2\n}\nfor(let items of map.entries()){\n    console.log(items);  // [\"foo\",1]  [\"bar\",2]\n}\nmap.forEach( (value,key,map) => {\n     console.log(key,value); // foo 1    bar 2\n})\n\n```\n\n（2）WeakMap WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。其键必须是对象，原始数据类型不能作为key值，而值可以是任意的。\n\n该对象也有以下几种方法：\n\n- set(key,value)：设置键名key对应的键值value，然后返回整个WeakMap结构。如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- get(key)：该方法读取key对应的键值，如果找不到key，返回undefined。\n- has(key)：该方法返回一个布尔值，表示某个键是否在当前WeakMap对象中。\n- delete(key)：该方法删除某个键，返回true，如果删除失败，返回false。\n\n其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。\n\nWeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n\n而WeakMap的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。\n\n总结：\n\n- Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n- WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。\n\n4. JavaScript有哪些内置对象\n\n全局的对象（ global objects ）或称标准内置对象，不要和 \"全局对象（global object）\" 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n\n标准内置对象的分类：\n\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量\n\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等\n\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等\n\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date\n\n（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp\n\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet\n\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等\n\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等\n\n（10）控制抽象对象 例如 Promise、Generator 等\n\n（11）反射。例如 Reflect、Proxy\n\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等\n\n（13）WebAssembly\n\n（14）其他。例如 arguments\n\n总结：\njs 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\n\n5. 常用的正则表达式有哪些？\n\n``` javascript\n// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\n\n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n\n// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]{4,10}$/g;\n\n// （4）手机号码正则\nvar regex = /^1[34578]\\d{9}$/g;\n\n// （5）用户名正则\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$/;\n\n```\n\n6. 对JSON的理解\n\nJSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n\n在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，\n\n- JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。\n\n- JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\n\n7. JavaScript脚本延迟加载的方式有哪些？\n\n延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n\n一般有以下几种方式：\n\n- defer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n\n- async 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n\n- 动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n\n- 使用 setTimeout 延迟方法： 设置一个定时器来延迟加载js脚本文件\n\n- 让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\n\n8. JavaScript 类数组对象的定义？\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n（1）通过 call 调用数组的 slice 方法来实现转换\n\n``` javascript\nArray.prototype.slice.call(arrayLike)\n```\n\n（2）通过 call 调用数组的 splice 方法来实现转换\n\n``` javascript\nArray.prototype.splice.call(arrayLike,0)\n```\n\n（3）通过 apply 调用数组的 concat 方法来实现转换\n\n``` javascript\nArray.prototype.concat.apply([],arrayLike)\n```\n\n(P.S.call 和 apply 是 JavaScript 中函数对象的两个方法，它们的主要功能非常相似，都是用于调用函数并显式指定函数内部的 this 值。然而，它们在传递参数的方式上有所不同:call 接受参数列表，apply 接受参数数组。)\n\n（4）通过 Array.from 方法来实现转换\n\n``` javascript\nArray.from(arrayLike);\n\n```\n\n9. 数组有哪些原生方法？\n\n- 数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n- 数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n- 数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n- 数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n- 数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n- 数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n- 数组归并方法 reduce() 和 reduceRight()\n\n10. Unicode、UTF-8、UTF-16、UTF-32的区别？\n\n（1）Unicode\n\n在说Unicode之前需要先了解一下ASCII码：ASCII 码（American Standard Code for Information Interchange）称为美国标准信息交换码。\n\n- 它是基于拉丁字母的一套电脑编码系统。\n- 它定义了一个用于代表常见字符的字典。\n- 它包含了\"A-Z\"(包含大小写)，数据\"0-9\" 以及一些常见的符号。\n- 它是专门为英语而设计的，有128个编码，对其他语言无能为力\n\nASCII码可以表示的编码有限，要想表示其他语言的编码，还是要使用Unicode来表示，可以说Unicode是ASCII 的超集。\n\nUnicode全称 Unicode Translation Format，又叫做统一码、万国码、单一码。\nUnicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\n\nUnicode的实现方式（也就是编码方式）有很多种，常见的是UTF-8、UTF-16、UTF-32和USC-2。\n\n（2）UTF-8\n\nUTF-8是使用最广泛的Unicode编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容ASCII码的128个字符。\n\n注意： UTF-8 是一种编码方式，Unicode是一个字符集合。\n\nUTF-8的编码规则：\n\n- 对于单字节的符号，字节的第一位为0，后面的7位为这个字符的Unicode编码，因此对于英文字母，它的Unicode编码和ACSII编码一样。\n- 对于n字节的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的Unicode码 。\n\n来看一下具体的Unicode编号范围与对应的UTF-8二进制格式 ：\n\n| 编码范围（编号对应的十进制数） | 二进制格式 |\n| --- | --- |\n| 0x00—0x7F （0-127）| 0xxxxxxx |\n| 0x80—0x7FF （128-2047）| 110xxxxx 10xxxxxx |\n| 0x800—0xFFFF  （2048-65535） | 1110xxxx 10xxxxxx 10xxxxxx |\n| 0x10000—0x10FFFF  （65536以上） | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx |\n\n那该如何通过具体的Unicode编码，进行具体的UTF-8编码呢？步骤如下：\n\n- 找到该Unicode编码的所在的编号范围，进而找到与之对应的二进制格式\n- 将Unicode编码转换为二进制数（去掉最高位的0）\n- 将二进制数从右往左一次填入二进制格式的X中，如果有X未填，就设为0\n\n来看一个实际的例子：\n“马” 字的Unicode编码是：0x9A6C，整数编号是39532\n（1）首选确定了该字符在第三个范围内，它的格式是 1110xxxx 10xxxxxx 10xxxxxx\n（2）39532对应的二进制数为1001 1010 0110 1100\n（3）将二进制数填入X中，结果是：11101001 10101001 10101100\n\n（3）UTF-16\n\n平面的概念\n在了解UTF-16之前，先看一下平面的概念：\nUnicode编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放65536（216）个字符，这称为一个平面，目前总共有17 个平面。\n最前面的一个平面称为基本平面，它的码点从0 — 216-1，写成16进制就是U+0000 — U+FFFF，那剩下的16个平面就是辅助平面，码点范围是 U+10000—U+10FFFF。\n\nUTF-16 概念：\nUTF-16也是Unicode编码集的一种编码形式，把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位需要1个或者2个16位长的码元来表示，因此UTF-16也是用变长字节表示的。\n\nUTF-16 编码规则：\n编号在 U+0000—U+FFFF 的字符（常用字符集），直接用两个字节表示。\n编号在 U+10000—U+10FFFF 之间的字符，需要用四个字节表示。\n\n编码识别\n\n那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？\n\nUTF-16 编码肯定也考虑到了这个问题，在基本平面内，从 U+D800 — U+DFFF 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。\n\n辅助平面共有 220 个字符位，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 — U+DBFF，称为高位（H），后 10 位映射在 U+DC00 — U+DFFF，称为低位（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。\n\n因此，当遇到两个字节时，发现它的码点在 U+D800 —U+DBFF之间，就可以知道，它后面的两个字节的码点应该在 U+DC00 — U+DFFF 之间，这四个字节必须放在一起进行解读。\n\n举例说明\n以 \"𡠀\" 字为例，它的 Unicode 码点为 0x21800，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：\n\n首先计算超出部分的结果：0x21800 - 0x10000\n将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：0001000110 0000000000\n将得到的两个10位二进制数分别对应到两个区间中\nU+D800 对应的二进制数为 1101100000000000， 将0001000110填充在它的后10 个二进制位，得到 1101100001000110，转成 16 进制数为 0xD846。同理，低位为 0xDC00，所以这个字的UTF-16 编码为 0xD846 0xDC00\n\n（4） UTF-32\nUTF-32 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。\n比如“马” 字的Unicode编号是：U+9A6C，整数编号是39532，直接转化为二进制：1001 1010 0110 1100，这就是它的UTF-32编码。\n\n（5）总结\nUnicode、UTF-8、UTF-16、UTF-32有什么区别？\n\n- Unicode 是编码字符集（字符集），而UTF-8、UTF-16、UTF-32是字符集编码（编码规则）；\n- UTF-16 使用变长码元序列的编码方式，相较于定长码元序列的UTF-32算法更复杂，甚至比同样是变长码元序列的UTF-8也更为复杂，因为其引入了独特的代理对这样的代理机制；\n- UTF-8需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而UTF-16不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；\n- 如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用UTF-8就比UTF-16节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么UTF-16就占优势了，可以节省很多空间；\n\n11. 常见的位运算符有哪些？其计算规则是什么？\n\n现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。\n\n常见的位运算符有：\n\n| 运算符 | 描述 | 运算规则 |\n| --- | --- | --- |\n| & | 与 | 两个位都为1时，结果才为1 |\n| | | 或 | 两个位都为0时，结果才为0 |\n| ^ | 异或 | 两个位相同为0，不同为1 |\n| ~ | 取反 | 0变1，1变0 |\n| << | 左移 | 各二进位全部左移若干位，高位丢弃，低位补0 |\n| >> | 右移 | 各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃 |\n\n\n\n7. 原码、补码、反码\n上面提到了补码、反码等知识，这里就补充一下。 计算机中的有符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。\n\n（1）原码\n\n原码就是一个数的二进制数。例如：10的原码为0000 1010\n\n（2）反码\n- 正数的反码与原码相同，如：10 反码为 0000 1010\n- 负数的反码为除符号位，按位取反，即0变1，1变0。\n\n（3）补码\n正数的补码与原码相同，如：10 补码为 0000 1010\n负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。\n\n12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?\n\narguments是一个对象，它的属性是从 0 开始依次递增的数字，还有callee和length等属性，与数组相似；但是它却没有数组常见的方法属性，如forEach, reduce等，所以叫它们类数组。\n\n要遍历类数组，有三个方法：\n\n（1）将数组的方法应用到类数组上，这时候就可以使用call和apply方法，如：\n\n``` javascript\nfunction foo() {\n    Array.prototype.forEach.call(arguments, a => console.log(a))\n}\n```\n\n（2）使用Array.from方法将类数组转化成数组：‌\n\n``` javascript\nfunction foo(){ \n  const arrArgs = Array.from(arguments) \n  arrArgs.forEach(a => console.log(a))\n}\n\n```\n\n（3）使用展开运算符将类数组转化成数组\n\n``` javascript\nfunction foo(){ \n    const arrArgs = [...arguments] \n    arrArgs.forEach(a => console.log(a)) \n}\n\n```\n\n13. 什么是 DOM 和 BOM？\n\n- DOM指的是文档对象原型，它指的是把文档当作一个对象，这个对象主要定义了处理网页内容的方法和接口。\n- BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的方法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。\n\n14. 对类数组对象的理解，如何转化为数组\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，\n类数组对象和数组类似，但是不能调用数组的方法。\n见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n- 通过 call 调用数组的 slice 方法来实现转换\n\n``` javascript\nArray.prototype.slice.call(arrayLike)\n```\n\n- 通过 call 调用数组的 splice 方法来实现转换\n\n``` javascript\nArray.prototype.splice.call(arrayLike, 0);\n\n```\n\n- 通过 apply 调用数组的 concat 方法来实现转换\n\n``` javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n- 通过 Array.from 方法来实现转换\n\n``` javascript\nArray.from(arrayLike);\n\n```\n\n15. escape、encodeURI、encodeURIComponent 的区别\n- encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\n- encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\n- escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\n\n16. 对AJAX的理解，实现一个AJAX请求\n\nAJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n\n创建AJAX请求的步骤：\n\n- 创建一个 XMLHttpRequest 对象。\n- 在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n- 在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n- 当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n\n``` javascript\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", SERVER_URL, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n\n\n```\n\n使用Promise封装AJAX：\n\n``` javascript\n// promise 封装实现：\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  });\n  return promise;\n}\n\n```\n\n传统的 AJAX 请求通常使用 XMLHttpRequest 对象来实现。这种方式需要手动处理异步操作的回调函数，代码的可读性和维护性相对较低。\n使用 Promise 封装 AJAX 请求可以将异步操作以更简洁和可读的方式表达。Promise 提供了链式调用的能力，使得处理多个异步操作时更加方便。Promise 是 ES6 标准的一部分，提供了统一的异步编程模型，更容易被其他开发者理解和使用。\n\n17. JavaScript为什么要进行变量提升，它导致了什么问题？\n\n变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。\n\n造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。\n\n首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。\n\n- 在解析阶段，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n - 全局上下文：变量定义，函数声明\n - 函数上下文：变量定义，函数声明，this，arguments\n\n- 在执行阶段，就是按照代码的顺序依次执行。\n\n那为什么会进行变量提升呢？主要有以下两个原因：\n\n- 提高性能\n- 容错性更好\n\n（1）提高性能 在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n\n（2）容错性更好\n变量提升可以在一定程度上提高JS的容错性，看下面的代码：\n\n``` javascript\na = 1;var a;console.log(a);\n\n```\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。\n\n虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n\n总结：\n\n- 解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间\n- 声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行\n\n变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：\n\n``` javascript\nvar tmp = new Date();\n\nfunction fn(){\n\tconsole.log(tmp);\n\tif(false){\n\t\tvar tmp = 'hello world';\n\t}\n}\n\nfn();  // undefined\n\n```\n\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。\n\n``` javascript\nvar tmp = 'hello world';\n\nfor (var i = 0; i < tmp.length; i++) {\n\tconsole.log(tmp[i]);\n}\n\nconsole.log(i); // 11\n\n```\n\n由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。\n\n18. 什么是尾调用，使用尾调用有什么好处？\n\n尾调用指的是函数的最后一步调用另一个函数。\n代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。\n\n但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n19. ES6模块与CommonJS模块有什么异同？\nES6 Module 和 CommonJS 是两种常见的 JavaScript 模块系统，它们用于在不同的 JavaScript 运行环境中管理代码的组织和复用。\n\nES6 Module和CommonJS模块的区别：\n\n- CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；\n- import的接⼝是read-only（只读状态），不能修改其变量值。即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。\n\nES6 Module和CommonJS模块的共同点：\n- CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。\n\n20. 常见的DOM操作有哪些\n\n1）DOM 节点的获取\n\nDOM 节点的获取的API及使用：\n\n``` javascript\ngetElementById // 按照 id 查询\ngetElementsByTagName // 按照标签名查询\ngetElementsByClassName // 按照类名查询\nquerySelectorAll // 按照 css 选择器查询\n\n// 按照 id 查询\nvar imooc = document.getElementById('imooc') // 查询到 id 为 imooc 的元素\n// 按照标签名查询\nvar pList = document.getElementsByTagName('p')  // 查询到标签为 p 的集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n// 按照类名查询\nvar moocList = document.getElementsByClassName('mooc') // 查询到类名为 mooc 的集合\n// 按照 css 选择器查询\nvar pList = document.querySelectorAll('.mooc') // 查询到类名为 mooc 的集合\n\n```\n\n2）DOM 节点的创建\n\n创建一个新节点，并把它添加到指定节点的后面。 已知的 HTML 结构如下：\n\n``` html\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n\n```\n\n要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：\n\n``` javascript\n// 首先获取父节点\nvar container = document.getElementById('container')\n// 创建新节点\nvar targetSpan = document.createElement('span')\n// 设置 span 节点的内容\ntargetSpan.innerHTML = 'hello world'\n// 把新创建的元素塞进父节点里去\ncontainer.appendChild(targetSpan)\n\n```\n\n3）DOM 节点的删除\n\n删除指定的 DOM 节点， 已知的 HTML 结构如下：\n\n``` javascript\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n\n```\n\n需要删除 id 为 title 的元素，做法是：\n\n``` javascript\n// 获取目标元素的父元素\nvar container = document.getElementById('container')\n// 获取目标元素\nvar targetNode = document.getElementById('title')\n// 删除目标元素\ncontainer.removeChild(targetNode)\n\n```\n\n或者通过子节点数组来完成删除：\n\n``` javascript\n// 获取目标元素的父元素var container = document.getElementById('container')// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)\n\n```\n\n4）修改 DOM 元素\n\n修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。\n\n将指定的两个 DOM 元素交换位置， 已知的 HTML 结构如下：\n\n``` javascript\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n      <p id=\"content\">我是内容</p>\n    </div>   \n  </body>\n</html>\n```\n\n现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：\n\n``` javascript\n// 获取父元素\nvar container = document.getElementById('container')   \n \n// 获取两个需要被交换的元素\nvar title = document.getElementById('title')\nvar content = document.getElementById('content')\n\n// 交换两个元素，把 content 置于 title 前面\ncontainer.insertBefore(content, title)\n\n```\n\n21. use strict是什么意思 ? 使用它区别是什么？\n\nuse strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：\n\n- 消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;\n- 消除代码运行的一些不安全之处，保证代码运行的安全；\n- 提高编译器效率，增加运行速度；\n- 为未来新版本的 Javascript 做好铺垫。\n\n区别：\n\n- 禁止使用 with 语句。\n- 禁止 this 关键字指向全局对象。\n- 对象不能有重名的属性。\n\n22. 如何判断一个对象是否属于某个类？\n\n- 第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n- 第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\n- 第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。\n\n23. 强类型语言和弱类型语言的区别\n\n- 强类型语言：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。\n- Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。\n- 弱类型语言：弱类型语言也称为弱类型定义语言，与强类型定义相反。\n- JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串'12'和整数3进行连接得到字符串'123'，在相加的时候会进行强制类型转换。\n\n两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。\n\n24. 解释性语言和编译型语言的区别\n\n（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下\n- 解释型语言每次运行都需要将源代码解释成机器码并执行，效率较低；\n- 只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；\n- JavaScript、Python等属于解释型语言。\n\n（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：\n- 一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；\n- 与特定平台相关，一般无法移植到其他平台；\n- C、C++、Java、Go、Rust等属于编译型语言。\n\n两者主要区别在于： 前者（编译型）源程序编译后即可在该平台运行，（解释型）后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。\n\n25. for...in和for...of的区别\n\nfor…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下:\n- for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；\n- for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；\n- 对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；\n\n总结： for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。\n\n26. 如何使用for...of遍历对象\n\nfor…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。\n\np.s. 含有迭代器接口（Iterator Interface）的数据结构是一种可以被遍历的数据结构，它提供了一种标准的方法来访问集合中的元素，而无需暴露集合的内部结构。在 JavaScript 中，迭代器接口通过 Symbol.iterator 方法实现。许多内置的数据结构（如数组、Set、Map）都实现了这一接口。\n\n如果需要遍历的对象是类数组对象，用Array.from转成数组即可。\n\n``` javascript\nvar obj = {\n    0:'one',\n    1:'two',\n    length: 2\n};\nobj = Array.from(obj);\nfor(var k of obj){\n    console.log(k)\n}\n\n```\n\n如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。\n\n``` javascript\n//方法一：\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\n\nobj[Symbol.iterator] = function(){\n\tvar keys = Object.keys(this);\n\tvar count = 0;\n\treturn {\n\t\tnext(){\n\t\t\tif(count<keys.length){\n\t\t\t\treturn {value: obj[keys[count++]],done:false};\n\t\t\t}else{\n\t\t\t\treturn {value:undefined,done:true};\n\t\t\t}\n\t\t}\n\t}\n};\n\nfor(var k of obj){\n\tconsole.log(k);\n}\n\n\n// 方法二\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\nobj[Symbol.iterator] = function*(){\n    var keys = Object.keys(obj);\n    for(var k of keys){\n        yield [k,obj[k]]\n    }\n};\n\nfor(var [k,v] of obj){\n    console.log(k,v);\n}\n\n\n```\n\n27. ajax、axios、fetch的区别\n\n（1）AJAX Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术.通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：\n\n- 本身是针对MVC（Model-View-Controller）编程，不符合前端MVVM(（Model-View-ViewModel）)的浪潮\n- 基于原生XHR(XMLHttpRequest)开发，XHR本身的架构不清晰\n- 不符合关注分离（Separation of Concerns）的原则\n- 配置和调用方式非常混乱，而且基于事件的异步模型不友好。\n\n（2）Fetch fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。\nfetch的优点：\n- 语法简洁，更加语义化\n- 基于标准 Promise 实现，支持 async/await\n- 更加底层，提供的API丰富（request, response）\n- 脱离了XHR，是ES规范里新的实现方式\n\nP.S. async/await 是 JavaScript 中用于简化异步代码的语法糖，基于 Promise 实现。它使得异步代码的书写和阅读更加直观，避免了传统的回调函数嵌套（即“回调地狱”）和复杂的 Promise 链式调用。\n\nfetch的缺点：\n\n- fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n- fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\n- fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n- fetch没有办法原生监测请求的进度，而XHR可以\n\n（3）Axios Axios 是一种基于Promise封装的HTTP客户端，其特点如下：\n\n- 浏览器端发起XMLHttpRequests请求\n- node端发起http请求\n- 支持Promise API\n- 监听请求和返回\n- 对请求和返回进行转化\n- 取消请求\n- 自动转换json数据\n- 客户端支持抵御XSRF攻击\n\n28. 数组的遍历方法有哪些\n| 方法 | 是否改变原数组 | 特点 |\n| forEach()\t| 否 | 数组方法，不改变原数组，没有返回值 |\n| map() | 否 | 数组方法，不改变原数组，有返回值，可链式调用 |\n| filter() | 否 | 数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用 |\n| for...of | 否 | for...of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环 |\n| every() 和 some() | 否 | 数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false. |\n| find() 和 findIndex() | 否 | 数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值 |\n| reduce() 和 reduceRight() | 否 | 数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作 |\n\n29. forEach和map方法有什么区别\n\n这方法都是用来遍历数组的，两者区别如下：\n\n- forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；\n- map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；\n\n### 四、原型与原型链\n\n1. 对原型、原型链的理解\n\n在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。\nES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。\n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。\n\n特点： JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n\n<div align=center>\n    <img src=\"前端学习之JS篇（二）/01.jpg\">\n</div>\n\n2. 原型修改、重写\n\n``` javascript\nfunction Person(name) {\n    this.name = name\n}\n// 修改原型\nPerson.prototype.getName = function() {}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype) // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n// 重写原型\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // false\n\n```\n\n可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候p.constructor === Object ，而不是p.constructor === Person。要想成立，就要用constructor指回来：\n\n``` javascript\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\np.constructor = Person\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n\n\n```\n\n3. 原型链指向\n\n``` javascript\np.__proto__  // Person.prototype\nPerson.prototype.__proto__  // Object.prototype\np.__proto__.__proto__ //Object.prototype\np.__proto__.constructor.prototype.__proto__ // Object.prototype\nPerson.prototype.constructor.prototype.__proto__ // Object.prototype\np1.__proto__.constructor // Person\nPerson.prototype.constructor  // Person\n\n```\n\nP.S. constructor 是一个特殊的属性，它指向用于创建该对象的函数。\nPerson.prototype.constructor这是 Person 函数本身。\n假设 p1 是 new Person() 创建的对象，那么 p1.__proto__ 是 Person.prototype。\n\n4. 原型链的终点是什么？如何打印出原型链的终点？\n\n由于Object是构造函数，原型链终点是Object.prototype.__proto__，而Object.prototype.__proto__=== null // true，所以，原型链的终点是null。\n\n原型链上的所有原型都是对象，所有的对象最终都是由Object构造的，而Object.prototype的下一级是Object.prototype.__proto__。（null）\n\n5. 如何获得对象非原型链上的属性？\n\n使用后hasOwnProperty()方法来判断属性是否属于原型链的属性：\n\n``` javascript\nfunction iterate(obj){\n   var res=[];\n   for(var key in obj){\n        if(obj.hasOwnProperty(key))\n           res.push(key+': '+obj[key]);\n   }\n   return res;\n} \n\n```\n\n### 五、执行上下文/作用域链/闭包\n\n1. 对闭包的理解\n\n闭包是指有权访问另一个函数作用域中变量的函数，\n创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。\n\n闭包有两个常用的用途；\n\n- 闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n\n- 闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。\n\nP.S. 引用是一个变量或数据结构，它存储了另一个对象或数据的内存地址，而不是数据本身。通过引用，程序可以直接访问和操作该内存地址中的数据。\n\n比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。\n\n``` javascript\nfunction A() {\n  let a = 1\n  window.B = function () {\n      console.log(a)\n  }\n}\nA()\nB() // 1\n\n```\n\n在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题\n\n``` javascript\nfor (var i = 1 ;i <= 5; i++) {\n    setTimeout(function timer() {\n        console.log(i)\n    }, i * 1000)\n}\n\n```\n\n首先因为 setTimeout 是个异步函数，所以会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出一堆 6。解决办法有三种：\n\n- 第一种是使用闭包的方式\n\n``` javascript\nfor (var i = 1; i <= 5; i++) {\n    (function(j) {\n        setTimeout(function timer() {\n            console.log(j);\n        }, j * 1000);\n    })(i);\n}\n```\n\nP.S. 立即执行函数表达式（IIFE）：\n\n(function(j) { ... })(i)：这是一个立即执行的函数表达式，它创建了一个新的作用域，并将当前的 i 值传递给参数 j。这样可以确保每个 setTimeout 回调函数中的 j 都是当前循环迭代的值，而不是最终的 i 值。\n\n在上述代码中，首先使用了立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 timer 这个闭包的时候，就可以使用外部函数的变量 j，从而达到目的。\n\n- 第二种就是使用 setTimeout 的第三个参数，这个参数会被当成 timer 函数的参数传入。\n\n``` javascript\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(\n    function timer(j) {\n      console.log(j)\n    },\n    i * 1000,\n    i\n  )\n}\n\n```\n\n- 第三种就是使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式\n\n``` javascript\nfor (let i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n\n```\n\nP.S.\n- var 的问题\n（1）函数作用域：var 声明的变量具有函数作用域，而不是块作用域。这意味着在函数内部定义的 var 变量在整个函数内部都是可见的，而不受块（如 if 语句或 for 循环）的限制。\n\n（2）变量提升：var 声明的变量会被提升到其作用域的顶部，导致变量在声明之前可以被访问，但其值为 undefined。\n\n（3）循环中的问题：在 for 循环中使用 var 声明的变量会在每次循环迭代中被重新赋值，但变量本身仍然是函数作用域的。这导致在异步操作（如 setTimeout）中，所有回调函数引用的是同一个变量，而不是各自循环迭代时的值。\n\n- let 的优点\n（1）块作用域：let 声明的变量具有块作用域，这意味着它们只在定义它们的块内可见。\n\n（2）不提升：let 声明的变量不会被提升到其作用域的顶部，因此在声明之前访问会报错（暂时性死区）。\n\n（3）循环中的行为：在 for 循环中使用 let 声明的变量，每次循环迭代都会创建一个新的变量绑定，因此在异步操作中，每个回调函数引用的是各自循环迭代时的值。\n\nvar：函数作用域，变量提升，不推荐在现代 JavaScript 中使用，特别是在循环中。\nlet：块作用域，不提升，推荐在需要块作用域变量时使用。\n使用 let 可以避免很多 var 带来的问题，特别是与作用域和变量提升相关的问题。因此，在现代 JavaScript 开发中，推荐使用 let 和 const 来声明变量，而不是 var。\n\n2. 对作用域、作用域链的理解\n\n1）全局作用域和函数作用域\n\n（1）全局作用域\n\n- 最外层函数和最外层函数外面定义的变量拥有全局作用域\n- 所有未定义直接赋值的变量自动声明为全局作用域\n- 所有window对象的属性拥有全局作用域\n- 全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。\n\n（2）函数作用域\n- 函数作用域声明在函数内部的变量，一般只有固定的代码片段可以访问到\n- 作用域是分层的，内层作用域可以访问外层作用域，反之不行\n\n2）块级作用域\n\n- 使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由{ }包裹的代码片段）\n- let和const声明的变量不会有变量提升，也不可以重复声明\n- 在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。\n\n作用域链： 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。\n\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。\n\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n\n当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。\n\n3. 对执行上下文的理解\n\n- 1. 执行上下文类型\n\n（1）全局执行上下文\n\n任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。\n\n（2）函数执行上下文\n\n当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。\n\n（3）Eval函数执行上下文\n\n执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。\n\n- 2. 执行上下文栈\n\n- JavaScript引擎使用执行上下文栈来管理执行上下文\n- 当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。\n\n``` javascript\nlet a = 'Hello World!';\nfunction first() {\n  console.log('Inside first function');\n  second();\n  console.log('Again inside first function');\n}\nfunction second() {\n  console.log('Inside second function');\n}\nfirst();\n//执行顺序\n//先执行second(),在执行first()\n\n```\n\n- 3. 创建执行上下文\n\n创建执行上下文有两个阶段：创建阶段和执行阶段\n\n1）创建阶段\n\n（1）this绑定\n\n- 在全局执行上下文中，this指向全局对象（window对象）\n- 在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined\n\n（2）创建词法环境组件\n\n- 词法环境是一种有标识符——变量映射的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。\n- 词法环境的内部有两个组件：加粗样式：环境记录器:用来储存变量个函数声明的实际位置外部环境的引用：可以访问父级作用域\n\n（3）创建变量环境组件\n\n- 变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。\n\n2）执行阶段 此阶段会完成对变量的分配，最后执行完代码。\n\n简单来说执行上下文就是指：\n\n在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。\n\n在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n- 全局上下文：变量定义，函数声明\n- 函数上下文：变量定义，函数声明，this，arguments\n\n","source":"_posts/前端学习之JS篇（二）.md","raw":"---\ntitle: 前端学习之JS篇（二）\ndate: 2025-01-09 16:26:08\ncategories:\n- [前端开发]\ntags:\n- [前端开发]\n---\n\n续接上一篇文章：前端学习之JS篇（一）\n\n### 三、JavaScript基础\n\n1. new操作符的实现原理\n\nnew操作符的执行过程：\n\n（1）首先创建了一个新的空对象\n\n（2）设置原型，将对象的原型设置为函数的 prototype 对象。\n\n（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）\n\n（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。\n\n具体实现：\n\n```javascript\nfunction objectFactory() {\n  let newObject = null;\n  let constructor = Array.prototype.shift.call(arguments);\n  let result = null;\n  // 判断参数是否是一个函数\n  if (typeof constructor !== \"function\") {\n    console.error(\"type error\");\n    return;\n  }\n  // 新建一个空对象，对象的原型为构造函数的 prototype 对象\n  newObject = Object.create(constructor.prototype);\n  // 将 this 指向新建对象，并执行函数\n  result = constructor.apply(newObject, arguments);\n  // 判断返回对象\n  let flag = result && (typeof result === \"object\" || typeof result === \"function\");\n  // 判断返回结果\n  return flag ? result : newObject;\n}\n// 使用方法\nobjectFactory(构造函数, 初始化参数);\n```\n\n2. map和Object的区别\n\n|     | Map | Object |\n| --- | --- | --- |\n| 意外的键 | Map默认情况不包含任何键，只包含显式插入的键。 | Object 有一个原型, 原型链上的键名有可能和自己在对象上的设置的键名产生冲突。 |\n| 键的类型 | Map的键可以是任意值，包括函数、对象或任意基本类型。 | Object 的键必须是 String 或是Symbol。 |\n| 键的顺序 | Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。 | Object 的键是无序的 |\n| Size | Map 的键值对个数可以轻易地通过size 属性获取 | Object 的键值对个数只能手动计算 |\n| 迭代 | Map 是 iterable 的，所以可以直接被迭代。 | 迭代Object需要以某种方式获取它的键然后才能迭代。 |\n| 性能 | 在频繁增删键值对的场景下表现更好。 | 在频繁添加和删除键值对的场景下未作出优化。 |\n\n3. map和weakMap的区别\n\n（1）Map\nmap本质上就是键值对的集合，但是普通的Object中的键值对中的键只能是字符串。而ES6提供的Map数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的Hash结构。如果Map的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。\n\n实际上Map是一个数组，它的每一个数据也都是一个数组，其形式如下：\n\n```javascript\nconst map = [\n     [\"name\",\"张三\"],\n     [\"age\",18],\n]\n\n```\n\nMap数据结构有以下操作方法：\n\n- size： map.size 返回Map结构的成员总数。\n- set(key,value)：设置键名key对应的键值value，然后返回整个Map结构，如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- get(key)：该方法读取key对应的键值，如果找不到key，返回undefined。\n- has(key)：该方法返回一个布尔值，表示某个键是否在当前Map对象中。\n- delete(key)：该方法删除某个键，返回true，如果删除失败，返回false。\n- clear()：map.clear()清除所有成员，没有返回值。\n\nMap结构原生提供是三个遍历器生成函数和一个遍历方法\n\n- keys()：返回键名的遍历器。\n- values()：返回键值的遍历器。\n- entries()：返回所有成员的遍历器。\n- forEach()：遍历Map的所有成员。\n\n``` javascript\nconst map = new Map([\n     [\"foo\",1],\n     [\"bar\",2],\n])\nfor(let key of map.keys()){\n    console.log(key);  // foo bar\n}\nfor(let value of map.values()){\n     console.log(value); // 1 2\n}\nfor(let items of map.entries()){\n    console.log(items);  // [\"foo\",1]  [\"bar\",2]\n}\nmap.forEach( (value,key,map) => {\n     console.log(key,value); // foo 1    bar 2\n})\n\n```\n\n（2）WeakMap WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。其键必须是对象，原始数据类型不能作为key值，而值可以是任意的。\n\n该对象也有以下几种方法：\n\n- set(key,value)：设置键名key对应的键值value，然后返回整个WeakMap结构。如果key已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前Map对象，所以可以链式调用）\n- get(key)：该方法读取key对应的键值，如果找不到key，返回undefined。\n- has(key)：该方法返回一个布尔值，表示某个键是否在当前WeakMap对象中。\n- delete(key)：该方法删除某个键，返回true，如果删除失败，返回false。\n\n其clear()方法已经被弃用，所以可以通过创建一个空的WeakMap并替换原对象来实现清除。\n\nWeakMap的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。\n\n而WeakMap的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。\n\n总结：\n\n- Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。\n- WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。\n\n4. JavaScript有哪些内置对象\n\n全局的对象（ global objects ）或称标准内置对象，不要和 \"全局对象（global object）\" 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。\n\n标准内置对象的分类：\n\n（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量\n\n（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval()、parseFloat()、parseInt() 等\n\n（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等\n\n（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date\n\n（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp\n\n（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array\n\n（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet\n\n（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等\n\n（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等\n\n（10）控制抽象对象 例如 Promise、Generator 等\n\n（11）反射。例如 Reflect、Proxy\n\n（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等\n\n（13）WebAssembly\n\n（14）其他。例如 arguments\n\n总结：\njs 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt()、parseFloat() 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。\n\n5. 常用的正则表达式有哪些？\n\n``` javascript\n// （1）匹配 16 进制颜色值\nvar regex = /#([0-9a-fA-F]{6}|[0-9a-fA-F]{3})/g;\n\n// （2）匹配日期，如 yyyy-mm-dd 格式\nvar regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/;\n\n// （3）匹配 qq 号\nvar regex = /^[1-9][0-9]{4,10}$/g;\n\n// （4）手机号码正则\nvar regex = /^1[34578]\\d{9}$/g;\n\n// （5）用户名正则\nvar regex = /^[a-zA-Z\\$][a-zA-Z0-9_\\$]{4,16}$/;\n\n```\n\n6. 对JSON的理解\n\nJSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。\n\n在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。\n\n因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。\n\n在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，\n\n- JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。\n\n- JSON.parse() 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。\n\n7. JavaScript脚本延迟加载的方式有哪些？\n\n延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。\n\n一般有以下几种方式：\n\n- defer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。\n\n- async 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。\n\n- 动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。\n\n- 使用 setTimeout 延迟方法： 设置一个定时器来延迟加载js脚本文件\n\n- 让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。\n\n8. JavaScript 类数组对象的定义？\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n\n（1）通过 call 调用数组的 slice 方法来实现转换\n\n``` javascript\nArray.prototype.slice.call(arrayLike)\n```\n\n（2）通过 call 调用数组的 splice 方法来实现转换\n\n``` javascript\nArray.prototype.splice.call(arrayLike,0)\n```\n\n（3）通过 apply 调用数组的 concat 方法来实现转换\n\n``` javascript\nArray.prototype.concat.apply([],arrayLike)\n```\n\n(P.S.call 和 apply 是 JavaScript 中函数对象的两个方法，它们的主要功能非常相似，都是用于调用函数并显式指定函数内部的 this 值。然而，它们在传递参数的方式上有所不同:call 接受参数列表，apply 接受参数数组。)\n\n（4）通过 Array.from 方法来实现转换\n\n``` javascript\nArray.from(arrayLike);\n\n```\n\n9. 数组有哪些原生方法？\n\n- 数组和字符串的转换方法：toString()、toLocalString()、join() 其中 join() 方法可以指定转换为字符串时的分隔符。\n- 数组尾部操作的方法 pop() 和 push()，push 方法可以传入多个参数。\n- 数组首部操作的方法 shift() 和 unshift() 重排序的方法 reverse() 和 sort()，sort() 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。\n- 数组连接的方法 concat() ，返回的是拼接好的数组，不影响原数组。\n- 数组截取办法 slice()，用于截取数组中的一部分返回，不影响原数组。\n- 数组插入方法 splice()，影响原数组查找特定项的索引的方法，indexOf() 和 lastIndexOf() 迭代方法 every()、some()、filter()、map() 和 forEach() 方法\n- 数组归并方法 reduce() 和 reduceRight()\n\n10. Unicode、UTF-8、UTF-16、UTF-32的区别？\n\n（1）Unicode\n\n在说Unicode之前需要先了解一下ASCII码：ASCII 码（American Standard Code for Information Interchange）称为美国标准信息交换码。\n\n- 它是基于拉丁字母的一套电脑编码系统。\n- 它定义了一个用于代表常见字符的字典。\n- 它包含了\"A-Z\"(包含大小写)，数据\"0-9\" 以及一些常见的符号。\n- 它是专门为英语而设计的，有128个编码，对其他语言无能为力\n\nASCII码可以表示的编码有限，要想表示其他语言的编码，还是要使用Unicode来表示，可以说Unicode是ASCII 的超集。\n\nUnicode全称 Unicode Translation Format，又叫做统一码、万国码、单一码。\nUnicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。\n\nUnicode的实现方式（也就是编码方式）有很多种，常见的是UTF-8、UTF-16、UTF-32和USC-2。\n\n（2）UTF-8\n\nUTF-8是使用最广泛的Unicode编码方式，它是一种可变长的编码方式，可以是1—4个字节不等，它可以完全兼容ASCII码的128个字符。\n\n注意： UTF-8 是一种编码方式，Unicode是一个字符集合。\n\nUTF-8的编码规则：\n\n- 对于单字节的符号，字节的第一位为0，后面的7位为这个字符的Unicode编码，因此对于英文字母，它的Unicode编码和ACSII编码一样。\n- 对于n字节的符号，第一个字节的前n位都是1，第n+1位设为0，后面字节的前两位一律设为10，剩下的没有提及的二进制位，全部为这个符号的Unicode码 。\n\n来看一下具体的Unicode编号范围与对应的UTF-8二进制格式 ：\n\n| 编码范围（编号对应的十进制数） | 二进制格式 |\n| --- | --- |\n| 0x00—0x7F （0-127）| 0xxxxxxx |\n| 0x80—0x7FF （128-2047）| 110xxxxx 10xxxxxx |\n| 0x800—0xFFFF  （2048-65535） | 1110xxxx 10xxxxxx 10xxxxxx |\n| 0x10000—0x10FFFF  （65536以上） | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx |\n\n那该如何通过具体的Unicode编码，进行具体的UTF-8编码呢？步骤如下：\n\n- 找到该Unicode编码的所在的编号范围，进而找到与之对应的二进制格式\n- 将Unicode编码转换为二进制数（去掉最高位的0）\n- 将二进制数从右往左一次填入二进制格式的X中，如果有X未填，就设为0\n\n来看一个实际的例子：\n“马” 字的Unicode编码是：0x9A6C，整数编号是39532\n（1）首选确定了该字符在第三个范围内，它的格式是 1110xxxx 10xxxxxx 10xxxxxx\n（2）39532对应的二进制数为1001 1010 0110 1100\n（3）将二进制数填入X中，结果是：11101001 10101001 10101100\n\n（3）UTF-16\n\n平面的概念\n在了解UTF-16之前，先看一下平面的概念：\nUnicode编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放65536（216）个字符，这称为一个平面，目前总共有17 个平面。\n最前面的一个平面称为基本平面，它的码点从0 — 216-1，写成16进制就是U+0000 — U+FFFF，那剩下的16个平面就是辅助平面，码点范围是 U+10000—U+10FFFF。\n\nUTF-16 概念：\nUTF-16也是Unicode编码集的一种编码形式，把Unicode字符集的抽象码位映射为16位长的整数（即码元）的序列，用于数据存储或传递。Unicode字符的码位需要1个或者2个16位长的码元来表示，因此UTF-16也是用变长字节表示的。\n\nUTF-16 编码规则：\n编号在 U+0000—U+FFFF 的字符（常用字符集），直接用两个字节表示。\n编号在 U+10000—U+10FFFF 之间的字符，需要用四个字节表示。\n\n编码识别\n\n那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？\n\nUTF-16 编码肯定也考虑到了这个问题，在基本平面内，从 U+D800 — U+DFFF 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。\n\n辅助平面共有 220 个字符位，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 — U+DBFF，称为高位（H），后 10 位映射在 U+DC00 — U+DFFF，称为低位（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。\n\n因此，当遇到两个字节时，发现它的码点在 U+D800 —U+DBFF之间，就可以知道，它后面的两个字节的码点应该在 U+DC00 — U+DFFF 之间，这四个字节必须放在一起进行解读。\n\n举例说明\n以 \"𡠀\" 字为例，它的 Unicode 码点为 0x21800，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：\n\n首先计算超出部分的结果：0x21800 - 0x10000\n将上面的计算结果转为20位的二进制数，不足20位就在前面补0，结果为：0001000110 0000000000\n将得到的两个10位二进制数分别对应到两个区间中\nU+D800 对应的二进制数为 1101100000000000， 将0001000110填充在它的后10 个二进制位，得到 1101100001000110，转成 16 进制数为 0xD846。同理，低位为 0xDC00，所以这个字的UTF-16 编码为 0xD846 0xDC00\n\n（4） UTF-32\nUTF-32 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。\n比如“马” 字的Unicode编号是：U+9A6C，整数编号是39532，直接转化为二进制：1001 1010 0110 1100，这就是它的UTF-32编码。\n\n（5）总结\nUnicode、UTF-8、UTF-16、UTF-32有什么区别？\n\n- Unicode 是编码字符集（字符集），而UTF-8、UTF-16、UTF-32是字符集编码（编码规则）；\n- UTF-16 使用变长码元序列的编码方式，相较于定长码元序列的UTF-32算法更复杂，甚至比同样是变长码元序列的UTF-8也更为复杂，因为其引入了独特的代理对这样的代理机制；\n- UTF-8需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而UTF-16不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；\n- 如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用UTF-8就比UTF-16节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么UTF-16就占优势了，可以节省很多空间；\n\n11. 常见的位运算符有哪些？其计算规则是什么？\n\n现代计算机中数据都是以二进制的形式存储的，即0、1两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。\n\n常见的位运算符有：\n\n| 运算符 | 描述 | 运算规则 |\n| --- | --- | --- |\n| & | 与 | 两个位都为1时，结果才为1 |\n| | | 或 | 两个位都为0时，结果才为0 |\n| ^ | 异或 | 两个位相同为0，不同为1 |\n| ~ | 取反 | 0变1，1变0 |\n| << | 左移 | 各二进位全部左移若干位，高位丢弃，低位补0 |\n| >> | 右移 | 各二进制位全部右移若干位，正数左补0，负数左补1，右边丢弃 |\n\n\n\n7. 原码、补码、反码\n上面提到了补码、反码等知识，这里就补充一下。 计算机中的有符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用0表示“正”，用1表示“负”，而数值位，三种表示方法各不相同。\n\n（1）原码\n\n原码就是一个数的二进制数。例如：10的原码为0000 1010\n\n（2）反码\n- 正数的反码与原码相同，如：10 反码为 0000 1010\n- 负数的反码为除符号位，按位取反，即0变1，1变0。\n\n（3）补码\n正数的补码与原码相同，如：10 补码为 0000 1010\n负数的补码是原码除符号位外的所有位取反即0变1，1变0，然后加1，也就是反码加1。\n\n12. 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组?\n\narguments是一个对象，它的属性是从 0 开始依次递增的数字，还有callee和length等属性，与数组相似；但是它却没有数组常见的方法属性，如forEach, reduce等，所以叫它们类数组。\n\n要遍历类数组，有三个方法：\n\n（1）将数组的方法应用到类数组上，这时候就可以使用call和apply方法，如：\n\n``` javascript\nfunction foo() {\n    Array.prototype.forEach.call(arguments, a => console.log(a))\n}\n```\n\n（2）使用Array.from方法将类数组转化成数组：‌\n\n``` javascript\nfunction foo(){ \n  const arrArgs = Array.from(arguments) \n  arrArgs.forEach(a => console.log(a))\n}\n\n```\n\n（3）使用展开运算符将类数组转化成数组\n\n``` javascript\nfunction foo(){ \n    const arrArgs = [...arguments] \n    arrArgs.forEach(a => console.log(a)) \n}\n\n```\n\n13. 什么是 DOM 和 BOM？\n\n- DOM指的是文档对象原型，它指的是把文档当作一个对象，这个对象主要定义了处理网页内容的方法和接口。\n- BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的方法和接口。BOM的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。\n\n14. 对类数组对象的理解，如何转化为数组\n\n一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，\n类数组对象和数组类似，但是不能调用数组的方法。\n见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length属性值，代表可接收的参数个数。\n\n常见的类数组转换为数组的方法有这样几种：\n- 通过 call 调用数组的 slice 方法来实现转换\n\n``` javascript\nArray.prototype.slice.call(arrayLike)\n```\n\n- 通过 call 调用数组的 splice 方法来实现转换\n\n``` javascript\nArray.prototype.splice.call(arrayLike, 0);\n\n```\n\n- 通过 apply 调用数组的 concat 方法来实现转换\n\n``` javascript\nArray.prototype.concat.apply([], arrayLike);\n```\n\n- 通过 Array.from 方法来实现转换\n\n``` javascript\nArray.from(arrayLike);\n\n```\n\n15. escape、encodeURI、encodeURIComponent 的区别\n- encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。\n- encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。\n- escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 %u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。\n\n16. 对AJAX的理解，实现一个AJAX请求\n\nAJAX是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。\n\n创建AJAX请求的步骤：\n\n- 创建一个 XMLHttpRequest 对象。\n- 在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。\n- 在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。\n- 当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。\n\n``` javascript\nconst SERVER_URL = \"/server\";\nlet xhr = new XMLHttpRequest();\n// 创建 Http 请求\nxhr.open(\"GET\", SERVER_URL, true);\n// 设置状态监听函数\nxhr.onreadystatechange = function() {\n  if (this.readyState !== 4) return;\n  // 当请求成功时\n  if (this.status === 200) {\n    handle(this.response);\n  } else {\n    console.error(this.statusText);\n  }\n};\n\n// 设置请求失败时的监听函数\nxhr.onerror = function() {\n  console.error(this.statusText);\n};\n\n// 设置请求头信息\nxhr.responseType = \"json\";\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n// 发送 Http 请求\nxhr.send(null);\n\n\n```\n\n使用Promise封装AJAX：\n\n``` javascript\n// promise 封装实现：\nfunction getJSON(url) {\n  // 创建一个 promise 对象\n  let promise = new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    // 新建一个 http 请求\n    xhr.open(\"GET\", url, true);\n    // 设置状态的监听函数\n    xhr.onreadystatechange = function() {\n      if (this.readyState !== 4) return;\n      // 当请求成功或失败时，改变 promise 的状态\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n    // 设置错误监听函数\n    xhr.onerror = function() {\n      reject(new Error(this.statusText));\n    };\n    // 设置响应的数据类型\n    xhr.responseType = \"json\";\n    // 设置请求头信息\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\n    // 发送 http 请求\n    xhr.send(null);\n  });\n  return promise;\n}\n\n```\n\n传统的 AJAX 请求通常使用 XMLHttpRequest 对象来实现。这种方式需要手动处理异步操作的回调函数，代码的可读性和维护性相对较低。\n使用 Promise 封装 AJAX 请求可以将异步操作以更简洁和可读的方式表达。Promise 提供了链式调用的能力，使得处理多个异步操作时更加方便。Promise 是 ES6 标准的一部分，提供了统一的异步编程模型，更容易被其他开发者理解和使用。\n\n17. JavaScript为什么要进行变量提升，它导致了什么问题？\n\n变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。\n\n造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。\n\n首先要知道，JS在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。\n\n- 在解析阶段，JS会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n - 全局上下文：变量定义，函数声明\n - 函数上下文：变量定义，函数声明，this，arguments\n\n- 在执行阶段，就是按照代码的顺序依次执行。\n\n那为什么会进行变量提升呢？主要有以下两个原因：\n\n- 提高性能\n- 容错性更好\n\n（1）提高性能 在JS代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。\n\n（2）容错性更好\n变量提升可以在一定程度上提高JS的容错性，看下面的代码：\n\n``` javascript\na = 1;var a;console.log(a);\n\n```\n如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。\n\n虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。\n\n总结：\n\n- 解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间\n- 声明提升还可以提高JS代码的容错性，使一些不规范的代码也可以正常执行\n\n变量提升虽然有一些优点，但是他也会造成一定的问题，在ES6中提出了let、const来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：\n\n``` javascript\nvar tmp = new Date();\n\nfunction fn(){\n\tconsole.log(tmp);\n\tif(false){\n\t\tvar tmp = 'hello world';\n\t}\n}\n\nfn();  // undefined\n\n```\n\n在这个函数中，原本是要打印出外层的tmp变量，但是因为变量提升的问题，内层定义的tmp被提到函数内部的最顶部，相当于覆盖了外层的tmp，所以打印结果为undefined。\n\n``` javascript\nvar tmp = 'hello world';\n\nfor (var i = 0; i < tmp.length; i++) {\n\tconsole.log(tmp[i]);\n}\n\nconsole.log(i); // 11\n\n```\n\n由于遍历时定义的i会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来11。\n\n18. 什么是尾调用，使用尾调用有什么好处？\n\n尾调用指的是函数的最后一步调用另一个函数。\n代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。\n\n但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。\n\n19. ES6模块与CommonJS模块有什么异同？\nES6 Module 和 CommonJS 是两种常见的 JavaScript 模块系统，它们用于在不同的 JavaScript 运行环境中管理代码的组织和复用。\n\nES6 Module和CommonJS模块的区别：\n\n- CommonJS是对模块的浅拷⻉，ES6 Module是对模块的引⽤，即ES6 Module只存只读，不能改变其值，也就是指针指向不能变，类似const；\n- import的接⼝是read-only（只读状态），不能修改其变量值。即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对commonJS对重新赋值（改变指针指向），但是对ES6 Module赋值会编译报错。\n\nES6 Module和CommonJS模块的共同点：\n- CommonJS和ES6 Module都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。\n\n20. 常见的DOM操作有哪些\n\n1）DOM 节点的获取\n\nDOM 节点的获取的API及使用：\n\n``` javascript\ngetElementById // 按照 id 查询\ngetElementsByTagName // 按照标签名查询\ngetElementsByClassName // 按照类名查询\nquerySelectorAll // 按照 css 选择器查询\n\n// 按照 id 查询\nvar imooc = document.getElementById('imooc') // 查询到 id 为 imooc 的元素\n// 按照标签名查询\nvar pList = document.getElementsByTagName('p')  // 查询到标签为 p 的集合\nconsole.log(divList.length)\nconsole.log(divList[0])\n// 按照类名查询\nvar moocList = document.getElementsByClassName('mooc') // 查询到类名为 mooc 的集合\n// 按照 css 选择器查询\nvar pList = document.querySelectorAll('.mooc') // 查询到类名为 mooc 的集合\n\n```\n\n2）DOM 节点的创建\n\n创建一个新节点，并把它添加到指定节点的后面。 已知的 HTML 结构如下：\n\n``` html\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n\n```\n\n要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：\n\n``` javascript\n// 首先获取父节点\nvar container = document.getElementById('container')\n// 创建新节点\nvar targetSpan = document.createElement('span')\n// 设置 span 节点的内容\ntargetSpan.innerHTML = 'hello world'\n// 把新创建的元素塞进父节点里去\ncontainer.appendChild(targetSpan)\n\n```\n\n3）DOM 节点的删除\n\n删除指定的 DOM 节点， 已知的 HTML 结构如下：\n\n``` javascript\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n    </div>   \n  </body>\n</html>\n\n```\n\n需要删除 id 为 title 的元素，做法是：\n\n``` javascript\n// 获取目标元素的父元素\nvar container = document.getElementById('container')\n// 获取目标元素\nvar targetNode = document.getElementById('title')\n// 删除目标元素\ncontainer.removeChild(targetNode)\n\n```\n\n或者通过子节点数组来完成删除：\n\n``` javascript\n// 获取目标元素的父元素var container = document.getElementById('container')// 获取目标元素var targetNode = container.childNodes[1]// 删除目标元素container.removeChild(targetNode)\n\n```\n\n4）修改 DOM 元素\n\n修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。\n\n将指定的两个 DOM 元素交换位置， 已知的 HTML 结构如下：\n\n``` javascript\n<html>\n  <head>\n    <title>DEMO</title>\n  </head>\n  <body>\n    <div id=\"container\"> \n      <h1 id=\"title\">我是标题</h1>\n      <p id=\"content\">我是内容</p>\n    </div>   \n  </body>\n</html>\n```\n\n现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：\n\n``` javascript\n// 获取父元素\nvar container = document.getElementById('container')   \n \n// 获取两个需要被交换的元素\nvar title = document.getElementById('title')\nvar content = document.getElementById('content')\n\n// 交换两个元素，把 content 置于 title 前面\ncontainer.insertBefore(content, title)\n\n```\n\n21. use strict是什么意思 ? 使用它区别是什么？\n\nuse strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：\n\n- 消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;\n- 消除代码运行的一些不安全之处，保证代码运行的安全；\n- 提高编译器效率，增加运行速度；\n- 为未来新版本的 Javascript 做好铺垫。\n\n区别：\n\n- 禁止使用 with 语句。\n- 禁止 this 关键字指向全局对象。\n- 对象不能有重名的属性。\n\n22. 如何判断一个对象是否属于某个类？\n\n- 第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。\n- 第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。\n- 第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString() 方法来打印对象的[[Class]] 属性来进行判断。\n\n23. 强类型语言和弱类型语言的区别\n\n- 强类型语言：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。\n- Java和C++等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。\n- 弱类型语言：弱类型语言也称为弱类型定义语言，与强类型定义相反。\n- JavaScript语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如JavaScript是弱类型定义的，在JavaScript中就可以将字符串'12'和整数3进行连接得到字符串'123'，在相加的时候会进行强制类型转换。\n\n两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。\n\n24. 解释性语言和编译型语言的区别\n\n（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下\n- 解释型语言每次运行都需要将源代码解释成机器码并执行，效率较低；\n- 只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；\n- JavaScript、Python等属于解释型语言。\n\n（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如exe格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行exe文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：\n- 一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；\n- 与特定平台相关，一般无法移植到其他平台；\n- C、C++、Java、Go、Rust等属于编译型语言。\n\n两者主要区别在于： 前者（编译型）源程序编译后即可在该平台运行，（解释型）后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。\n\n25. for...in和for...of的区别\n\nfor…of 是ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，和ES3中的for…in的区别如下:\n- for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；\n- for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；\n- 对于数组的遍历，for…in 会返回数组中所有可枚举的属性(包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；\n\n总结： for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。\n\n26. 如何使用for...of遍历对象\n\nfor…of是作为ES6新增的遍历方式，允许遍历一个含有iterator接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用for..of遍历是会报错的。\n\np.s. 含有迭代器接口（Iterator Interface）的数据结构是一种可以被遍历的数据结构，它提供了一种标准的方法来访问集合中的元素，而无需暴露集合的内部结构。在 JavaScript 中，迭代器接口通过 Symbol.iterator 方法实现。许多内置的数据结构（如数组、Set、Map）都实现了这一接口。\n\n如果需要遍历的对象是类数组对象，用Array.from转成数组即可。\n\n``` javascript\nvar obj = {\n    0:'one',\n    1:'two',\n    length: 2\n};\nobj = Array.from(obj);\nfor(var k of obj){\n    console.log(k)\n}\n\n```\n\n如果不是类数组对象，就给对象添加一个[Symbol.iterator]属性，并指向一个迭代器即可。\n\n``` javascript\n//方法一：\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\n\nobj[Symbol.iterator] = function(){\n\tvar keys = Object.keys(this);\n\tvar count = 0;\n\treturn {\n\t\tnext(){\n\t\t\tif(count<keys.length){\n\t\t\t\treturn {value: obj[keys[count++]],done:false};\n\t\t\t}else{\n\t\t\t\treturn {value:undefined,done:true};\n\t\t\t}\n\t\t}\n\t}\n};\n\nfor(var k of obj){\n\tconsole.log(k);\n}\n\n\n// 方法二\nvar obj = {\n    a:1,\n    b:2,\n    c:3\n};\nobj[Symbol.iterator] = function*(){\n    var keys = Object.keys(obj);\n    for(var k of keys){\n        yield [k,obj[k]]\n    }\n};\n\nfor(var [k,v] of obj){\n    console.log(k,v);\n}\n\n\n```\n\n27. ajax、axios、fetch的区别\n\n（1）AJAX Ajax 即“AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术.通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：\n\n- 本身是针对MVC（Model-View-Controller）编程，不符合前端MVVM(（Model-View-ViewModel）)的浪潮\n- 基于原生XHR(XMLHttpRequest)开发，XHR本身的架构不清晰\n- 不符合关注分离（Separation of Concerns）的原则\n- 配置和调用方式非常混乱，而且基于事件的异步模型不友好。\n\n（2）Fetch fetch号称是AJAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计的。Fetch的代码结构比起ajax简单多。fetch不是ajax的进一步封装，而是原生js，没有使用XMLHttpRequest对象。\nfetch的优点：\n- 语法简洁，更加语义化\n- 基于标准 Promise 实现，支持 async/await\n- 更加底层，提供的API丰富（request, response）\n- 脱离了XHR，是ES规范里新的实现方式\n\nP.S. async/await 是 JavaScript 中用于简化异步代码的语法糖，基于 Promise 实现。它使得异步代码的书写和阅读更加直观，避免了传统的回调函数嵌套（即“回调地狱”）和复杂的 Promise 链式调用。\n\nfetch的缺点：\n\n- fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。\n- fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: 'include'})\n- fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费\n- fetch没有办法原生监测请求的进度，而XHR可以\n\n（3）Axios Axios 是一种基于Promise封装的HTTP客户端，其特点如下：\n\n- 浏览器端发起XMLHttpRequests请求\n- node端发起http请求\n- 支持Promise API\n- 监听请求和返回\n- 对请求和返回进行转化\n- 取消请求\n- 自动转换json数据\n- 客户端支持抵御XSRF攻击\n\n28. 数组的遍历方法有哪些\n| 方法 | 是否改变原数组 | 特点 |\n| forEach()\t| 否 | 数组方法，不改变原数组，没有返回值 |\n| map() | 否 | 数组方法，不改变原数组，有返回值，可链式调用 |\n| filter() | 否 | 数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用 |\n| for...of | 否 | for...of遍历具有Iterator迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的obj对象，将异步循环变成同步循环 |\n| every() 和 some() | 否 | 数组方法，some()只要有一个是true，便返回true；而every()只要有一个是false，便返回false. |\n| find() 和 findIndex() | 否 | 数组方法，find()返回的是第一个符合条件的值；findIndex()返回的是第一个返回条件的值的索引值 |\n| reduce() 和 reduceRight() | 否 | 数组方法，reduce()对数组正序操作；reduceRight()对数组逆序操作 |\n\n29. forEach和map方法有什么区别\n\n这方法都是用来遍历数组的，两者区别如下：\n\n- forEach()方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；\n- map()方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；\n\n### 四、原型与原型链\n\n1. 对原型、原型链的理解\n\n在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。\nES5 中新增了一个 Object.getPrototypeOf() 方法，可以通过这个方法来获取对象的原型。\n\n当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。\n\n特点： JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。\n\n<div align=center>\n    <img src=\"前端学习之JS篇（二）/01.jpg\">\n</div>\n\n2. 原型修改、重写\n\n``` javascript\nfunction Person(name) {\n    this.name = name\n}\n// 修改原型\nPerson.prototype.getName = function() {}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype) // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n// 重写原型\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // false\n\n```\n\n可以看到修改原型的时候p的构造函数不是指向Person了，因为直接给Person的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数Object，所以这时候p.constructor === Object ，而不是p.constructor === Person。要想成立，就要用constructor指回来：\n\n``` javascript\nPerson.prototype = {\n    getName: function() {}\n}\nvar p = new Person('hello')\np.constructor = Person\nconsole.log(p.__proto__ === Person.prototype)        // true\nconsole.log(p.__proto__ === p.constructor.prototype) // true\n\n\n```\n\n3. 原型链指向\n\n``` javascript\np.__proto__  // Person.prototype\nPerson.prototype.__proto__  // Object.prototype\np.__proto__.__proto__ //Object.prototype\np.__proto__.constructor.prototype.__proto__ // Object.prototype\nPerson.prototype.constructor.prototype.__proto__ // Object.prototype\np1.__proto__.constructor // Person\nPerson.prototype.constructor  // Person\n\n```\n\nP.S. constructor 是一个特殊的属性，它指向用于创建该对象的函数。\nPerson.prototype.constructor这是 Person 函数本身。\n假设 p1 是 new Person() 创建的对象，那么 p1.__proto__ 是 Person.prototype。\n\n4. 原型链的终点是什么？如何打印出原型链的终点？\n\n由于Object是构造函数，原型链终点是Object.prototype.__proto__，而Object.prototype.__proto__=== null // true，所以，原型链的终点是null。\n\n原型链上的所有原型都是对象，所有的对象最终都是由Object构造的，而Object.prototype的下一级是Object.prototype.__proto__。（null）\n\n5. 如何获得对象非原型链上的属性？\n\n使用后hasOwnProperty()方法来判断属性是否属于原型链的属性：\n\n``` javascript\nfunction iterate(obj){\n   var res=[];\n   for(var key in obj){\n        if(obj.hasOwnProperty(key))\n           res.push(key+': '+obj[key]);\n   }\n   return res;\n} \n\n```\n\n### 五、执行上下文/作用域链/闭包\n\n1. 对闭包的理解\n\n闭包是指有权访问另一个函数作用域中变量的函数，\n创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。\n\n闭包有两个常用的用途；\n\n- 闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。\n\n- 闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。\n\nP.S. 引用是一个变量或数据结构，它存储了另一个对象或数据的内存地址，而不是数据本身。通过引用，程序可以直接访问和操作该内存地址中的数据。\n\n比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。\n\n``` javascript\nfunction A() {\n  let a = 1\n  window.B = function () {\n      console.log(a)\n  }\n}\nA()\nB() // 1\n\n```\n\n在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题\n\n``` javascript\nfor (var i = 1 ;i <= 5; i++) {\n    setTimeout(function timer() {\n        console.log(i)\n    }, i * 1000)\n}\n\n```\n\n首先因为 setTimeout 是个异步函数，所以会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出一堆 6。解决办法有三种：\n\n- 第一种是使用闭包的方式\n\n``` javascript\nfor (var i = 1; i <= 5; i++) {\n    (function(j) {\n        setTimeout(function timer() {\n            console.log(j);\n        }, j * 1000);\n    })(i);\n}\n```\n\nP.S. 立即执行函数表达式（IIFE）：\n\n(function(j) { ... })(i)：这是一个立即执行的函数表达式，它创建了一个新的作用域，并将当前的 i 值传递给参数 j。这样可以确保每个 setTimeout 回调函数中的 j 都是当前循环迭代的值，而不是最终的 i 值。\n\n在上述代码中，首先使用了立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 timer 这个闭包的时候，就可以使用外部函数的变量 j，从而达到目的。\n\n- 第二种就是使用 setTimeout 的第三个参数，这个参数会被当成 timer 函数的参数传入。\n\n``` javascript\nfor (var i = 1; i <= 5; i++) {\n  setTimeout(\n    function timer(j) {\n      console.log(j)\n    },\n    i * 1000,\n    i\n  )\n}\n\n```\n\n- 第三种就是使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式\n\n``` javascript\nfor (let i = 1; i <= 5; i++) {\n  setTimeout(function timer() {\n    console.log(i)\n  }, i * 1000)\n}\n\n```\n\nP.S.\n- var 的问题\n（1）函数作用域：var 声明的变量具有函数作用域，而不是块作用域。这意味着在函数内部定义的 var 变量在整个函数内部都是可见的，而不受块（如 if 语句或 for 循环）的限制。\n\n（2）变量提升：var 声明的变量会被提升到其作用域的顶部，导致变量在声明之前可以被访问，但其值为 undefined。\n\n（3）循环中的问题：在 for 循环中使用 var 声明的变量会在每次循环迭代中被重新赋值，但变量本身仍然是函数作用域的。这导致在异步操作（如 setTimeout）中，所有回调函数引用的是同一个变量，而不是各自循环迭代时的值。\n\n- let 的优点\n（1）块作用域：let 声明的变量具有块作用域，这意味着它们只在定义它们的块内可见。\n\n（2）不提升：let 声明的变量不会被提升到其作用域的顶部，因此在声明之前访问会报错（暂时性死区）。\n\n（3）循环中的行为：在 for 循环中使用 let 声明的变量，每次循环迭代都会创建一个新的变量绑定，因此在异步操作中，每个回调函数引用的是各自循环迭代时的值。\n\nvar：函数作用域，变量提升，不推荐在现代 JavaScript 中使用，特别是在循环中。\nlet：块作用域，不提升，推荐在需要块作用域变量时使用。\n使用 let 可以避免很多 var 带来的问题，特别是与作用域和变量提升相关的问题。因此，在现代 JavaScript 开发中，推荐使用 let 和 const 来声明变量，而不是 var。\n\n2. 对作用域、作用域链的理解\n\n1）全局作用域和函数作用域\n\n（1）全局作用域\n\n- 最外层函数和最外层函数外面定义的变量拥有全局作用域\n- 所有未定义直接赋值的变量自动声明为全局作用域\n- 所有window对象的属性拥有全局作用域\n- 全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。\n\n（2）函数作用域\n- 函数作用域声明在函数内部的变量，一般只有固定的代码片段可以访问到\n- 作用域是分层的，内层作用域可以访问外层作用域，反之不行\n\n2）块级作用域\n\n- 使用ES6中新增的let和const指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由{ }包裹的代码片段）\n- let和const声明的变量不会有变量提升，也不可以重复声明\n- 在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。\n\n作用域链： 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到window对象就被终止，这一层层的关系就是作用域链。\n\n作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。\n\n作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。\n\n当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。\n\n3. 对执行上下文的理解\n\n- 1. 执行上下文类型\n\n（1）全局执行上下文\n\n任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的window对象，并且设置this的值等于这个全局对象，一个程序中只有一个全局执行上下文。\n\n（2）函数执行上下文\n\n当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。\n\n（3）Eval函数执行上下文\n\n执行在eval函数中的代码会有属于他自己的执行上下文，不过eval函数不常使用，不做介绍。\n\n- 2. 执行上下文栈\n\n- JavaScript引擎使用执行上下文栈来管理执行上下文\n- 当JavaScript执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。\n\n``` javascript\nlet a = 'Hello World!';\nfunction first() {\n  console.log('Inside first function');\n  second();\n  console.log('Again inside first function');\n}\nfunction second() {\n  console.log('Inside second function');\n}\nfirst();\n//执行顺序\n//先执行second(),在执行first()\n\n```\n\n- 3. 创建执行上下文\n\n创建执行上下文有两个阶段：创建阶段和执行阶段\n\n1）创建阶段\n\n（1）this绑定\n\n- 在全局执行上下文中，this指向全局对象（window对象）\n- 在函数执行上下文中，this指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined\n\n（2）创建词法环境组件\n\n- 词法环境是一种有标识符——变量映射的数据结构，标识符是指变量/函数名，变量是对实际对象或原始数据的引用。\n- 词法环境的内部有两个组件：加粗样式：环境记录器:用来储存变量个函数声明的实际位置外部环境的引用：可以访问父级作用域\n\n（3）创建变量环境组件\n\n- 变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。\n\n2）执行阶段 此阶段会完成对变量的分配，最后执行完代码。\n\n简单来说执行上下文就是指：\n\n在执行一点JS代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。\n\n在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出this、arguments和函数的参数。\n\n- 全局上下文：变量定义，函数声明\n- 函数上下文：变量定义，函数声明，this，arguments\n\n","slug":"前端学习之JS篇（二）","published":1,"updated":"2025-01-11T13:12:58.024Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfi001vmcuy78pd4yo2","content":"<p>续接上一篇文章：前端学习之 JS 篇（一）</p>\n<h3 id=\"三-javascript基础\"><a class=\"anchor\" href=\"#三-javascript基础\">#</a> 三、JavaScript 基础</h3>\n<ol>\n<li>new 操作符的实现原理</li>\n</ol>\n<p>new 操作符的执行过程：</p>\n<p>（1）首先创建了一个新的空对象</p>\n<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>\n<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\n<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\n<p>具体实现：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">objectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> newObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> constructor <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 判断参数是否是一个函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> constructor <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  newObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 将 this 指向新建对象，并执行函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>newObject<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 判断返回对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> result <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 判断返回结果</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> flag <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> newObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 使用方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">objectFactory</span><span class=\"token punctuation\">(</span>构造函数<span class=\"token punctuation\">,</span> 初始化参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>map 和 Object 的区别</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Map</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>意外的键</td>\n<td>Map 默认情况不包含任何键，只包含显式插入的键。</td>\n<td>Object 有一个原型，原型链上的键名有可能和自己在对象上的设置的键名产生冲突。</td>\n</tr>\n<tr>\n<td>键的类型</td>\n<td>Map 的键可以是任意值，包括函数、对象或任意基本类型。</td>\n<td>Object 的键必须是 String 或是 Symbol。</td>\n</tr>\n<tr>\n<td>键的顺序</td>\n<td>Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。</td>\n<td>Object 的键是无序的</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Map 的键值对个数可以轻易地通过 size 属性获取</td>\n<td>Object 的键值对个数只能手动计算</td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>Map 是 iterable 的，所以可以直接被迭代。</td>\n<td>迭代 Object 需要以某种方式获取它的键然后才能迭代。</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>在频繁增删键值对的场景下表现更好。</td>\n<td>在频繁添加和删除键值对的场景下未作出优化。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>map 和 weakMap 的区别</li>\n</ol>\n<p>（1）Map<br />\nmap 本质上就是键值对的集合，但是普通的 Object 中的键值对中的键只能是字符串。而 ES6 提供的 Map 数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的 Hash 结构。如果 Map 的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</p>\n<p>实际上 Map 是一个数组，它的每一个数据也都是一个数组，其形式如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>Map 数据结构有以下操作方法：</p>\n<ul>\n<li>size： map.size 返回 Map 结构的成员总数。</li>\n<li>set (key,value)：设置键名 key 对应的键值 value，然后返回整个 Map 结构，如果 key 已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前 Map 对象，所以可以链式调用）</li>\n<li>get (key)：该方法读取 key 对应的键值，如果找不到 key，返回 undefined。</li>\n<li>has (key)：该方法返回一个布尔值，表示某个键是否在当前 Map 对象中。</li>\n<li>delete (key)：该方法删除某个键，返回 true，如果删除失败，返回 false。</li>\n<li>clear ()：map.clear () 清除所有成员，没有返回值。</li>\n</ul>\n<p>Map 结构原生提供是三个遍历器生成函数和一个遍历方法</p>\n<ul>\n<li>keys ()：返回键名的遍历器。</li>\n<li>values ()：返回键值的遍历器。</li>\n<li>entries ()：返回所有成员的遍历器。</li>\n<li>forEach ()：遍历 Map 的所有成员。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// foo bar</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> items <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [\"foo\",1]  [\"bar\",2]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>map</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo 1    bar 2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（2）WeakMap WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。其键必须是对象，原始数据类型不能作为 key 值，而值可以是任意的。</p>\n<p>该对象也有以下几种方法：</p>\n<ul>\n<li>set (key,value)：设置键名 key 对应的键值 value，然后返回整个 WeakMap 结构。如果 key 已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前 Map 对象，所以可以链式调用）</li>\n<li>get (key)：该方法读取 key 对应的键值，如果找不到 key，返回 undefined。</li>\n<li>has (key)：该方法返回一个布尔值，表示某个键是否在当前 WeakMap 对象中。</li>\n<li>delete (key)：该方法删除某个键，返回 true，如果删除失败，返回 false。</li>\n</ul>\n<p>其 clear () 方法已经被弃用，所以可以通过创建一个空的 WeakMap 并替换原对象来实现清除。</p>\n<p>WeakMap 的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p>\n<p>而 WeakMap 的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。</p>\n<p>总结：</p>\n<ul>\n<li>Map 数据结构。它类似于对象，也是键值对的集合，但是 “键” 的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>\n<li>WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</li>\n</ul>\n<ol start=\"4\">\n<li>JavaScript 有哪些内置对象</li>\n</ol>\n<p>全局的对象（ global objects ）或称标准内置对象，不要和 &quot;全局对象（global object）&quot; 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</p>\n<p>标准内置对象的分类：</p>\n<p>（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量</p>\n<p>（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval ()、parseFloat ()、parseInt () 等</p>\n<p>（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等</p>\n<p>（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date</p>\n<p>（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp</p>\n<p>（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array</p>\n<p>（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet</p>\n<p>（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等</p>\n<p>（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等</p>\n<p>（10）控制抽象对象 例如 Promise、Generator 等</p>\n<p>（11）反射。例如 Reflect、Proxy</p>\n<p>（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等</p>\n<p>（13）WebAssembly</p>\n<p>（14）其他。例如 arguments</p>\n<p>总结：<br />\njs 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt ()、parseFloat () 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。</p>\n<ol start=\"5\">\n<li>常用的正则表达式有哪些？</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// （1）匹配 16 进制颜色值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// （2）匹配日期，如 yyyy-mm-dd 格式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// （3）匹配 qq 号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[1-9][0-9]&#123;4,10&#125;$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// （4）手机号码正则</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^1[34578]\\d&#123;9&#125;$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// （5）用户名正则</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[a-zA-Z\\$][a-zA-Z0-9_\\$]&#123;4,16&#125;$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>对 JSON 的理解</li>\n</ol>\n<p>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。</p>\n<p>在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。</p>\n<p>因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。</p>\n<p>在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，</p>\n<ul>\n<li>\n<p>JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。</p>\n</li>\n<li>\n<p>JSON.parse () 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。</p>\n</li>\n</ul>\n<ol start=\"7\">\n<li>JavaScript 脚本延迟加载的方式有哪些？</li>\n</ol>\n<p>延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。</p>\n<p>一般有以下几种方式：</p>\n<ul>\n<li>\n<p>defer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。</p>\n</li>\n<li>\n<p>async 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。</p>\n</li>\n<li>\n<p>动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。</p>\n</li>\n<li>\n<p>使用 setTimeout 延迟方法： 设置一个定时器来延迟加载 js 脚本文件</p>\n</li>\n<li>\n<p>让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。</p>\n</li>\n</ul>\n<ol start=\"8\">\n<li>JavaScript 类数组对象的定义？</li>\n</ol>\n<p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<p>（1）通过 call 调用数组的 slice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（2）通过 call 调用数组的 splice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（3）通过 apply 调用数组的 concat 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>(P.S.call 和 apply 是 JavaScript 中函数对象的两个方法，它们的主要功能非常相似，都是用于调用函数并显式指定函数内部的 this 值。然而，它们在传递参数的方式上有所不同:call 接受参数列表，apply 接受参数数组。)</p>\n<p>（4）通过 Array.from 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>数组有哪些原生方法？</li>\n</ol>\n<ul>\n<li>数组和字符串的转换方法：toString ()、toLocalString ()、join () 其中 join () 方法可以指定转换为字符串时的分隔符。</li>\n<li>数组尾部操作的方法 pop () 和 push ()，push 方法可以传入多个参数。</li>\n<li>数组首部操作的方法 shift () 和 unshift () 重排序的方法 reverse () 和 sort ()，sort () 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li>\n<li>数组连接的方法 concat () ，返回的是拼接好的数组，不影响原数组。</li>\n<li>数组截取办法 slice ()，用于截取数组中的一部分返回，不影响原数组。</li>\n<li>数组插入方法 splice ()，影响原数组查找特定项的索引的方法，indexOf () 和 lastIndexOf () 迭代方法 every ()、some ()、filter ()、map () 和 forEach () 方法</li>\n<li>数组归并方法 reduce () 和 reduceRight ()</li>\n</ul>\n<ol start=\"10\">\n<li>Unicode、UTF-8、UTF-16、UTF-32 的区别？</li>\n</ol>\n<p>（1）Unicode</p>\n<p>在说 Unicode 之前需要先了解一下 ASCII 码：ASCII 码（American Standard Code for Information Interchange）称为美国标准信息交换码。</p>\n<ul>\n<li>它是基于拉丁字母的一套电脑编码系统。</li>\n<li>它定义了一个用于代表常见字符的字典。</li>\n<li>它包含了 &quot;A-Z&quot;(包含大小写)，数据 &quot;0-9&quot; 以及一些常见的符号。</li>\n<li>它是专门为英语而设计的，有 128 个编码，对其他语言无能为力</li>\n</ul>\n<p>ASCII 码可以表示的编码有限，要想表示其他语言的编码，还是要使用 Unicode 来表示，可以说 Unicode 是 ASCII 的超集。</p>\n<p>Unicode 全称 Unicode Translation Format，又叫做统一码、万国码、单一码。<br />\nUnicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>\n<p>Unicode 的实现方式（也就是编码方式）有很多种，常见的是 UTF-8、UTF-16、UTF-32 和 USC-2。</p>\n<p>（2）UTF-8</p>\n<p>UTF-8 是使用最广泛的 Unicode 编码方式，它是一种可变长的编码方式，可以是 1—4 个字节不等，它可以完全兼容 ASCII 码的 128 个字符。</p>\n<p>注意： UTF-8 是一种编码方式，Unicode 是一个字符集合。</p>\n<p>UTF-8 的编码规则：</p>\n<ul>\n<li>对于单字节的符号，字节的第一位为 0，后面的 7 位为这个字符的 Unicode 编码，因此对于英文字母，它的 Unicode 编码和 ACSII 编码一样。</li>\n<li>对于 n 字节的符号，第一个字节的前 n 位都是 1，第 n+1 位设为 0，后面字节的前两位一律设为 10，剩下的没有提及的二进制位，全部为这个符号的 Unicode 码 。</li>\n</ul>\n<p>来看一下具体的 Unicode 编号范围与对应的 UTF-8 二进制格式 ：</p>\n<table>\n<thead>\n<tr>\n<th>编码范围（编号对应的十进制数）</th>\n<th>二进制格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00—0x7F （0-127）</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>0x80—0x7FF （128-2047）</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x800—0xFFFF  （2048-65535）</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x10000—0x10FFFF  （65536 以上）</td>\n<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody>\n</table>\n<p>那该如何通过具体的 Unicode 编码，进行具体的 UTF-8 编码呢？步骤如下：</p>\n<ul>\n<li>找到该 Unicode 编码的所在的编号范围，进而找到与之对应的二进制格式</li>\n<li>将 Unicode 编码转换为二进制数（去掉最高位的 0）</li>\n<li>将二进制数从右往左一次填入二进制格式的 X 中，如果有 X 未填，就设为 0</li>\n</ul>\n<p>来看一个实际的例子：<br />\n“马” 字的 Unicode 编码是：0x9A6C，整数编号是 39532<br />\n（1）首选确定了该字符在第三个范围内，它的格式是 1110xxxx 10xxxxxx 10xxxxxx<br />\n（2）39532 对应的二进制数为 1001 1010 0110 1100<br />\n（3）将二进制数填入 X 中，结果是：11101001 10101001 10101100</p>\n<p>（3）UTF-16</p>\n<p>平面的概念<br />\n在了解 UTF-16 之前，先看一下平面的概念：<br />\nUnicode 编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放 65536（216）个字符，这称为一个平面，目前总共有 17 个平面。<br />\n最前面的一个平面称为基本平面，它的码点从 0 — 216-1，写成 16 进制就是 U+0000 — U+FFFF，那剩下的 16 个平面就是辅助平面，码点范围是 U+10000—U+10FFFF。</p>\n<p>UTF-16 概念：<br />\nUTF-16 也是 Unicode 编码集的一种编码形式，把 Unicode 字符集的抽象码位映射为 16 位长的整数（即码元）的序列，用于数据存储或传递。Unicode 字符的码位需要 1 个或者 2 个 16 位长的码元来表示，因此 UTF-16 也是用变长字节表示的。</p>\n<p>UTF-16 编码规则：<br />\n编号在 U+0000—U+FFFF 的字符（常用字符集），直接用两个字节表示。<br />\n编号在 U+10000—U+10FFFF 之间的字符，需要用四个字节表示。</p>\n<p>编码识别</p>\n<p>那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？</p>\n<p>UTF-16 编码肯定也考虑到了这个问题，在基本平面内，从 U+D800 — U+DFFF 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。</p>\n<p>辅助平面共有 220 个字符位，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 — U+DBFF，称为高位（H），后 10 位映射在 U+DC00 — U+DFFF，称为低位（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。</p>\n<p>因此，当遇到两个字节时，发现它的码点在 U+D800 —U+DBFF 之间，就可以知道，它后面的两个字节的码点应该在 U+DC00 — U+DFFF 之间，这四个字节必须放在一起进行解读。</p>\n<p>举例说明<br />\n以 &quot;𡠀&quot; 字为例，它的 Unicode 码点为 0x21800，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：</p>\n<p>首先计算超出部分的结果：0x21800 - 0x10000<br />\n 将上面的计算结果转为 20 位的二进制数，不足 20 位就在前面补 0，结果为：0001000110 0000000000<br />\n 将得到的两个 10 位二进制数分别对应到两个区间中<br />\n U+D800 对应的二进制数为 1101100000000000， 将 0001000110 填充在它的后 10 个二进制位，得到 1101100001000110，转成 16 进制数为 0xD846。同理，低位为 0xDC00，所以这个字的 UTF-16 编码为 0xD846 0xDC00</p>\n<p>（4） UTF-32<br />\nUTF-32 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。<br />\n比如 “马” 字的 Unicode 编号是：U+9A6C，整数编号是 39532，直接转化为二进制：1001 1010 0110 1100，这就是它的 UTF-32 编码。</p>\n<p>（5）总结<br />\n Unicode、UTF-8、UTF-16、UTF-32 有什么区别？</p>\n<ul>\n<li>Unicode 是编码字符集（字符集），而 UTF-8、UTF-16、UTF-32 是字符集编码（编码规则）；</li>\n<li>UTF-16 使用变长码元序列的编码方式，相较于定长码元序列的 UTF-32 算法更复杂，甚至比同样是变长码元序列的 UTF-8 也更为复杂，因为其引入了独特的代理对这样的代理机制；</li>\n<li>UTF-8 需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而 UTF-16 不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；</li>\n<li>如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用 UTF-8 就比 UTF-16 节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么 UTF-16 就占优势了，可以节省很多空间；</li>\n</ul>\n<ol start=\"11\">\n<li>常见的位运算符有哪些？其计算规则是什么？</li>\n</ol>\n<p>现代计算机中数据都是以二进制的形式存储的，即 0、1 两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</p>\n<p>常见的位运算符有：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>运算规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>与</td>\n<td>两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>或</td>\n<td>两个位都为 0 时，结果才为 0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>两个位相同为 0，不同为 1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>取反</td>\n<td>0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"7\">\n<li>原码、补码、反码<br />\n上面提到了补码、反码等知识，这里就补充一下。 计算机中的有符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示 “正”，用 1 表示 “负”，而数值位，三种表示方法各不相同。</li>\n</ol>\n<p>（1）原码</p>\n<p>原码就是一个数的二进制数。例如：10 的原码为 0000 1010</p>\n<p>（2）反码</p>\n<ul>\n<li>正数的反码与原码相同，如：10 反码为 0000 1010</li>\n<li>负数的反码为除符号位，按位取反，即 0 变 1，1 变 0。</li>\n</ul>\n<p>（3）补码<br />\n正数的补码与原码相同，如：10 补码为 0000 1010<br />\n 负数的补码是原码除符号位外的所有位取反即 0 变 1，1 变 0，然后加 1，也就是反码加 1。</p>\n<ol start=\"12\">\n<li>为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组？</li>\n</ol>\n<p>arguments 是一个对象，它的属性是从 0 开始依次递增的数字，还有 callee 和 length 等属性，与数组相似；但是它却没有数组常见的方法属性，如 forEach, reduce 等，所以叫它们类数组。</p>\n<p>要遍历类数组，有三个方法：</p>\n<p>（1）将数组的方法应用到类数组上，这时候就可以使用 call 和 apply 方法，如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（2）使用 Array.from 方法将类数组转化成数组：‌</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> arrArgs <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  arrArgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（3）使用展开运算符将类数组转化成数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> arrArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arrArgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"13\">\n<li>什么是 DOM 和 BOM？</li>\n</ol>\n<ul>\n<li>DOM 指的是文档对象原型，它指的是把文档当作一个对象，这个对象主要定义了处理网页内容的方法和接口。</li>\n<li>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的方法和接口。BOM 的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</li>\n</ul>\n<ol start=\"14\">\n<li>对类数组对象的理解，如何转化为数组</li>\n</ol>\n<p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，<br />\n类数组对象和数组类似，但是不能调用数组的方法。<br />\n见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<ul>\n<li>通过 call 调用数组的 slice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>通过 call 调用数组的 splice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 apply 调用数组的 concat 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 Array.from 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"15\">\n<li>escape、encodeURI、encodeURIComponent 的区别</li>\n</ol>\n<ul>\n<li>encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。</li>\n<li>encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。</li>\n<li>escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 % u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。</li>\n</ul>\n<ol start=\"16\">\n<li>对 AJAX 的理解，实现一个 AJAX 请求</li>\n</ol>\n<p>AJAX 是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>创建 AJAX 请求的步骤：</p>\n<ul>\n<li>创建一个 XMLHttpRequest 对象。</li>\n<li>在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>\n<li>在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发 onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>\n<li>当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">SERVER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/server\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 Http 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SERVER_URL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置状态监听函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 当请求成功时</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 设置请求失败时的监听函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 设置请求头信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>xhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 发送 Http 请求</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 Promise 封装 AJAX：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//promise 封装实现：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 创建一个 promise 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 新建一个 http 请求</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置状态的监听函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 当请求成功或失败时，改变 promise 的状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 设置错误监听函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 设置响应的数据类型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 设置请求头信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 发送 http 请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传统的 AJAX 请求通常使用 XMLHttpRequest 对象来实现。这种方式需要手动处理异步操作的回调函数，代码的可读性和维护性相对较低。<br />\n使用 Promise 封装 AJAX 请求可以将异步操作以更简洁和可读的方式表达。Promise 提供了链式调用的能力，使得处理多个异步操作时更加方便。Promise 是 ES6 标准的一部分，提供了统一的异步编程模型，更容易被其他开发者理解和使用。</p>\n<ol start=\"17\">\n<li>JavaScript 为什么要进行变量提升，它导致了什么问题？</li>\n</ol>\n<p>变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。</p>\n<p>造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。</p>\n<p>首先要知道，JS 在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。</p>\n<ul>\n<li>\n<p>在解析阶段，JS 会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为 undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出 this、arguments 和函数的参数。</p>\n</li>\n<li>\n<p>全局上下文：变量定义，函数声明</p>\n</li>\n<li>\n<p>函数上下文：变量定义，函数声明，this，arguments</p>\n</li>\n<li>\n<p>在执行阶段，就是按照代码的顺序依次执行。</p>\n</li>\n</ul>\n<p>那为什么会进行变量提升呢？主要有以下两个原因：</p>\n<ul>\n<li>提高性能</li>\n<li>容错性更好</li>\n</ul>\n<p>（1）提高性能 在 JS 代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。<br />\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</p>\n<p>（2）容错性更好<br />\n变量提升可以在一定程度上提高 JS 的容错性，看下面的代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</p>\n<p>虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</p>\n<p>总结：</p>\n<ul>\n<li>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</li>\n<li>声明提升还可以提高 JS 代码的容错性，使一些不规范的代码也可以正常执行</li>\n</ul>\n<p>变量提升虽然有一些优点，但是他也会造成一定的问题，在 ES6 中提出了 let、const 来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><p>在这个函数中，原本是要打印出外层的 tmp 变量，但是因为变量提升的问题，内层定义的 tmp 被提到函数内部的最顶部，相当于覆盖了外层的 tmp，所以打印结果为 undefined。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tmp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></pre></td></tr></table></figure><p>由于遍历时定义的 i 会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来 11。</p>\n<ol start=\"18\">\n<li>什么是尾调用，使用尾调用有什么好处？</li>\n</ol>\n<p>尾调用指的是函数的最后一步调用另一个函数。<br />\n代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。</p>\n<p>但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>\n<ol start=\"19\">\n<li>ES6 模块与 CommonJS 模块有什么异同？<br />\nES6 Module 和 CommonJS 是两种常见的 JavaScript 模块系统，它们用于在不同的 JavaScript 运行环境中管理代码的组织和复用。</li>\n</ol>\n<p>ES6 Module 和 CommonJS 模块的区别：</p>\n<ul>\n<li>CommonJS 是对模块的浅拷⻉，ES6 Module 是对模块的引⽤，即 ES6 Module 只存只读，不能改变其值，也就是指针指向不能变，类似 const；</li>\n<li>import 的接⼝是 read-only（只读状态），不能修改其变量值。即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对 commonJS 对重新赋值（改变指针指向），但是对 ES6 Module 赋值会编译报错。</li>\n</ul>\n<p>ES6 Module 和 CommonJS 模块的共同点：</p>\n<ul>\n<li>CommonJS 和 ES6 Module 都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。</li>\n</ul>\n<ol start=\"20\">\n<li>常见的 DOM 操作有哪些</li>\n</ol>\n<p>1）DOM 节点的获取</p>\n<p>DOM 节点的获取的 API 及使用：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>getElementById <span class=\"token comment\">// 按照 id 查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>getElementsByTagName <span class=\"token comment\">// 按照标签名查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>getElementsByClassName <span class=\"token comment\">// 按照类名查询</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>querySelectorAll <span class=\"token comment\">// 按照 css 选择器查询</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 按照 id 查询</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> imooc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到 id 为 imooc 的元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 按照标签名查询</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> pList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 查询到标签为 p 的集合</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 按照类名查询</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> moocList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到类名为 mooc 的集合</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 按照 css 选择器查询</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> pList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到类名为 mooc 的集合</span></pre></td></tr></table></figure><p>2）DOM 节点的创建</p>\n<p>创建一个新节点，并把它添加到指定节点的后面。 已知的 HTML 结构如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>DEMO<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首先获取父节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建新节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> targetSpan <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置 span 节点的内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>targetSpan<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 把新创建的元素塞进父节点里去</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>targetSpan<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3）DOM 节点的删除</p>\n<p>删除指定的 DOM 节点， 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token constant\">DEMO</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>我是标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>需要删除 id 为 title 的元素，做法是：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取目标元素的父元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取目标元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 删除目标元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>或者通过子节点数组来完成删除：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取目标元素的父元素 var container = document.getElementById ('container')// 获取目标元素 var targetNode = container.childNodes [1]// 删除目标元素 container.removeChild (targetNode)</span></pre></td></tr></table></figure><p>4）修改 DOM 元素</p>\n<p>修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。</p>\n<p>将指定的两个 DOM 元素交换位置， 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token constant\">DEMO</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>我是标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>p id<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>我是内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取父元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取两个需要被交换的元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 交换两个元素，把 content 置于 title 前面</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"21\">\n<li>use strict 是什么意思？使用它区别是什么？</li>\n</ol>\n<p>use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：</p>\n<ul>\n<li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为；</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>禁止使用 with 语句。</li>\n<li>禁止 this 关键字指向全局对象。</li>\n<li>对象不能有重名的属性。</li>\n</ul>\n<ol start=\"22\">\n<li>如何判断一个对象是否属于某个类？</li>\n</ol>\n<ul>\n<li>第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</li>\n<li>第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。</li>\n<li>第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString () 方法来打印对象的 [[Class]] 属性来进行判断。</li>\n</ul>\n<ol start=\"23\">\n<li>强类型语言和弱类型语言的区别</li>\n</ol>\n<ul>\n<li>强类型语言：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。</li>\n<li>Java 和 C++ 等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。</li>\n<li>弱类型语言：弱类型语言也称为弱类型定义语言，与强类型定义相反。</li>\n<li>JavaScript 语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如 JavaScript 是弱类型定义的，在 JavaScript 中就可以将字符串 '12' 和整数 3 进行连接得到字符串 '123'，在相加的时候会进行强制类型转换。</li>\n</ul>\n<p>两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。</p>\n<ol start=\"24\">\n<li>解释性语言和编译型语言的区别</li>\n</ol>\n<p>（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下</p>\n<ul>\n<li>解释型语言每次运行都需要将源代码解释成机器码并执行，效率较低；</li>\n<li>只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；</li>\n<li>JavaScript、Python 等属于解释型语言。</li>\n</ul>\n<p>（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如 exe 格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行 exe 文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：</p>\n<ul>\n<li>一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；</li>\n<li>与特定平台相关，一般无法移植到其他平台；</li>\n<li>C、C++、Java、Go、Rust 等属于编译型语言。</li>\n</ul>\n<p>两者主要区别在于： 前者（编译型）源程序编译后即可在该平台运行，（解释型）后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。</p>\n<ol start=\"25\">\n<li>for...in 和 for...of 的区别</li>\n</ol>\n<p>for…of 是 ES6 新增的遍历方式，允许遍历一个含有 iterator 接口的数据结构（数组、对象等）并且返回各项的值，和 ES3 中的 for…in 的区别如下:</p>\n<ul>\n<li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li>\n<li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li>\n<li>对于数组的遍历，for…in 会返回数组中所有可枚举的属性 (包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</li>\n</ul>\n<p>总结： for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p>\n<ol start=\"26\">\n<li>如何使用 for...of 遍历对象</li>\n</ol>\n<p>for…of 是作为 ES6 新增的遍历方式，允许遍历一个含有 iterator 接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用 for..of 遍历是会报错的。</p>\n<p>p.s. 含有迭代器接口（Iterator Interface）的数据结构是一种可以被遍历的数据结构，它提供了一种标准的方法来访问集合中的元素，而无需暴露集合的内部结构。在 JavaScript 中，迭代器接口通过 Symbol.iterator 方法实现。许多内置的数据结构（如数组、Set、Map）都实现了这一接口。</p>\n<p>如果需要遍历的对象是类数组对象，用 Array.from 转成数组即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果不是类数组对象，就给对象添加一个 [Symbol.iterator] 属性，并指向一个迭代器即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法一：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">&lt;</span>keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 方法二</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"27\">\n<li>ajax、axios、fetch 的区别</li>\n</ol>\n<p>（1）AJAX Ajax 即 “AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：</p>\n<ul>\n<li>本身是针对 MVC（Model-View-Controller）编程，不符合前端 MVVM (（Model-View-ViewModel）) 的浪潮</li>\n<li>基于原生 XHR (XMLHttpRequest) 开发，XHR 本身的架构不清晰</li>\n<li>不符合关注分离（Separation of Concerns）的原则</li>\n<li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li>\n</ul>\n<p>（2）Fetch fetch 号称是 AJAX 的替代品，是在 ES6 出现的，使用了 ES6 中的 promise 对象。Fetch 是基于 promise 设计的。Fetch 的代码结构比起 ajax 简单多。fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象。<br />\nfetch 的优点：</p>\n<ul>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async/await</li>\n<li>更加底层，提供的 API 丰富（request, response）</li>\n<li>脱离了 XHR，是 ES 规范里新的实现方式</li>\n</ul>\n<p>P.S. async/await 是 JavaScript 中用于简化异步代码的语法糖，基于 Promise 实现。它使得异步代码的书写和阅读更加直观，避免了传统的回调函数嵌套（即 “回调地狱”）和复杂的 Promise 链式调用。</p>\n<p>fetch 的缺点：</p>\n<ul>\n<li>fetch 只对网络请求报错，对 400，500 都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>\n<li>fetch 默认不会带 cookie，需要添加配置项： fetch (url, {credentials: 'include'})</li>\n<li>fetch 不支持 abort，不支持超时控制，使用 setTimeout 及 Promise.reject 的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li>\n<li>fetch 没有办法原生监测请求的进度，而 XHR 可以</li>\n</ul>\n<p>（3）Axios Axios 是一种基于 Promise 封装的 HTTP 客户端，其特点如下：</p>\n<ul>\n<li>浏览器端发起 XMLHttpRequests 请求</li>\n<li>node 端发起 http 请求</li>\n<li>支持 Promise API</li>\n<li>监听请求和返回</li>\n<li>对请求和返回进行转化</li>\n<li>取消请求</li>\n<li>自动转换 json 数据</li>\n<li>客户端支持抵御 XSRF 攻击</li>\n</ul>\n<ol start=\"28\">\n<li>\n<p>数组的遍历方法有哪些<br />\n | 方法 | 是否改变原数组 | 特点 |<br />\n| forEach ()\t| 否 | 数组方法，不改变原数组，没有返回值 |<br />\n| map () | 否 | 数组方法，不改变原数组，有返回值，可链式调用 |<br />\n| filter () | 否 | 数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用 |<br />\n| for...of | 否 | for...of 遍历具有 Iterator 迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的 obj 对象，将异步循环变成同步循环 |<br />\n| every () 和 some () | 否 | 数组方法，some () 只要有一个是 true，便返回 true；而 every () 只要有一个是 false，便返回 false. |<br />\n| find () 和 findIndex () | 否 | 数组方法，find () 返回的是第一个符合条件的值；findIndex () 返回的是第一个返回条件的值的索引值 |<br />\n| reduce () 和 reduceRight () | 否 | 数组方法，reduce () 对数组正序操作；reduceRight () 对数组逆序操作 |</p>\n</li>\n<li>\n<p>forEach 和 map 方法有什么区别</p>\n</li>\n</ol>\n<p>这方法都是用来遍历数组的，两者区别如下：</p>\n<ul>\n<li>forEach () 方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；</li>\n<li>map () 方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；</li>\n</ul>\n<h3 id=\"四-原型与原型链\"><a class=\"anchor\" href=\"#四-原型与原型链\">#</a> 四、原型与原型链</h3>\n<ol>\n<li>对原型、原型链的理解</li>\n</ol>\n<p>在 JavaScript 中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。<br />\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。<br />\nES5 中新增了一个 Object.getPrototypeOf () 方法，可以通过这个方法来获取对象的原型。</p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString () 等方法的原因。</p>\n<p>特点： JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p>\n<div align=center>\n    <style>.hojyfyiuirzn{}</style><img data-src=\"/2025/01/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/01.jpg\" class=\"hojyfyiuirzn\">\n</div>\n<ol start=\"2\">\n<li>原型修改、重写</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修改原型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 重写原型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>可以看到修改原型的时候 p 的构造函数不是指向 Person 了，因为直接给 Person 的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数 Object，所以这时候 p.constructor === Object ，而不是 p.constructor === Person。要想成立，就要用 constructor 指回来：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Person</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>原型链指向</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>__proto__  <span class=\"token comment\">// Person.prototype</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__  <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">//Object.prototype</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// Person</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor  <span class=\"token comment\">// Person</span></pre></td></tr></table></figure><p>P.S. constructor 是一个特殊的属性，它指向用于创建该对象的函数。<br />\nPerson.prototype.constructor 这是 Person 函数本身。<br />\n假设 p1 是 new Person () 创建的对象，那么 p1.<strong>proto</strong> 是 Person.prototype。</p>\n<ol start=\"4\">\n<li>原型链的终点是什么？如何打印出原型链的终点？</li>\n</ol>\n<p>由于 Object 是构造函数，原型链终点是 Object.prototype.<strong>proto</strong>，而 Object.prototype.<strong>proto</strong>=== null //true，所以，原型链的终点是 null。</p>\n<p>原型链上的所有原型都是对象，所有的对象最终都是由 Object 构造的，而 Object.prototype 的下一级是 Object.prototype.<strong>proto</strong>。（null）</p>\n<ol start=\"5\">\n<li>如何获得对象非原型链上的属性？</li>\n</ol>\n<p>使用后 hasOwnProperty () 方法来判断属性是否属于原型链的属性：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">+</span><span class=\"token string\">': '</span><span class=\"token operator\">+</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"五-执行上下文作用域链闭包\"><a class=\"anchor\" href=\"#五-执行上下文作用域链闭包\">#</a> 五、执行上下文 / 作用域链 / 闭包</h3>\n<ol>\n<li>对闭包的理解</li>\n</ol>\n<p>闭包是指有权访问另一个函数作用域中变量的函数，<br />\n创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p>\n<p>闭包有两个常用的用途；</p>\n<ul>\n<li>\n<p>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</p>\n</li>\n<li>\n<p>闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</p>\n</li>\n</ul>\n<p>P.S. 引用是一个变量或数据结构，它存储了另一个对象或数据的内存地址，而不是数据本身。通过引用，程序可以直接访问和操作该内存地址中的数据。</p>\n<p>比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">B</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先因为 setTimeout 是个异步函数，所以会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出一堆 6。解决办法有三种：</p>\n<ul>\n<li>第一种是使用闭包的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>P.S. 立即执行函数表达式（IIFE）：</p>\n<p>(function (j) { ... })(i)：这是一个立即执行的函数表达式，它创建了一个新的作用域，并将当前的 i 值传递给参数 j。这样可以确保每个 setTimeout 回调函数中的 j 都是当前循环迭代的值，而不是最终的 i 值。</p>\n<p>在上述代码中，首先使用了立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 timer 这个闭包的时候，就可以使用外部函数的变量 j，从而达到目的。</p>\n<ul>\n<li>第二种就是使用 setTimeout 的第三个参数，这个参数会被当成 timer 函数的参数传入。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    i</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>第三种就是使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>P.S.</p>\n<ul>\n<li>var 的问题<br />\n（1）函数作用域：var 声明的变量具有函数作用域，而不是块作用域。这意味着在函数内部定义的 var 变量在整个函数内部都是可见的，而不受块（如 if 语句或 for 循环）的限制。</li>\n</ul>\n<p>（2）变量提升：var 声明的变量会被提升到其作用域的顶部，导致变量在声明之前可以被访问，但其值为 undefined。</p>\n<p>（3）循环中的问题：在 for 循环中使用 var 声明的变量会在每次循环迭代中被重新赋值，但变量本身仍然是函数作用域的。这导致在异步操作（如 setTimeout）中，所有回调函数引用的是同一个变量，而不是各自循环迭代时的值。</p>\n<ul>\n<li>let 的优点<br />\n（1）块作用域：let 声明的变量具有块作用域，这意味着它们只在定义它们的块内可见。</li>\n</ul>\n<p>（2）不提升：let 声明的变量不会被提升到其作用域的顶部，因此在声明之前访问会报错（暂时性死区）。</p>\n<p>（3）循环中的行为：在 for 循环中使用 let 声明的变量，每次循环迭代都会创建一个新的变量绑定，因此在异步操作中，每个回调函数引用的是各自循环迭代时的值。</p>\n<p>var：函数作用域，变量提升，不推荐在现代 JavaScript 中使用，特别是在循环中。<br />\nlet：块作用域，不提升，推荐在需要块作用域变量时使用。<br />\n使用 let 可以避免很多 var 带来的问题，特别是与作用域和变量提升相关的问题。因此，在现代 JavaScript 开发中，推荐使用 let 和 const 来声明变量，而不是 var。</p>\n<ol start=\"2\">\n<li>对作用域、作用域链的理解</li>\n</ol>\n<p>1）全局作用域和函数作用域</p>\n<p>（1）全局作用域</p>\n<ul>\n<li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li>\n<li>所有未定义直接赋值的变量自动声明为全局作用域</li>\n<li>所有 window 对象的属性拥有全局作用域</li>\n<li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li>\n</ul>\n<p>（2）函数作用域</p>\n<ul>\n<li>函数作用域声明在函数内部的变量，一般只有固定的代码片段可以访问到</li>\n<li>作用域是分层的，内层作用域可以访问外层作用域，反之不行</li>\n</ul>\n<p>2）块级作用域</p>\n<ul>\n<li>使用 ES6 中新增的 let 和 const 指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由 { } 包裹的代码片段）</li>\n<li>let 和 const 声明的变量不会有变量提升，也不可以重复声明</li>\n<li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</li>\n</ul>\n<p>作用域链： 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到 window 对象就被终止，这一层层的关系就是作用域链。</p>\n<p>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</p>\n<p>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p>\n<p>当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。</p>\n<ol start=\"3\">\n<li>对执行上下文的理解</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>执行上下文类型</li>\n</ol>\n</li>\n</ul>\n<p>（1）全局执行上下文</p>\n<p>任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的 window 对象，并且设置 this 的值等于这个全局对象，一个程序中只有一个全局执行上下文。</p>\n<p>（2）函数执行上下文</p>\n<p>当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</p>\n<p>（3）Eval 函数执行上下文</p>\n<p>执行在 eval 函数中的代码会有属于他自己的执行上下文，不过 eval 函数不常使用，不做介绍。</p>\n<ul>\n<li>\n<ol start=\"2\">\n<li>执行上下文栈</li>\n</ol>\n</li>\n<li>\n<p>JavaScript 引擎使用执行上下文栈来管理执行上下文</p>\n</li>\n<li>\n<p>当 JavaScript 执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside first function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Again inside first function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside second function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 执行顺序</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 先执行 second (), 在执行 first ()</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"3\">\n<li>创建执行上下文</li>\n</ol>\n</li>\n</ul>\n<p>创建执行上下文有两个阶段：创建阶段和执行阶段</p>\n<p>1）创建阶段</p>\n<p>（1）this 绑定</p>\n<ul>\n<li>在全局执行上下文中，this 指向全局对象（window 对象）</li>\n<li>在函数执行上下文中，this 指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li>\n</ul>\n<p>（2）创建词法环境组件</p>\n<ul>\n<li>词法环境是一种有标识符 —— 变量映射的数据结构，标识符是指变量 / 函数名，变量是对实际对象或原始数据的引用。</li>\n<li>词法环境的内部有两个组件：加粗样式：环境记录器：用来储存变量个函数声明的实际位置外部环境的引用：可以访问父级作用域</li>\n</ul>\n<p>（3）创建变量环境组件</p>\n<ul>\n<li>变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li>\n</ul>\n<p>2）执行阶段 此阶段会完成对变量的分配，最后执行完代码。</p>\n<p>简单来说执行上下文就是指：</p>\n<p>在执行一点 JS 代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为 undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</p>\n<p>在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出 this、arguments 和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，this，arguments</li>\n</ul>\n","length":27276,"excerpt":"","more":"<p>续接上一篇文章：前端学习之 JS 篇（一）</p>\n<h3 id=\"三-javascript基础\"><a class=\"anchor\" href=\"#三-javascript基础\">#</a> 三、JavaScript 基础</h3>\n<ol>\n<li>new 操作符的实现原理</li>\n</ol>\n<p>new 操作符的执行过程：</p>\n<p>（1）首先创建了一个新的空对象</p>\n<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>\n<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\n<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\n<p>具体实现：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">objectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> newObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> constructor <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 判断参数是否是一个函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> constructor <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  newObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 将 this 指向新建对象，并执行函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>newObject<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 判断返回对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> result <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 判断返回结果</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> flag <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> newObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 使用方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">objectFactory</span><span class=\"token punctuation\">(</span>构造函数<span class=\"token punctuation\">,</span> 初始化参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>map 和 Object 的区别</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Map</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>意外的键</td>\n<td>Map 默认情况不包含任何键，只包含显式插入的键。</td>\n<td>Object 有一个原型，原型链上的键名有可能和自己在对象上的设置的键名产生冲突。</td>\n</tr>\n<tr>\n<td>键的类型</td>\n<td>Map 的键可以是任意值，包括函数、对象或任意基本类型。</td>\n<td>Object 的键必须是 String 或是 Symbol。</td>\n</tr>\n<tr>\n<td>键的顺序</td>\n<td>Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。</td>\n<td>Object 的键是无序的</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Map 的键值对个数可以轻易地通过 size 属性获取</td>\n<td>Object 的键值对个数只能手动计算</td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>Map 是 iterable 的，所以可以直接被迭代。</td>\n<td>迭代 Object 需要以某种方式获取它的键然后才能迭代。</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>在频繁增删键值对的场景下表现更好。</td>\n<td>在频繁添加和删除键值对的场景下未作出优化。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>map 和 weakMap 的区别</li>\n</ol>\n<p>（1）Map<br />\nmap 本质上就是键值对的集合，但是普通的 Object 中的键值对中的键只能是字符串。而 ES6 提供的 Map 数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的 Hash 结构。如果 Map 的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</p>\n<p>实际上 Map 是一个数组，它的每一个数据也都是一个数组，其形式如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>Map 数据结构有以下操作方法：</p>\n<ul>\n<li>size： map.size 返回 Map 结构的成员总数。</li>\n<li>set (key,value)：设置键名 key 对应的键值 value，然后返回整个 Map 结构，如果 key 已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前 Map 对象，所以可以链式调用）</li>\n<li>get (key)：该方法读取 key 对应的键值，如果找不到 key，返回 undefined。</li>\n<li>has (key)：该方法返回一个布尔值，表示某个键是否在当前 Map 对象中。</li>\n<li>delete (key)：该方法删除某个键，返回 true，如果删除失败，返回 false。</li>\n<li>clear ()：map.clear () 清除所有成员，没有返回值。</li>\n</ul>\n<p>Map 结构原生提供是三个遍历器生成函数和一个遍历方法</p>\n<ul>\n<li>keys ()：返回键名的遍历器。</li>\n<li>values ()：返回键值的遍历器。</li>\n<li>entries ()：返回所有成员的遍历器。</li>\n<li>forEach ()：遍历 Map 的所有成员。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// foo bar</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> items <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [\"foo\",1]  [\"bar\",2]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>map</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo 1    bar 2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（2）WeakMap WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。其键必须是对象，原始数据类型不能作为 key 值，而值可以是任意的。</p>\n<p>该对象也有以下几种方法：</p>\n<ul>\n<li>set (key,value)：设置键名 key 对应的键值 value，然后返回整个 WeakMap 结构。如果 key 已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前 Map 对象，所以可以链式调用）</li>\n<li>get (key)：该方法读取 key 对应的键值，如果找不到 key，返回 undefined。</li>\n<li>has (key)：该方法返回一个布尔值，表示某个键是否在当前 WeakMap 对象中。</li>\n<li>delete (key)：该方法删除某个键，返回 true，如果删除失败，返回 false。</li>\n</ul>\n<p>其 clear () 方法已经被弃用，所以可以通过创建一个空的 WeakMap 并替换原对象来实现清除。</p>\n<p>WeakMap 的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p>\n<p>而 WeakMap 的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。</p>\n<p>总结：</p>\n<ul>\n<li>Map 数据结构。它类似于对象，也是键值对的集合，但是 “键” 的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>\n<li>WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</li>\n</ul>\n<ol start=\"4\">\n<li>JavaScript 有哪些内置对象</li>\n</ol>\n<p>全局的对象（ global objects ）或称标准内置对象，不要和 &quot;全局对象（global object）&quot; 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</p>\n<p>标准内置对象的分类：</p>\n<p>（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量</p>\n<p>（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval ()、parseFloat ()、parseInt () 等</p>\n<p>（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等</p>\n<p>（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date</p>\n<p>（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp</p>\n<p>（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array</p>\n<p>（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet</p>\n<p>（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等</p>\n<p>（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等</p>\n<p>（10）控制抽象对象 例如 Promise、Generator 等</p>\n<p>（11）反射。例如 Reflect、Proxy</p>\n<p>（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等</p>\n<p>（13）WebAssembly</p>\n<p>（14）其他。例如 arguments</p>\n<p>总结：<br />\njs 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt ()、parseFloat () 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。</p>\n<ol start=\"5\">\n<li>常用的正则表达式有哪些？</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// （1）匹配 16 进制颜色值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// （2）匹配日期，如 yyyy-mm-dd 格式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// （3）匹配 qq 号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[1-9][0-9]&#123;4,10&#125;$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// （4）手机号码正则</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^1[34578]\\d&#123;9&#125;$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// （5）用户名正则</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[a-zA-Z\\$][a-zA-Z0-9_\\$]&#123;4,16&#125;$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>对 JSON 的理解</li>\n</ol>\n<p>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。</p>\n<p>在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。</p>\n<p>因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。</p>\n<p>在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，</p>\n<ul>\n<li>\n<p>JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。</p>\n</li>\n<li>\n<p>JSON.parse () 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。</p>\n</li>\n</ul>\n<ol start=\"7\">\n<li>JavaScript 脚本延迟加载的方式有哪些？</li>\n</ol>\n<p>延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。</p>\n<p>一般有以下几种方式：</p>\n<ul>\n<li>\n<p>defer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。</p>\n</li>\n<li>\n<p>async 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。</p>\n</li>\n<li>\n<p>动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。</p>\n</li>\n<li>\n<p>使用 setTimeout 延迟方法： 设置一个定时器来延迟加载 js 脚本文件</p>\n</li>\n<li>\n<p>让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。</p>\n</li>\n</ul>\n<ol start=\"8\">\n<li>JavaScript 类数组对象的定义？</li>\n</ol>\n<p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<p>（1）通过 call 调用数组的 slice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（2）通过 call 调用数组的 splice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（3）通过 apply 调用数组的 concat 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>(P.S.call 和 apply 是 JavaScript 中函数对象的两个方法，它们的主要功能非常相似，都是用于调用函数并显式指定函数内部的 this 值。然而，它们在传递参数的方式上有所不同:call 接受参数列表，apply 接受参数数组。)</p>\n<p>（4）通过 Array.from 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>数组有哪些原生方法？</li>\n</ol>\n<ul>\n<li>数组和字符串的转换方法：toString ()、toLocalString ()、join () 其中 join () 方法可以指定转换为字符串时的分隔符。</li>\n<li>数组尾部操作的方法 pop () 和 push ()，push 方法可以传入多个参数。</li>\n<li>数组首部操作的方法 shift () 和 unshift () 重排序的方法 reverse () 和 sort ()，sort () 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li>\n<li>数组连接的方法 concat () ，返回的是拼接好的数组，不影响原数组。</li>\n<li>数组截取办法 slice ()，用于截取数组中的一部分返回，不影响原数组。</li>\n<li>数组插入方法 splice ()，影响原数组查找特定项的索引的方法，indexOf () 和 lastIndexOf () 迭代方法 every ()、some ()、filter ()、map () 和 forEach () 方法</li>\n<li>数组归并方法 reduce () 和 reduceRight ()</li>\n</ul>\n<ol start=\"10\">\n<li>Unicode、UTF-8、UTF-16、UTF-32 的区别？</li>\n</ol>\n<p>（1）Unicode</p>\n<p>在说 Unicode 之前需要先了解一下 ASCII 码：ASCII 码（American Standard Code for Information Interchange）称为美国标准信息交换码。</p>\n<ul>\n<li>它是基于拉丁字母的一套电脑编码系统。</li>\n<li>它定义了一个用于代表常见字符的字典。</li>\n<li>它包含了 &quot;A-Z&quot;(包含大小写)，数据 &quot;0-9&quot; 以及一些常见的符号。</li>\n<li>它是专门为英语而设计的，有 128 个编码，对其他语言无能为力</li>\n</ul>\n<p>ASCII 码可以表示的编码有限，要想表示其他语言的编码，还是要使用 Unicode 来表示，可以说 Unicode 是 ASCII 的超集。</p>\n<p>Unicode 全称 Unicode Translation Format，又叫做统一码、万国码、单一码。<br />\nUnicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>\n<p>Unicode 的实现方式（也就是编码方式）有很多种，常见的是 UTF-8、UTF-16、UTF-32 和 USC-2。</p>\n<p>（2）UTF-8</p>\n<p>UTF-8 是使用最广泛的 Unicode 编码方式，它是一种可变长的编码方式，可以是 1—4 个字节不等，它可以完全兼容 ASCII 码的 128 个字符。</p>\n<p>注意： UTF-8 是一种编码方式，Unicode 是一个字符集合。</p>\n<p>UTF-8 的编码规则：</p>\n<ul>\n<li>对于单字节的符号，字节的第一位为 0，后面的 7 位为这个字符的 Unicode 编码，因此对于英文字母，它的 Unicode 编码和 ACSII 编码一样。</li>\n<li>对于 n 字节的符号，第一个字节的前 n 位都是 1，第 n+1 位设为 0，后面字节的前两位一律设为 10，剩下的没有提及的二进制位，全部为这个符号的 Unicode 码 。</li>\n</ul>\n<p>来看一下具体的 Unicode 编号范围与对应的 UTF-8 二进制格式 ：</p>\n<table>\n<thead>\n<tr>\n<th>编码范围（编号对应的十进制数）</th>\n<th>二进制格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00—0x7F （0-127）</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>0x80—0x7FF （128-2047）</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x800—0xFFFF  （2048-65535）</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x10000—0x10FFFF  （65536 以上）</td>\n<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody>\n</table>\n<p>那该如何通过具体的 Unicode 编码，进行具体的 UTF-8 编码呢？步骤如下：</p>\n<ul>\n<li>找到该 Unicode 编码的所在的编号范围，进而找到与之对应的二进制格式</li>\n<li>将 Unicode 编码转换为二进制数（去掉最高位的 0）</li>\n<li>将二进制数从右往左一次填入二进制格式的 X 中，如果有 X 未填，就设为 0</li>\n</ul>\n<p>来看一个实际的例子：<br />\n“马” 字的 Unicode 编码是：0x9A6C，整数编号是 39532<br />\n（1）首选确定了该字符在第三个范围内，它的格式是 1110xxxx 10xxxxxx 10xxxxxx<br />\n（2）39532 对应的二进制数为 1001 1010 0110 1100<br />\n（3）将二进制数填入 X 中，结果是：11101001 10101001 10101100</p>\n<p>（3）UTF-16</p>\n<p>平面的概念<br />\n在了解 UTF-16 之前，先看一下平面的概念：<br />\nUnicode 编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放 65536（216）个字符，这称为一个平面，目前总共有 17 个平面。<br />\n最前面的一个平面称为基本平面，它的码点从 0 — 216-1，写成 16 进制就是 U+0000 — U+FFFF，那剩下的 16 个平面就是辅助平面，码点范围是 U+10000—U+10FFFF。</p>\n<p>UTF-16 概念：<br />\nUTF-16 也是 Unicode 编码集的一种编码形式，把 Unicode 字符集的抽象码位映射为 16 位长的整数（即码元）的序列，用于数据存储或传递。Unicode 字符的码位需要 1 个或者 2 个 16 位长的码元来表示，因此 UTF-16 也是用变长字节表示的。</p>\n<p>UTF-16 编码规则：<br />\n编号在 U+0000—U+FFFF 的字符（常用字符集），直接用两个字节表示。<br />\n编号在 U+10000—U+10FFFF 之间的字符，需要用四个字节表示。</p>\n<p>编码识别</p>\n<p>那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？</p>\n<p>UTF-16 编码肯定也考虑到了这个问题，在基本平面内，从 U+D800 — U+DFFF 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。</p>\n<p>辅助平面共有 220 个字符位，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 — U+DBFF，称为高位（H），后 10 位映射在 U+DC00 — U+DFFF，称为低位（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。</p>\n<p>因此，当遇到两个字节时，发现它的码点在 U+D800 —U+DBFF 之间，就可以知道，它后面的两个字节的码点应该在 U+DC00 — U+DFFF 之间，这四个字节必须放在一起进行解读。</p>\n<p>举例说明<br />\n以 &quot;𡠀&quot; 字为例，它的 Unicode 码点为 0x21800，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：</p>\n<p>首先计算超出部分的结果：0x21800 - 0x10000<br />\n 将上面的计算结果转为 20 位的二进制数，不足 20 位就在前面补 0，结果为：0001000110 0000000000<br />\n 将得到的两个 10 位二进制数分别对应到两个区间中<br />\n U+D800 对应的二进制数为 1101100000000000， 将 0001000110 填充在它的后 10 个二进制位，得到 1101100001000110，转成 16 进制数为 0xD846。同理，低位为 0xDC00，所以这个字的 UTF-16 编码为 0xD846 0xDC00</p>\n<p>（4） UTF-32<br />\nUTF-32 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。<br />\n比如 “马” 字的 Unicode 编号是：U+9A6C，整数编号是 39532，直接转化为二进制：1001 1010 0110 1100，这就是它的 UTF-32 编码。</p>\n<p>（5）总结<br />\n Unicode、UTF-8、UTF-16、UTF-32 有什么区别？</p>\n<ul>\n<li>Unicode 是编码字符集（字符集），而 UTF-8、UTF-16、UTF-32 是字符集编码（编码规则）；</li>\n<li>UTF-16 使用变长码元序列的编码方式，相较于定长码元序列的 UTF-32 算法更复杂，甚至比同样是变长码元序列的 UTF-8 也更为复杂，因为其引入了独特的代理对这样的代理机制；</li>\n<li>UTF-8 需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而 UTF-16 不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；</li>\n<li>如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用 UTF-8 就比 UTF-16 节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么 UTF-16 就占优势了，可以节省很多空间；</li>\n</ul>\n<ol start=\"11\">\n<li>常见的位运算符有哪些？其计算规则是什么？</li>\n</ol>\n<p>现代计算机中数据都是以二进制的形式存储的，即 0、1 两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</p>\n<p>常见的位运算符有：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>运算规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>与</td>\n<td>两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>或</td>\n<td>两个位都为 0 时，结果才为 0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>两个位相同为 0，不同为 1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>取反</td>\n<td>0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"7\">\n<li>原码、补码、反码<br />\n上面提到了补码、反码等知识，这里就补充一下。 计算机中的有符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示 “正”，用 1 表示 “负”，而数值位，三种表示方法各不相同。</li>\n</ol>\n<p>（1）原码</p>\n<p>原码就是一个数的二进制数。例如：10 的原码为 0000 1010</p>\n<p>（2）反码</p>\n<ul>\n<li>正数的反码与原码相同，如：10 反码为 0000 1010</li>\n<li>负数的反码为除符号位，按位取反，即 0 变 1，1 变 0。</li>\n</ul>\n<p>（3）补码<br />\n正数的补码与原码相同，如：10 补码为 0000 1010<br />\n 负数的补码是原码除符号位外的所有位取反即 0 变 1，1 变 0，然后加 1，也就是反码加 1。</p>\n<ol start=\"12\">\n<li>为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组？</li>\n</ol>\n<p>arguments 是一个对象，它的属性是从 0 开始依次递增的数字，还有 callee 和 length 等属性，与数组相似；但是它却没有数组常见的方法属性，如 forEach, reduce 等，所以叫它们类数组。</p>\n<p>要遍历类数组，有三个方法：</p>\n<p>（1）将数组的方法应用到类数组上，这时候就可以使用 call 和 apply 方法，如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（2）使用 Array.from 方法将类数组转化成数组：‌</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> arrArgs <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  arrArgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（3）使用展开运算符将类数组转化成数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> arrArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arrArgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"13\">\n<li>什么是 DOM 和 BOM？</li>\n</ol>\n<ul>\n<li>DOM 指的是文档对象原型，它指的是把文档当作一个对象，这个对象主要定义了处理网页内容的方法和接口。</li>\n<li>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的方法和接口。BOM 的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</li>\n</ul>\n<ol start=\"14\">\n<li>对类数组对象的理解，如何转化为数组</li>\n</ol>\n<p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，<br />\n类数组对象和数组类似，但是不能调用数组的方法。<br />\n见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<ul>\n<li>通过 call 调用数组的 slice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>通过 call 调用数组的 splice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 apply 调用数组的 concat 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 Array.from 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"15\">\n<li>escape、encodeURI、encodeURIComponent 的区别</li>\n</ol>\n<ul>\n<li>encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。</li>\n<li>encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。</li>\n<li>escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 % u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。</li>\n</ul>\n<ol start=\"16\">\n<li>对 AJAX 的理解，实现一个 AJAX 请求</li>\n</ol>\n<p>AJAX 是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>创建 AJAX 请求的步骤：</p>\n<ul>\n<li>创建一个 XMLHttpRequest 对象。</li>\n<li>在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>\n<li>在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发 onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>\n<li>当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">SERVER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/server\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 Http 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SERVER_URL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置状态监听函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 当请求成功时</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 设置请求失败时的监听函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 设置请求头信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>xhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 发送 Http 请求</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 Promise 封装 AJAX：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//promise 封装实现：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 创建一个 promise 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 新建一个 http 请求</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置状态的监听函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 当请求成功或失败时，改变 promise 的状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 设置错误监听函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 设置响应的数据类型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 设置请求头信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 发送 http 请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传统的 AJAX 请求通常使用 XMLHttpRequest 对象来实现。这种方式需要手动处理异步操作的回调函数，代码的可读性和维护性相对较低。<br />\n使用 Promise 封装 AJAX 请求可以将异步操作以更简洁和可读的方式表达。Promise 提供了链式调用的能力，使得处理多个异步操作时更加方便。Promise 是 ES6 标准的一部分，提供了统一的异步编程模型，更容易被其他开发者理解和使用。</p>\n<ol start=\"17\">\n<li>JavaScript 为什么要进行变量提升，它导致了什么问题？</li>\n</ol>\n<p>变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。</p>\n<p>造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。</p>\n<p>首先要知道，JS 在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。</p>\n<ul>\n<li>\n<p>在解析阶段，JS 会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为 undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出 this、arguments 和函数的参数。</p>\n</li>\n<li>\n<p>全局上下文：变量定义，函数声明</p>\n</li>\n<li>\n<p>函数上下文：变量定义，函数声明，this，arguments</p>\n</li>\n<li>\n<p>在执行阶段，就是按照代码的顺序依次执行。</p>\n</li>\n</ul>\n<p>那为什么会进行变量提升呢？主要有以下两个原因：</p>\n<ul>\n<li>提高性能</li>\n<li>容错性更好</li>\n</ul>\n<p>（1）提高性能 在 JS 代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。<br />\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</p>\n<p>（2）容错性更好<br />\n变量提升可以在一定程度上提高 JS 的容错性，看下面的代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</p>\n<p>虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</p>\n<p>总结：</p>\n<ul>\n<li>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</li>\n<li>声明提升还可以提高 JS 代码的容错性，使一些不规范的代码也可以正常执行</li>\n</ul>\n<p>变量提升虽然有一些优点，但是他也会造成一定的问题，在 ES6 中提出了 let、const 来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><p>在这个函数中，原本是要打印出外层的 tmp 变量，但是因为变量提升的问题，内层定义的 tmp 被提到函数内部的最顶部，相当于覆盖了外层的 tmp，所以打印结果为 undefined。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tmp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></pre></td></tr></table></figure><p>由于遍历时定义的 i 会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来 11。</p>\n<ol start=\"18\">\n<li>什么是尾调用，使用尾调用有什么好处？</li>\n</ol>\n<p>尾调用指的是函数的最后一步调用另一个函数。<br />\n代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。</p>\n<p>但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>\n<ol start=\"19\">\n<li>ES6 模块与 CommonJS 模块有什么异同？<br />\nES6 Module 和 CommonJS 是两种常见的 JavaScript 模块系统，它们用于在不同的 JavaScript 运行环境中管理代码的组织和复用。</li>\n</ol>\n<p>ES6 Module 和 CommonJS 模块的区别：</p>\n<ul>\n<li>CommonJS 是对模块的浅拷⻉，ES6 Module 是对模块的引⽤，即 ES6 Module 只存只读，不能改变其值，也就是指针指向不能变，类似 const；</li>\n<li>import 的接⼝是 read-only（只读状态），不能修改其变量值。即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对 commonJS 对重新赋值（改变指针指向），但是对 ES6 Module 赋值会编译报错。</li>\n</ul>\n<p>ES6 Module 和 CommonJS 模块的共同点：</p>\n<ul>\n<li>CommonJS 和 ES6 Module 都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。</li>\n</ul>\n<ol start=\"20\">\n<li>常见的 DOM 操作有哪些</li>\n</ol>\n<p>1）DOM 节点的获取</p>\n<p>DOM 节点的获取的 API 及使用：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>getElementById <span class=\"token comment\">// 按照 id 查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>getElementsByTagName <span class=\"token comment\">// 按照标签名查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>getElementsByClassName <span class=\"token comment\">// 按照类名查询</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>querySelectorAll <span class=\"token comment\">// 按照 css 选择器查询</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 按照 id 查询</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> imooc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到 id 为 imooc 的元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 按照标签名查询</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> pList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 查询到标签为 p 的集合</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 按照类名查询</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> moocList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到类名为 mooc 的集合</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 按照 css 选择器查询</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> pList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到类名为 mooc 的集合</span></pre></td></tr></table></figure><p>2）DOM 节点的创建</p>\n<p>创建一个新节点，并把它添加到指定节点的后面。 已知的 HTML 结构如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>DEMO<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首先获取父节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建新节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> targetSpan <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置 span 节点的内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>targetSpan<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 把新创建的元素塞进父节点里去</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>targetSpan<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3）DOM 节点的删除</p>\n<p>删除指定的 DOM 节点， 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token constant\">DEMO</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>我是标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>需要删除 id 为 title 的元素，做法是：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取目标元素的父元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取目标元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 删除目标元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>或者通过子节点数组来完成删除：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取目标元素的父元素 var container = document.getElementById ('container')// 获取目标元素 var targetNode = container.childNodes [1]// 删除目标元素 container.removeChild (targetNode)</span></pre></td></tr></table></figure><p>4）修改 DOM 元素</p>\n<p>修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。</p>\n<p>将指定的两个 DOM 元素交换位置， 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token constant\">DEMO</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>我是标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>p id<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>我是内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取父元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取两个需要被交换的元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 交换两个元素，把 content 置于 title 前面</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"21\">\n<li>use strict 是什么意思？使用它区别是什么？</li>\n</ol>\n<p>use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：</p>\n<ul>\n<li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为；</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>禁止使用 with 语句。</li>\n<li>禁止 this 关键字指向全局对象。</li>\n<li>对象不能有重名的属性。</li>\n</ul>\n<ol start=\"22\">\n<li>如何判断一个对象是否属于某个类？</li>\n</ol>\n<ul>\n<li>第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</li>\n<li>第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。</li>\n<li>第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString () 方法来打印对象的 [[Class]] 属性来进行判断。</li>\n</ul>\n<ol start=\"23\">\n<li>强类型语言和弱类型语言的区别</li>\n</ol>\n<ul>\n<li>强类型语言：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。</li>\n<li>Java 和 C++ 等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。</li>\n<li>弱类型语言：弱类型语言也称为弱类型定义语言，与强类型定义相反。</li>\n<li>JavaScript 语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如 JavaScript 是弱类型定义的，在 JavaScript 中就可以将字符串 '12' 和整数 3 进行连接得到字符串 '123'，在相加的时候会进行强制类型转换。</li>\n</ul>\n<p>两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。</p>\n<ol start=\"24\">\n<li>解释性语言和编译型语言的区别</li>\n</ol>\n<p>（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下</p>\n<ul>\n<li>解释型语言每次运行都需要将源代码解释成机器码并执行，效率较低；</li>\n<li>只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；</li>\n<li>JavaScript、Python 等属于解释型语言。</li>\n</ul>\n<p>（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如 exe 格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行 exe 文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：</p>\n<ul>\n<li>一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；</li>\n<li>与特定平台相关，一般无法移植到其他平台；</li>\n<li>C、C++、Java、Go、Rust 等属于编译型语言。</li>\n</ul>\n<p>两者主要区别在于： 前者（编译型）源程序编译后即可在该平台运行，（解释型）后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。</p>\n<ol start=\"25\">\n<li>for...in 和 for...of 的区别</li>\n</ol>\n<p>for…of 是 ES6 新增的遍历方式，允许遍历一个含有 iterator 接口的数据结构（数组、对象等）并且返回各项的值，和 ES3 中的 for…in 的区别如下:</p>\n<ul>\n<li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li>\n<li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li>\n<li>对于数组的遍历，for…in 会返回数组中所有可枚举的属性 (包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</li>\n</ul>\n<p>总结： for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p>\n<ol start=\"26\">\n<li>如何使用 for...of 遍历对象</li>\n</ol>\n<p>for…of 是作为 ES6 新增的遍历方式，允许遍历一个含有 iterator 接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用 for..of 遍历是会报错的。</p>\n<p>p.s. 含有迭代器接口（Iterator Interface）的数据结构是一种可以被遍历的数据结构，它提供了一种标准的方法来访问集合中的元素，而无需暴露集合的内部结构。在 JavaScript 中，迭代器接口通过 Symbol.iterator 方法实现。许多内置的数据结构（如数组、Set、Map）都实现了这一接口。</p>\n<p>如果需要遍历的对象是类数组对象，用 Array.from 转成数组即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果不是类数组对象，就给对象添加一个 [Symbol.iterator] 属性，并指向一个迭代器即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法一：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">&lt;</span>keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 方法二</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"27\">\n<li>ajax、axios、fetch 的区别</li>\n</ol>\n<p>（1）AJAX Ajax 即 “AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：</p>\n<ul>\n<li>本身是针对 MVC（Model-View-Controller）编程，不符合前端 MVVM (（Model-View-ViewModel）) 的浪潮</li>\n<li>基于原生 XHR (XMLHttpRequest) 开发，XHR 本身的架构不清晰</li>\n<li>不符合关注分离（Separation of Concerns）的原则</li>\n<li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li>\n</ul>\n<p>（2）Fetch fetch 号称是 AJAX 的替代品，是在 ES6 出现的，使用了 ES6 中的 promise 对象。Fetch 是基于 promise 设计的。Fetch 的代码结构比起 ajax 简单多。fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象。<br />\nfetch 的优点：</p>\n<ul>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async/await</li>\n<li>更加底层，提供的 API 丰富（request, response）</li>\n<li>脱离了 XHR，是 ES 规范里新的实现方式</li>\n</ul>\n<p>P.S. async/await 是 JavaScript 中用于简化异步代码的语法糖，基于 Promise 实现。它使得异步代码的书写和阅读更加直观，避免了传统的回调函数嵌套（即 “回调地狱”）和复杂的 Promise 链式调用。</p>\n<p>fetch 的缺点：</p>\n<ul>\n<li>fetch 只对网络请求报错，对 400，500 都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>\n<li>fetch 默认不会带 cookie，需要添加配置项： fetch (url, {credentials: 'include'})</li>\n<li>fetch 不支持 abort，不支持超时控制，使用 setTimeout 及 Promise.reject 的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li>\n<li>fetch 没有办法原生监测请求的进度，而 XHR 可以</li>\n</ul>\n<p>（3）Axios Axios 是一种基于 Promise 封装的 HTTP 客户端，其特点如下：</p>\n<ul>\n<li>浏览器端发起 XMLHttpRequests 请求</li>\n<li>node 端发起 http 请求</li>\n<li>支持 Promise API</li>\n<li>监听请求和返回</li>\n<li>对请求和返回进行转化</li>\n<li>取消请求</li>\n<li>自动转换 json 数据</li>\n<li>客户端支持抵御 XSRF 攻击</li>\n</ul>\n<ol start=\"28\">\n<li>\n<p>数组的遍历方法有哪些<br />\n | 方法 | 是否改变原数组 | 特点 |<br />\n| forEach ()\t| 否 | 数组方法，不改变原数组，没有返回值 |<br />\n| map () | 否 | 数组方法，不改变原数组，有返回值，可链式调用 |<br />\n| filter () | 否 | 数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用 |<br />\n| for...of | 否 | for...of 遍历具有 Iterator 迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的 obj 对象，将异步循环变成同步循环 |<br />\n| every () 和 some () | 否 | 数组方法，some () 只要有一个是 true，便返回 true；而 every () 只要有一个是 false，便返回 false. |<br />\n| find () 和 findIndex () | 否 | 数组方法，find () 返回的是第一个符合条件的值；findIndex () 返回的是第一个返回条件的值的索引值 |<br />\n| reduce () 和 reduceRight () | 否 | 数组方法，reduce () 对数组正序操作；reduceRight () 对数组逆序操作 |</p>\n</li>\n<li>\n<p>forEach 和 map 方法有什么区别</p>\n</li>\n</ol>\n<p>这方法都是用来遍历数组的，两者区别如下：</p>\n<ul>\n<li>forEach () 方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；</li>\n<li>map () 方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；</li>\n</ul>\n<h3 id=\"四-原型与原型链\"><a class=\"anchor\" href=\"#四-原型与原型链\">#</a> 四、原型与原型链</h3>\n<ol>\n<li>对原型、原型链的理解</li>\n</ol>\n<p>在 JavaScript 中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。<br />\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。<br />\nES5 中新增了一个 Object.getPrototypeOf () 方法，可以通过这个方法来获取对象的原型。</p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString () 等方法的原因。</p>\n<p>特点： JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p>\n<div align=center>\n    <style>.hojyfyiuirzn{}</style><img data-src=\"/2025/01/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/01.jpg\" class=\"hojyfyiuirzn\">\n</div>\n<ol start=\"2\">\n<li>原型修改、重写</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修改原型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 重写原型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>可以看到修改原型的时候 p 的构造函数不是指向 Person 了，因为直接给 Person 的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数 Object，所以这时候 p.constructor === Object ，而不是 p.constructor === Person。要想成立，就要用 constructor 指回来：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Person</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>原型链指向</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>__proto__  <span class=\"token comment\">// Person.prototype</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__  <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">//Object.prototype</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// Person</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor  <span class=\"token comment\">// Person</span></pre></td></tr></table></figure><p>P.S. constructor 是一个特殊的属性，它指向用于创建该对象的函数。<br />\nPerson.prototype.constructor 这是 Person 函数本身。<br />\n假设 p1 是 new Person () 创建的对象，那么 p1.<strong>proto</strong> 是 Person.prototype。</p>\n<ol start=\"4\">\n<li>原型链的终点是什么？如何打印出原型链的终点？</li>\n</ol>\n<p>由于 Object 是构造函数，原型链终点是 Object.prototype.<strong>proto</strong>，而 Object.prototype.<strong>proto</strong>=== null //true，所以，原型链的终点是 null。</p>\n<p>原型链上的所有原型都是对象，所有的对象最终都是由 Object 构造的，而 Object.prototype 的下一级是 Object.prototype.<strong>proto</strong>。（null）</p>\n<ol start=\"5\">\n<li>如何获得对象非原型链上的属性？</li>\n</ol>\n<p>使用后 hasOwnProperty () 方法来判断属性是否属于原型链的属性：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">+</span><span class=\"token string\">': '</span><span class=\"token operator\">+</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"五-执行上下文作用域链闭包\"><a class=\"anchor\" href=\"#五-执行上下文作用域链闭包\">#</a> 五、执行上下文 / 作用域链 / 闭包</h3>\n<ol>\n<li>对闭包的理解</li>\n</ol>\n<p>闭包是指有权访问另一个函数作用域中变量的函数，<br />\n创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p>\n<p>闭包有两个常用的用途；</p>\n<ul>\n<li>\n<p>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</p>\n</li>\n<li>\n<p>闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</p>\n</li>\n</ul>\n<p>P.S. 引用是一个变量或数据结构，它存储了另一个对象或数据的内存地址，而不是数据本身。通过引用，程序可以直接访问和操作该内存地址中的数据。</p>\n<p>比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">B</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先因为 setTimeout 是个异步函数，所以会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出一堆 6。解决办法有三种：</p>\n<ul>\n<li>第一种是使用闭包的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>P.S. 立即执行函数表达式（IIFE）：</p>\n<p>(function (j) { ... })(i)：这是一个立即执行的函数表达式，它创建了一个新的作用域，并将当前的 i 值传递给参数 j。这样可以确保每个 setTimeout 回调函数中的 j 都是当前循环迭代的值，而不是最终的 i 值。</p>\n<p>在上述代码中，首先使用了立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 timer 这个闭包的时候，就可以使用外部函数的变量 j，从而达到目的。</p>\n<ul>\n<li>第二种就是使用 setTimeout 的第三个参数，这个参数会被当成 timer 函数的参数传入。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    i</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>第三种就是使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>P.S.</p>\n<ul>\n<li>var 的问题<br />\n（1）函数作用域：var 声明的变量具有函数作用域，而不是块作用域。这意味着在函数内部定义的 var 变量在整个函数内部都是可见的，而不受块（如 if 语句或 for 循环）的限制。</li>\n</ul>\n<p>（2）变量提升：var 声明的变量会被提升到其作用域的顶部，导致变量在声明之前可以被访问，但其值为 undefined。</p>\n<p>（3）循环中的问题：在 for 循环中使用 var 声明的变量会在每次循环迭代中被重新赋值，但变量本身仍然是函数作用域的。这导致在异步操作（如 setTimeout）中，所有回调函数引用的是同一个变量，而不是各自循环迭代时的值。</p>\n<ul>\n<li>let 的优点<br />\n（1）块作用域：let 声明的变量具有块作用域，这意味着它们只在定义它们的块内可见。</li>\n</ul>\n<p>（2）不提升：let 声明的变量不会被提升到其作用域的顶部，因此在声明之前访问会报错（暂时性死区）。</p>\n<p>（3）循环中的行为：在 for 循环中使用 let 声明的变量，每次循环迭代都会创建一个新的变量绑定，因此在异步操作中，每个回调函数引用的是各自循环迭代时的值。</p>\n<p>var：函数作用域，变量提升，不推荐在现代 JavaScript 中使用，特别是在循环中。<br />\nlet：块作用域，不提升，推荐在需要块作用域变量时使用。<br />\n使用 let 可以避免很多 var 带来的问题，特别是与作用域和变量提升相关的问题。因此，在现代 JavaScript 开发中，推荐使用 let 和 const 来声明变量，而不是 var。</p>\n<ol start=\"2\">\n<li>对作用域、作用域链的理解</li>\n</ol>\n<p>1）全局作用域和函数作用域</p>\n<p>（1）全局作用域</p>\n<ul>\n<li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li>\n<li>所有未定义直接赋值的变量自动声明为全局作用域</li>\n<li>所有 window 对象的属性拥有全局作用域</li>\n<li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li>\n</ul>\n<p>（2）函数作用域</p>\n<ul>\n<li>函数作用域声明在函数内部的变量，一般只有固定的代码片段可以访问到</li>\n<li>作用域是分层的，内层作用域可以访问外层作用域，反之不行</li>\n</ul>\n<p>2）块级作用域</p>\n<ul>\n<li>使用 ES6 中新增的 let 和 const 指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由 { } 包裹的代码片段）</li>\n<li>let 和 const 声明的变量不会有变量提升，也不可以重复声明</li>\n<li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</li>\n</ul>\n<p>作用域链： 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到 window 对象就被终止，这一层层的关系就是作用域链。</p>\n<p>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</p>\n<p>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p>\n<p>当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。</p>\n<ol start=\"3\">\n<li>对执行上下文的理解</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>执行上下文类型</li>\n</ol>\n</li>\n</ul>\n<p>（1）全局执行上下文</p>\n<p>任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的 window 对象，并且设置 this 的值等于这个全局对象，一个程序中只有一个全局执行上下文。</p>\n<p>（2）函数执行上下文</p>\n<p>当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</p>\n<p>（3）Eval 函数执行上下文</p>\n<p>执行在 eval 函数中的代码会有属于他自己的执行上下文，不过 eval 函数不常使用，不做介绍。</p>\n<ul>\n<li>\n<ol start=\"2\">\n<li>执行上下文栈</li>\n</ol>\n</li>\n<li>\n<p>JavaScript 引擎使用执行上下文栈来管理执行上下文</p>\n</li>\n<li>\n<p>当 JavaScript 执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside first function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Again inside first function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside second function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 执行顺序</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 先执行 second (), 在执行 first ()</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"3\">\n<li>创建执行上下文</li>\n</ol>\n</li>\n</ul>\n<p>创建执行上下文有两个阶段：创建阶段和执行阶段</p>\n<p>1）创建阶段</p>\n<p>（1）this 绑定</p>\n<ul>\n<li>在全局执行上下文中，this 指向全局对象（window 对象）</li>\n<li>在函数执行上下文中，this 指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li>\n</ul>\n<p>（2）创建词法环境组件</p>\n<ul>\n<li>词法环境是一种有标识符 —— 变量映射的数据结构，标识符是指变量 / 函数名，变量是对实际对象或原始数据的引用。</li>\n<li>词法环境的内部有两个组件：加粗样式：环境记录器：用来储存变量个函数声明的实际位置外部环境的引用：可以访问父级作用域</li>\n</ul>\n<p>（3）创建变量环境组件</p>\n<ul>\n<li>变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li>\n</ul>\n<p>2）执行阶段 此阶段会完成对变量的分配，最后执行完代码。</p>\n<p>简单来说执行上下文就是指：</p>\n<p>在执行一点 JS 代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为 undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</p>\n<p>在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出 this、arguments 和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，this，arguments</li>\n</ul>\n"},{"title":"前端学习记录--时间轴效果实现","date":"2024-07-22T04:56:41.000Z","_content":"\n## HTML+CSS+JS实现轮播时间轴\n### 实现效果\n\n<!-- ![.jpg](https://s2.loli.net/2024/07/22/tcLQMhDmexXEV3f.jpg) -->\n\n![02.jpg](https://s2.loli.net/2024/07/22/ob2vlAkLZIBVfrp.jpg)\n\n![01.jpg](https://s2.loli.net/2024/07/22/rQmCVYOZi9KXnk8.jpg)\n\n\n### CSS部分\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>轮播时间轴</title>\n    <link rel=\"stylesheet\" href=\"https://static.fontawesome.com/css/fontawesome-app.css\">\n    <!-- 引入字体图标 -->\n    <link rel=\"stylesheet\" href=\"./font/iconfont.css\">\n    <!-- 引入字体 -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400&display=swap\">\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n            font-family: \"Source Sans Pro\", sans-serif;\n        }\n\n        /* 设置html和body元素为flex布局，水平和垂直居中对齐，高度为100vh，背景图大小为cover，溢出隐藏，背景图过渡动画时间为0.7秒 */\n        html,\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-size: cover;\n            overflow: hidden;\n            transition: background-image .7s ease-in-out;\n        }\n\n        /* 设置.shell元素为相对定位，flex布局，水平和垂直居中对齐，宽度和高度为100%，盒模型为border-box，背景颜色为rgba(99, 99, 99, 0.8) */\n        .shell {\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            height: 100%;\n            box-sizing: border-box;\n            background: rgba(99, 99, 99, 0.8);\n        }\n\n        /* 设置.button元素为flex布局，两端对齐，宽度为380px，绝对定位，左侧偏移量为50%，水平居中，底部偏移量为-80px */\n        .button {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            width: 380px;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n            bottom: -80px;\n        }\n\n        /* 设置.prev和.next元素过渡动画时间为0.25秒，层级为99999，底部偏移量为5px */\n        .prev,\n        .next {\n            transition: transform 0.25s ease;\n            z-index: 99999;\n            bottom: 5px;\n        }\n\n        /* 设置.prev和.next元素中的i元素字体大小为90px，颜色为#fff，光标为指针，文字阴影为0 0 10px #ffffff */\n        .prev i,\n        .next i {\n            font-size: 90px;\n            color: #fff;\n            cursor: pointer;\n            text-shadow: 0 0 10px #ffffff;\n        }\n\n        /* 设置.shell_body元素宽度为100%，缩放为0.8倍，上内边距为20px，下内边距为150px */\n        .shell_body {\n            width: 100%;\n            transform: scale(.8);\n            padding: 20px 0 150px 0;\n        }\n\n        /* 设置.shell_slider元素为相对定位，过渡动画时间为1秒，背景为透明 */\n        .shell_slider {\n            position: relative;\n            transition: transform 1s ease-in-out;\n            background: transparent;\n        }\n\n        /* 设置.item元素为相对定位，左浮动，左右外边距为20px */\n        .item {\n            position: relative;\n            float: left;\n            margin: 0 20px;\n        }\n\n        /* 设置.frame元素为相对定位，宽度和高度为100%，过渡动画时间为1秒，3D变换模式为保留3D效果 */\n        .frame {\n            position: relative;\n            width: 100%;\n            height: 100%;\n            transition: transform 1s ease-in-out;\n            transform-style: preserve-3d;\n        }\n\n        /* 设置.frame元素的伪元素为绝对定位，底部偏移量为-16%，宽度为100%，高度为60px，背景颜色为#ffffff1c，盒阴影为0px 0px 15px 5px #ffffff1c，3D变换为绕X轴旋转90度并向上平移20px */\n        .frame:after {\n            content: \"\";\n            position: absolute;\n            bottom: -16%;\n            width: 100%;\n            height: 60px;\n            background: #ffffff1c;\n            box-shadow: 0px 0px 15px 5px #ffffff1c;\n            transform: rotateX(90deg) translate3d(0px, -20px, 0px);\n        }\n\n        /* 设置.box元素为flex布局，纵向排列，水平和垂直居中对齐，绝对定位，宽度和高度为100%，边框为4px实心白色，透视效果为1000px，3D变换模式为保留3D效果 */\n        .box {\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            border: 4px solid #fff;\n            perspective: 1000px;\n            transform-style: preserve-3d;\n        }\n\n        /* 设置.box元素中的h1和span元素颜色为#fff，Z轴平移距离为20px */\n        .box h1,\n        .box span {\n            color: #fff;\n            transform: translateZ(20px);\n        }\n\n        /* 设置.box元素中的h1元素文字阴影为0 0 30px #1f05b4，字体大小为100px */\n        .box h1 {\n            text-shadow: 0 0 30px #1f05b4;\n            font-size: 100px;\n        }\n\n        /* 设置.box元素中的span元素为绝对定位，底部偏移量为20px，左右内边距为25px，文字阴影为0 0 10px #1f05b4 */\n        .box span {\n            position: absolute;\n            bottom: 20px;\n            padding: 0 25px;\n            text-shadow: 0 0 10px #1f05b4;\n        }\n\n        /* 设置.front、.left和.right元素的盒阴影为0 0 50px #ffffff，背景图大小为cover */\n        .front,\n        .left,\n        .right {\n            box-shadow: 0 0 50px #ffffff;\n            background-size: cover;\n        }\n\n        /* 设置.left和.right元素的顶部偏移量为0，宽度为60px，背面不可见 */\n        .right,\n        .left {\n            top: 0;\n            width: 60px;\n            backface-visibility: hidden;\n        }\n\n        /* 设置.left元素的左侧偏移量为0，左边框宽度为5px，3D变换为向右平移1px，Z轴平移-60px，绕Y轴逆时针旋转90度，变换原点为左侧 */\n        .left {\n            left: 0;\n            border-left-width: 5px;\n            transform: translate3d(1px, 0, -60px) rotateY(-90deg);\n            transform-origin: 0%;\n        }\n\n        /* 设置.right元素的右侧偏移量为0，右边框宽度为5px，3D变换为向左平移1px，Z轴平移-60px，绕Y轴顺时针旋转90度，变换原点为右侧 */\n        .right {\n            right: 0;\n            border-right-width: 5px;\n            transform: translate3d(-1px, 0, -60px) rotateY(90deg);\n            transform-origin: 100%;\n        }\n    </style>\n</head>\n```\n\n### HTML部分\n\n```html\n<body>\n    <div class=\"shell\">\n        <div class=\"shell_body\">\n            <div class=\"button\">\n                <div class=\"prev\"><i class=\"iconfont icon-backward_filled\"></i></div>\n                <div class=\"next\"><i class=\"iconfont icon-forward_filled\"></i></div>\n            </div>\n\n            <div class=\"shell_slider\">\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2014</h1>\n                            <span>-In the year 2014 I reached the age of 13-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2015</h1>\n                            <span>-In the year 2015 I reached the age of 14-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2016</h1>\n                            <span>-In the year 2016 I reached the age of 15-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"></div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2017</h1>\n                            <span>-In the year 2017 I reached the age of 16-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2018</h1>\n                            <span>-In the year 2018 I reached the age of 17-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2019</h1>\n                            <span>-In the year 2019 I reached the age of 18-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2020</h1>\n                            <span>-In the year 2020 I reached the age of 18-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2021</h1>\n                            <span>-In the year 2021 I reached the age of 19-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2022</h1>\n                            <span>-In the year 2022 I reached the age of 20-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2023</h1>\n                            <span>-In the year 2023 I reached the age of 21-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n```\n\n### JS部分\n\n```html\n<script>\n    // 这段JavaScript代码的作用是实现一个图片轮播效果。首先，通过document.getElementsByClassName('item')获取到所有具有item类名的元素，并将它们存储在items变量中。\n    // 然后，通过一个循环遍历每个item元素。在循环中，首先获取当前的item元素，然后通过getElementsByClassName方法获取到该item下的frame、front、left和right元素，并将它们分别存储在frame、frontBox、leftBox和rightBox变量中。\n    // 接下来，通过设置frontBox、leftBox和rightBox的style.backgroundImage属性，将背景图片设置为'url(./img/' + (i + 1).toString().padStart(2, '0') + '.jpg)'，其中(i + 1).toString().padStart(2, '0')表示将循环变量i加1后转换为字符串，并在前面补0，以保证图片的文件名格式正确。\n    // 接着，定义了一个立即执行函数，并在函数内部进行了一些操作。首先，通过document.getElementsByClassName('shell')[0]获取到具有shell类名的元素，并将其存储在shell变量中。然后，通过shell.getElementsByClassName方法获取到该shell元素下的shell_slider、item、prev和next元素，并将它们分别存储在slider、items、prevBtn和nextBtn变量中。\n    // 接下来，定义了一些变量，包括width、height、totalWidth、margin、currIndex、interval和intervalTime。width和height分别表示每个item的宽度和高度，totalWidth表示所有item的总宽度，margin表示item的外边距，currIndex表示当前显示的item的索引，interval表示定时器的ID，intervalTime表示定时器的时间间隔。\n    // 然后，定义了init函数，该函数用于初始化一些操作。在该函数中，首先调用resize函数调整大小，然后调用move函数将显示的item移动到中间位置，接着调用bindEvents函数绑定事件，最后调用timer函数启动定时器。\n    // 接着，定义了resize函数，该函数用于在窗口大小变化时调整大小。在该函数中，首先计算出新的width和height，然后根据计算结果设置slider的宽度，以及每个item的宽度和高度。\n    // 接下来，定义了bindEvents函数，该函数用于绑定事件。在该函数中，首先绑定了窗口大小变化时调用resize函数的事件，然后绑定了点击prev按钮和next按钮时调用prev函数和next函数的事件。\n    // 最后，在立即执行函数的末尾，调用了init函数来初始化页面，并定义了move、timer、prev和next函数。其中，move函数用于移动shell到指定的item，timer函数用于启动定时器，prev函数用于切换到上一个item，next函数用于切换到下一个item。\n\n    // 获取所有的item元素\n    var items = document.getElementsByClassName('item');\n    // 循环遍历每个item\n    for (var i = 0; i < items.length; i++) {\n        // 获取当前item\n        var item = items[i];\n        var frame = item.getElementsByClassName('frame')[0];\n        var frontBox = frame.getElementsByClassName('front')[0];\n        var leftBox = frame.getElementsByClassName('left')[0];\n        var rightBox = frame.getElementsByClassName('right')[0];\n        // 设置背景图片\n        frontBox.style.backgroundImage = 'url(./img/' + (i + 1).toString().padStart(2, '0') + '.jpg)';\n        leftBox.style.backgroundImage = 'url(./img/' + (i + 1).toString().padStart(2, '0') + '.jpg)';\n        rightBox.style.backgroundImage = 'url(./img/' + (i + 1).toString().padStart(2, '0') + '.jpg)';\n    }\n    (function () {\n        \"use strict\";\n        var shell = document.getElementsByClassName('shell')[0];\n        var slider = shell.getElementsByClassName('shell_slider')[0];\n        var items = shell.getElementsByClassName('item');\n        var prevBtn = shell.getElementsByClassName('prev')[0];\n        var nextBtn = shell.getElementsByClassName('next')[0];\n        // 定义变量\n        var width, height, totalWidth, margin = 20,\n            currIndex = 0,\n            interval, intervalTime = 3000;\n        function init() {\n            // 初始化函数\n            resize();\n            move(Math.floor(items.length / 2));\n            bindEvents();\n            timer();\n        }\n        function resize() {\n            // 窗口大小变化时调整大小\n            width = Math.max(window.innerWidth * .20, 275);\n            height = window.innerHeight * .5;\n            totalWidth = width * items.length;\n            // 设置slider宽度\n            slider.style.width = totalWidth + \"px\";\n            // 设置每个item的宽度和高度\n            for (var i = 0; i < items.length; i++) {\n                let item = items[i];\n                item.style.width = (width - (margin * 2)) + \"px\";\n                item.style.height = height + \"px\";\n            }\n        }\n        function bindEvents() {\n            // 窗口大小变化时调整大小\n            window.onresize = resize;\n            // 点击prev按钮切换item\n            prevBtn.addEventListener('click', () => { prev(); });\n            nextBtn.addEventListener('click', () => { next(); });\n        }\n        init();\n        function move(index) {\n            // 移动shell到指定的item\n            if (index < 1) index = items.length;\n            if (index > items.length) index = 1;\n            currIndex = index;\n            // 遍历所有item\n            for (var i = 0; i < items.length; i++) {\n                let item = items[i],\n                    box = item.getElementsByClassName('frame')[0];\n                if (i == (index - 1)) {\n                    // 当前item添加active类并设置3D效果\n                    item.classList.add('item--active');\n                    box.style.transform = \"perspective(1200px)\";\n                } else {\n                    // 其他item移除active类并设置3D效果\n                    item.classList.remove('item--active');\n                    box.style.transform = \"perspective(1200px) rotateY(\" + (i < (index - 1) ? 40 : -40) + \"deg)\";\n                }\n            }\n            // 移动slider\n            slider.style.transform = \"translate3d(\" + ((index * -width) + (width / 2) + window.innerWidth / 2) + \"px, 0, 0)\";\n            // 设置body背景图片\n            var frontBox = items[index - 1].getElementsByClassName('front')[0];\n            document.body.style.backgroundImage = frontBox.style.backgroundImage;\n        }\n        function timer() {\n            // 定时器，自动切换shell\n            clearInterval(interval);\n            interval = setInterval(() => {\n                move(++currIndex);\n            }, intervalTime);\n        }\n        // 切换item\n        function prev() {\n            move(--currIndex);\n            timer();\n        }\n        function next() {\n            move(++currIndex);\n            timer();\n        }\n    })();\n</script>\n```\n\n在VScode中新建.html文件将以上代码段依次粘贴进去就完成了！不要忘记把img文件夹放在同级根目录下，使用到的图片都要以01.jpg,02.jpg……10.jpg形式命名哦，图片分辨率建议1200*560px~","source":"_posts/前端学习记录-时间轴效果实现.md","raw":"---\ntitle: 前端学习记录--时间轴效果实现\ndate: 2024-07-22 12:56:41\ncategories:\n- [前端开发]\ntags:\n- [前端]\n---\n\n## HTML+CSS+JS实现轮播时间轴\n### 实现效果\n\n<!-- ![.jpg](https://s2.loli.net/2024/07/22/tcLQMhDmexXEV3f.jpg) -->\n\n![02.jpg](https://s2.loli.net/2024/07/22/ob2vlAkLZIBVfrp.jpg)\n\n![01.jpg](https://s2.loli.net/2024/07/22/rQmCVYOZi9KXnk8.jpg)\n\n\n### CSS部分\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>轮播时间轴</title>\n    <link rel=\"stylesheet\" href=\"https://static.fontawesome.com/css/fontawesome-app.css\">\n    <!-- 引入字体图标 -->\n    <link rel=\"stylesheet\" href=\"./font/iconfont.css\">\n    <!-- 引入字体 -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400&display=swap\">\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n            font-family: \"Source Sans Pro\", sans-serif;\n        }\n\n        /* 设置html和body元素为flex布局，水平和垂直居中对齐，高度为100vh，背景图大小为cover，溢出隐藏，背景图过渡动画时间为0.7秒 */\n        html,\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-size: cover;\n            overflow: hidden;\n            transition: background-image .7s ease-in-out;\n        }\n\n        /* 设置.shell元素为相对定位，flex布局，水平和垂直居中对齐，宽度和高度为100%，盒模型为border-box，背景颜色为rgba(99, 99, 99, 0.8) */\n        .shell {\n            position: relative;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            width: 100%;\n            height: 100%;\n            box-sizing: border-box;\n            background: rgba(99, 99, 99, 0.8);\n        }\n\n        /* 设置.button元素为flex布局，两端对齐，宽度为380px，绝对定位，左侧偏移量为50%，水平居中，底部偏移量为-80px */\n        .button {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            width: 380px;\n            position: absolute;\n            left: 50%;\n            transform: translateX(-50%);\n            bottom: -80px;\n        }\n\n        /* 设置.prev和.next元素过渡动画时间为0.25秒，层级为99999，底部偏移量为5px */\n        .prev,\n        .next {\n            transition: transform 0.25s ease;\n            z-index: 99999;\n            bottom: 5px;\n        }\n\n        /* 设置.prev和.next元素中的i元素字体大小为90px，颜色为#fff，光标为指针，文字阴影为0 0 10px #ffffff */\n        .prev i,\n        .next i {\n            font-size: 90px;\n            color: #fff;\n            cursor: pointer;\n            text-shadow: 0 0 10px #ffffff;\n        }\n\n        /* 设置.shell_body元素宽度为100%，缩放为0.8倍，上内边距为20px，下内边距为150px */\n        .shell_body {\n            width: 100%;\n            transform: scale(.8);\n            padding: 20px 0 150px 0;\n        }\n\n        /* 设置.shell_slider元素为相对定位，过渡动画时间为1秒，背景为透明 */\n        .shell_slider {\n            position: relative;\n            transition: transform 1s ease-in-out;\n            background: transparent;\n        }\n\n        /* 设置.item元素为相对定位，左浮动，左右外边距为20px */\n        .item {\n            position: relative;\n            float: left;\n            margin: 0 20px;\n        }\n\n        /* 设置.frame元素为相对定位，宽度和高度为100%，过渡动画时间为1秒，3D变换模式为保留3D效果 */\n        .frame {\n            position: relative;\n            width: 100%;\n            height: 100%;\n            transition: transform 1s ease-in-out;\n            transform-style: preserve-3d;\n        }\n\n        /* 设置.frame元素的伪元素为绝对定位，底部偏移量为-16%，宽度为100%，高度为60px，背景颜色为#ffffff1c，盒阴影为0px 0px 15px 5px #ffffff1c，3D变换为绕X轴旋转90度并向上平移20px */\n        .frame:after {\n            content: \"\";\n            position: absolute;\n            bottom: -16%;\n            width: 100%;\n            height: 60px;\n            background: #ffffff1c;\n            box-shadow: 0px 0px 15px 5px #ffffff1c;\n            transform: rotateX(90deg) translate3d(0px, -20px, 0px);\n        }\n\n        /* 设置.box元素为flex布局，纵向排列，水平和垂直居中对齐，绝对定位，宽度和高度为100%，边框为4px实心白色，透视效果为1000px，3D变换模式为保留3D效果 */\n        .box {\n            display: flex;\n            flex-direction: column;\n            justify-content: center;\n            align-items: center;\n            position: absolute;\n            width: 100%;\n            height: 100%;\n            border: 4px solid #fff;\n            perspective: 1000px;\n            transform-style: preserve-3d;\n        }\n\n        /* 设置.box元素中的h1和span元素颜色为#fff，Z轴平移距离为20px */\n        .box h1,\n        .box span {\n            color: #fff;\n            transform: translateZ(20px);\n        }\n\n        /* 设置.box元素中的h1元素文字阴影为0 0 30px #1f05b4，字体大小为100px */\n        .box h1 {\n            text-shadow: 0 0 30px #1f05b4;\n            font-size: 100px;\n        }\n\n        /* 设置.box元素中的span元素为绝对定位，底部偏移量为20px，左右内边距为25px，文字阴影为0 0 10px #1f05b4 */\n        .box span {\n            position: absolute;\n            bottom: 20px;\n            padding: 0 25px;\n            text-shadow: 0 0 10px #1f05b4;\n        }\n\n        /* 设置.front、.left和.right元素的盒阴影为0 0 50px #ffffff，背景图大小为cover */\n        .front,\n        .left,\n        .right {\n            box-shadow: 0 0 50px #ffffff;\n            background-size: cover;\n        }\n\n        /* 设置.left和.right元素的顶部偏移量为0，宽度为60px，背面不可见 */\n        .right,\n        .left {\n            top: 0;\n            width: 60px;\n            backface-visibility: hidden;\n        }\n\n        /* 设置.left元素的左侧偏移量为0，左边框宽度为5px，3D变换为向右平移1px，Z轴平移-60px，绕Y轴逆时针旋转90度，变换原点为左侧 */\n        .left {\n            left: 0;\n            border-left-width: 5px;\n            transform: translate3d(1px, 0, -60px) rotateY(-90deg);\n            transform-origin: 0%;\n        }\n\n        /* 设置.right元素的右侧偏移量为0，右边框宽度为5px，3D变换为向左平移1px，Z轴平移-60px，绕Y轴顺时针旋转90度，变换原点为右侧 */\n        .right {\n            right: 0;\n            border-right-width: 5px;\n            transform: translate3d(-1px, 0, -60px) rotateY(90deg);\n            transform-origin: 100%;\n        }\n    </style>\n</head>\n```\n\n### HTML部分\n\n```html\n<body>\n    <div class=\"shell\">\n        <div class=\"shell_body\">\n            <div class=\"button\">\n                <div class=\"prev\"><i class=\"iconfont icon-backward_filled\"></i></div>\n                <div class=\"next\"><i class=\"iconfont icon-forward_filled\"></i></div>\n            </div>\n\n            <div class=\"shell_slider\">\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2014</h1>\n                            <span>-In the year 2014 I reached the age of 13-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2015</h1>\n                            <span>-In the year 2015 I reached the age of 14-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2016</h1>\n                            <span>-In the year 2016 I reached the age of 15-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"></div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2017</h1>\n                            <span>-In the year 2017 I reached the age of 16-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2018</h1>\n                            <span>-In the year 2018 I reached the age of 17-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2019</h1>\n                            <span>-In the year 2019 I reached the age of 18-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2020</h1>\n                            <span>-In the year 2020 I reached the age of 18-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2021</h1>\n                            <span>-In the year 2021 I reached the age of 19-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2022</h1>\n                            <span>-In the year 2022 I reached the age of 20-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n                <div class=\"item\">\n                    <div class=\"frame\">\n                        <div class=\"box front\">\n                            <h1>2023</h1>\n                            <span>-In the year 2023 I reached the age of 21-</span>\n                        </div>\n                        <div class=\"box left\"></div>\n                        <div class=\"box right\"> </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n```\n\n### JS部分\n\n```html\n<script>\n    // 这段JavaScript代码的作用是实现一个图片轮播效果。首先，通过document.getElementsByClassName('item')获取到所有具有item类名的元素，并将它们存储在items变量中。\n    // 然后，通过一个循环遍历每个item元素。在循环中，首先获取当前的item元素，然后通过getElementsByClassName方法获取到该item下的frame、front、left和right元素，并将它们分别存储在frame、frontBox、leftBox和rightBox变量中。\n    // 接下来，通过设置frontBox、leftBox和rightBox的style.backgroundImage属性，将背景图片设置为'url(./img/' + (i + 1).toString().padStart(2, '0') + '.jpg)'，其中(i + 1).toString().padStart(2, '0')表示将循环变量i加1后转换为字符串，并在前面补0，以保证图片的文件名格式正确。\n    // 接着，定义了一个立即执行函数，并在函数内部进行了一些操作。首先，通过document.getElementsByClassName('shell')[0]获取到具有shell类名的元素，并将其存储在shell变量中。然后，通过shell.getElementsByClassName方法获取到该shell元素下的shell_slider、item、prev和next元素，并将它们分别存储在slider、items、prevBtn和nextBtn变量中。\n    // 接下来，定义了一些变量，包括width、height、totalWidth、margin、currIndex、interval和intervalTime。width和height分别表示每个item的宽度和高度，totalWidth表示所有item的总宽度，margin表示item的外边距，currIndex表示当前显示的item的索引，interval表示定时器的ID，intervalTime表示定时器的时间间隔。\n    // 然后，定义了init函数，该函数用于初始化一些操作。在该函数中，首先调用resize函数调整大小，然后调用move函数将显示的item移动到中间位置，接着调用bindEvents函数绑定事件，最后调用timer函数启动定时器。\n    // 接着，定义了resize函数，该函数用于在窗口大小变化时调整大小。在该函数中，首先计算出新的width和height，然后根据计算结果设置slider的宽度，以及每个item的宽度和高度。\n    // 接下来，定义了bindEvents函数，该函数用于绑定事件。在该函数中，首先绑定了窗口大小变化时调用resize函数的事件，然后绑定了点击prev按钮和next按钮时调用prev函数和next函数的事件。\n    // 最后，在立即执行函数的末尾，调用了init函数来初始化页面，并定义了move、timer、prev和next函数。其中，move函数用于移动shell到指定的item，timer函数用于启动定时器，prev函数用于切换到上一个item，next函数用于切换到下一个item。\n\n    // 获取所有的item元素\n    var items = document.getElementsByClassName('item');\n    // 循环遍历每个item\n    for (var i = 0; i < items.length; i++) {\n        // 获取当前item\n        var item = items[i];\n        var frame = item.getElementsByClassName('frame')[0];\n        var frontBox = frame.getElementsByClassName('front')[0];\n        var leftBox = frame.getElementsByClassName('left')[0];\n        var rightBox = frame.getElementsByClassName('right')[0];\n        // 设置背景图片\n        frontBox.style.backgroundImage = 'url(./img/' + (i + 1).toString().padStart(2, '0') + '.jpg)';\n        leftBox.style.backgroundImage = 'url(./img/' + (i + 1).toString().padStart(2, '0') + '.jpg)';\n        rightBox.style.backgroundImage = 'url(./img/' + (i + 1).toString().padStart(2, '0') + '.jpg)';\n    }\n    (function () {\n        \"use strict\";\n        var shell = document.getElementsByClassName('shell')[0];\n        var slider = shell.getElementsByClassName('shell_slider')[0];\n        var items = shell.getElementsByClassName('item');\n        var prevBtn = shell.getElementsByClassName('prev')[0];\n        var nextBtn = shell.getElementsByClassName('next')[0];\n        // 定义变量\n        var width, height, totalWidth, margin = 20,\n            currIndex = 0,\n            interval, intervalTime = 3000;\n        function init() {\n            // 初始化函数\n            resize();\n            move(Math.floor(items.length / 2));\n            bindEvents();\n            timer();\n        }\n        function resize() {\n            // 窗口大小变化时调整大小\n            width = Math.max(window.innerWidth * .20, 275);\n            height = window.innerHeight * .5;\n            totalWidth = width * items.length;\n            // 设置slider宽度\n            slider.style.width = totalWidth + \"px\";\n            // 设置每个item的宽度和高度\n            for (var i = 0; i < items.length; i++) {\n                let item = items[i];\n                item.style.width = (width - (margin * 2)) + \"px\";\n                item.style.height = height + \"px\";\n            }\n        }\n        function bindEvents() {\n            // 窗口大小变化时调整大小\n            window.onresize = resize;\n            // 点击prev按钮切换item\n            prevBtn.addEventListener('click', () => { prev(); });\n            nextBtn.addEventListener('click', () => { next(); });\n        }\n        init();\n        function move(index) {\n            // 移动shell到指定的item\n            if (index < 1) index = items.length;\n            if (index > items.length) index = 1;\n            currIndex = index;\n            // 遍历所有item\n            for (var i = 0; i < items.length; i++) {\n                let item = items[i],\n                    box = item.getElementsByClassName('frame')[0];\n                if (i == (index - 1)) {\n                    // 当前item添加active类并设置3D效果\n                    item.classList.add('item--active');\n                    box.style.transform = \"perspective(1200px)\";\n                } else {\n                    // 其他item移除active类并设置3D效果\n                    item.classList.remove('item--active');\n                    box.style.transform = \"perspective(1200px) rotateY(\" + (i < (index - 1) ? 40 : -40) + \"deg)\";\n                }\n            }\n            // 移动slider\n            slider.style.transform = \"translate3d(\" + ((index * -width) + (width / 2) + window.innerWidth / 2) + \"px, 0, 0)\";\n            // 设置body背景图片\n            var frontBox = items[index - 1].getElementsByClassName('front')[0];\n            document.body.style.backgroundImage = frontBox.style.backgroundImage;\n        }\n        function timer() {\n            // 定时器，自动切换shell\n            clearInterval(interval);\n            interval = setInterval(() => {\n                move(++currIndex);\n            }, intervalTime);\n        }\n        // 切换item\n        function prev() {\n            move(--currIndex);\n            timer();\n        }\n        function next() {\n            move(++currIndex);\n            timer();\n        }\n    })();\n</script>\n```\n\n在VScode中新建.html文件将以上代码段依次粘贴进去就完成了！不要忘记把img文件夹放在同级根目录下，使用到的图片都要以01.jpg,02.jpg……10.jpg形式命名哦，图片分辨率建议1200*560px~","slug":"前端学习记录-时间轴效果实现","published":1,"updated":"2024-12-27T14:40:27.072Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfi001ymcuy03rz0she","content":"<h2 id=\"htmlcssjs实现轮播时间轴\"><a class=\"anchor\" href=\"#htmlcssjs实现轮播时间轴\">#</a> HTML+CSS+JS 实现轮播时间轴</h2>\n<h3 id=\"实现效果\"><a class=\"anchor\" href=\"#实现效果\">#</a> 实现效果</h3>\n<!-- ![.jpg](https://s2.loli.net/2024/07/22/tcLQMhDmexXEV3f.jpg) -->\n<p><img data-src=\"https://s2.loli.net/2024/07/22/ob2vlAkLZIBVfrp.jpg\" alt=\"02.jpg\" /></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/22/rQmCVYOZi9KXnk8.jpg\" alt=\"01.jpg\" /></p>\n<h3 id=\"css部分\"><a class=\"anchor\" href=\"#css部分\">#</a> CSS 部分</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>轮播时间轴<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://static.fontawesome.com/css/fontawesome-app.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入字体图标 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./font/iconfont.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入字体 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400&amp;display=swap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Source Sans Pro\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* 设置 html 和 body 元素为 flex 布局，水平和垂直居中对齐，高度为 100vh，背景图大小为 cover，溢出隐藏，背景图过渡动画时间为 0.7 秒 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token selector\">html,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> background-image .7s ease-in-out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">/* 设置.shell 元素为相对定位，flex 布局，水平和垂直居中对齐，宽度和高度为 100%，盒模型为 border-box，背景颜色为 rgba (99, 99, 99, 0.8) */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token selector\">.shell</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>99<span class=\"token punctuation\">,</span> 99<span class=\"token punctuation\">,</span> 99<span class=\"token punctuation\">,</span> 0.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/* 设置.button 元素为 flex 布局，两端对齐，宽度为 380px，绝对定位，左侧偏移量为 50%，水平居中，底部偏移量为 - 80px */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token selector\">.button</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 380px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> -80px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">/* 设置.prev 和.next 元素过渡动画时间为 0.25 秒，层级为 99999，底部偏移量为 5px */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token selector\">.prev,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        .next</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> transform 0.25s ease<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 99999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">/* 设置.prev 和.next 元素中的 i 元素字体大小为 90px，颜色为 #fff，光标为指针，文字阴影为 0 0 10px #ffffff */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token selector\">.prev i,</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        .next i</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 90px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 0 0 10px #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">/* 设置.shell_body 元素宽度为 100%，缩放为 0.8 倍，上内边距为 20px，下内边距为 150px */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token selector\">.shell_body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px 0 150px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">/* 设置.shell_slider 元素为相对定位，过渡动画时间为 1 秒，背景为透明 */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token selector\">.shell_slider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> transform 1s ease-in-out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">/* 设置.item 元素为相对定位，左浮动，左右外边距为 20px */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">/* 设置.frame 元素为相对定位，宽度和高度为 100%，过渡动画时间为 1 秒，3D 变换模式为保留 3D 效果 */</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token selector\">.frame</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> transform 1s ease-in-out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token property\">transform-style</span><span class=\"token punctuation\">:</span> preserve-3d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">/* 设置.frame 元素的伪元素为绝对定位，底部偏移量为 - 16%，宽度为 100%，高度为 60px，背景颜色为 #ffffff1c，盒阴影为 0px 0px 15px 5px #ffffff1c，3D 变换为绕 X 轴旋转 90 度并向上平移 20px */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token selector\">.frame:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> -16%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #ffffff1c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0px 0px 15px 5px #ffffff1c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>90deg<span class=\"token punctuation\">)</span> <span class=\"token function\">translate3d</span><span class=\"token punctuation\">(</span>0px<span class=\"token punctuation\">,</span> -20px<span class=\"token punctuation\">,</span> 0px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">/* 设置.box 元素为 flex 布局，纵向排列，水平和垂直居中对齐，绝对定位，宽度和高度为 100%，边框为 4px 实心白色，透视效果为 1000px，3D 变换模式为保留 3D 效果 */</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token property\">perspective</span><span class=\"token punctuation\">:</span> 1000px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token property\">transform-style</span><span class=\"token punctuation\">:</span> preserve-3d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">/* 设置.box 元素中的 h1 和 span 元素颜色为 #fff，Z 轴平移距离为 20px */</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token selector\">.box h1,</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        .box span</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateZ</span><span class=\"token punctuation\">(</span>20px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">/* 设置.box 元素中的 h1 元素文字阴影为 0 0 30px #1f05b4，字体大小为 100px */</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token selector\">.box h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 0 0 30px #1f05b4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token comment\">/* 设置.box 元素中的 span 元素为绝对定位，底部偏移量为 20px，左右内边距为 25px，文字阴影为 0 0 10px #1f05b4 */</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token selector\">.box span</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 0 0 10px #1f05b4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token comment\">/* 设置.front、.left 和.right 元素的盒阴影为 0 0 50px #ffffff，背景图大小为 cover */</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token selector\">.front,</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        .left,</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        .right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 50px #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token comment\">/* 设置.left 和.right 元素的顶部偏移量为 0，宽度为 60px，背面不可见 */</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token selector\">.right,</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        .left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token property\">backface-visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token comment\">/* 设置.left 元素的左侧偏移量为 0，左边框宽度为 5px，3D 变换为向右平移 1px，Z 轴平移 - 60px，绕 Y 轴逆时针旋转 90 度，变换原点为左侧 */</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token property\">border-left-width</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate3d</span><span class=\"token punctuation\">(</span>1px<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> -60px<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>-90deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> 0%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token comment\">/* 设置.right 元素的右侧偏移量为 0，右边框宽度为 5px，3D 变换为向左平移 1px，Z 轴平移 - 60px，绕 Y 轴顺时针旋转 90 度，变换原点为右侧 */</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token property\">border-right-width</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate3d</span><span class=\"token punctuation\">(</span>-1px<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> -60px<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>90deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"html部分\"><a class=\"anchor\" href=\"#html部分\">#</a> HTML 部分</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shell<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shell_body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iconfont icon-backward_filled<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>next<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iconfont icon-forward_filled<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shell_slider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2014<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2014 I reached the age of 13-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2015<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2015 I reached the age of 14-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2016<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2016 I reached the age of 15-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2017<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2017 I reached the age of 16-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2018<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2018 I reached the age of 17-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2019<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2019 I reached the age of 18-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2020 I reached the age of 18-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2021<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2021 I reached the age of 19-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2022<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2022 I reached the age of 20-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2023<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2023 I reached the age of 21-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"js部分\"><a class=\"anchor\" href=\"#js部分\">#</a> JS 部分</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 这段 JavaScript 代码的作用是实现一个图片轮播效果。首先，通过 document.getElementsByClassName ('item') 获取到所有具有 item 类名的元素，并将它们存储在 items 变量中。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 然后，通过一个循环遍历每个 item 元素。在循环中，首先获取当前的 item 元素，然后通过 getElementsByClassName 方法获取到该 item 下的 frame、front、left 和 right 元素，并将它们分别存储在 frame、frontBox、leftBox 和 rightBox 变量中。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 接下来，通过设置 frontBox、leftBox 和 rightBox 的 style.backgroundImage 属性，将背景图片设置为 'url (./img/' + (i + 1).toString ().padStart (2, '0') + '.jpg)'，其中 (i + 1).toString ().padStart (2, '0') 表示将循环变量 i 加 1 后转换为字符串，并在前面补 0，以保证图片的文件名格式正确。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 接着，定义了一个立即执行函数，并在函数内部进行了一些操作。首先，通过 document.getElementsByClassName ('shell')[0] 获取到具有 shell 类名的元素，并将其存储在 shell 变量中。然后，通过 shell.getElementsByClassName 方法获取到该 shell 元素下的 shell_slider、item、prev 和 next 元素，并将它们分别存储在 slider、items、prevBtn 和 nextBtn 变量中。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 接下来，定义了一些变量，包括 width、height、totalWidth、margin、currIndex、interval 和 intervalTime。width 和 height 分别表示每个 item 的宽度和高度，totalWidth 表示所有 item 的总宽度，margin 表示 item 的外边距，currIndex 表示当前显示的 item 的索引，interval 表示定时器的 ID，intervalTime 表示定时器的时间间隔。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 然后，定义了 init 函数，该函数用于初始化一些操作。在该函数中，首先调用 resize 函数调整大小，然后调用 move 函数将显示的 item 移动到中间位置，接着调用 bindEvents 函数绑定事件，最后调用 timer 函数启动定时器。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 接着，定义了 resize 函数，该函数用于在窗口大小变化时调整大小。在该函数中，首先计算出新的 width 和 height，然后根据计算结果设置 slider 的宽度，以及每个 item 的宽度和高度。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 接下来，定义了 bindEvents 函数，该函数用于绑定事件。在该函数中，首先绑定了窗口大小变化时调用 resize 函数的事件，然后绑定了点击 prev 按钮和 next 按钮时调用 prev 函数和 next 函数的事件。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 最后，在立即执行函数的末尾，调用了 init 函数来初始化页面，并定义了 move、timer、prev 和 next 函数。其中，move 函数用于移动 shell 到指定的 item，timer 函数用于启动定时器，prev 函数用于切换到上一个 item，next 函数用于切换到下一个 item。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 获取所有的 item 元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 循环遍历每个 item</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 获取当前 item</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">var</span> frame <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">var</span> frontBox <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">var</span> leftBox <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">var</span> rightBox <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 设置背景图片</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        frontBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token string\">'url(./img/'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        leftBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token string\">'url(./img/'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        rightBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token string\">'url(./img/'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">var</span> shell <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">var</span> slider <span class=\"token operator\">=</span> shell<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell_slider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> shell<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">var</span> prevBtn <span class=\"token operator\">=</span> shell<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prev'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">var</span> nextBtn <span class=\"token operator\">=</span> shell<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 定义变量</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">var</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> totalWidth<span class=\"token punctuation\">,</span> margin <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            currIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            interval<span class=\"token punctuation\">,</span> intervalTime <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function\">bindEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 窗口大小变化时调整大小</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            width <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">*</span> <span class=\"token number\">.20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">275</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            height <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">*</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            totalWidth <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 设置 slider 宽度</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            slider<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> totalWidth <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">// 设置每个 item 的宽度和高度</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                item<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>margin <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                item<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">bindEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 窗口大小变化时调整大小</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            window<span class=\"token punctuation\">.</span>onresize <span class=\"token operator\">=</span> resize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 点击 prev 按钮切换 item</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            prevBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            nextBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// 移动 shell 到指定的 item</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> index <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            currIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 遍历所有 item</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    box <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token comment\">// 当前 item 添加 active 类并设置 3D 效果</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    item<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item--active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"perspective(1200px)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token comment\">// 其他 item 移除 active 类并设置 3D 效果</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    item<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item--active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"perspective(1200px) rotateY(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">40</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"deg)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">// 移动 slider</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            slider<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"translate3d(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">*</span> <span class=\"token operator\">-</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px, 0, 0)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\">// 设置 body 背景图片</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">var</span> frontBox <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> frontBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">// 定时器，自动切换 shell</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>currIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> intervalTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">// 切换 item</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>currIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>currIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 VScode 中新建.html 文件将以上代码段依次粘贴进去就完成了！不要忘记把 img 文件夹放在同级根目录下，使用到的图片都要以 01.jpg,02.jpg……10.jpg 形式命名哦，图片分辨率建议 1200*560px~</p>\n","length":10457,"excerpt":"","more":"<h2 id=\"htmlcssjs实现轮播时间轴\"><a class=\"anchor\" href=\"#htmlcssjs实现轮播时间轴\">#</a> HTML+CSS+JS 实现轮播时间轴</h2>\n<h3 id=\"实现效果\"><a class=\"anchor\" href=\"#实现效果\">#</a> 实现效果</h3>\n<!-- ![.jpg](https://s2.loli.net/2024/07/22/tcLQMhDmexXEV3f.jpg) -->\n<p><img data-src=\"https://s2.loli.net/2024/07/22/ob2vlAkLZIBVfrp.jpg\" alt=\"02.jpg\" /></p>\n<p><img data-src=\"https://s2.loli.net/2024/07/22/rQmCVYOZi9KXnk8.jpg\" alt=\"01.jpg\" /></p>\n<h3 id=\"css部分\"><a class=\"anchor\" href=\"#css部分\">#</a> CSS 部分</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>轮播时间轴<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://static.fontawesome.com/css/fontawesome-app.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入字体图标 --></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./font/iconfont.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 引入字体 --></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400&amp;display=swap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Source Sans Pro\"</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* 设置 html 和 body 元素为 flex 布局，水平和垂直居中对齐，高度为 100vh，背景图大小为 cover，溢出隐藏，背景图过渡动画时间为 0.7 秒 */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token selector\">html,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> background-image .7s ease-in-out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">/* 设置.shell 元素为相对定位，flex 布局，水平和垂直居中对齐，宽度和高度为 100%，盒模型为 border-box，背景颜色为 rgba (99, 99, 99, 0.8) */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token selector\">.shell</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>99<span class=\"token punctuation\">,</span> 99<span class=\"token punctuation\">,</span> 99<span class=\"token punctuation\">,</span> 0.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token comment\">/* 设置.button 元素为 flex 布局，两端对齐，宽度为 380px，绝对定位，左侧偏移量为 50%，水平居中，底部偏移量为 - 80px */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token selector\">.button</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 380px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> -80px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token comment\">/* 设置.prev 和.next 元素过渡动画时间为 0.25 秒，层级为 99999，底部偏移量为 5px */</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token selector\">.prev,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        .next</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> transform 0.25s ease<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 99999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token comment\">/* 设置.prev 和.next 元素中的 i 元素字体大小为 90px，颜色为 #fff，光标为指针，文字阴影为 0 0 10px #ffffff */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token selector\">.prev i,</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        .next i</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 90px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 0 0 10px #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token comment\">/* 设置.shell_body 元素宽度为 100%，缩放为 0.8 倍，上内边距为 20px，下内边距为 150px */</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token selector\">.shell_body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>.8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px 0 150px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token comment\">/* 设置.shell_slider 元素为相对定位，过渡动画时间为 1 秒，背景为透明 */</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token selector\">.shell_slider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> transform 1s ease-in-out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>        <span class=\"token comment\">/* 设置.item 元素为相对定位，左浮动，左右外边距为 20px */</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>        <span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            <span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token comment\">/* 设置.frame 元素为相对定位，宽度和高度为 100%，过渡动画时间为 1 秒，3D 变换模式为保留 3D 效果 */</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>        <span class=\"token selector\">.frame</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> transform 1s ease-in-out<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>            <span class=\"token property\">transform-style</span><span class=\"token punctuation\">:</span> preserve-3d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token comment\">/* 设置.frame 元素的伪元素为绝对定位，底部偏移量为 - 16%，宽度为 100%，高度为 60px，背景颜色为 #ffffff1c，盒阴影为 0px 0px 15px 5px #ffffff1c，3D 变换为绕 X 轴旋转 90 度并向上平移 20px */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token selector\">.frame:after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> -16%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #ffffff1c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0px 0px 15px 5px #ffffff1c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateX</span><span class=\"token punctuation\">(</span>90deg<span class=\"token punctuation\">)</span> <span class=\"token function\">translate3d</span><span class=\"token punctuation\">(</span>0px<span class=\"token punctuation\">,</span> -20px<span class=\"token punctuation\">,</span> 0px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre></pre></td></tr><tr><td data-num=\"115\"></td><td><pre>        <span class=\"token comment\">/* 设置.box 元素为 flex 布局，纵向排列，水平和垂直居中对齐，绝对定位，宽度和高度为 100%，边框为 4px 实心白色，透视效果为 1000px，3D 变换模式为保留 3D 效果 */</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>        <span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 4px solid #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token property\">perspective</span><span class=\"token punctuation\">:</span> 1000px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>            <span class=\"token property\">transform-style</span><span class=\"token punctuation\">:</span> preserve-3d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>        <span class=\"token comment\">/* 设置.box 元素中的 h1 和 span 元素颜色为 #fff，Z 轴平移距离为 20px */</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre>        <span class=\"token selector\">.box h1,</pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        .box span</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateZ</span><span class=\"token punctuation\">(</span>20px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>        <span class=\"token comment\">/* 设置.box 元素中的 h1 元素文字阴影为 0 0 30px #1f05b4，字体大小为 100px */</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>        <span class=\"token selector\">.box h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 0 0 30px #1f05b4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token comment\">/* 设置.box 元素中的 span 元素为绝对定位，底部偏移量为 20px，左右内边距为 25px，文字阴影为 0 0 10px #1f05b4 */</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token selector\">.box span</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 0 0 10px #1f05b4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>        <span class=\"token comment\">/* 设置.front、.left 和.right 元素的盒阴影为 0 0 50px #ffffff，背景图大小为 cover */</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>        <span class=\"token selector\">.front,</pre></td></tr><tr><td data-num=\"152\"></td><td><pre>        .left,</pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        .right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 50px #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>        <span class=\"token comment\">/* 设置.left 和.right 元素的顶部偏移量为 0，宽度为 60px，背面不可见 */</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>        <span class=\"token selector\">.right,</pre></td></tr><tr><td data-num=\"160\"></td><td><pre>        .left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 60px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>            <span class=\"token property\">backface-visibility</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>        <span class=\"token comment\">/* 设置.left 元素的左侧偏移量为 0，左边框宽度为 5px，3D 变换为向右平移 1px，Z 轴平移 - 60px，绕 Y 轴逆时针旋转 90 度，变换原点为左侧 */</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>        <span class=\"token selector\">.left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>            <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>            <span class=\"token property\">border-left-width</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate3d</span><span class=\"token punctuation\">(</span>1px<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> -60px<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>-90deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>            <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> 0%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>        <span class=\"token comment\">/* 设置.right 元素的右侧偏移量为 0，右边框宽度为 5px，3D 变换为向左平移 1px，Z 轴平移 - 60px，绕 Y 轴顺时针旋转 90 度，变换原点为右侧 */</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre>        <span class=\"token selector\">.right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre>            <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"177\"></td><td><pre>            <span class=\"token property\">border-right-width</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate3d</span><span class=\"token punctuation\">(</span>-1px<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> -60px<span class=\"token punctuation\">)</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>90deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre>            <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"html部分\"><a class=\"anchor\" href=\"#html部分\">#</a> HTML 部分</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shell<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shell_body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iconfont icon-backward_filled<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>next<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>iconfont icon-forward_filled<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shell_slider<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2014<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2014 I reached the age of 13-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2015<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2015 I reached the age of 14-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2016<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2016 I reached the age of 15-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2017<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2017 I reached the age of 16-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2018<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2018 I reached the age of 17-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2019<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2019 I reached the age of 18-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2020 I reached the age of 18-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2021<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2021 I reached the age of 19-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2022<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2022 I reached the age of 20-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>item<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>frame<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box front<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>2023<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>-In the year 2023 I reached the age of 21-<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box left<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>box right<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"js部分\"><a class=\"anchor\" href=\"#js部分\">#</a> JS 部分</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 这段 JavaScript 代码的作用是实现一个图片轮播效果。首先，通过 document.getElementsByClassName ('item') 获取到所有具有 item 类名的元素，并将它们存储在 items 变量中。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 然后，通过一个循环遍历每个 item 元素。在循环中，首先获取当前的 item 元素，然后通过 getElementsByClassName 方法获取到该 item 下的 frame、front、left 和 right 元素，并将它们分别存储在 frame、frontBox、leftBox 和 rightBox 变量中。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 接下来，通过设置 frontBox、leftBox 和 rightBox 的 style.backgroundImage 属性，将背景图片设置为 'url (./img/' + (i + 1).toString ().padStart (2, '0') + '.jpg)'，其中 (i + 1).toString ().padStart (2, '0') 表示将循环变量 i 加 1 后转换为字符串，并在前面补 0，以保证图片的文件名格式正确。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 接着，定义了一个立即执行函数，并在函数内部进行了一些操作。首先，通过 document.getElementsByClassName ('shell')[0] 获取到具有 shell 类名的元素，并将其存储在 shell 变量中。然后，通过 shell.getElementsByClassName 方法获取到该 shell 元素下的 shell_slider、item、prev 和 next 元素，并将它们分别存储在 slider、items、prevBtn 和 nextBtn 变量中。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 接下来，定义了一些变量，包括 width、height、totalWidth、margin、currIndex、interval 和 intervalTime。width 和 height 分别表示每个 item 的宽度和高度，totalWidth 表示所有 item 的总宽度，margin 表示 item 的外边距，currIndex 表示当前显示的 item 的索引，interval 表示定时器的 ID，intervalTime 表示定时器的时间间隔。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 然后，定义了 init 函数，该函数用于初始化一些操作。在该函数中，首先调用 resize 函数调整大小，然后调用 move 函数将显示的 item 移动到中间位置，接着调用 bindEvents 函数绑定事件，最后调用 timer 函数启动定时器。</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 接着，定义了 resize 函数，该函数用于在窗口大小变化时调整大小。在该函数中，首先计算出新的 width 和 height，然后根据计算结果设置 slider 的宽度，以及每个 item 的宽度和高度。</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 接下来，定义了 bindEvents 函数，该函数用于绑定事件。在该函数中，首先绑定了窗口大小变化时调用 resize 函数的事件，然后绑定了点击 prev 按钮和 next 按钮时调用 prev 函数和 next 函数的事件。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 最后，在立即执行函数的末尾，调用了 init 函数来初始化页面，并定义了 move、timer、prev 和 next 函数。其中，move 函数用于移动 shell 到指定的 item，timer 函数用于启动定时器，prev 函数用于切换到上一个 item，next 函数用于切换到下一个 item。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 获取所有的 item 元素</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 循环遍历每个 item</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 获取当前 item</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">var</span> item <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">var</span> frame <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">var</span> frontBox <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">var</span> leftBox <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'left'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">var</span> rightBox <span class=\"token operator\">=</span> frame<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'right'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 设置背景图片</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        frontBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token string\">'url(./img/'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        leftBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token string\">'url(./img/'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        rightBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> <span class=\"token string\">'url(./img/'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.jpg)'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">var</span> shell <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">var</span> slider <span class=\"token operator\">=</span> shell<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'shell_slider'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">var</span> items <span class=\"token operator\">=</span> shell<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">var</span> prevBtn <span class=\"token operator\">=</span> shell<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'prev'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">var</span> nextBtn <span class=\"token operator\">=</span> shell<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 定义变量</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">var</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span> totalWidth<span class=\"token punctuation\">,</span> margin <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            currIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            interval<span class=\"token punctuation\">,</span> intervalTime <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 初始化函数</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token function\">bindEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">resize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token comment\">// 窗口大小变化时调整大小</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            width <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">*</span> <span class=\"token number\">.20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">275</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            height <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>innerHeight <span class=\"token operator\">*</span> <span class=\"token number\">.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            totalWidth <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token comment\">// 设置 slider 宽度</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            slider<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> totalWidth <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token comment\">// 设置每个 item 的宽度和高度</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                item<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>margin <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                item<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height <span class=\"token operator\">+</span> <span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">bindEvents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">// 窗口大小变化时调整大小</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            window<span class=\"token punctuation\">.</span>onresize <span class=\"token operator\">=</span> resize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token comment\">// 点击 prev 按钮切换 item</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>            prevBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>            nextBtn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token comment\">// 移动 shell 到指定的 item</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> index <span class=\"token operator\">=</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">></span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> index <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            currIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token comment\">// 遍历所有 item</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> items<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>                    box <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'frame'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                    <span class=\"token comment\">// 当前 item 添加 active 类并设置 3D 效果</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                    item<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item--active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>                    box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"perspective(1200px)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                    <span class=\"token comment\">// 其他 item 移除 active 类并设置 3D 效果</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>                    item<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'item--active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                    box<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"perspective(1200px) rotateY(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">40</span> <span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"deg)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token comment\">// 移动 slider</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            slider<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token string\">\"translate3d(\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">*</span> <span class=\"token operator\">-</span>width<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>width <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> window<span class=\"token punctuation\">.</span>innerWidth <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"px, 0, 0)\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token comment\">// 设置 body 背景图片</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>            <span class=\"token keyword\">var</span> frontBox <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>            document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage <span class=\"token operator\">=</span> frontBox<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>backgroundImage<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token comment\">// 定时器，自动切换 shell</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>interval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            interval <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>                <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>currIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> intervalTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>        <span class=\"token comment\">// 切换 item</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">prev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>currIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>        <span class=\"token keyword\">function</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>currIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>            <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在 VScode 中新建.html 文件将以上代码段依次粘贴进去就完成了！不要忘记把 img 文件夹放在同级根目录下，使用到的图片都要以 01.jpg,02.jpg……10.jpg 形式命名哦，图片分辨率建议 1200*560px~</p>\n"},{"title":"前端学习记录--简约唯美登录页面","date":"2024-07-25T06:52:31.000Z","_content":"## HTML+CSS+JS 实现登陆页面\n\n### 实现效果\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/25/7jQYHauL64X9Zxr.jpg\">\n</div>\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/25/QnJmxGzdCVOX4LK.jpg\">\n</div>\n<br>\n\n### 实现代码\n\n``` html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>log & register</title>\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n            transition: .3s;\n        }\n\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-image: url(login/04.jpg);\n            background-size: cover;\n        }\n\n        .shell {\n            width: 350px;\n            padding: 40px;\n            display: flex;\n            align-items: center;\n            flex-direction: column;\n            background-color: #ffffff49;\n            border-radius: 50px;\n            box-shadow: 0 0 30px rgba(255, 255, 255, 0.5) inset;\n            transform: translateY(-50px);\n        }\n\n        .title {\n            font-size: 80px;\n            margin-bottom: 30px;\n            color: #fff;\n            text-shadow: 0 0 10px #ff9dff80;\n        }\n\n        input[type=\"text\"],\n        input[type=\"password\"] {\n            width: 100%;\n            height: 50px;\n            margin: 10px 0;\n            box-sizing: border-box;\n            color: rgb(0, 0, 0);\n            border: 5px solid transparent;\n            background: rgba(255, 255, 255, .5);\n            border-radius: 100px;\n            padding: 5px 20px 0 20px;\n            transition: 0.3s;\n            font-size: 18px;\n            outline: none\n        }\n\n        input[type=\"text\"]:hover,\n        input[type=\"password\"]:hover {\n            background: rgba(255, 255, 255, 0);\n            border: 5px solid #ffffff;\n        }\n\n        input[type=\"submit\"] {\n            width: 100%;\n            height: 50px;\n            padding: 10px;\n            margin: 15px 0;\n            border-radius: 100px;\n            border: none;\n            background-color: #007bff;\n            color: #fff;\n            cursor: pointer;\n            font-size: 20px;\n            letter-spacing: 3px;\n        }\n\n        input::placeholder {\n            color: #92A7E8;\n        }\n\n        .footer {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            width: 100%;\n            margin-top: 20px;\n        }\n\n        .Remember {\n            opacity: 1;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 18px;\n            color: #7597ff;\n        }\n\n        input[type=\"checkbox\"] {\n            display: block;\n            width: 25px;\n            height: 25px;\n            margin-right: 10px;\n            background-color: #007bff;\n        }\n\n        #Password {\n            border: none;\n            background-color: #ffffff00;\n            color: #7597ff;\n            font-size: 18px;\n        }\n    </style>\n</head>\n\n<body>\n\n    <div class=\"shell\">\n        <h2 class=\"title\">Login</h2>\n        <input type=\"text\" id=\"username\" placeholder=\"Username\">\n        <input type=\"password\" id=\"password\" placeholder=\"Password\">\n        <input type=\"submit\" value=\"Login\" id=\"loginBtn\">\n        <div class=\"footer\">\n            <div class=\"Remember\">\n                <input type=\"checkbox\" id=\"rememberMe\">\n                <label for=\"rememberMe\">记住我</label>\n            </div>\n            <button id=\"Password\">去注册</button>\n\n        </div>\n    </div>\n\n</body>\n\n<script>\n\n    document.getElementById('Password').addEventListener('click', function () {\n        var title = document.querySelector('.title');\n        var loginBtn = document.getElementById('loginBtn');\n        var rememberMeLabel = document.querySelector('.Remember');\n        var passwordBtn = document.getElementById('Password');\n        if (title.innerText === 'Login') {\n            title.innerText = 'Register';\n            loginBtn.value = 'Register';\n            rememberMeLabel.style.opacity = '0';\n            passwordBtn.innerText = '去登录';\n            document.getElementById('username').value = '';\n            document.getElementById('password').value = '';\n            document.getElementById('username').placeholder = 'New Username';\n            document.getElementById('password').placeholder = 'New Password';\n            document.getElementById('password').type = 'password';\n        } else {\n            title.innerText = 'Login';\n            loginBtn.value = 'Login';\n            rememberMeLabel.style.opacity = '1';\n            passwordBtn.innerText = '去注册';\n            document.getElementById('username').placeholder = 'Username';\n            document.getElementById('password').placeholder = 'Password';\n            document.getElementById('password').type = 'password';\n        }\n\n    });\n\n</script>\n\n</html>\n\n```\n","source":"_posts/前端学习记录-简约唯美登录页面.md","raw":"---\ntitle: 前端学习记录--简约唯美登录页面\ndate: 2024-07-25 14:52:31\ncategories:\n- [前端开发]\ntags:\n- [前端]\n---\n## HTML+CSS+JS 实现登陆页面\n\n### 实现效果\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/25/7jQYHauL64X9Zxr.jpg\">\n</div>\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/25/QnJmxGzdCVOX4LK.jpg\">\n</div>\n<br>\n\n### 实现代码\n\n``` html\n\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>log & register</title>\n    <style>\n        * {\n            padding: 0;\n            margin: 0;\n            transition: .3s;\n        }\n\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-image: url(login/04.jpg);\n            background-size: cover;\n        }\n\n        .shell {\n            width: 350px;\n            padding: 40px;\n            display: flex;\n            align-items: center;\n            flex-direction: column;\n            background-color: #ffffff49;\n            border-radius: 50px;\n            box-shadow: 0 0 30px rgba(255, 255, 255, 0.5) inset;\n            transform: translateY(-50px);\n        }\n\n        .title {\n            font-size: 80px;\n            margin-bottom: 30px;\n            color: #fff;\n            text-shadow: 0 0 10px #ff9dff80;\n        }\n\n        input[type=\"text\"],\n        input[type=\"password\"] {\n            width: 100%;\n            height: 50px;\n            margin: 10px 0;\n            box-sizing: border-box;\n            color: rgb(0, 0, 0);\n            border: 5px solid transparent;\n            background: rgba(255, 255, 255, .5);\n            border-radius: 100px;\n            padding: 5px 20px 0 20px;\n            transition: 0.3s;\n            font-size: 18px;\n            outline: none\n        }\n\n        input[type=\"text\"]:hover,\n        input[type=\"password\"]:hover {\n            background: rgba(255, 255, 255, 0);\n            border: 5px solid #ffffff;\n        }\n\n        input[type=\"submit\"] {\n            width: 100%;\n            height: 50px;\n            padding: 10px;\n            margin: 15px 0;\n            border-radius: 100px;\n            border: none;\n            background-color: #007bff;\n            color: #fff;\n            cursor: pointer;\n            font-size: 20px;\n            letter-spacing: 3px;\n        }\n\n        input::placeholder {\n            color: #92A7E8;\n        }\n\n        .footer {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            width: 100%;\n            margin-top: 20px;\n        }\n\n        .Remember {\n            opacity: 1;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            font-size: 18px;\n            color: #7597ff;\n        }\n\n        input[type=\"checkbox\"] {\n            display: block;\n            width: 25px;\n            height: 25px;\n            margin-right: 10px;\n            background-color: #007bff;\n        }\n\n        #Password {\n            border: none;\n            background-color: #ffffff00;\n            color: #7597ff;\n            font-size: 18px;\n        }\n    </style>\n</head>\n\n<body>\n\n    <div class=\"shell\">\n        <h2 class=\"title\">Login</h2>\n        <input type=\"text\" id=\"username\" placeholder=\"Username\">\n        <input type=\"password\" id=\"password\" placeholder=\"Password\">\n        <input type=\"submit\" value=\"Login\" id=\"loginBtn\">\n        <div class=\"footer\">\n            <div class=\"Remember\">\n                <input type=\"checkbox\" id=\"rememberMe\">\n                <label for=\"rememberMe\">记住我</label>\n            </div>\n            <button id=\"Password\">去注册</button>\n\n        </div>\n    </div>\n\n</body>\n\n<script>\n\n    document.getElementById('Password').addEventListener('click', function () {\n        var title = document.querySelector('.title');\n        var loginBtn = document.getElementById('loginBtn');\n        var rememberMeLabel = document.querySelector('.Remember');\n        var passwordBtn = document.getElementById('Password');\n        if (title.innerText === 'Login') {\n            title.innerText = 'Register';\n            loginBtn.value = 'Register';\n            rememberMeLabel.style.opacity = '0';\n            passwordBtn.innerText = '去登录';\n            document.getElementById('username').value = '';\n            document.getElementById('password').value = '';\n            document.getElementById('username').placeholder = 'New Username';\n            document.getElementById('password').placeholder = 'New Password';\n            document.getElementById('password').type = 'password';\n        } else {\n            title.innerText = 'Login';\n            loginBtn.value = 'Login';\n            rememberMeLabel.style.opacity = '1';\n            passwordBtn.innerText = '去注册';\n            document.getElementById('username').placeholder = 'Username';\n            document.getElementById('password').placeholder = 'Password';\n            document.getElementById('password').type = 'password';\n        }\n\n    });\n\n</script>\n\n</html>\n\n```\n","slug":"前端学习记录-简约唯美登录页面","published":1,"updated":"2024-12-27T14:40:17.457Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfi0021mcuy36l03nwh","content":"<h2 id=\"htmlcssjs-实现登陆页面\"><a class=\"anchor\" href=\"#htmlcssjs-实现登陆页面\">#</a> HTML+CSS+JS 实现登陆页面</h2>\n<h3 id=\"实现效果\"><a class=\"anchor\" href=\"#实现效果\">#</a> 实现效果</h3>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/25/7jQYHauL64X9Zxr.jpg\">\n</div>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/25/QnJmxGzdCVOX4LK.jpg\">\n</div>\n<br>\n<h3 id=\"实现代码\"><a class=\"anchor\" href=\"#实现代码\">#</a> 实现代码</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>log &amp; register<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> .3s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>login/04.jpg<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token selector\">.shell</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 350px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffffff49<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 30px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 0.5<span class=\"token punctuation\">)</span> inset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span>-50px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 0 0 10px #ff9dff80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token selector\">input[type=\"text\"],</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        input[type=\"password\"]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px 20px 0 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> 0.3s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token selector\">input[type=\"text\"]:hover,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        input[type=\"password\"]:hover</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token selector\">input[type=\"submit\"]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 15px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #007bff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token property\">letter-spacing</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token selector\">input::placeholder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #92A7E8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token selector\">.footer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token selector\">.Remember</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #7597ff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token selector\">input[type=\"checkbox\"]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #007bff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token selector\">#Password</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffffff00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #7597ff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shell<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loginBtn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Remember<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rememberMe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rememberMe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>记住我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>去注册<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">var</span> loginBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loginBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">var</span> rememberMeLabel <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.Remember'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">var</span> passwordBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">===</span> <span class=\"token string\">'Login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            title<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'Register'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            loginBtn<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'Register'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            rememberMeLabel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            passwordBtn<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'去登录'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'New Username'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'New Password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            title<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'Login'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            loginBtn<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'Login'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            rememberMeLabel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            passwordBtn<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'去注册'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'Username'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'Password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>","length":3248,"excerpt":"","more":"<h2 id=\"htmlcssjs-实现登陆页面\"><a class=\"anchor\" href=\"#htmlcssjs-实现登陆页面\">#</a> HTML+CSS+JS 实现登陆页面</h2>\n<h3 id=\"实现效果\"><a class=\"anchor\" href=\"#实现效果\">#</a> 实现效果</h3>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/25/7jQYHauL64X9Zxr.jpg\">\n</div>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/25/QnJmxGzdCVOX4LK.jpg\">\n</div>\n<br>\n<h3 id=\"实现代码\"><a class=\"anchor\" href=\"#实现代码\">#</a> 实现代码</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>log &amp; register<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">*</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> .3s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>login/04.jpg<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token selector\">.shell</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 350px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 40px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffffff49<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 0 30px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 0.5<span class=\"token punctuation\">)</span> inset<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span>-50px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token property\">text-shadow</span><span class=\"token punctuation\">:</span> 0 0 10px #ff9dff80<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token selector\">input[type=\"text\"],</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        input[type=\"password\"]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px 20px 0 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> 0.3s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token selector\">input[type=\"text\"]:hover,</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        input[type=\"password\"]:hover</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 255<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 5px solid #ffffff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token selector\">input[type=\"submit\"]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>            <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 15px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #007bff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>            <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>            <span class=\"token property\">letter-spacing</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token selector\">input::placeholder</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #92A7E8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token selector\">.footer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>            <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>        <span class=\"token selector\">.Remember</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>            <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>            <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #7597ff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>        <span class=\"token selector\">input[type=\"checkbox\"]</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>            <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #007bff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>        <span class=\"token selector\">#Password</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ffffff00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #7597ff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre>            <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 18px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shell<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Login<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>username<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Username<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Login<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loginBtn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Remember<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rememberMe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"127\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rememberMe<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>记住我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>去注册<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre></pre></td></tr><tr><td data-num=\"131\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"137\"></td><td><pre></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>        <span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>        <span class=\"token keyword\">var</span> loginBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'loginBtn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>        <span class=\"token keyword\">var</span> rememberMeLabel <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.Remember'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>        <span class=\"token keyword\">var</span> passwordBtn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">===</span> <span class=\"token string\">'Login'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>            title<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'Register'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>            loginBtn<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'Register'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>            rememberMeLabel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>            passwordBtn<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'去登录'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'New Username'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'New Password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"154\"></td><td><pre>            title<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'Login'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>            loginBtn<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'Login'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre>            rememberMeLabel<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre>            passwordBtn<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'去注册'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'Username'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>placeholder <span class=\"token operator\">=</span> <span class=\"token string\">'Password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>            document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre></pre></td></tr><tr><td data-num=\"165\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre></pre></td></tr><tr><td data-num=\"167\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure>"},{"title":"前端学习记录--翻页漫画书","date":"2024-07-22T09:13:26.000Z","_content":"## HTML+CSS实现翻页漫画书\n\n### 实现效果\n\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/22/5KvzZjfMINHPYEd.jpg\" >\n</div>\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/22/dP1krSF7WbeZpGx.jpg\" >\n</div>\n\n### 实现代码\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>翻页漫画</title>\n    <style>\n        body {\n            background-color: #9980FA;\n            display: flex;\n            justify-content: center;\n        }\n\n        .a {\n            width: 270px;\n            height: 420px;\n            position: absolute;\n            top: 150px;\n            transform-style: preserve-3d;\n            perspective: 1000px;\n            transition: .8s;\n        }\n\n        .b,\n        .c,\n        .d,\n        .e,\n        .f {\n            width: 270px;\n            height: 400px;\n            position: absolute;\n            /* 这是翻页的起点，在左边 */\n            transform-origin: left;\n            background-size: cover;\n            /* 这是翻页时元素之间的延迟 */\n            transition: calc(var(--i)*.3s);\n            /* 这是翻页时元素的层级 */\n            z-index: calc(var(--i)*99);\n        }\n\n        .b,\n        .c {\n            border: solid 20px #576574;\n            border-left: none;\n            top: -20px;\n            border-radius: 0 20px 20px 0;\n        }\n\n        .a:hover .b {\n            border-left: #576574 20px solid;\n        }\n\n        .a:hover .c,\n        .a:hover .d,\n        .a:hover .e,\n        .a:hover .f {\n            transform: rotateY(-180deg);\n            /* 此时翻页的顺序会倒过来，所以我们的延迟和层级也要反一下 */\n            transition: calc(var(--s)*.4s);\n            z-index: calc(var(--s)*-99);\n        }\n\n        .a:hover {\n            transform: translateX(100px);\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"a\">\n        <div class=\"b\" style=\"--i:2;background-image: url(fymh/1.gif);\"></div>\n        <div class=\"c\" style=\"--i:4;--s:1; background-image: url(fymh/2.gif);\"></div>\n        <div class=\"d\" style=\"--i:3;--s:2; background-image: url(fymh/3.gif);\"></div>\n        <div class=\"e\" style=\"--i:2;--s:3; background-image: url(fymh/4.gif);\"></div>\n        <div class=\"f\" style=\"--i:1;--s:4; background-image: url(fymh/5.gif);\"></div>\n    </div>\n    <!-- <div>A Boy and Cat</div> -->\n</body>\n\n</html>\n```\n\n### 画外音\n有时粘贴本地图片使用本地相对地址因为某种不明原因无法显示出来，如博文最开头的效果图，此处采用图片的https地址。","source":"_posts/前端学习记录-翻页漫画书.md","raw":"---\ntitle: 前端学习记录--翻页漫画书\ndate: 2024-07-22 17:13:26\ncategories:\n- [前端开发]\ntags:\n- [前端]\n---\n## HTML+CSS实现翻页漫画书\n\n### 实现效果\n\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/22/5KvzZjfMINHPYEd.jpg\" >\n</div>\n<br>\n<div align=center>\n    <img src=\"https://s2.loli.net/2024/07/22/dP1krSF7WbeZpGx.jpg\" >\n</div>\n\n### 实现代码\n\n``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>翻页漫画</title>\n    <style>\n        body {\n            background-color: #9980FA;\n            display: flex;\n            justify-content: center;\n        }\n\n        .a {\n            width: 270px;\n            height: 420px;\n            position: absolute;\n            top: 150px;\n            transform-style: preserve-3d;\n            perspective: 1000px;\n            transition: .8s;\n        }\n\n        .b,\n        .c,\n        .d,\n        .e,\n        .f {\n            width: 270px;\n            height: 400px;\n            position: absolute;\n            /* 这是翻页的起点，在左边 */\n            transform-origin: left;\n            background-size: cover;\n            /* 这是翻页时元素之间的延迟 */\n            transition: calc(var(--i)*.3s);\n            /* 这是翻页时元素的层级 */\n            z-index: calc(var(--i)*99);\n        }\n\n        .b,\n        .c {\n            border: solid 20px #576574;\n            border-left: none;\n            top: -20px;\n            border-radius: 0 20px 20px 0;\n        }\n\n        .a:hover .b {\n            border-left: #576574 20px solid;\n        }\n\n        .a:hover .c,\n        .a:hover .d,\n        .a:hover .e,\n        .a:hover .f {\n            transform: rotateY(-180deg);\n            /* 此时翻页的顺序会倒过来，所以我们的延迟和层级也要反一下 */\n            transition: calc(var(--s)*.4s);\n            z-index: calc(var(--s)*-99);\n        }\n\n        .a:hover {\n            transform: translateX(100px);\n        }\n    </style>\n</head>\n\n<body>\n    <div class=\"a\">\n        <div class=\"b\" style=\"--i:2;background-image: url(fymh/1.gif);\"></div>\n        <div class=\"c\" style=\"--i:4;--s:1; background-image: url(fymh/2.gif);\"></div>\n        <div class=\"d\" style=\"--i:3;--s:2; background-image: url(fymh/3.gif);\"></div>\n        <div class=\"e\" style=\"--i:2;--s:3; background-image: url(fymh/4.gif);\"></div>\n        <div class=\"f\" style=\"--i:1;--s:4; background-image: url(fymh/5.gif);\"></div>\n    </div>\n    <!-- <div>A Boy and Cat</div> -->\n</body>\n\n</html>\n```\n\n### 画外音\n有时粘贴本地图片使用本地相对地址因为某种不明原因无法显示出来，如博文最开头的效果图，此处采用图片的https地址。","slug":"前端学习记录-翻页漫画书","published":1,"updated":"2024-12-27T14:40:06.243Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfj0024mcuy0nzcemtu","content":"<h2 id=\"htmlcss实现翻页漫画书\"><a class=\"anchor\" href=\"#htmlcss实现翻页漫画书\">#</a> HTML+CSS 实现翻页漫画书</h2>\n<h3 id=\"实现效果\"><a class=\"anchor\" href=\"#实现效果\">#</a> 实现效果</h3>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/22/5KvzZjfMINHPYEd.jpg\" >\n</div>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/22/dP1krSF7WbeZpGx.jpg\" >\n</div>\n<h3 id=\"实现代码\"><a class=\"anchor\" href=\"#实现代码\">#</a> 实现代码</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>翻页漫画<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #9980FA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token selector\">.a</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 270px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 420px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token property\">transform-style</span><span class=\"token punctuation\">:</span> preserve-3d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token property\">perspective</span><span class=\"token punctuation\">:</span> 1000px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> .8s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token selector\">.b,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        .c,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        .d,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        .e,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        .f</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 270px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">/* 这是翻页的起点，在左边 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">/* 这是翻页时元素之间的延迟 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--i<span class=\"token punctuation\">)</span>*.3s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">/* 这是翻页时元素的层级 */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--i<span class=\"token punctuation\">)</span>*99<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token selector\">.b,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        .c</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> solid 20px #576574<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 20px 20px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token selector\">.a:hover .b</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> #576574 20px solid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token selector\">.a:hover .c,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        .a:hover .d,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        .a:hover .e,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        .a:hover .f</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>-180deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">/* 此时翻页的顺序会倒过来，所以我们的延迟和层级也要反一下 */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--s<span class=\"token punctuation\">)</span>*.4s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--s<span class=\"token punctuation\">)</span>*-99<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token selector\">.a:hover</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>2<span class=\"token punctuation\">;</span><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/1.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>4<span class=\"token punctuation\">;</span><span class=\"token property\">--s</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/2.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>d<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>3<span class=\"token punctuation\">;</span><span class=\"token property\">--s</span><span class=\"token punctuation\">:</span>2<span class=\"token punctuation\">;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/3.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>e<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>2<span class=\"token punctuation\">;</span><span class=\"token property\">--s</span><span class=\"token punctuation\">:</span>3<span class=\"token punctuation\">;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/4.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span><span class=\"token property\">--s</span><span class=\"token punctuation\">:</span>4<span class=\"token punctuation\">;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/5.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">&lt;!-- &lt;div>A Boy and Cat&lt;/div> --></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"画外音\"><a class=\"anchor\" href=\"#画外音\">#</a> 画外音</h3>\n<p>有时粘贴本地图片使用本地相对地址因为某种不明原因无法显示出来，如博文最开头的效果图，此处采用图片的 https 地址。</p>\n","length":1599,"excerpt":"","more":"<h2 id=\"htmlcss实现翻页漫画书\"><a class=\"anchor\" href=\"#htmlcss实现翻页漫画书\">#</a> HTML+CSS 实现翻页漫画书</h2>\n<h3 id=\"实现效果\"><a class=\"anchor\" href=\"#实现效果\">#</a> 实现效果</h3>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/22/5KvzZjfMINHPYEd.jpg\" >\n</div>\n<br>\n<div align=center>\n    <img data-src=\"https://s2.loli.net/2024/07/22/dP1krSF7WbeZpGx.jpg\" >\n</div>\n<h3 id=\"实现代码\"><a class=\"anchor\" href=\"#实现代码\">#</a> 实现代码</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>翻页漫画<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #9980FA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token selector\">.a</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 270px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 420px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token property\">transform-style</span><span class=\"token punctuation\">:</span> preserve-3d<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token property\">perspective</span><span class=\"token punctuation\">:</span> 1000px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> .8s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token selector\">.b,</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        .c,</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        .d,</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        .e,</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        .f</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 270px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">/* 这是翻页的起点，在左边 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">transform-origin</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">/* 这是翻页时元素之间的延迟 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--i<span class=\"token punctuation\">)</span>*.3s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">/* 这是翻页时元素的层级 */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--i<span class=\"token punctuation\">)</span>*99<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token selector\">.b,</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        .c</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> solid 20px #576574<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> -20px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 0 20px 20px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token selector\">.a:hover .b</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token property\">border-left</span><span class=\"token punctuation\">:</span> #576574 20px solid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token selector\">.a:hover .c,</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        .a:hover .d,</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        .a:hover .e,</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        .a:hover .f</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">rotateY</span><span class=\"token punctuation\">(</span>-180deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token comment\">/* 此时翻页的顺序会倒过来，所以我们的延迟和层级也要反一下 */</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token property\">transition</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--s<span class=\"token punctuation\">)</span>*.4s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>            <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--s<span class=\"token punctuation\">)</span>*-99<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token selector\">.a:hover</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>            <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translateX</span><span class=\"token punctuation\">(</span>100px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>2<span class=\"token punctuation\">;</span><span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/1.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>c<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>4<span class=\"token punctuation\">;</span><span class=\"token property\">--s</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/2.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>d<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>3<span class=\"token punctuation\">;</span><span class=\"token property\">--s</span><span class=\"token punctuation\">:</span>2<span class=\"token punctuation\">;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/3.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>e<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>2<span class=\"token punctuation\">;</span><span class=\"token property\">--s</span><span class=\"token punctuation\">:</span>3<span class=\"token punctuation\">;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/4.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>f<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--i</span><span class=\"token punctuation\">:</span>1<span class=\"token punctuation\">;</span><span class=\"token property\">--s</span><span class=\"token punctuation\">:</span>4<span class=\"token punctuation\">;</span> <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>fymh/5.gif<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token comment\">&lt;!-- &lt;div>A Boy and Cat&lt;/div> --></span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"画外音\"><a class=\"anchor\" href=\"#画外音\">#</a> 画外音</h3>\n<p>有时粘贴本地图片使用本地相对地址因为某种不明原因无法显示出来，如博文最开头的效果图，此处采用图片的 https 地址。</p>\n"},{"title":"前端编程语言","date":"2024-08-17T08:09:47.000Z","_content":"\n## 编程语言、ES标准、JS引擎和运行时\n\nJavaScript是前端使用频率最高的编程语言，用它配合HTML和CSS足以构建出一个完整的Web应用\n\n但是在现代前端，除了JS还会涉及到许多别的编程语言，它们各有所长\n<br>\n<div align=\"center\">\n    <img src=\"前端编程语言/01.jpg\">\n</div>\n<br>\n\n我们经常提到ES6，它的全称是ECMAScript 6或是ECMAScript 2015，它是一套文档，规范了脚本语言的设计，包括语法、数据类型、内置对象等等，而JS则是遵循这套规范的编程语言之一，ES规范确保了无论在何处使用JS，它的写法和行为都应该是一致的。\n\nES规范每年引入一些新特性，从ES2015的let/const、箭头函数，到ES2024的Object.groupBy，已经加入了非常多实用的功能。\n\n借助于现代前端工具链的转义和polyfills的等效实现，你可以在不支持这些新特性的环境中使用它们。\n\nTypeScript是JavaScript的超集，正如其名，它的核心特性是类型系统。\n\n类型系统有许多优势，即便没有写TypeScript，你依然在享受类型系统带来的便利，比如VSCocde提供的类型提示就是基于TypeScript类型的。\n\nTypeScript最终依然会编译到JavaScript，但在大型前端应用中，TypeScript的类型检查可以使许多常见错误暴露于编译阶段，从而减少运行时错误，极大地提升了代码的健壮性和可维护性，因此，使用TypeScript开发高质量前端应用几乎是必须的。\n\n近些年Rust在前端发展十分迅猛，它正在占领前端工具链生态，比较典型的案例有：对标Babel的SWC、对标Webpack的Rspack、Farm，Next.js的Turbopack等都是基于Rust语言编写的，这里最根本的原因是前端项目的体量越来越庞大，构建性能已经成为瓶颈，传统的打包优化方案已经无法进一步提升性能，因此需要借助性能更强的编程语言，它就是Rust。\n\nRust:兼顾性能、安全和稳定的现代编程语言。与其说Rust占领了前端基建，不如说它是好刀用到了刀刃上。\n\nWebAssembly简称Wasm，最早用于在浏览器中处理计算密集型任务，而到了现代，它已然成为一套完整的应用运行生态。它通常不由人直接编写，而是系统语言C/C++/Go和Rust的编译目标之一。\n\nWasm Runtime的出现使其能在非浏览器环境中运行，比如我们可以直接在Node.js中运行Wasm。\n\nWebAssembly System Interface（WASI）API，又为Wasm提供了访问系统功能的能力，比如文件系统和网络等。\n\nWasm在Web开发中有着广泛的应用，除了满足重度计算需求外，它还应用于跨平台开发、安全沙箱、容器和虚拟化技术。\n\n你也许使用过在浏览器中打开的云IDE，它就是Wasm落地应用的集大成者，还有一类编程语言称之为领域特定语言（DSL），它通常是某个现有语言基础上，增加一定约束和扩展，应用于某个特定场景。\n\n比如我们在微信小程序中编写的WXML、在React中编写的JSX、在Vue中编写的Template等等，它们都统称领域特定语言。领域特定语言并不是通用型语言，但相比通用型语言，它的语法更简单、开发效率更高、专业对口业务、可维护性强。\n\n你写的代码要运行，自然离不开JS引擎和JS运行时，JS引擎负责代码解析、编译、执行和优化，而JS运行时不仅自带一个JS引擎，还提供了一组环境相关的API，比如服务端的Node.js，是基于V8的运行时，而Bun则是基于JavaScriptCore的运行时，它们提供了不同的API。\n\n比如同样是打开文件，Node.js是fs.open()，而Bun则是Bun.file()，再比如Chrome浏览器提供了基于V8引擎的运行时，而Safari浏览器提供了基于JavaScriptCore引擎的运行时，它们都提供了Web API，但实现上有着细微差异。这也是客户端代码容易产生兼容性问题的根本原因。\n\n又比如Next.js提供的边缘运行时，不支持Node.js API;\n而Cloudflare云服务的边缘环境则支持有限的Node.js API，因此，前端开发者需要分清楚自己的代码会在什么样的运行时中运行，我们已经知道Node.js是最常用的JS运行时，但在企业级的大型Node.js应用中，仅仅用它还是不够的。大型Node.js应用，还会考虑性能监控、安全提醒、故障排除、性能优化等问题，比如阿里云前端基建团队的Node.js性能平台（前身叫alinode），就在Node.js的基础上增加了这些功能，提供了一整套解决方案。","source":"_posts/前端编程语言.md","raw":"---\ntitle: 前端编程语言\ndate: 2024-08-17 16:09:47\ncategories:\n- [前端开发]\ntags:\n- [前端]\n---\n\n## 编程语言、ES标准、JS引擎和运行时\n\nJavaScript是前端使用频率最高的编程语言，用它配合HTML和CSS足以构建出一个完整的Web应用\n\n但是在现代前端，除了JS还会涉及到许多别的编程语言，它们各有所长\n<br>\n<div align=\"center\">\n    <img src=\"前端编程语言/01.jpg\">\n</div>\n<br>\n\n我们经常提到ES6，它的全称是ECMAScript 6或是ECMAScript 2015，它是一套文档，规范了脚本语言的设计，包括语法、数据类型、内置对象等等，而JS则是遵循这套规范的编程语言之一，ES规范确保了无论在何处使用JS，它的写法和行为都应该是一致的。\n\nES规范每年引入一些新特性，从ES2015的let/const、箭头函数，到ES2024的Object.groupBy，已经加入了非常多实用的功能。\n\n借助于现代前端工具链的转义和polyfills的等效实现，你可以在不支持这些新特性的环境中使用它们。\n\nTypeScript是JavaScript的超集，正如其名，它的核心特性是类型系统。\n\n类型系统有许多优势，即便没有写TypeScript，你依然在享受类型系统带来的便利，比如VSCocde提供的类型提示就是基于TypeScript类型的。\n\nTypeScript最终依然会编译到JavaScript，但在大型前端应用中，TypeScript的类型检查可以使许多常见错误暴露于编译阶段，从而减少运行时错误，极大地提升了代码的健壮性和可维护性，因此，使用TypeScript开发高质量前端应用几乎是必须的。\n\n近些年Rust在前端发展十分迅猛，它正在占领前端工具链生态，比较典型的案例有：对标Babel的SWC、对标Webpack的Rspack、Farm，Next.js的Turbopack等都是基于Rust语言编写的，这里最根本的原因是前端项目的体量越来越庞大，构建性能已经成为瓶颈，传统的打包优化方案已经无法进一步提升性能，因此需要借助性能更强的编程语言，它就是Rust。\n\nRust:兼顾性能、安全和稳定的现代编程语言。与其说Rust占领了前端基建，不如说它是好刀用到了刀刃上。\n\nWebAssembly简称Wasm，最早用于在浏览器中处理计算密集型任务，而到了现代，它已然成为一套完整的应用运行生态。它通常不由人直接编写，而是系统语言C/C++/Go和Rust的编译目标之一。\n\nWasm Runtime的出现使其能在非浏览器环境中运行，比如我们可以直接在Node.js中运行Wasm。\n\nWebAssembly System Interface（WASI）API，又为Wasm提供了访问系统功能的能力，比如文件系统和网络等。\n\nWasm在Web开发中有着广泛的应用，除了满足重度计算需求外，它还应用于跨平台开发、安全沙箱、容器和虚拟化技术。\n\n你也许使用过在浏览器中打开的云IDE，它就是Wasm落地应用的集大成者，还有一类编程语言称之为领域特定语言（DSL），它通常是某个现有语言基础上，增加一定约束和扩展，应用于某个特定场景。\n\n比如我们在微信小程序中编写的WXML、在React中编写的JSX、在Vue中编写的Template等等，它们都统称领域特定语言。领域特定语言并不是通用型语言，但相比通用型语言，它的语法更简单、开发效率更高、专业对口业务、可维护性强。\n\n你写的代码要运行，自然离不开JS引擎和JS运行时，JS引擎负责代码解析、编译、执行和优化，而JS运行时不仅自带一个JS引擎，还提供了一组环境相关的API，比如服务端的Node.js，是基于V8的运行时，而Bun则是基于JavaScriptCore的运行时，它们提供了不同的API。\n\n比如同样是打开文件，Node.js是fs.open()，而Bun则是Bun.file()，再比如Chrome浏览器提供了基于V8引擎的运行时，而Safari浏览器提供了基于JavaScriptCore引擎的运行时，它们都提供了Web API，但实现上有着细微差异。这也是客户端代码容易产生兼容性问题的根本原因。\n\n又比如Next.js提供的边缘运行时，不支持Node.js API;\n而Cloudflare云服务的边缘环境则支持有限的Node.js API，因此，前端开发者需要分清楚自己的代码会在什么样的运行时中运行，我们已经知道Node.js是最常用的JS运行时，但在企业级的大型Node.js应用中，仅仅用它还是不够的。大型Node.js应用，还会考虑性能监控、安全提醒、故障排除、性能优化等问题，比如阿里云前端基建团队的Node.js性能平台（前身叫alinode），就在Node.js的基础上增加了这些功能，提供了一整套解决方案。","slug":"前端编程语言","published":1,"updated":"2024-12-27T14:39:16.601Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfj0027mcuy17i92y3k","content":"<h2 id=\"编程语言-es标准-js引擎和运行时\"><a class=\"anchor\" href=\"#编程语言-es标准-js引擎和运行时\">#</a> 编程语言、ES 标准、JS 引擎和运行时</h2>\n<p>JavaScript 是前端使用频率最高的编程语言，用它配合 HTML 和 CSS 足以构建出一个完整的 Web 应用</p>\n<p>但是在现代前端，除了 JS 还会涉及到许多别的编程语言，它们各有所长<br />\n<br></p>\n<div align=\"center\">\n    <style>.kccyebblqemu{}</style><img data-src=\"/2024/08/17/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.jpg\" class=\"kccyebblqemu\">\n</div>\n<br>\n<p>我们经常提到 ES6，它的全称是 ECMAScript 6 或是 ECMAScript 2015，它是一套文档，规范了脚本语言的设计，包括语法、数据类型、内置对象等等，而 JS 则是遵循这套规范的编程语言之一，ES 规范确保了无论在何处使用 JS，它的写法和行为都应该是一致的。</p>\n<p>ES 规范每年引入一些新特性，从 ES2015 的 let/const、箭头函数，到 ES2024 的 Object.groupBy，已经加入了非常多实用的功能。</p>\n<p>借助于现代前端工具链的转义和 polyfills 的等效实现，你可以在不支持这些新特性的环境中使用它们。</p>\n<p>TypeScript 是 JavaScript 的超集，正如其名，它的核心特性是类型系统。</p>\n<p>类型系统有许多优势，即便没有写 TypeScript，你依然在享受类型系统带来的便利，比如 VSCocde 提供的类型提示就是基于 TypeScript 类型的。</p>\n<p>TypeScript 最终依然会编译到 JavaScript，但在大型前端应用中，TypeScript 的类型检查可以使许多常见错误暴露于编译阶段，从而减少运行时错误，极大地提升了代码的健壮性和可维护性，因此，使用 TypeScript 开发高质量前端应用几乎是必须的。</p>\n<p>近些年 Rust 在前端发展十分迅猛，它正在占领前端工具链生态，比较典型的案例有：对标 Babel 的 SWC、对标 Webpack 的 Rspack、Farm，Next.js 的 Turbopack 等都是基于 Rust 语言编写的，这里最根本的原因是前端项目的体量越来越庞大，构建性能已经成为瓶颈，传统的打包优化方案已经无法进一步提升性能，因此需要借助性能更强的编程语言，它就是 Rust。</p>\n<p>Rust: 兼顾性能、安全和稳定的现代编程语言。与其说 Rust 占领了前端基建，不如说它是好刀用到了刀刃上。</p>\n<p>WebAssembly 简称 Wasm，最早用于在浏览器中处理计算密集型任务，而到了现代，它已然成为一套完整的应用运行生态。它通常不由人直接编写，而是系统语言 C/C++/Go 和 Rust 的编译目标之一。</p>\n<p>Wasm Runtime 的出现使其能在非浏览器环境中运行，比如我们可以直接在 Node.js 中运行 Wasm。</p>\n<p>WebAssembly System Interface（WASI）API，又为 Wasm 提供了访问系统功能的能力，比如文件系统和网络等。</p>\n<p>Wasm 在 Web 开发中有着广泛的应用，除了满足重度计算需求外，它还应用于跨平台开发、安全沙箱、容器和虚拟化技术。</p>\n<p>你也许使用过在浏览器中打开的云 IDE，它就是 Wasm 落地应用的集大成者，还有一类编程语言称之为领域特定语言（DSL），它通常是某个现有语言基础上，增加一定约束和扩展，应用于某个特定场景。</p>\n<p>比如我们在微信小程序中编写的 WXML、在 React 中编写的 JSX、在 Vue 中编写的 Template 等等，它们都统称领域特定语言。领域特定语言并不是通用型语言，但相比通用型语言，它的语法更简单、开发效率更高、专业对口业务、可维护性强。</p>\n<p>你写的代码要运行，自然离不开 JS 引擎和 JS 运行时，JS 引擎负责代码解析、编译、执行和优化，而 JS 运行时不仅自带一个 JS 引擎，还提供了一组环境相关的 API，比如服务端的 Node.js，是基于 V8 的运行时，而 Bun 则是基于 JavaScriptCore 的运行时，它们提供了不同的 API。</p>\n<p>比如同样是打开文件，Node.js 是 fs.open ()，而 Bun 则是 Bun.file ()，再比如 Chrome 浏览器提供了基于 V8 引擎的运行时，而 Safari 浏览器提供了基于 JavaScriptCore 引擎的运行时，它们都提供了 Web API，但实现上有着细微差异。这也是客户端代码容易产生兼容性问题的根本原因。</p>\n<p>又比如 Next.js 提供的边缘运行时，不支持 Node.js API;<br />\n 而 Cloudflare 云服务的边缘环境则支持有限的 Node.js API，因此，前端开发者需要分清楚自己的代码会在什么样的运行时中运行，我们已经知道 Node.js 是最常用的 JS 运行时，但在企业级的大型 Node.js 应用中，仅仅用它还是不够的。大型 Node.js 应用，还会考虑性能监控、安全提醒、故障排除、性能优化等问题，比如阿里云前端基建团队的 Node.js 性能平台（前身叫 alinode），就在 Node.js 的基础上增加了这些功能，提供了一整套解决方案。</p>\n","length":1889,"excerpt":"","more":"<h2 id=\"编程语言-es标准-js引擎和运行时\"><a class=\"anchor\" href=\"#编程语言-es标准-js引擎和运行时\">#</a> 编程语言、ES 标准、JS 引擎和运行时</h2>\n<p>JavaScript 是前端使用频率最高的编程语言，用它配合 HTML 和 CSS 足以构建出一个完整的 Web 应用</p>\n<p>但是在现代前端，除了 JS 还会涉及到许多别的编程语言，它们各有所长<br />\n<br></p>\n<div align=\"center\">\n    <style>.kccyebblqemu{}</style><img data-src=\"/2024/08/17/%E5%89%8D%E7%AB%AF%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/01.jpg\" class=\"kccyebblqemu\">\n</div>\n<br>\n<p>我们经常提到 ES6，它的全称是 ECMAScript 6 或是 ECMAScript 2015，它是一套文档，规范了脚本语言的设计，包括语法、数据类型、内置对象等等，而 JS 则是遵循这套规范的编程语言之一，ES 规范确保了无论在何处使用 JS，它的写法和行为都应该是一致的。</p>\n<p>ES 规范每年引入一些新特性，从 ES2015 的 let/const、箭头函数，到 ES2024 的 Object.groupBy，已经加入了非常多实用的功能。</p>\n<p>借助于现代前端工具链的转义和 polyfills 的等效实现，你可以在不支持这些新特性的环境中使用它们。</p>\n<p>TypeScript 是 JavaScript 的超集，正如其名，它的核心特性是类型系统。</p>\n<p>类型系统有许多优势，即便没有写 TypeScript，你依然在享受类型系统带来的便利，比如 VSCocde 提供的类型提示就是基于 TypeScript 类型的。</p>\n<p>TypeScript 最终依然会编译到 JavaScript，但在大型前端应用中，TypeScript 的类型检查可以使许多常见错误暴露于编译阶段，从而减少运行时错误，极大地提升了代码的健壮性和可维护性，因此，使用 TypeScript 开发高质量前端应用几乎是必须的。</p>\n<p>近些年 Rust 在前端发展十分迅猛，它正在占领前端工具链生态，比较典型的案例有：对标 Babel 的 SWC、对标 Webpack 的 Rspack、Farm，Next.js 的 Turbopack 等都是基于 Rust 语言编写的，这里最根本的原因是前端项目的体量越来越庞大，构建性能已经成为瓶颈，传统的打包优化方案已经无法进一步提升性能，因此需要借助性能更强的编程语言，它就是 Rust。</p>\n<p>Rust: 兼顾性能、安全和稳定的现代编程语言。与其说 Rust 占领了前端基建，不如说它是好刀用到了刀刃上。</p>\n<p>WebAssembly 简称 Wasm，最早用于在浏览器中处理计算密集型任务，而到了现代，它已然成为一套完整的应用运行生态。它通常不由人直接编写，而是系统语言 C/C++/Go 和 Rust 的编译目标之一。</p>\n<p>Wasm Runtime 的出现使其能在非浏览器环境中运行，比如我们可以直接在 Node.js 中运行 Wasm。</p>\n<p>WebAssembly System Interface（WASI）API，又为 Wasm 提供了访问系统功能的能力，比如文件系统和网络等。</p>\n<p>Wasm 在 Web 开发中有着广泛的应用，除了满足重度计算需求外，它还应用于跨平台开发、安全沙箱、容器和虚拟化技术。</p>\n<p>你也许使用过在浏览器中打开的云 IDE，它就是 Wasm 落地应用的集大成者，还有一类编程语言称之为领域特定语言（DSL），它通常是某个现有语言基础上，增加一定约束和扩展，应用于某个特定场景。</p>\n<p>比如我们在微信小程序中编写的 WXML、在 React 中编写的 JSX、在 Vue 中编写的 Template 等等，它们都统称领域特定语言。领域特定语言并不是通用型语言，但相比通用型语言，它的语法更简单、开发效率更高、专业对口业务、可维护性强。</p>\n<p>你写的代码要运行，自然离不开 JS 引擎和 JS 运行时，JS 引擎负责代码解析、编译、执行和优化，而 JS 运行时不仅自带一个 JS 引擎，还提供了一组环境相关的 API，比如服务端的 Node.js，是基于 V8 的运行时，而 Bun 则是基于 JavaScriptCore 的运行时，它们提供了不同的 API。</p>\n<p>比如同样是打开文件，Node.js 是 fs.open ()，而 Bun 则是 Bun.file ()，再比如 Chrome 浏览器提供了基于 V8 引擎的运行时，而 Safari 浏览器提供了基于 JavaScriptCore 引擎的运行时，它们都提供了 Web API，但实现上有着细微差异。这也是客户端代码容易产生兼容性问题的根本原因。</p>\n<p>又比如 Next.js 提供的边缘运行时，不支持 Node.js API;<br />\n 而 Cloudflare 云服务的边缘环境则支持有限的 Node.js API，因此，前端开发者需要分清楚自己的代码会在什么样的运行时中运行，我们已经知道 Node.js 是最常用的 JS 运行时，但在企业级的大型 Node.js 应用中，仅仅用它还是不够的。大型 Node.js 应用，还会考虑性能监控、安全提醒、故障排除、性能优化等问题，比如阿里云前端基建团队的 Node.js 性能平台（前身叫 alinode），就在 Node.js 的基础上增加了这些功能，提供了一整套解决方案。</p>\n"},{"title":"基于Nodejs+vue3+uniapp的微信小程序全栈开发配置帖","date":"2025-01-20T13:00:56.000Z","_content":"\n### 基于vue框架+uniapp的微信小程序开发配置教程帖\n\n运行教程\n\n- 后端\n- 跨端启动\n- 小程序端\n\n\n\n#### 后端-基于Node.js，IDE：VScode\n\n配置数据库：\n\n数据库：MySQL、Redis\n\n数据库管理工具：SQLynx、TinyRDM\n\n\n\n配置大模型api：\n\n注册并配置智谱清言和阿里云实时语音识别产品的AccessKey和对应密钥\n\n\n\n安装依赖并运行：\n\n```bash\nnpm install \nnodemon app.js\n```\n\n得到如下输出说明启动成功：\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/01.png\">\n</div>\n\n\n\n\n\n#### 微信小程序端-微信公众平台、微信开发者工具\n\n注册微信小程序，配置appID和密钥；在阿里云创建智能语音交互项目，并将第三方服务器域名配置在微信小程序的服务器域名配置栏，同时配置图床url：\n\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/02.png\">\n</div>\n\n\n\n#### 跨端启动-HBuilderX\n\n将微信小程序端代码拖入HBuilderX，通过ipconfig查看自己的IPv4地址为项目配置baseURL\n\n通过uni-app实现跨端，在mainfest.json配置对应的微信小程序appID，选择运行到小程序模拟器-微信开发者工具，自动启动微信开发者工具编译项目。\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/03.png\">\n</div>\n\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/04.png\">\n</div>\n\n\n\n项目最终在微信开发者工具中呈现。\n\n注意：设置微信开发者工具为没有代理、开启服务端口；在右侧点击“详情”查看配置，在本地配置下勾选不校验合法域名；注意appID一定要和vscode以及HBuilderX中配置的appID是一致的。\n\n\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/05.png\">\n</div>\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/06.png\">\n</div>\n\n撒花！！！","source":"_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖.md","raw":"---\ntitle: 基于Nodejs+vue3+uniapp的微信小程序全栈开发配置帖\ndate: 2025-01-20 21:00:56\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n### 基于vue框架+uniapp的微信小程序开发配置教程帖\n\n运行教程\n\n- 后端\n- 跨端启动\n- 小程序端\n\n\n\n#### 后端-基于Node.js，IDE：VScode\n\n配置数据库：\n\n数据库：MySQL、Redis\n\n数据库管理工具：SQLynx、TinyRDM\n\n\n\n配置大模型api：\n\n注册并配置智谱清言和阿里云实时语音识别产品的AccessKey和对应密钥\n\n\n\n安装依赖并运行：\n\n```bash\nnpm install \nnodemon app.js\n```\n\n得到如下输出说明启动成功：\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/01.png\">\n</div>\n\n\n\n\n\n#### 微信小程序端-微信公众平台、微信开发者工具\n\n注册微信小程序，配置appID和密钥；在阿里云创建智能语音交互项目，并将第三方服务器域名配置在微信小程序的服务器域名配置栏，同时配置图床url：\n\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/02.png\">\n</div>\n\n\n\n#### 跨端启动-HBuilderX\n\n将微信小程序端代码拖入HBuilderX，通过ipconfig查看自己的IPv4地址为项目配置baseURL\n\n通过uni-app实现跨端，在mainfest.json配置对应的微信小程序appID，选择运行到小程序模拟器-微信开发者工具，自动启动微信开发者工具编译项目。\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/03.png\">\n</div>\n\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/04.png\">\n</div>\n\n\n\n项目最终在微信开发者工具中呈现。\n\n注意：设置微信开发者工具为没有代理、开启服务端口；在右侧点击“详情”查看配置，在本地配置下勾选不校验合法域名；注意appID一定要和vscode以及HBuilderX中配置的appID是一致的。\n\n\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/05.png\">\n</div>\n\n<div align=\"center\">\n    <img src=\"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/06.png\">\n</div>\n\n撒花！！！","slug":"基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖","published":1,"updated":"2025-01-20T13:10:35.073Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfj002amcuy0o5egnjg","content":"<h3 id=\"基于vue框架uniapp的微信小程序开发配置教程帖\"><a class=\"anchor\" href=\"#基于vue框架uniapp的微信小程序开发配置教程帖\">#</a> 基于 vue 框架 + uniapp 的微信小程序开发配置教程帖</h3>\n<p>运行教程</p>\n<ul>\n<li>后端</li>\n<li>跨端启动</li>\n<li>小程序端</li>\n</ul>\n<h4 id=\"后端-基于nodejsidevscode\"><a class=\"anchor\" href=\"#后端-基于nodejsidevscode\">#</a> 后端 - 基于 Node.js，IDE：VScode</h4>\n<p>配置数据库：</p>\n<p>数据库：MySQL、Redis</p>\n<p>数据库管理工具：SQLynx、TinyRDM</p>\n<p>配置大模型 api：</p>\n<p>注册并配置智谱清言和阿里云实时语音识别产品的 AccessKey 和对应密钥</p>\n<p>安装依赖并运行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nodemon app.js</pre></td></tr></table></figure><p>得到如下输出说明启动成功：</p>\n<div align=\"center\">\n    <style>.gbouwyhjvwjx{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/01.png\" class=\"gbouwyhjvwjx\">\n</div>\n<h4 id=\"微信小程序端-微信公众平台-微信开发者工具\"><a class=\"anchor\" href=\"#微信小程序端-微信公众平台-微信开发者工具\">#</a> 微信小程序端 - 微信公众平台、微信开发者工具</h4>\n<p>注册微信小程序，配置 appID 和密钥；在阿里云创建智能语音交互项目，并将第三方服务器域名配置在微信小程序的服务器域名配置栏，同时配置图床 url：</p>\n<div align=\"center\">\n    <style>.rnruwfwueyal{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/02.png\" class=\"rnruwfwueyal\">\n</div>\n<h4 id=\"跨端启动-hbuilderx\"><a class=\"anchor\" href=\"#跨端启动-hbuilderx\">#</a> 跨端启动 - HBuilderX</h4>\n<p>将微信小程序端代码拖入 HBuilderX，通过 ipconfig 查看自己的 IPv4 地址为项目配置 baseURL</p>\n<p>通过 uni-app 实现跨端，在 mainfest.json 配置对应的微信小程序 appID，选择运行到小程序模拟器 - 微信开发者工具，自动启动微信开发者工具编译项目。</p>\n<div align=\"center\">\n    <style>.yxegslxstpps{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/03.png\" class=\"yxegslxstpps\">\n</div>\n<div align=\"center\">\n    <style>.rizygcfjbfzi{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/04.png\" class=\"rizygcfjbfzi\">\n</div>\n<p>项目最终在微信开发者工具中呈现。</p>\n<p>注意：设置微信开发者工具为没有代理、开启服务端口；在右侧点击 “详情” 查看配置，在本地配置下勾选不校验合法域名；注意 appID 一定要和 vscode 以及 HBuilderX 中配置的 appID 是一致的。</p>\n<div align=\"center\">\n    <style>.xxplgueqwvvd{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/05.png\" class=\"xxplgueqwvvd\">\n</div>\n<div align=\"center\">\n    <style>.bpxbjpygfplu{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/06.png\" class=\"bpxbjpygfplu\">\n</div>\n<p>撒花！！！</p>\n","length":649,"excerpt":"","more":"<h3 id=\"基于vue框架uniapp的微信小程序开发配置教程帖\"><a class=\"anchor\" href=\"#基于vue框架uniapp的微信小程序开发配置教程帖\">#</a> 基于 vue 框架 + uniapp 的微信小程序开发配置教程帖</h3>\n<p>运行教程</p>\n<ul>\n<li>后端</li>\n<li>跨端启动</li>\n<li>小程序端</li>\n</ul>\n<h4 id=\"后端-基于nodejsidevscode\"><a class=\"anchor\" href=\"#后端-基于nodejsidevscode\">#</a> 后端 - 基于 Node.js，IDE：VScode</h4>\n<p>配置数据库：</p>\n<p>数据库：MySQL、Redis</p>\n<p>数据库管理工具：SQLynx、TinyRDM</p>\n<p>配置大模型 api：</p>\n<p>注册并配置智谱清言和阿里云实时语音识别产品的 AccessKey 和对应密钥</p>\n<p>安装依赖并运行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nodemon app.js</pre></td></tr></table></figure><p>得到如下输出说明启动成功：</p>\n<div align=\"center\">\n    <style>.gbouwyhjvwjx{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/01.png\" class=\"gbouwyhjvwjx\">\n</div>\n<h4 id=\"微信小程序端-微信公众平台-微信开发者工具\"><a class=\"anchor\" href=\"#微信小程序端-微信公众平台-微信开发者工具\">#</a> 微信小程序端 - 微信公众平台、微信开发者工具</h4>\n<p>注册微信小程序，配置 appID 和密钥；在阿里云创建智能语音交互项目，并将第三方服务器域名配置在微信小程序的服务器域名配置栏，同时配置图床 url：</p>\n<div align=\"center\">\n    <style>.rnruwfwueyal{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/02.png\" class=\"rnruwfwueyal\">\n</div>\n<h4 id=\"跨端启动-hbuilderx\"><a class=\"anchor\" href=\"#跨端启动-hbuilderx\">#</a> 跨端启动 - HBuilderX</h4>\n<p>将微信小程序端代码拖入 HBuilderX，通过 ipconfig 查看自己的 IPv4 地址为项目配置 baseURL</p>\n<p>通过 uni-app 实现跨端，在 mainfest.json 配置对应的微信小程序 appID，选择运行到小程序模拟器 - 微信开发者工具，自动启动微信开发者工具编译项目。</p>\n<div align=\"center\">\n    <style>.yxegslxstpps{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/03.png\" class=\"yxegslxstpps\">\n</div>\n<div align=\"center\">\n    <style>.rizygcfjbfzi{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/04.png\" class=\"rizygcfjbfzi\">\n</div>\n<p>项目最终在微信开发者工具中呈现。</p>\n<p>注意：设置微信开发者工具为没有代理、开启服务端口；在右侧点击 “详情” 查看配置，在本地配置下勾选不校验合法域名；注意 appID 一定要和 vscode 以及 HBuilderX 中配置的 appID 是一致的。</p>\n<div align=\"center\">\n    <style>.xxplgueqwvvd{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/05.png\" class=\"xxplgueqwvvd\">\n</div>\n<div align=\"center\">\n    <style>.bpxbjpygfplu{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/06.png\" class=\"bpxbjpygfplu\">\n</div>\n<p>撒花！！！</p>\n"},{"title":"前端学习汇总-计算机网络篇（二）","date":"2024-12-31T10:02:25.000Z","_content":"## 计算机网络知识总结篇：DNS协议介绍,网络模型,TCP/IP五层协议,TCP与UDP\n### 四、DNS协议介绍\n#### 1. DNS 协议是什么\n概念： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。\n作用： 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址。\n\n#### 2. DNS同时使用TCP和UDP协议？\nDNS占用53号端口，同时使用TCP和UDP协议。\n（1）在区域传输的时候使用TCP协议\n- 辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。\n- TCP是一种可靠连接，保证了数据的准确性。\n（2）在域名解析的时候使用UDP协议\n- 客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。\n\n#### 3. DNS完整的查询过程\nDNS服务器解析域名的过程：\n- 首先会在浏览器的缓存中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步\n- 将请求发送给本地DNS服务器，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步\n- 本地DNS服务器向根域名服务器发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址\n- 本地DNS服务器向顶级域名服务器发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址\n- 本地DNS服务器向权威域名服务器发送请求，域名服务器返回对应的结果\n- 本地DNS服务器将返回结果保存在缓存中，便于下次使用\n- 本地DNS服务器将返回结果返回给浏览器\n比如要查询 www.baidu.com 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地DNS服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。\n\n#### 4. 迭代查询与递归查询\n实际上，DNS解析是一个包含迭代查询和递归查询的过程。\n- 递归查询指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归查询，**用户只需要发出一次查询请求**。\n- 迭代查询指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，**用户需要发出多次的查询请求**。\n一般我们向本地 DNS 服务器发送请求的方式就是**递归查询**，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我们最终的请求结果。\n而本地 DNS 服务器向其他域名服务器请求的过程是**迭代查询**的过程，因为每一次域名服务器只返回单次查询的结果，下一级的查询由本地 DNS 服务器自己进行。\n\n#### 5. DNS 记录和报文\nDNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为\n\n``` javascript\n（Name，Value，Type，TTL）\n```\n\n其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。\n常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：\n- 如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。\n- 如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。\n- 如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。\n- 如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。\n\n### 五、网络模型\n\n#### 1. OSI七层模型\nISO为了更好的使网络应用更为普及，推出了OSI参考模型。\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/OSI七层模型.jpg\">\n</div>\n\n（1）应用层\nOSI参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。\n我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP等。\n- 在客户端与服务器中经常会有数据的请求，这个时候就是会用到http(hyper text transfer protocol)(超文本传输协议)或者https.在后端设计数据接口时，我们常常使用到这个协议。\n- FTP是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如百度网盘``迅雷应该是基于此协议的。\n- SMTP是simple mail transfer protocol（简单邮件传输协议）。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。\n\n（2）表示层\n表示层提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。\n如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。\n在项目开发中，为了方便数据传输，可以使用base64对数据进行编解码。如果按功能来划分，base64应该是工作在表示层。\n\n（3）会话层\n会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。\n\n（4）传输层\n传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP就是在这一层。端口号既是这里的“端”。\n\n（5）网络层\n本层通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的IP层。这一层就是我们经常说的IP协议层。IP协议是Internet的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。\n\n（6）数据链路层\n将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。\n\n（7）物理层\n实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。\n\nOSI七层模型通信特点：对等通信 对等通信，为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。\n\n#### 2. TCP/IP五层协议\nTCP/IP五层协议和OSI的七层协议对应关系如下：\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/TCP_IP_五层协议.jpg\">\n</div>\n\n- 应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP协议（万维网服务）、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）等。\n- 传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：\n 1. 传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；\n 2. 用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。\n - 网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。\n - 数据链路层 (data link layer)：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。\n - 物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。\n\n **从上图中可以看出，TCP/IP模型比OSI模型更加简洁，它把应用层/表示层/会话层全部整合为了应用层。**\n\n 在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/03.jpg\">\n</div>\n\n在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/04.jpg\">\n</div>\n\n同样，TCP/IP五层协议的通信方式也是对等通信：\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/05.jpg\">\n</div>\n\n### 六、TCP与UDP\n\n#### 1. TCP 和 UDP的概念及特点\nTCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：\n（1）UDP\nUDP的全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。\n\n它的特点如下：\n1）面向无连接\n首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\n具体来说就是：\n- 在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了\n- 在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\n\n2）有单播，多播，广播的功能\nUDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\n\n3）面向报文\n发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文\n\n4）不可靠性\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。\n再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\n\n5）头部开销小，传输数据报文时是很高效的。\nUDP 头部包含了以下几个数据：\n- 两个十六位的端口号，分别为源端口（可选字段）和目标端口\n- 整个数据报文的长度\n- 整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误\n因此 UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多，在传输数据报文时是很高效的。\n\n（2）TCP TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。\n\n它有以下几个特点：\n1）面向连接\n面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。\n2）仅支持单播传输\n每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。\n3）面向字节流\nTCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。\n4）可靠传输\n对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。\n5）提供拥塞控制\n当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。\n6）提供全双工通信\nTCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）\n\n#### 2. TCP和UDP的区别\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/06.jpg\">\n</div>\n\n#### 3. TCP和UDP的使用场景\n- TCP应用场景： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。\n- UDP应用场景： 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。\n\n#### 4. UDP协议为什么不可靠？\nUDP在传输数据之前不需要先建立连接，远地主机的运输层在接收到UDP报文后，不需要确认，提供不可靠交付。总结就以下四点：\n- 不保证消息交付：不确认，不重传，无超时\n- 不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞\n- 不跟踪连接状态：不必建立连接或重启状态机\n- 不进行拥塞控制：不内置客户端或网络反馈机制\n\n#### 5. TCP的重传机制\n由于TCP的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP协议提供可靠数据传输服务。为保证数据传输的正确性，TCP会重传其认为已丢失（包括报文中的比特错误）的包。TCP使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。\nTCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。\n\n#### 6. TCP的拥塞控制机制\nTCP的拥塞控制机制主要是以下四种机制：\n- 慢启动（慢开始）\n- 拥塞避免\n- 快速重传\n- 快速恢复\n\n（1）慢启动（慢开始）\n- 在开始发送的时候设置cwnd = 1（cwnd指的是拥塞窗口）\n- 思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。\n- 为了防止cwnd增长过大引起网络拥塞，设置一个慢开始门限(ssthresh 状态变量)\n1. 当cwnd < ssthresh 时，使用慢开始算法\n2. 当cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法\n3. 当cwnd > ssthresh 时，使用拥塞避免算法\n\n（2）拥塞避免\n- 拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。\n- 思路： 让拥塞窗口cwnd缓慢的增大，即每经过一个返回时间RTT就把发送方的拥塞控制窗口加一\n- 无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如图所示:\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/07.jpg\">\n</div>\n其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。\n\n（3）快速重传\n- 快重传要求接收方在收到一个失序的报文段后就立即发出重复确认(为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\n- 由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量\n\n（4）快速恢复\n- 当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。\n- 考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/08.jpg\">\n</div>\n\n#### 7. TCP的流量控制机制\n一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。\n- 当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。\n- 当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）\n- 如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。\n- 如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。\n\n#### 8. TCP的可靠传输机制\nTCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。\nTCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。\n\n接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。\n\n发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。\n\n但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。\n\n#### 9. TCP的三次握手和四次挥手\n（1）三次握手\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/09.jpg\">\n</div>\n（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n\n刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。\n- 第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。\n\n**首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。**\n\n- 第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。\n\n**在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y**\n\n- 第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。\n\n**确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。**\n\n那为什么要三次握手呢？两次不行吗？\n- 为了确认双方的接收能力和发送能力都正常\n- 如果是用两次握手，则会出现下面这种情况：\n\n**如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。**\n\n简单来说就是以下三步：\n- 第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。\n- 第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。\n- 第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\n\nTCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。\n\n（2）四次挥手\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/10.jpg\">\n</div>\n\n刚开始方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：\n- 第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。\n即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。\n\n- 第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。\n\n即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。\n\n- 第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。\n即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。\n\n- 第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。\n\n即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。\n\n那为什么需要四次挥手呢？\n因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四次挥手。\n\n简单来说就是以下四步：\n- 第一次挥手： 若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。\n- 第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。\n- 第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。\n- 第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。\n\nTCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。\n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。\n\n#### 10. TCP粘包是怎么回事，如何处理?\n默认情况下, TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们. 如果短时间有多个数据发送, 会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.\n如果是传输⽂件的话, 那么根本不⽤处理粘包的问题, 来⼀个包拼⼀个包就好了。但是如果是多条消息, 或者是别的⽤途的数据那么就需要处理粘包.\n下面看⼀个例⼦, 连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况:\nA. 先接收到 data1, 然后接收到 data2 .\nB. 先接收到 data1 的部分数据, 然后接收到 data1 余下的部分以及 data2 的全部.\nC. 先接收到了 data1 的全部数据和 data2 的部分数据, 然后接收到了 data2 的余下的数据.\nD. ⼀次性接收到了 data1 和 data2 的全部数据.\n\n其中的 BCD 就是我们常⻅的粘包的情况. ⽽对于处理粘包的问题, 常⻅的解决⽅案有:\n- 多次发送之前间隔⼀个等待时间：只需要等上⼀段时间再进⾏下⼀次 send 就好, 适⽤于交互频率特别低的场景. 缺点也很明显, 对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.\n- 关闭 Nagle 算法：关闭 Nagle 算法, 在 Node.js 中你可以通过 socket.setNoDelay() ⽅法来关闭 Nagle 算法, 让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩, 并且频率特别⾼的, 关闭 Nagle 纯属⾃废武功。另外, 该⽅法不适⽤于⽹络较差的情况, 因为 Nagle 算法是在服务端进⾏的包合并情况, 但是如果短时间内客户端的⽹络情况不好, 或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)\n- 进⾏封包/拆包： 封包/拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前, 于其前/后放⼀些有特征的数据, 然后收到数据的时 候根据特征数据分割出来各个数据包。\n\n#### 11. 为什么udp不会粘包？\n- TCP协议是⾯向**流**的协议，UDP是⾯向**消息**的协议。UDP段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据\n- UDP具有保护消息边界，在每个UDP包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包,如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。\n\n### 七、WebSocket\n#### 1. 对 WebSocket 的理解\nWebSocket是HTML5提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。\n\nWebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。\n\nWebSocket原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。\n​\n\nWebSocket 特点的如下：\n- 支持双向通信，实时性更强\n- 可以发送文本，也可以发送二进制数据‘’\n- 建立在TCP协议之上，服务端的实现比较容易\n- 数据格式比较轻量，性能开销小，通信高效\n- 没有同源限制，客户端可以与任意服务器通信\n- 协议标识符是ws（如果加密，则为wss），服务器网址就是 URL\n- 与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。\n\nWebsocket的使用方法如下：​\n\n在客户端中：\n\n``` javascript\n// 在index.html中直接写WebSocket，设置服务端的端口号为 9999\nlet ws = new WebSocket('ws://localhost:9999');\n// 在客户端与服务端建立连接后触发\nws.onopen = function() {\n    console.log(\"Connection open.\"); \n    ws.send('hello');\n};\n// 在服务端给客户端发来消息的时候触发\nws.onmessage = function(res) {\n    console.log(res);       // 打印的是MessageEvent对象\n    console.log(res.data);  // 打印的是收到的消息\n};\n// 在客户端与服务端建立关闭后触发\nws.onclose = function(evt) {\n  console.log(\"Connection closed.\");\n}; \n\n```\n\n#### 2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？\n\n短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。\n\n短轮询的基本思路： 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。\n\n长轮询的基本思路： 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。\n\nSSE 的基本思想： 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。\n\nWebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。\n\n上面的四个通信协议，前三个都是基于HTTP协议的。\n\n对于这四种即使通信协议，从性能的角度来看：\nWebSocket > 长连接（SEE） > 长轮询 > 短轮询\n但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：\n短轮询 > 长轮询 > 长连接（SEE） > WebSocket\n所以，还是要根据具体的使用场景来判断使用哪种方式。\n\n","source":"_posts/前端学习汇总-计算机网络篇（二）.md","raw":"---\ntitle: 前端学习汇总-计算机网络篇（二）\ndate: 2024-12-31 18:02:25\ncategories:\n- [计算机科学]\ntags:\n- [前端]\n---\n## 计算机网络知识总结篇：DNS协议介绍,网络模型,TCP/IP五层协议,TCP与UDP\n### 四、DNS协议介绍\n#### 1. DNS 协议是什么\n概念： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。\n作用： 将域名解析为IP地址，客户端向DNS服务器（DNS服务器有自己的IP地址）发送域名查询请求，DNS服务器告知客户机Web服务器的 IP 地址。\n\n#### 2. DNS同时使用TCP和UDP协议？\nDNS占用53号端口，同时使用TCP和UDP协议。\n（1）在区域传输的时候使用TCP协议\n- 辅域名服务器会定时（一般3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用TCP而不是UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。\n- TCP是一种可靠连接，保证了数据的准确性。\n（2）在域名解析的时候使用UDP协议\n- 客户端向DNS服务器查询域名，一般返回的内容都不超过512字节，用UDP传输即可。不用经过三次握手，这样DNS服务器负载更低，响应更快。理论上说，客户端也可以指定向DNS服务器查询时用TCP，但事实上，很多DNS服务器进行配置的时候，仅支持UDP查询包。\n\n#### 3. DNS完整的查询过程\nDNS服务器解析域名的过程：\n- 首先会在浏览器的缓存中查找对应的IP地址，如果查找到直接返回，若找不到继续下一步\n- 将请求发送给本地DNS服务器，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步\n- 本地DNS服务器向根域名服务器发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址\n- 本地DNS服务器向顶级域名服务器发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址\n- 本地DNS服务器向权威域名服务器发送请求，域名服务器返回对应的结果\n- 本地DNS服务器将返回结果保存在缓存中，便于下次使用\n- 本地DNS服务器将返回结果返回给浏览器\n比如要查询 www.baidu.com 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地DNS服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。\n\n#### 4. 迭代查询与递归查询\n实际上，DNS解析是一个包含迭代查询和递归查询的过程。\n- 递归查询指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归查询，**用户只需要发出一次查询请求**。\n- 迭代查询指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，**用户需要发出多次的查询请求**。\n一般我们向本地 DNS 服务器发送请求的方式就是**递归查询**，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我们最终的请求结果。\n而本地 DNS 服务器向其他域名服务器请求的过程是**迭代查询**的过程，因为每一次域名服务器只返回单次查询的结果，下一级的查询由本地 DNS 服务器自己进行。\n\n#### 5. DNS 记录和报文\nDNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为\n\n``` javascript\n（Name，Value，Type，TTL）\n```\n\n其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。\n常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：\n- 如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。\n- 如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。\n- 如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。\n- 如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。\n\n### 五、网络模型\n\n#### 1. OSI七层模型\nISO为了更好的使网络应用更为普及，推出了OSI参考模型。\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/OSI七层模型.jpg\">\n</div>\n\n（1）应用层\nOSI参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。\n我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP等。\n- 在客户端与服务器中经常会有数据的请求，这个时候就是会用到http(hyper text transfer protocol)(超文本传输协议)或者https.在后端设计数据接口时，我们常常使用到这个协议。\n- FTP是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如百度网盘``迅雷应该是基于此协议的。\n- SMTP是simple mail transfer protocol（简单邮件传输协议）。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。\n\n（2）表示层\n表示层提供各种用于应用层数据的编码和转换功能,确保一个系统的应用层发送的数据能被另一个系统的应用层识别。\n如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。\n在项目开发中，为了方便数据传输，可以使用base64对数据进行编解码。如果按功能来划分，base64应该是工作在表示层。\n\n（3）会话层\n会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。\n\n（4）传输层\n传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP就是在这一层。端口号既是这里的“端”。\n\n（5）网络层\n本层通过IP寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的IP层。这一层就是我们经常说的IP协议层。IP协议是Internet的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。\n\n（6）数据链路层\n将比特组合成字节,再将字节组合成帧,使用链路层地址 (以太网使用MAC地址)来访问介质,并进行差错检测。网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。\n\n（7）物理层\n实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。\n\nOSI七层模型通信特点：对等通信 对等通信，为了使数据分组从源传送到目的地，源端OSI模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。\n\n#### 2. TCP/IP五层协议\nTCP/IP五层协议和OSI的七层协议对应关系如下：\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/TCP_IP_五层协议.jpg\">\n</div>\n\n- 应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP协议（万维网服务）、FTP协议（文件传输）、SMTP协议（电子邮件）、DNS（域名查询）等。\n- 传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：\n 1. 传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；\n 2. 用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。\n - 网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。\n - 数据链路层 (data link layer)：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。\n - 物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。\n\n **从上图中可以看出，TCP/IP模型比OSI模型更加简洁，它把应用层/表示层/会话层全部整合为了应用层。**\n\n 在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/03.jpg\">\n</div>\n\n在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：\n\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/04.jpg\">\n</div>\n\n同样，TCP/IP五层协议的通信方式也是对等通信：\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/05.jpg\">\n</div>\n\n### 六、TCP与UDP\n\n#### 1. TCP 和 UDP的概念及特点\nTCP 和 UDP都是传输层协议，他们都属于TCP/IP协议族：\n（1）UDP\nUDP的全称是用户数据报协议，在网络中它与TCP协议一样用于处理数据包，是一种无连接的协议。在OSI模型中，在传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。\n\n它的特点如下：\n1）面向无连接\n首先 UDP 是不需要和 TCP一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。\n具体来说就是：\n- 在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了\n- 在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作\n\n2）有单播，多播，广播的功能\nUDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。\n\n3）面向报文\n发送方的UDP对应用程序交下来的报文，在添加首部后就向下交付IP层。UDP对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文\n\n4）不可靠性\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。\n再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。\n\n5）头部开销小，传输数据报文时是很高效的。\nUDP 头部包含了以下几个数据：\n- 两个十六位的端口号，分别为源端口（可选字段）和目标端口\n- 整个数据报文的长度\n- 整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误\n因此 UDP 的头部开销小，只有8字节，相比 TCP 的至少20字节要少得多，在传输数据报文时是很高效的。\n\n（2）TCP TCP的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。\n\n它有以下几个特点：\n1）面向连接\n面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是“三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。\n2）仅支持单播传输\n每条TCP传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。\n3）面向字节流\nTCP不像UDP一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。\n4）可靠传输\n对于可靠传输，判断丢包、误码靠的是TCP的段编号以及确认号。TCP为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认(ACK)；如果发送端实体在合理的往返时延(RTT)内未收到确认，那么对应的数据（假设丢失了）将会被重传。\n5）提供拥塞控制\n当网络出现拥塞的时候，TCP能够减小向网络注入数据的速率和数量，缓解拥塞。\n6）提供全双工通信\nTCP允许通信双方的应用程序在任何时候都能发送数据，因为TCP连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于MSS）\n\n#### 2. TCP和UDP的区别\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/06.jpg\">\n</div>\n\n#### 3. TCP和UDP的使用场景\n- TCP应用场景： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有UDP高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。\n- UDP应用场景： 效率要求相对高，对准确性要求相对低的场景。例如：QQ聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。\n\n#### 4. UDP协议为什么不可靠？\nUDP在传输数据之前不需要先建立连接，远地主机的运输层在接收到UDP报文后，不需要确认，提供不可靠交付。总结就以下四点：\n- 不保证消息交付：不确认，不重传，无超时\n- 不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞\n- 不跟踪连接状态：不必建立连接或重启状态机\n- 不进行拥塞控制：不内置客户端或网络反馈机制\n\n#### 5. TCP的重传机制\n由于TCP的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP协议提供可靠数据传输服务。为保证数据传输的正确性，TCP会重传其认为已丢失（包括报文中的比特错误）的包。TCP使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。\nTCP在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的ACK确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。\n\n#### 6. TCP的拥塞控制机制\nTCP的拥塞控制机制主要是以下四种机制：\n- 慢启动（慢开始）\n- 拥塞避免\n- 快速重传\n- 快速恢复\n\n（1）慢启动（慢开始）\n- 在开始发送的时候设置cwnd = 1（cwnd指的是拥塞窗口）\n- 思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。\n- 为了防止cwnd增长过大引起网络拥塞，设置一个慢开始门限(ssthresh 状态变量)\n1. 当cwnd < ssthresh 时，使用慢开始算法\n2. 当cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法\n3. 当cwnd > ssthresh 时，使用拥塞避免算法\n\n（2）拥塞避免\n- 拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。\n- 思路： 让拥塞窗口cwnd缓慢的增大，即每经过一个返回时间RTT就把发送方的拥塞控制窗口加一\n- 无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为1，执行慢开始算法。如图所示:\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/07.jpg\">\n</div>\n其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。\n\n（3）快速重传\n- 快重传要求接收方在收到一个失序的报文段后就立即发出重复确认(为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。\n- 由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量\n\n（4）快速恢复\n- 当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半。但是接下去并不执行慢开始算法。\n- 考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh的大小，然后执行拥塞避免算法。\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/08.jpg\">\n</div>\n\n#### 7. TCP的流量控制机制\n一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。\n- 当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。\n- 当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）\n- 如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。\n- 如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。\n\n#### 8. TCP的可靠传输机制\nTCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。\nTCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。\n\n接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。\n\n发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。\n\n但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。\n\n#### 9. TCP的三次握手和四次挥手\n（1）三次握手\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/09.jpg\">\n</div>\n（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n\n刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。\n- 第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。\n\n**首部的同步位SYN=1，初始序号seq=x，SYN=1的报文段不能携带数据，但要消耗掉一个序号。**\n\n- 第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。\n\n**在确认报文段中SYN=1，ACK=1，确认号ack=x+1，初始序号seq=y**\n\n- 第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。\n\n**确认报文段ACK=1，确认号ack=y+1，序号seq=x+1（初始为seq=x，第二个报文段所以要+1），ACK报文段可以携带数据，不携带数据则不消耗序号。**\n\n那为什么要三次握手呢？两次不行吗？\n- 为了确认双方的接收能力和发送能力都正常\n- 如果是用两次握手，则会出现下面这种情况：\n\n**如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。**\n\n简单来说就是以下三步：\n- 第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。\n- 第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。\n- 第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。\n\nTCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。\n\n（2）四次挥手\n<div align=\"center\">\n    <img src=\"前端学习汇总-计算机网络篇（二）/10.jpg\">\n</div>\n\n刚开始方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：\n- 第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。\n即发出连接释放报文段（FIN=1，序号seq=u），并停止再发送数据，主动关闭TCP连接，进入FIN_WAIT1（终止等待1）状态，等待服务端的确认。\n\n- 第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。\n\n即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号ack=u+1，序号seq=v），服务端进入CLOSE_WAIT（关闭等待）状态，此时的TCP处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入FIN_WAIT2（终止等待2）状态，等待服务端发出的连接释放报文段。\n\n- 第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。\n即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号seq=w，确认号ack=u+1），服务端进入LAST_ACK（最后确认）状态，等待客户端的确认。\n\n- 第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。\n\n即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入TIME_WAIT（时间等待）状态。此时TCP未释放掉，需要经过时间等待计时器设置的时间2MSL后，客户端才进入CLOSED状态。\n\n那为什么需要四次挥手呢？\n因为当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。但是关闭连接时，当服务端收到FIN报文时，很可能并不会立即关闭SOCKET，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送FIN报文，因此不能一起发送，故需要四次挥手。\n\n简单来说就是以下四步：\n- 第一次挥手： 若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。\n- 第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。\n- 第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。\n- 第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。\n\nTCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。\n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。\n\n#### 10. TCP粘包是怎么回事，如何处理?\n默认情况下, TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们. 如果短时间有多个数据发送, 会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.\n如果是传输⽂件的话, 那么根本不⽤处理粘包的问题, 来⼀个包拼⼀个包就好了。但是如果是多条消息, 或者是别的⽤途的数据那么就需要处理粘包.\n下面看⼀个例⼦, 连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况:\nA. 先接收到 data1, 然后接收到 data2 .\nB. 先接收到 data1 的部分数据, 然后接收到 data1 余下的部分以及 data2 的全部.\nC. 先接收到了 data1 的全部数据和 data2 的部分数据, 然后接收到了 data2 的余下的数据.\nD. ⼀次性接收到了 data1 和 data2 的全部数据.\n\n其中的 BCD 就是我们常⻅的粘包的情况. ⽽对于处理粘包的问题, 常⻅的解决⽅案有:\n- 多次发送之前间隔⼀个等待时间：只需要等上⼀段时间再进⾏下⼀次 send 就好, 适⽤于交互频率特别低的场景. 缺点也很明显, 对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.\n- 关闭 Nagle 算法：关闭 Nagle 算法, 在 Node.js 中你可以通过 socket.setNoDelay() ⽅法来关闭 Nagle 算法, 让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩, 并且频率特别⾼的, 关闭 Nagle 纯属⾃废武功。另外, 该⽅法不适⽤于⽹络较差的情况, 因为 Nagle 算法是在服务端进⾏的包合并情况, 但是如果短时间内客户端的⽹络情况不好, 或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)\n- 进⾏封包/拆包： 封包/拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前, 于其前/后放⼀些有特征的数据, 然后收到数据的时 候根据特征数据分割出来各个数据包。\n\n#### 11. 为什么udp不会粘包？\n- TCP协议是⾯向**流**的协议，UDP是⾯向**消息**的协议。UDP段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据\n- UDP具有保护消息边界，在每个UDP包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包,如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。\n\n### 七、WebSocket\n#### 1. 对 WebSocket 的理解\nWebSocket是HTML5提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于TCP传输协议，并复用HTTP的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。\n\nWebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。\n\nWebSocket原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有ID在接收者ID序列中的客户端才会处理这个事件。\n​\n\nWebSocket 特点的如下：\n- 支持双向通信，实时性更强\n- 可以发送文本，也可以发送二进制数据‘’\n- 建立在TCP协议之上，服务端的实现比较容易\n- 数据格式比较轻量，性能开销小，通信高效\n- 没有同源限制，客户端可以与任意服务器通信\n- 协议标识符是ws（如果加密，则为wss），服务器网址就是 URL\n- 与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。\n\nWebsocket的使用方法如下：​\n\n在客户端中：\n\n``` javascript\n// 在index.html中直接写WebSocket，设置服务端的端口号为 9999\nlet ws = new WebSocket('ws://localhost:9999');\n// 在客户端与服务端建立连接后触发\nws.onopen = function() {\n    console.log(\"Connection open.\"); \n    ws.send('hello');\n};\n// 在服务端给客户端发来消息的时候触发\nws.onmessage = function(res) {\n    console.log(res);       // 打印的是MessageEvent对象\n    console.log(res.data);  // 打印的是收到的消息\n};\n// 在客户端与服务端建立关闭后触发\nws.onclose = function(evt) {\n  console.log(\"Connection closed.\");\n}; \n\n```\n\n#### 2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？\n\n短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。\n\n短轮询的基本思路： 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。\n\n长轮询的基本思路： 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。\n\nSSE 的基本思想： 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。\n\nWebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。\n\n上面的四个通信协议，前三个都是基于HTTP协议的。\n\n对于这四种即使通信协议，从性能的角度来看：\nWebSocket > 长连接（SEE） > 长轮询 > 短轮询\n但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：\n短轮询 > 长轮询 > 长连接（SEE） > WebSocket\n所以，还是要根据具体的使用场景来判断使用哪种方式。\n\n","slug":"前端学习汇总-计算机网络篇（二）","published":1,"updated":"2025-01-01T08:42:04.252Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfk002dmcuy5wrh7p3t","content":"<h2 id=\"计算机网络知识总结篇dns协议介绍网络模型tcpip五层协议tcp与udp\"><a class=\"anchor\" href=\"#计算机网络知识总结篇dns协议介绍网络模型tcpip五层协议tcp与udp\">#</a> 计算机网络知识总结篇：DNS 协议介绍，网络模型，TCP/IP 五层协议，TCP 与 UDP</h2>\n<h3 id=\"四-dns协议介绍\"><a class=\"anchor\" href=\"#四-dns协议介绍\">#</a> 四、DNS 协议介绍</h3>\n<h4 id=\"1-dns-协议是什么\"><a class=\"anchor\" href=\"#1-dns-协议是什么\">#</a> 1. DNS 协议是什么</h4>\n<p>概念： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。<br />\n作用： 将域名解析为 IP 地址，客户端向 DNS 服务器（DNS 服务器有自己的 IP 地址）发送域名查询请求，DNS 服务器告知客户机 Web 服务器的 IP 地址。</p>\n<h4 id=\"2-dns同时使用tcp和udp协议\"><a class=\"anchor\" href=\"#2-dns同时使用tcp和udp协议\">#</a> 2. DNS 同时使用 TCP 和 UDP 协议？</h4>\n<p>DNS 占用 53 号端口，同时使用 TCP 和 UDP 协议。<br />\n（1）在区域传输的时候使用 TCP 协议</p>\n<ul>\n<li>辅域名服务器会定时（一般 3 小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用 TCP 而不是 UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</li>\n<li>TCP 是一种可靠连接，保证了数据的准确性。<br />\n（2）在域名解析的时候使用 UDP 协议</li>\n<li>客户端向 DNS 服务器查询域名，一般返回的内容都不超过 512 字节，用 UDP 传输即可。不用经过三次握手，这样 DNS 服务器负载更低，响应更快。理论上说，客户端也可以指定向 DNS 服务器查询时用 TCP，但事实上，很多 DNS 服务器进行配置的时候，仅支持 UDP 查询包。</li>\n</ul>\n<h4 id=\"3-dns完整的查询过程\"><a class=\"anchor\" href=\"#3-dns完整的查询过程\">#</a> 3. DNS 完整的查询过程</h4>\n<p>DNS 服务器解析域名的过程：</p>\n<ul>\n<li>首先会在浏览器的缓存中查找对应的 IP 地址，如果查找到直接返回，若找不到继续下一步</li>\n<li>将请求发送给本地 DNS 服务器，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</li>\n<li>本地 DNS 服务器向根域名服务器发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li>\n<li>本地 DNS 服务器向顶级域名服务器发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li>\n<li>本地 DNS 服务器向权威域名服务器发送请求，域名服务器返回对应的结果</li>\n<li>本地 DNS 服务器将返回结果保存在缓存中，便于下次使用</li>\n<li>本地 DNS 服务器将返回结果返回给浏览器<br />\n比如要查询 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span> 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地 DNS 服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。</li>\n</ul>\n<h4 id=\"4-迭代查询与递归查询\"><a class=\"anchor\" href=\"#4-迭代查询与递归查询\">#</a> 4. 迭代查询与递归查询</h4>\n<p>实际上，DNS 解析是一个包含迭代查询和递归查询的过程。</p>\n<ul>\n<li>递归查询指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归查询，<strong>用户只需要发出一次查询请求</strong>。</li>\n<li>迭代查询指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，<strong>用户需要发出多次的查询请求</strong>。<br />\n一般我们向本地 DNS 服务器发送请求的方式就是<strong>递归查询</strong>，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我们最终的请求结果。<br />\n而本地 DNS 服务器向其他域名服务器请求的过程是<strong>迭代查询</strong>的过程，因为每一次域名服务器只返回单次查询的结果，下一级的查询由本地 DNS 服务器自己进行。</li>\n</ul>\n<h4 id=\"5-dns-记录和报文\"><a class=\"anchor\" href=\"#5-dns-记录和报文\">#</a> 5. DNS 记录和报文</h4>\n<p>DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（Name，Value，Type，<span class=\"token constant\">TTL</span>）</pre></td></tr></table></figure><p>其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。<br />\n常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：</p>\n<ul>\n<li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li>\n<li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li>\n<li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li>\n<li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li>\n</ul>\n<h3 id=\"五-网络模型\"><a class=\"anchor\" href=\"#五-网络模型\">#</a> 五、网络模型</h3>\n<h4 id=\"1-osi七层模型\"><a class=\"anchor\" href=\"#1-osi七层模型\">#</a> 1. OSI 七层模型</h4>\n<p>ISO 为了更好的使网络应用更为普及，推出了 OSI 参考模型。</p>\n<div align=\"center\">\n    <style>.uwydkyqymsqb{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg\" class=\"uwydkyqymsqb\">\n</div>\n<p>（1）应用层<br />\n OSI 参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。<br />\n我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP 等。</p>\n<ul>\n<li>在客户端与服务器中经常会有数据的请求，这个时候就是会用到 http (hyper text transfer protocol)(超文本传输协议) 或者 https. 在后端设计数据接口时，我们常常使用到这个协议。</li>\n<li>FTP 是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如百度网盘 `` 迅雷应该是基于此协议的。</li>\n<li>SMTP 是 simple mail transfer protocol（简单邮件传输协议）。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。</li>\n</ul>\n<p>（2）表示层<br />\n表示层提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。<br />\n如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。<br />\n在项目开发中，为了方便数据传输，可以使用 base64 对数据进行编解码。如果按功能来划分，base64 应该是工作在表示层。</p>\n<p>（3）会话层<br />\n会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p>\n<p>（4）传输层<br />\n传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP 就是在这一层。端口号既是这里的 “端”。</p>\n<p>（5）网络层<br />\n本层通过 IP 寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的 IP 层。这一层就是我们经常说的 IP 协议层。IP 协议是 Internet 的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。</p>\n<p>（6）数据链路层<br />\n将比特组合成字节，再将字节组合成帧，使用链路层地址 (以太网使用 MAC 地址) 来访问介质，并进行差错检测。网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。</p>\n<p>（7）物理层<br />\n实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。</p>\n<p>OSI 七层模型通信特点：对等通信 对等通信，为了使数据分组从源传送到目的地，源端 OSI 模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。</p>\n<h4 id=\"2-tcpip五层协议\"><a class=\"anchor\" href=\"#2-tcpip五层协议\">#</a> 2. TCP/IP 五层协议</h4>\n<p>TCP/IP 五层协议和 OSI 的七层协议对应关系如下：</p>\n<div align=\"center\">\n    <style>.tnayuuqdofcu{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/TCP_IP_%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE.jpg\" class=\"tnayuuqdofcu\">\n</div>\n<ul>\n<li>应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP 协议（万维网服务）、FTP 协议（文件传输）、SMTP 协议（电子邮件）、DNS（域名查询）等。</li>\n<li>传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</li>\n</ul>\n<ol>\n<li>传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</li>\n<li>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</li>\n</ol>\n<ul>\n<li>网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。</li>\n<li>数据链路层 (data link layer)：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</li>\n<li>物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。</li>\n</ul>\n<p><strong>从上图中可以看出，TCP/IP 模型比 OSI 模型更加简洁，它把应用层 / 表示层 / 会话层全部整合为了应用层。</strong></p>\n<p>在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。</p>\n<div align=\"center\">\n    <style>.fpxvssuyvmlw{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/03.jpg\" class=\"fpxvssuyvmlw\">\n</div>\n<p>在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：</p>\n<div align=\"center\">\n    <style>.smeyvpxlrjmy{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/04.jpg\" class=\"smeyvpxlrjmy\">\n</div>\n<p>同样，TCP/IP 五层协议的通信方式也是对等通信：</p>\n<div align=\"center\">\n    <style>.ukmsivqwrrch{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/05.jpg\" class=\"ukmsivqwrrch\">\n</div>\n<h3 id=\"六-tcp与udp\"><a class=\"anchor\" href=\"#六-tcp与udp\">#</a> 六、TCP 与 UDP</h3>\n<h4 id=\"1-tcp-和-udp的概念及特点\"><a class=\"anchor\" href=\"#1-tcp-和-udp的概念及特点\">#</a> 1. TCP 和 UDP 的概念及特点</h4>\n<p>TCP 和 UDP 都是传输层协议，他们都属于 TCP/IP 协议族：<br />\n（1）UDP<br />\nUDP 的全称是用户数据报协议，在网络中它与 TCP 协议一样用于处理数据包，是一种无连接的协议。在 OSI 模型中，在传输层，处于 IP 协议的上一层。UDP 有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>\n<p>它的特点如下：<br />\n1）面向无连接<br />\n首先 UDP 是不需要和 TCP 一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。<br />\n具体来说就是：</p>\n<ul>\n<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>\n<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n<p>2）有单播，多播，广播的功能<br />\n UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>\n<p>3）面向报文<br />\n发送方的 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p>\n<p>4）不可靠性<br />\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。<br />\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。<br />\n再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n<p>5）头部开销小，传输数据报文时是很高效的。<br />\nUDP 头部包含了以下几个数据：</p>\n<ul>\n<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li>\n<li>整个数据报文的长度</li>\n<li>整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误<br />\n因此 UDP 的头部开销小，只有 8 字节，相比 TCP 的至少 20 字节要少得多，在传输数据报文时是很高效的。</li>\n</ul>\n<p>（2）TCP TCP 的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。</p>\n<p>它有以下几个特点：<br />\n1）面向连接<br />\n面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是 “三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。<br />\n2）仅支持单播传输<br />\n每条 TCP 传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。<br />\n3）面向字节流<br />\n TCP 不像 UDP 一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。<br />\n4）可靠传输<br />\n对于可靠传输，判断丢包、误码靠的是 TCP 的段编号以及确认号。TCP 为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认 (ACK)；如果发送端实体在合理的往返时延 (RTT) 内未收到确认，那么对应的数据（假设丢失了）将会被重传。<br />\n5）提供拥塞控制<br />\n当网络出现拥塞的时候，TCP 能够减小向网络注入数据的速率和数量，缓解拥塞。<br />\n6）提供全双工通信<br />\n TCP 允许通信双方的应用程序在任何时候都能发送数据，因为 TCP 连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP 可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于 MSS）</p>\n<h4 id=\"2-tcp和udp的区别\"><a class=\"anchor\" href=\"#2-tcp和udp的区别\">#</a> 2. TCP 和 UDP 的区别</h4>\n<div align=\"center\">\n    <style>.ccgdybcsqubp{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/06.jpg\" class=\"ccgdybcsqubp\">\n</div>\n<h4 id=\"3-tcp和udp的使用场景\"><a class=\"anchor\" href=\"#3-tcp和udp的使用场景\">#</a> 3. TCP 和 UDP 的使用场景</h4>\n<ul>\n<li>TCP 应用场景： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有 UDP 高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。</li>\n<li>UDP 应用场景： 效率要求相对高，对准确性要求相对低的场景。例如：QQ 聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。</li>\n</ul>\n<h4 id=\"4-udp协议为什么不可靠\"><a class=\"anchor\" href=\"#4-udp协议为什么不可靠\">#</a> 4. UDP 协议为什么不可靠？</h4>\n<p>UDP 在传输数据之前不需要先建立连接，远地主机的运输层在接收到 UDP 报文后，不需要确认，提供不可靠交付。总结就以下四点：</p>\n<ul>\n<li>不保证消息交付：不确认，不重传，无超时</li>\n<li>不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞</li>\n<li>不跟踪连接状态：不必建立连接或重启状态机</li>\n<li>不进行拥塞控制：不内置客户端或网络反馈机制</li>\n</ul>\n<h4 id=\"5-tcp的重传机制\"><a class=\"anchor\" href=\"#5-tcp的重传机制\">#</a> 5. TCP 的重传机制</h4>\n<p>由于 TCP 的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP 协议提供可靠数据传输服务。为保证数据传输的正确性，TCP 会重传其认为已丢失（包括报文中的比特错误）的包。TCP 使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。<br />\nTCP 在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的 ACK 确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。</p>\n<h4 id=\"6-tcp的拥塞控制机制\"><a class=\"anchor\" href=\"#6-tcp的拥塞控制机制\">#</a> 6. TCP 的拥塞控制机制</h4>\n<p>TCP 的拥塞控制机制主要是以下四种机制：</p>\n<ul>\n<li>慢启动（慢开始）</li>\n<li>拥塞避免</li>\n<li>快速重传</li>\n<li>快速恢复</li>\n</ul>\n<p>（1）慢启动（慢开始）</p>\n<ul>\n<li>在开始发送的时候设置 cwnd = 1（cwnd 指的是拥塞窗口）</li>\n<li>思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。</li>\n<li>为了防止 cwnd 增长过大引起网络拥塞，设置一个慢开始门限 (ssthresh 状态变量)</li>\n</ul>\n<ol>\n<li>当 cwnd &lt; ssthresh 时，使用慢开始算法</li>\n<li>当 cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法</li>\n<li>当 cwnd &gt; ssthresh 时，使用拥塞避免算法</li>\n</ol>\n<p>（2）拥塞避免</p>\n<ul>\n<li>拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。</li>\n<li>思路： 让拥塞窗口 cwnd 缓慢的增大，即每经过一个返回时间 RTT 就把发送方的拥塞控制窗口加一</li>\n<li>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为 1，执行慢开始算法。如图所示:</li>\n</ul>\n<div align=\"center\">\n    <style>.scwlwlsdhkyd{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/07.jpg\" class=\"scwlwlsdhkyd\">\n</div>\n其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。\n<p>（3）快速重传</p>\n<ul>\n<li>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认 (为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</li>\n<li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量</li>\n</ul>\n<p>（4）快速恢复</p>\n<ul>\n<li>当发送方连续收到三个重复确认时，就执行 “乘法减小” 算法，把 ssthresh 门限减半。但是接下去并不执行慢开始算法。</li>\n<li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将 cwnd 设置为 ssthresh 的大小，然后执行拥塞避免算法。</li>\n</ul>\n<div align=\"center\">\n    <style>.eljvxywiutnj{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/08.jpg\" class=\"eljvxywiutnj\">\n</div>\n<h4 id=\"7-tcp的流量控制机制\"><a class=\"anchor\" href=\"#7-tcp的流量控制机制\">#</a> 7. TCP 的流量控制机制</h4>\n<p>一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP 采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。</p>\n<ul>\n<li>当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。</li>\n<li>当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）</li>\n<li>如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。</li>\n<li>如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。</li>\n</ul>\n<h4 id=\"8-tcp的可靠传输机制\"><a class=\"anchor\" href=\"#8-tcp的可靠传输机制\">#</a> 8. TCP 的可靠传输机制</h4>\n<p>TCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。<br />\nTCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。</p>\n<p>接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。</p>\n<p>发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。</p>\n<p>但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。</p>\n<h4 id=\"9-tcp的三次握手和四次挥手\"><a class=\"anchor\" href=\"#9-tcp的三次握手和四次挥手\">#</a> 9. TCP 的三次握手和四次挥手</h4>\n<p>（1）三次握手</p>\n<div align=\"center\">\n    <style>.jyvzurvebkvh{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/09.jpg\" class=\"jyvzurvebkvh\">\n</div>\n（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n<p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。</p>\n<ul>\n<li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。</li>\n</ul>\n<p><strong>首部的同步位 SYN=1，初始序号 seq=x，SYN=1 的报文段不能携带数据，但要消耗掉一个序号。</strong></p>\n<ul>\n<li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。</li>\n</ul>\n<p><strong>在确认报文段中 SYN=1，ACK=1，确认号 ack=x+1，初始序号 seq=y</strong></p>\n<ul>\n<li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</li>\n</ul>\n<p><strong>确认报文段 ACK=1，确认号 ack=y+1，序号 seq=x+1（初始为 seq=x，第二个报文段所以要 + 1），ACK 报文段可以携带数据，不携带数据则不消耗序号。</strong></p>\n<p>那为什么要三次握手呢？两次不行吗？</p>\n<ul>\n<li>为了确认双方的接收能力和发送能力都正常</li>\n<li>如果是用两次握手，则会出现下面这种情况：</li>\n</ul>\n<p><strong>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</strong></p>\n<p>简单来说就是以下三步：</p>\n<ul>\n<li>第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</li>\n<li>第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</li>\n<li>第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</li>\n</ul>\n<p>TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</p>\n<p>（2）四次挥手</p>\n<div align=\"center\">\n    <style>.bwntorohormo{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/10.jpg\" class=\"bwntorohormo\">\n</div>\n<p>刚开始方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>\n<ul>\n<li>\n<p>第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。<br />\n即发出连接释放报文段（FIN=1，序号 seq=u），并停止再发送数据，主动关闭 TCP 连接，进入 FIN_WAIT1（终止等待 1）状态，等待服务端的确认。</p>\n</li>\n<li>\n<p>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</p>\n</li>\n</ul>\n<p>即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号 ack=u+1，序号 seq=v），服务端进入 CLOSE_WAIT（关闭等待）状态，此时的 TCP 处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入 FIN_WAIT2（终止等待 2）状态，等待服务端发出的连接释放报文段。</p>\n<ul>\n<li>\n<p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。<br />\n即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号 seq=w，确认号 ack=u+1），服务端进入 LAST_ACK（最后确认）状态，等待客户端的确认。</p>\n</li>\n<li>\n<p>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</p>\n</li>\n</ul>\n<p>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入 TIME_WAIT（时间等待）状态。此时 TCP 未释放掉，需要经过时间等待计时器设置的时间 2MSL 后，客户端才进入 CLOSED 状态。</p>\n<p>那为什么需要四次挥手呢？<br />\n因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当服务端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，“你发的 FIN 报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送，故需要四次挥手。</p>\n<p>简单来说就是以下四步：</p>\n<ul>\n<li>第一次挥手： 若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。</li>\n<li>第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。</li>\n<li>第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。</li>\n<li>第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</li>\n</ul>\n<p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。<br />\n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>\n<h4 id=\"10-tcp粘包是怎么回事如何处理\"><a class=\"anchor\" href=\"#10-tcp粘包是怎么回事如何处理\">#</a> 10. TCP 粘包是怎么回事，如何处理？</h4>\n<p>默认情况下，TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们。如果短时间有多个数据发送，会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.<br />\n 如果是传输⽂件的话，那么根本不⽤处理粘包的问题，来⼀个包拼⼀个包就好了。但是如果是多条消息，或者是别的⽤途的数据那么就需要处理粘包.<br />\n 下面看⼀个例⼦，连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况:<br />\nA. 先接收到 data1, 然后接收到 data2 .<br />\nB. 先接收到 data1 的部分数据，然后接收到 data1 余下的部分以及 data2 的全部.<br />\nC. 先接收到了 data1 的全部数据和 data2 的部分数据，然后接收到了 data2 的余下的数据.<br />\nD. ⼀次性接收到了 data1 和 data2 的全部数据.</p>\n<p>其中的 BCD 就是我们常⻅的粘包的情况。⽽对于处理粘包的问题，常⻅的解决⽅案有:</p>\n<ul>\n<li>多次发送之前间隔⼀个等待时间：只需要等上⼀段时间再进⾏下⼀次 send 就好，适⽤于交互频率特别低的场景。缺点也很明显，对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.</li>\n<li>关闭 Nagle 算法：关闭 Nagle 算法，在 Node.js 中你可以通过 socket.setNoDelay () ⽅法来关闭 Nagle 算法，让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩，并且频率特别⾼的，关闭 Nagle 纯属⾃废武功。另外，该⽅法不适⽤于⽹络较差的情况，因为 Nagle 算法是在服务端进⾏的包合并情况，但是如果短时间内客户端的⽹络情况不好，或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)</li>\n<li>进⾏封包 / 拆包： 封包 / 拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前，于其前 / 后放⼀些有特征的数据，然后收到数据的时 候根据特征数据分割出来各个数据包。</li>\n</ul>\n<h4 id=\"11-为什么udp不会粘包\"><a class=\"anchor\" href=\"#11-为什么udp不会粘包\">#</a> 11. 为什么 udp 不会粘包？</h4>\n<ul>\n<li>TCP 协议是⾯向<strong>流</strong>的协议，UDP 是⾯向<strong>消息</strong>的协议。UDP 段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据</li>\n<li>UDP 具有保护消息边界，在每个 UDP 包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包，如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。</li>\n</ul>\n<h3 id=\"七-websocket\"><a class=\"anchor\" href=\"#七-websocket\">#</a> 七、WebSocket</h3>\n<h4 id=\"1-对-websocket-的理解\"><a class=\"anchor\" href=\"#1-对-websocket-的理解\">#</a> 1. 对 WebSocket 的理解</h4>\n<p>WebSocket 是 HTML5 提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于 TCP 传输协议，并复用 HTTP 的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p>\n<p>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</p>\n<p>WebSocket 原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者 ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有 ID 在接收者 ID 序列中的客户端才会处理这个事件。<br />\n​</p>\n<p>WebSocket 特点的如下：</p>\n<ul>\n<li>支持双向通信，实时性更强</li>\n<li>可以发送文本，也可以发送二进制数据‘’</li>\n<li>建立在 TCP 协议之上，服务端的实现比较容易</li>\n<li>数据格式比较轻量，性能开销小，通信高效</li>\n<li>没有同源限制，客户端可以与任意服务器通信</li>\n<li>协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL</li>\n<li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>\n</ul>\n<p>Websocket 的使用方法如下：​</p>\n<p>在客户端中：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 index.html 中直接写 WebSocket，设置服务端的端口号为 9999</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:9999'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在客户端与服务端建立连接后触发</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection open.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在服务端给客户端发来消息的时候触发</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 打印的是 MessageEvent 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 打印的是收到的消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 在客户端与服务端建立关闭后触发</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection closed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"2-即时通讯的实现短轮询-长轮询-sse-和-websocket-间的区别\"><a class=\"anchor\" href=\"#2-即时通讯的实现短轮询-长轮询-sse-和-websocket-间的区别\">#</a> 2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</h4>\n<p>短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p>\n<p>短轮询的基本思路： 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</p>\n<p>长轮询的基本思路： 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。</p>\n<p>SSE 的基本思想： 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。</p>\n<p>WebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p>\n<p>上面的四个通信协议，前三个都是基于 HTTP 协议的。</p>\n<p>对于这四种即使通信协议，从性能的角度来看：<br />\nWebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询<br />\n但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：<br />\n短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket<br />\n 所以，还是要根据具体的使用场景来判断使用哪种方式。</p>\n","length":14624,"excerpt":"","more":"<h2 id=\"计算机网络知识总结篇dns协议介绍网络模型tcpip五层协议tcp与udp\"><a class=\"anchor\" href=\"#计算机网络知识总结篇dns协议介绍网络模型tcpip五层协议tcp与udp\">#</a> 计算机网络知识总结篇：DNS 协议介绍，网络模型，TCP/IP 五层协议，TCP 与 UDP</h2>\n<h3 id=\"四-dns协议介绍\"><a class=\"anchor\" href=\"#四-dns协议介绍\">#</a> 四、DNS 协议介绍</h3>\n<h4 id=\"1-dns-协议是什么\"><a class=\"anchor\" href=\"#1-dns-协议是什么\">#</a> 1. DNS 协议是什么</h4>\n<p>概念： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。<br />\n作用： 将域名解析为 IP 地址，客户端向 DNS 服务器（DNS 服务器有自己的 IP 地址）发送域名查询请求，DNS 服务器告知客户机 Web 服务器的 IP 地址。</p>\n<h4 id=\"2-dns同时使用tcp和udp协议\"><a class=\"anchor\" href=\"#2-dns同时使用tcp和udp协议\">#</a> 2. DNS 同时使用 TCP 和 UDP 协议？</h4>\n<p>DNS 占用 53 号端口，同时使用 TCP 和 UDP 协议。<br />\n（1）在区域传输的时候使用 TCP 协议</p>\n<ul>\n<li>辅域名服务器会定时（一般 3 小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用 TCP 而不是 UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</li>\n<li>TCP 是一种可靠连接，保证了数据的准确性。<br />\n（2）在域名解析的时候使用 UDP 协议</li>\n<li>客户端向 DNS 服务器查询域名，一般返回的内容都不超过 512 字节，用 UDP 传输即可。不用经过三次握手，这样 DNS 服务器负载更低，响应更快。理论上说，客户端也可以指定向 DNS 服务器查询时用 TCP，但事实上，很多 DNS 服务器进行配置的时候，仅支持 UDP 查询包。</li>\n</ul>\n<h4 id=\"3-dns完整的查询过程\"><a class=\"anchor\" href=\"#3-dns完整的查询过程\">#</a> 3. DNS 完整的查询过程</h4>\n<p>DNS 服务器解析域名的过程：</p>\n<ul>\n<li>首先会在浏览器的缓存中查找对应的 IP 地址，如果查找到直接返回，若找不到继续下一步</li>\n<li>将请求发送给本地 DNS 服务器，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</li>\n<li>本地 DNS 服务器向根域名服务器发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li>\n<li>本地 DNS 服务器向顶级域名服务器发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li>\n<li>本地 DNS 服务器向权威域名服务器发送请求，域名服务器返回对应的结果</li>\n<li>本地 DNS 服务器将返回结果保存在缓存中，便于下次使用</li>\n<li>本地 DNS 服务器将返回结果返回给浏览器<br />\n比如要查询 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span> 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地 DNS 服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。</li>\n</ul>\n<h4 id=\"4-迭代查询与递归查询\"><a class=\"anchor\" href=\"#4-迭代查询与递归查询\">#</a> 4. 迭代查询与递归查询</h4>\n<p>实际上，DNS 解析是一个包含迭代查询和递归查询的过程。</p>\n<ul>\n<li>递归查询指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归查询，<strong>用户只需要发出一次查询请求</strong>。</li>\n<li>迭代查询指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，<strong>用户需要发出多次的查询请求</strong>。<br />\n一般我们向本地 DNS 服务器发送请求的方式就是<strong>递归查询</strong>，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我们最终的请求结果。<br />\n而本地 DNS 服务器向其他域名服务器请求的过程是<strong>迭代查询</strong>的过程，因为每一次域名服务器只返回单次查询的结果，下一级的查询由本地 DNS 服务器自己进行。</li>\n</ul>\n<h4 id=\"5-dns-记录和报文\"><a class=\"anchor\" href=\"#5-dns-记录和报文\">#</a> 5. DNS 记录和报文</h4>\n<p>DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（Name，Value，Type，<span class=\"token constant\">TTL</span>）</pre></td></tr></table></figure><p>其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。<br />\n常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：</p>\n<ul>\n<li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li>\n<li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li>\n<li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li>\n<li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li>\n</ul>\n<h3 id=\"五-网络模型\"><a class=\"anchor\" href=\"#五-网络模型\">#</a> 五、网络模型</h3>\n<h4 id=\"1-osi七层模型\"><a class=\"anchor\" href=\"#1-osi七层模型\">#</a> 1. OSI 七层模型</h4>\n<p>ISO 为了更好的使网络应用更为普及，推出了 OSI 参考模型。</p>\n<div align=\"center\">\n    <style>.uwydkyqymsqb{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg\" class=\"uwydkyqymsqb\">\n</div>\n<p>（1）应用层<br />\n OSI 参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。<br />\n我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP 等。</p>\n<ul>\n<li>在客户端与服务器中经常会有数据的请求，这个时候就是会用到 http (hyper text transfer protocol)(超文本传输协议) 或者 https. 在后端设计数据接口时，我们常常使用到这个协议。</li>\n<li>FTP 是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如百度网盘 `` 迅雷应该是基于此协议的。</li>\n<li>SMTP 是 simple mail transfer protocol（简单邮件传输协议）。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。</li>\n</ul>\n<p>（2）表示层<br />\n表示层提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。<br />\n如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。<br />\n在项目开发中，为了方便数据传输，可以使用 base64 对数据进行编解码。如果按功能来划分，base64 应该是工作在表示层。</p>\n<p>（3）会话层<br />\n会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p>\n<p>（4）传输层<br />\n传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP 就是在这一层。端口号既是这里的 “端”。</p>\n<p>（5）网络层<br />\n本层通过 IP 寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的 IP 层。这一层就是我们经常说的 IP 协议层。IP 协议是 Internet 的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。</p>\n<p>（6）数据链路层<br />\n将比特组合成字节，再将字节组合成帧，使用链路层地址 (以太网使用 MAC 地址) 来访问介质，并进行差错检测。网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。</p>\n<p>（7）物理层<br />\n实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。</p>\n<p>OSI 七层模型通信特点：对等通信 对等通信，为了使数据分组从源传送到目的地，源端 OSI 模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。</p>\n<h4 id=\"2-tcpip五层协议\"><a class=\"anchor\" href=\"#2-tcpip五层协议\">#</a> 2. TCP/IP 五层协议</h4>\n<p>TCP/IP 五层协议和 OSI 的七层协议对应关系如下：</p>\n<div align=\"center\">\n    <style>.tnayuuqdofcu{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/TCP_IP_%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE.jpg\" class=\"tnayuuqdofcu\">\n</div>\n<ul>\n<li>应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP 协议（万维网服务）、FTP 协议（文件传输）、SMTP 协议（电子邮件）、DNS（域名查询）等。</li>\n<li>传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</li>\n</ul>\n<ol>\n<li>传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</li>\n<li>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</li>\n</ol>\n<ul>\n<li>网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。</li>\n<li>数据链路层 (data link layer)：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</li>\n<li>物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。</li>\n</ul>\n<p><strong>从上图中可以看出，TCP/IP 模型比 OSI 模型更加简洁，它把应用层 / 表示层 / 会话层全部整合为了应用层。</strong></p>\n<p>在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。</p>\n<div align=\"center\">\n    <style>.fpxvssuyvmlw{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/03.jpg\" class=\"fpxvssuyvmlw\">\n</div>\n<p>在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：</p>\n<div align=\"center\">\n    <style>.smeyvpxlrjmy{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/04.jpg\" class=\"smeyvpxlrjmy\">\n</div>\n<p>同样，TCP/IP 五层协议的通信方式也是对等通信：</p>\n<div align=\"center\">\n    <style>.ukmsivqwrrch{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/05.jpg\" class=\"ukmsivqwrrch\">\n</div>\n<h3 id=\"六-tcp与udp\"><a class=\"anchor\" href=\"#六-tcp与udp\">#</a> 六、TCP 与 UDP</h3>\n<h4 id=\"1-tcp-和-udp的概念及特点\"><a class=\"anchor\" href=\"#1-tcp-和-udp的概念及特点\">#</a> 1. TCP 和 UDP 的概念及特点</h4>\n<p>TCP 和 UDP 都是传输层协议，他们都属于 TCP/IP 协议族：<br />\n（1）UDP<br />\nUDP 的全称是用户数据报协议，在网络中它与 TCP 协议一样用于处理数据包，是一种无连接的协议。在 OSI 模型中，在传输层，处于 IP 协议的上一层。UDP 有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>\n<p>它的特点如下：<br />\n1）面向无连接<br />\n首先 UDP 是不需要和 TCP 一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。<br />\n具体来说就是：</p>\n<ul>\n<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>\n<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n<p>2）有单播，多播，广播的功能<br />\n UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>\n<p>3）面向报文<br />\n发送方的 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p>\n<p>4）不可靠性<br />\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。<br />\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。<br />\n再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n<p>5）头部开销小，传输数据报文时是很高效的。<br />\nUDP 头部包含了以下几个数据：</p>\n<ul>\n<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li>\n<li>整个数据报文的长度</li>\n<li>整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误<br />\n因此 UDP 的头部开销小，只有 8 字节，相比 TCP 的至少 20 字节要少得多，在传输数据报文时是很高效的。</li>\n</ul>\n<p>（2）TCP TCP 的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。</p>\n<p>它有以下几个特点：<br />\n1）面向连接<br />\n面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是 “三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。<br />\n2）仅支持单播传输<br />\n每条 TCP 传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。<br />\n3）面向字节流<br />\n TCP 不像 UDP 一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。<br />\n4）可靠传输<br />\n对于可靠传输，判断丢包、误码靠的是 TCP 的段编号以及确认号。TCP 为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认 (ACK)；如果发送端实体在合理的往返时延 (RTT) 内未收到确认，那么对应的数据（假设丢失了）将会被重传。<br />\n5）提供拥塞控制<br />\n当网络出现拥塞的时候，TCP 能够减小向网络注入数据的速率和数量，缓解拥塞。<br />\n6）提供全双工通信<br />\n TCP 允许通信双方的应用程序在任何时候都能发送数据，因为 TCP 连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP 可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于 MSS）</p>\n<h4 id=\"2-tcp和udp的区别\"><a class=\"anchor\" href=\"#2-tcp和udp的区别\">#</a> 2. TCP 和 UDP 的区别</h4>\n<div align=\"center\">\n    <style>.ccgdybcsqubp{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/06.jpg\" class=\"ccgdybcsqubp\">\n</div>\n<h4 id=\"3-tcp和udp的使用场景\"><a class=\"anchor\" href=\"#3-tcp和udp的使用场景\">#</a> 3. TCP 和 UDP 的使用场景</h4>\n<ul>\n<li>TCP 应用场景： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有 UDP 高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。</li>\n<li>UDP 应用场景： 效率要求相对高，对准确性要求相对低的场景。例如：QQ 聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。</li>\n</ul>\n<h4 id=\"4-udp协议为什么不可靠\"><a class=\"anchor\" href=\"#4-udp协议为什么不可靠\">#</a> 4. UDP 协议为什么不可靠？</h4>\n<p>UDP 在传输数据之前不需要先建立连接，远地主机的运输层在接收到 UDP 报文后，不需要确认，提供不可靠交付。总结就以下四点：</p>\n<ul>\n<li>不保证消息交付：不确认，不重传，无超时</li>\n<li>不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞</li>\n<li>不跟踪连接状态：不必建立连接或重启状态机</li>\n<li>不进行拥塞控制：不内置客户端或网络反馈机制</li>\n</ul>\n<h4 id=\"5-tcp的重传机制\"><a class=\"anchor\" href=\"#5-tcp的重传机制\">#</a> 5. TCP 的重传机制</h4>\n<p>由于 TCP 的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP 协议提供可靠数据传输服务。为保证数据传输的正确性，TCP 会重传其认为已丢失（包括报文中的比特错误）的包。TCP 使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。<br />\nTCP 在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的 ACK 确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。</p>\n<h4 id=\"6-tcp的拥塞控制机制\"><a class=\"anchor\" href=\"#6-tcp的拥塞控制机制\">#</a> 6. TCP 的拥塞控制机制</h4>\n<p>TCP 的拥塞控制机制主要是以下四种机制：</p>\n<ul>\n<li>慢启动（慢开始）</li>\n<li>拥塞避免</li>\n<li>快速重传</li>\n<li>快速恢复</li>\n</ul>\n<p>（1）慢启动（慢开始）</p>\n<ul>\n<li>在开始发送的时候设置 cwnd = 1（cwnd 指的是拥塞窗口）</li>\n<li>思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。</li>\n<li>为了防止 cwnd 增长过大引起网络拥塞，设置一个慢开始门限 (ssthresh 状态变量)</li>\n</ul>\n<ol>\n<li>当 cwnd &lt; ssthresh 时，使用慢开始算法</li>\n<li>当 cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法</li>\n<li>当 cwnd &gt; ssthresh 时，使用拥塞避免算法</li>\n</ol>\n<p>（2）拥塞避免</p>\n<ul>\n<li>拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。</li>\n<li>思路： 让拥塞窗口 cwnd 缓慢的增大，即每经过一个返回时间 RTT 就把发送方的拥塞控制窗口加一</li>\n<li>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为 1，执行慢开始算法。如图所示:</li>\n</ul>\n<div align=\"center\">\n    <style>.scwlwlsdhkyd{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/07.jpg\" class=\"scwlwlsdhkyd\">\n</div>\n其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。\n<p>（3）快速重传</p>\n<ul>\n<li>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认 (为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</li>\n<li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量</li>\n</ul>\n<p>（4）快速恢复</p>\n<ul>\n<li>当发送方连续收到三个重复确认时，就执行 “乘法减小” 算法，把 ssthresh 门限减半。但是接下去并不执行慢开始算法。</li>\n<li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将 cwnd 设置为 ssthresh 的大小，然后执行拥塞避免算法。</li>\n</ul>\n<div align=\"center\">\n    <style>.eljvxywiutnj{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/08.jpg\" class=\"eljvxywiutnj\">\n</div>\n<h4 id=\"7-tcp的流量控制机制\"><a class=\"anchor\" href=\"#7-tcp的流量控制机制\">#</a> 7. TCP 的流量控制机制</h4>\n<p>一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP 采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。</p>\n<ul>\n<li>当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。</li>\n<li>当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）</li>\n<li>如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。</li>\n<li>如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。</li>\n</ul>\n<h4 id=\"8-tcp的可靠传输机制\"><a class=\"anchor\" href=\"#8-tcp的可靠传输机制\">#</a> 8. TCP 的可靠传输机制</h4>\n<p>TCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。<br />\nTCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。</p>\n<p>接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。</p>\n<p>发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。</p>\n<p>但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。</p>\n<h4 id=\"9-tcp的三次握手和四次挥手\"><a class=\"anchor\" href=\"#9-tcp的三次握手和四次挥手\">#</a> 9. TCP 的三次握手和四次挥手</h4>\n<p>（1）三次握手</p>\n<div align=\"center\">\n    <style>.jyvzurvebkvh{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/09.jpg\" class=\"jyvzurvebkvh\">\n</div>\n（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n<p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。</p>\n<ul>\n<li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。</li>\n</ul>\n<p><strong>首部的同步位 SYN=1，初始序号 seq=x，SYN=1 的报文段不能携带数据，但要消耗掉一个序号。</strong></p>\n<ul>\n<li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。</li>\n</ul>\n<p><strong>在确认报文段中 SYN=1，ACK=1，确认号 ack=x+1，初始序号 seq=y</strong></p>\n<ul>\n<li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</li>\n</ul>\n<p><strong>确认报文段 ACK=1，确认号 ack=y+1，序号 seq=x+1（初始为 seq=x，第二个报文段所以要 + 1），ACK 报文段可以携带数据，不携带数据则不消耗序号。</strong></p>\n<p>那为什么要三次握手呢？两次不行吗？</p>\n<ul>\n<li>为了确认双方的接收能力和发送能力都正常</li>\n<li>如果是用两次握手，则会出现下面这种情况：</li>\n</ul>\n<p><strong>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</strong></p>\n<p>简单来说就是以下三步：</p>\n<ul>\n<li>第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</li>\n<li>第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</li>\n<li>第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</li>\n</ul>\n<p>TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</p>\n<p>（2）四次挥手</p>\n<div align=\"center\">\n    <style>.bwntorohormo{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/10.jpg\" class=\"bwntorohormo\">\n</div>\n<p>刚开始方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>\n<ul>\n<li>\n<p>第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。<br />\n即发出连接释放报文段（FIN=1，序号 seq=u），并停止再发送数据，主动关闭 TCP 连接，进入 FIN_WAIT1（终止等待 1）状态，等待服务端的确认。</p>\n</li>\n<li>\n<p>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</p>\n</li>\n</ul>\n<p>即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号 ack=u+1，序号 seq=v），服务端进入 CLOSE_WAIT（关闭等待）状态，此时的 TCP 处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入 FIN_WAIT2（终止等待 2）状态，等待服务端发出的连接释放报文段。</p>\n<ul>\n<li>\n<p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。<br />\n即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号 seq=w，确认号 ack=u+1），服务端进入 LAST_ACK（最后确认）状态，等待客户端的确认。</p>\n</li>\n<li>\n<p>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</p>\n</li>\n</ul>\n<p>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入 TIME_WAIT（时间等待）状态。此时 TCP 未释放掉，需要经过时间等待计时器设置的时间 2MSL 后，客户端才进入 CLOSED 状态。</p>\n<p>那为什么需要四次挥手呢？<br />\n因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当服务端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，“你发的 FIN 报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送，故需要四次挥手。</p>\n<p>简单来说就是以下四步：</p>\n<ul>\n<li>第一次挥手： 若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。</li>\n<li>第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。</li>\n<li>第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。</li>\n<li>第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</li>\n</ul>\n<p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。<br />\n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>\n<h4 id=\"10-tcp粘包是怎么回事如何处理\"><a class=\"anchor\" href=\"#10-tcp粘包是怎么回事如何处理\">#</a> 10. TCP 粘包是怎么回事，如何处理？</h4>\n<p>默认情况下，TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们。如果短时间有多个数据发送，会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.<br />\n 如果是传输⽂件的话，那么根本不⽤处理粘包的问题，来⼀个包拼⼀个包就好了。但是如果是多条消息，或者是别的⽤途的数据那么就需要处理粘包.<br />\n 下面看⼀个例⼦，连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况:<br />\nA. 先接收到 data1, 然后接收到 data2 .<br />\nB. 先接收到 data1 的部分数据，然后接收到 data1 余下的部分以及 data2 的全部.<br />\nC. 先接收到了 data1 的全部数据和 data2 的部分数据，然后接收到了 data2 的余下的数据.<br />\nD. ⼀次性接收到了 data1 和 data2 的全部数据.</p>\n<p>其中的 BCD 就是我们常⻅的粘包的情况。⽽对于处理粘包的问题，常⻅的解决⽅案有:</p>\n<ul>\n<li>多次发送之前间隔⼀个等待时间：只需要等上⼀段时间再进⾏下⼀次 send 就好，适⽤于交互频率特别低的场景。缺点也很明显，对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.</li>\n<li>关闭 Nagle 算法：关闭 Nagle 算法，在 Node.js 中你可以通过 socket.setNoDelay () ⽅法来关闭 Nagle 算法，让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩，并且频率特别⾼的，关闭 Nagle 纯属⾃废武功。另外，该⽅法不适⽤于⽹络较差的情况，因为 Nagle 算法是在服务端进⾏的包合并情况，但是如果短时间内客户端的⽹络情况不好，或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)</li>\n<li>进⾏封包 / 拆包： 封包 / 拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前，于其前 / 后放⼀些有特征的数据，然后收到数据的时 候根据特征数据分割出来各个数据包。</li>\n</ul>\n<h4 id=\"11-为什么udp不会粘包\"><a class=\"anchor\" href=\"#11-为什么udp不会粘包\">#</a> 11. 为什么 udp 不会粘包？</h4>\n<ul>\n<li>TCP 协议是⾯向<strong>流</strong>的协议，UDP 是⾯向<strong>消息</strong>的协议。UDP 段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据</li>\n<li>UDP 具有保护消息边界，在每个 UDP 包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包，如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。</li>\n</ul>\n<h3 id=\"七-websocket\"><a class=\"anchor\" href=\"#七-websocket\">#</a> 七、WebSocket</h3>\n<h4 id=\"1-对-websocket-的理解\"><a class=\"anchor\" href=\"#1-对-websocket-的理解\">#</a> 1. 对 WebSocket 的理解</h4>\n<p>WebSocket 是 HTML5 提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于 TCP 传输协议，并复用 HTTP 的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p>\n<p>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</p>\n<p>WebSocket 原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者 ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有 ID 在接收者 ID 序列中的客户端才会处理这个事件。<br />\n​</p>\n<p>WebSocket 特点的如下：</p>\n<ul>\n<li>支持双向通信，实时性更强</li>\n<li>可以发送文本，也可以发送二进制数据‘’</li>\n<li>建立在 TCP 协议之上，服务端的实现比较容易</li>\n<li>数据格式比较轻量，性能开销小，通信高效</li>\n<li>没有同源限制，客户端可以与任意服务器通信</li>\n<li>协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL</li>\n<li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>\n</ul>\n<p>Websocket 的使用方法如下：​</p>\n<p>在客户端中：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 index.html 中直接写 WebSocket，设置服务端的端口号为 9999</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:9999'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在客户端与服务端建立连接后触发</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection open.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在服务端给客户端发来消息的时候触发</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 打印的是 MessageEvent 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 打印的是收到的消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 在客户端与服务端建立关闭后触发</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection closed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"2-即时通讯的实现短轮询-长轮询-sse-和-websocket-间的区别\"><a class=\"anchor\" href=\"#2-即时通讯的实现短轮询-长轮询-sse-和-websocket-间的区别\">#</a> 2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</h4>\n<p>短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p>\n<p>短轮询的基本思路： 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</p>\n<p>长轮询的基本思路： 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。</p>\n<p>SSE 的基本思想： 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。</p>\n<p>WebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p>\n<p>上面的四个通信协议，前三个都是基于 HTTP 协议的。</p>\n<p>对于这四种即使通信协议，从性能的角度来看：<br />\nWebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询<br />\n但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：<br />\n短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket<br />\n 所以，还是要根据具体的使用场景来判断使用哪种方式。</p>\n"},{"title":"基于术语词典干预的机器翻译挑战赛","date":"2024-08-17T14:15:33.000Z","_content":"\n## 赛事背景\n\n赛事背景\n目前神经机器翻译技术已经取得了很大的突破，但在特定领域或行业中，由于机器翻译难以保证术语的一致性，导致翻译效果还不够理想。对于术语名词、人名地名等机器翻译不准确的结果，可以通过术语词典进行纠正，避免了混淆或歧义，最大限度提高翻译质量。\n\n赛事任务\n基于术语词典干预的机器翻译挑战赛选择以英文为源语言，中文为目标语言的机器翻译。本次大赛除英文到中文的双语数据，还提供英中对照的术语词典。参赛队伍需要基于提供的训练数据样本从多语言机器翻译模型的构建与训练，并基于测试集以及术语词典，提供最终的翻译结果。\n\n赛题数据\n- 训练集：双语数据 - 中英14万余双语句对\n- 开发集：英中1000双语句对\n- 测试集：英中1000双语句对\n- 术语词典：英中2226条\n\n简单说明\n- 训练集（training set）用于运行你的学习算法。\n- 开发集（development set）用于调整参数，选择特征，以及对学习算法作出其它决定。有时也称为留出交叉验证集（hold-out cross validation set）。\n- 测试集（test set）用于评估算法的性能，但不会据此改变学习算法或参数。\n\n评估指标\n对于参赛队伍提交的测试集翻译结果文件，采用自动评价指标 BLEU-4 进行评价，具体工具使用 sacrebleu开源版本。\n\n### 什么是 BLEU-4  ？\n BLEU，全称为Bilingual Evaluation Understudy（双语评估替换），是一种对生成语句进行评估的指标。BLEU 评分是由Kishore Papineni等人2002年的论文《BLEU: a Method for Automatic Evaluation of Machine Translation》中提出的。\n\n在机器翻译领域，BLEU（Bilingual Evaluation Understudy）是一种常用的自动评价指标，用于衡量计算机生成的翻译与一组参考译文之间的相似度。这个指标特别关注 n-grams（连续的n个词）的精确匹配，可以被认为是对翻译准确性和流利度的一种统计估计。计算BLEU分数时，首先会统计生成文本中n-grams的频率，然后将这些频率与参考文本中的n-grams进行比较。如果生成的翻译中包含的n-grams与参考译文中出现的相同，则认为是匹配的。最终的BLEU分数是一个介于0到1之间的数值，其中1表示与参考译文完美匹配，而0则表示完全没有匹配。\n\nBLEU-4 特别指的是在计算时考虑四元组（即连续四个词）的匹配情况。\n\n## 基于 Seq2Seq 的 Baseline 详解\n### 环境依赖\n\n``` python\n!pip install torchtext    \n!pip install jieba\n!pip install sacrebleu \n```\n\n有几个包需要额外安装：\n- torchtext ：是一个用于自然语言处理（NLP）任务的库，它提供了丰富的功能，包括数据预处理、词汇构建、序列化和批处理等，特别适合于文本分类、情感分析、机器翻译等任务\n- jieba：是一个中文分词库，用于将中文文本切分成有意义的词语\n- sacrebleu：用于评估机器翻译质量的工具，主要通过计算BLEU（Bilingual Evaluation Understudy）得分来衡量生成文本与参考译文之间的相似度\n\n这里，我们需要安装 spacy 用于英文的 tokenizer（分词，就是将句子、段落、文章这种长文本，分解为以字词为单位的数据结构，方便后续的处理分析工作）\n- spacy：是一个强大的自然语言处理库，支持70+语言的分词与训练\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/spacy.png\">\n</div>\n\n需要注意的是，使用命令!python -m spacy download en_core_web_trf安装 en_core_web_sm 语言包非常的慢，经常会安装失败,因此可以离线安装 en_core_web_sm 语言包，从该路径下：https://github.com/explosion/spacy-models/releases 安装对应版本的 en_core_web_trf 语言包，可以看到我的 en_core_web_trf 3.7.3 版本的要求 spaCy >=3.7.2,<3.8.0，刚好满足我的 3.7.5的 spacy!：\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/encore.png\">\n</div>\n\n将下载到本地的压缩包上传到你的魔搭平台上的  dataset 目录下，然后使用 !pip install ../dataset/en_core_web_trf安装英文语言包：\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/model.png\">\n</div>\n\n``` python\n!pip install -U pip setuptools wheel -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install -U 'spacy[cuda12x,transformers,lookups]' -i https://pypi.tuna.tsinghua.edu.cn/simple\n!pip install ../dataset/en_core_web_trf-3.7.3-py3-none-any.whl\n```\n\n### 数据预处理\n\n机器翻译任务的预处理是确保模型能够有效学习源语言到目标语言映射的关键步骤。预处理阶段通常包括多个步骤，旨在清理、标准化和转换数据，使之适合模型训练。以下是机器翻译任务预处理中常见的几个处理步骤：\n- 清洗和规范化数据\n  - 去除无关信息：删除HTML标签、特殊字符、非文本内容等，确保文本的纯净性（本赛题的训练集中出现了非常多的脏数据，如“Joey.        （掌声） （掌声） 乔伊”、“Thank you.        （马嘶声） 谢谢你们”等这种声音词）\n  - 统一格式：转换所有文本为小写，确保一致性；标准化日期、数字等格式。\n  - 分句和分段：将长文本分割成句子或段落，便于处理和训练。\n\n- 分词\n  - 分词：将句子分解成单词或词素（构成单词的基本组成部分，一个词素可以是一个完整的单词，也可以是单词的一部分，但每一个词素都至少携带一部分语义或语法信息），这是NLP中最基本的步骤之一。我们这里使用了使用jieba 对中文进行分词，使用spaCy对英文进行分词。\n\n- 构建词汇表和词向量\n  - 词汇表构建：从训练数据中收集所有出现过的词汇，构建词汇表，并为每个词分配一个唯一的索引。\n  - 词向量：使用预训练的词向量或自己训练词向量，将词汇表中的词映射到高维空间中的向量，以捕捉语义信息（当前大模型领域训练的 embedding 模型就是用来完成此任务的）。\n\n- 序列截断和填充\n  - 序列截断：限制输入序列的长度，过长的序列可能增加计算成本，同时也可能包含冗余信息。\n  - 序列填充：将所有序列填充至相同的长度，便于批量处理。通常使用<PAD>标记填充。\n\n- 添加特殊标记\n  - 序列开始和结束标记：在序列两端添加<SOS>（Sequence Start）和<EOS>（Sequence End）标记，帮助模型识别序列的起始和结束。\n  - 未知词标记：为不在词汇表中的词添加<UNK>（Unknown）标记，使模型能够处理未见过的词汇。\n\n- 数据增强\n  - 随机替换或删除词：在训练数据中随机替换或删除一些词，增强模型的鲁棒性。\n  - 同义词替换：使用同义词替换原文中的词，增加训练数据的多样性。\n\n- 数据分割\n  - 划分数据集：将数据划分为训练集、验证集和测试集，分别用于模型训练、参数调整和最终性能评估（该赛题中已划分好，不需要自己进行划分）\n\n### 模型训练\n\n说到神经机器翻译就不得不提编码器-解码器模型，或编码器-解码器框架（EncoderDecoder Paradigm）。本质上，编码器­解码器模型是描述输入­输出之间关系的一种方式。编码器­解码器这个概念在日常生活中并不少见。\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/e-d.png\">\n</div>\n\n`给定一个中文句子“我/对/你/感到/满意”，编码器会将这句话编码成一个实数向量(0.2, −1, 6, 5, 0.7, −2)，这个向量就是源语言句子的“表示”结果。虽然有些不可思议，但是神经机器翻译模型把这个向量等同于输入序列。向量中的数字并没有实际的意义，然而解码器却能从中提取到源语言句子中所包含的信息。也有研究人员把向量的每一个维度看作是一个“特征”，这样源语言句子就被表示成多个“特征”的联合，而且这些特征可以被自动学习。有了这样的源语言句子的“表示”，解码器可以把这个实数向量作为输入，然后逐词生成目标语言句子“I am satisfied with you”。`\n\n在源语言句子的表示形式确定之后，需要设计相应的编码器和解码器结构。在当今主流的神经机器翻译系统中，编码器由词嵌入层和中间网络层组成：\n- 当输入一串单词序列时，词嵌入层(embedding)会将每个单词映射到多维实数表示空间，这个过程也被称为词嵌入。\n- 之后中间层会对词嵌入向量进行更深层的抽象，得到输入单词序列的中间表示。中间层的实现方式有很多，比如：循环神经网络、卷积神经网络、自注意力机制等都是模型常用的结构。\n\n解码器的结构基本上和编码器是一致的，在基于循环神经网络的翻译模型中，解码器只比编码器多了输出层，用于输出每个目标语言位置的单词生成概率，而在基于自注意力机制的翻译模型中，除了输出层，解码器还比编码器多一个编码­解码注意力子层，用于帮助模型更好地利用源语言信息。\n\n通过循环网络对源语言文本进行编码，并生成目标语言翻译结果的过程十分简单。然而，它仅仅使用一个定长的向量 $$h_{m}$$ 编码整个源语言序列。这对于较短的源语言文本没有什么问题，但随着文本序列长度的逐渐加长，单一的一个向量 hm 可能不足以承载源语言序列当中的所有信息。\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/RNN_BLUE.png\">\n</div>\n\n蓝色的线代表上述简单循环神经网络性能随源语言文本长度的变化趋势。当文本长度在 20 个单词以内时，单一向量能够承载源语言文本中的必要信息。随着文本序列的进一步增加，翻译性能的评价指标 BLEU 的值就开始出现明显地下降。因此，这就启发我们使用更加有效地机制从编码器向解码器传递源语言信息，这就是接下来要讲到的注意力机制。\n\n引入注意力机制的循环机器翻译架构与基于简单循环网络的机器翻译模型大体结构相似，均采用循环神经网络作为编码器与解码器的实现。关键的不同点在于注意力机制的引入使得不再需要把原始文本中的所有必要信息压缩到一个向量当中。引入注意力机制的循环神经网络机器翻译架构如图所示:\n\n1.无注意力机制：\n<br>\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/no_attention.png\">\n</div>\n<br>\n2.引入注意力机制：\n<br>\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/attention.png\">\n</div>\n<br>\n\n传统的 Seq2Seq 模型在解码阶段仅依赖于编码器产生的最后一个隐藏状态，这在处理长序列时效果不佳。注意力机制允许解码器在生成每个输出词时，关注编码器产生的所有中间状态，从而更好地利用源序列的信息。具体来说，给定源语言序列经过编码器输出的向量序列 $$h_{1},h_{2},h_{3},...,h_{m}$$，注意力机制旨在依据解码端翻译的需要，自适应地从这个向量序列中查找对应的信息。\n\n*baseline 代码中实现了一个经典的序列到序列(Seq2Seq)模型，中间层使用的GRU网络，并且网络中加入了注意力机制(Attention Mechanism)*\n\n- GRU 知识讲解：https://zh.d2l.ai/chapter_recurrent-modern/gru.html\n\n### 翻译质量评价\n本世纪初研究人员提出了译文质量自动评价方法 BLEU（Bilingual Evaluation Understudy）。该方法使得机器翻译系统的评价变得自动、快速、便捷，而且评价过程可以重复。正是由于 BLEU 等自动评价方法的提出，机器翻译研究人员可以在更短的时间内得到译文质量的评价结果，加速系统研发的进程。\n\nP.S.文中涉及到的GRU门控循环单元，与改进的基于Transformer的解决方案，都会放在本系列的其他文章中单独讲解。","source":"_posts/基于术语词典干预的机器翻译挑战赛.md","raw":"---\ntitle: 基于术语词典干预的机器翻译挑战赛\ndate: 2024-08-17 22:15:33\ncategories:\n- [机器学习]\ntags:\n- [NLP]\n---\n\n## 赛事背景\n\n赛事背景\n目前神经机器翻译技术已经取得了很大的突破，但在特定领域或行业中，由于机器翻译难以保证术语的一致性，导致翻译效果还不够理想。对于术语名词、人名地名等机器翻译不准确的结果，可以通过术语词典进行纠正，避免了混淆或歧义，最大限度提高翻译质量。\n\n赛事任务\n基于术语词典干预的机器翻译挑战赛选择以英文为源语言，中文为目标语言的机器翻译。本次大赛除英文到中文的双语数据，还提供英中对照的术语词典。参赛队伍需要基于提供的训练数据样本从多语言机器翻译模型的构建与训练，并基于测试集以及术语词典，提供最终的翻译结果。\n\n赛题数据\n- 训练集：双语数据 - 中英14万余双语句对\n- 开发集：英中1000双语句对\n- 测试集：英中1000双语句对\n- 术语词典：英中2226条\n\n简单说明\n- 训练集（training set）用于运行你的学习算法。\n- 开发集（development set）用于调整参数，选择特征，以及对学习算法作出其它决定。有时也称为留出交叉验证集（hold-out cross validation set）。\n- 测试集（test set）用于评估算法的性能，但不会据此改变学习算法或参数。\n\n评估指标\n对于参赛队伍提交的测试集翻译结果文件，采用自动评价指标 BLEU-4 进行评价，具体工具使用 sacrebleu开源版本。\n\n### 什么是 BLEU-4  ？\n BLEU，全称为Bilingual Evaluation Understudy（双语评估替换），是一种对生成语句进行评估的指标。BLEU 评分是由Kishore Papineni等人2002年的论文《BLEU: a Method for Automatic Evaluation of Machine Translation》中提出的。\n\n在机器翻译领域，BLEU（Bilingual Evaluation Understudy）是一种常用的自动评价指标，用于衡量计算机生成的翻译与一组参考译文之间的相似度。这个指标特别关注 n-grams（连续的n个词）的精确匹配，可以被认为是对翻译准确性和流利度的一种统计估计。计算BLEU分数时，首先会统计生成文本中n-grams的频率，然后将这些频率与参考文本中的n-grams进行比较。如果生成的翻译中包含的n-grams与参考译文中出现的相同，则认为是匹配的。最终的BLEU分数是一个介于0到1之间的数值，其中1表示与参考译文完美匹配，而0则表示完全没有匹配。\n\nBLEU-4 特别指的是在计算时考虑四元组（即连续四个词）的匹配情况。\n\n## 基于 Seq2Seq 的 Baseline 详解\n### 环境依赖\n\n``` python\n!pip install torchtext    \n!pip install jieba\n!pip install sacrebleu \n```\n\n有几个包需要额外安装：\n- torchtext ：是一个用于自然语言处理（NLP）任务的库，它提供了丰富的功能，包括数据预处理、词汇构建、序列化和批处理等，特别适合于文本分类、情感分析、机器翻译等任务\n- jieba：是一个中文分词库，用于将中文文本切分成有意义的词语\n- sacrebleu：用于评估机器翻译质量的工具，主要通过计算BLEU（Bilingual Evaluation Understudy）得分来衡量生成文本与参考译文之间的相似度\n\n这里，我们需要安装 spacy 用于英文的 tokenizer（分词，就是将句子、段落、文章这种长文本，分解为以字词为单位的数据结构，方便后续的处理分析工作）\n- spacy：是一个强大的自然语言处理库，支持70+语言的分词与训练\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/spacy.png\">\n</div>\n\n需要注意的是，使用命令!python -m spacy download en_core_web_trf安装 en_core_web_sm 语言包非常的慢，经常会安装失败,因此可以离线安装 en_core_web_sm 语言包，从该路径下：https://github.com/explosion/spacy-models/releases 安装对应版本的 en_core_web_trf 语言包，可以看到我的 en_core_web_trf 3.7.3 版本的要求 spaCy >=3.7.2,<3.8.0，刚好满足我的 3.7.5的 spacy!：\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/encore.png\">\n</div>\n\n将下载到本地的压缩包上传到你的魔搭平台上的  dataset 目录下，然后使用 !pip install ../dataset/en_core_web_trf安装英文语言包：\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/model.png\">\n</div>\n\n``` python\n!pip install -U pip setuptools wheel -i https://pypi.tuna.tsinghua.edu.cn/simple\npip install -U 'spacy[cuda12x,transformers,lookups]' -i https://pypi.tuna.tsinghua.edu.cn/simple\n!pip install ../dataset/en_core_web_trf-3.7.3-py3-none-any.whl\n```\n\n### 数据预处理\n\n机器翻译任务的预处理是确保模型能够有效学习源语言到目标语言映射的关键步骤。预处理阶段通常包括多个步骤，旨在清理、标准化和转换数据，使之适合模型训练。以下是机器翻译任务预处理中常见的几个处理步骤：\n- 清洗和规范化数据\n  - 去除无关信息：删除HTML标签、特殊字符、非文本内容等，确保文本的纯净性（本赛题的训练集中出现了非常多的脏数据，如“Joey.        （掌声） （掌声） 乔伊”、“Thank you.        （马嘶声） 谢谢你们”等这种声音词）\n  - 统一格式：转换所有文本为小写，确保一致性；标准化日期、数字等格式。\n  - 分句和分段：将长文本分割成句子或段落，便于处理和训练。\n\n- 分词\n  - 分词：将句子分解成单词或词素（构成单词的基本组成部分，一个词素可以是一个完整的单词，也可以是单词的一部分，但每一个词素都至少携带一部分语义或语法信息），这是NLP中最基本的步骤之一。我们这里使用了使用jieba 对中文进行分词，使用spaCy对英文进行分词。\n\n- 构建词汇表和词向量\n  - 词汇表构建：从训练数据中收集所有出现过的词汇，构建词汇表，并为每个词分配一个唯一的索引。\n  - 词向量：使用预训练的词向量或自己训练词向量，将词汇表中的词映射到高维空间中的向量，以捕捉语义信息（当前大模型领域训练的 embedding 模型就是用来完成此任务的）。\n\n- 序列截断和填充\n  - 序列截断：限制输入序列的长度，过长的序列可能增加计算成本，同时也可能包含冗余信息。\n  - 序列填充：将所有序列填充至相同的长度，便于批量处理。通常使用<PAD>标记填充。\n\n- 添加特殊标记\n  - 序列开始和结束标记：在序列两端添加<SOS>（Sequence Start）和<EOS>（Sequence End）标记，帮助模型识别序列的起始和结束。\n  - 未知词标记：为不在词汇表中的词添加<UNK>（Unknown）标记，使模型能够处理未见过的词汇。\n\n- 数据增强\n  - 随机替换或删除词：在训练数据中随机替换或删除一些词，增强模型的鲁棒性。\n  - 同义词替换：使用同义词替换原文中的词，增加训练数据的多样性。\n\n- 数据分割\n  - 划分数据集：将数据划分为训练集、验证集和测试集，分别用于模型训练、参数调整和最终性能评估（该赛题中已划分好，不需要自己进行划分）\n\n### 模型训练\n\n说到神经机器翻译就不得不提编码器-解码器模型，或编码器-解码器框架（EncoderDecoder Paradigm）。本质上，编码器­解码器模型是描述输入­输出之间关系的一种方式。编码器­解码器这个概念在日常生活中并不少见。\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/e-d.png\">\n</div>\n\n`给定一个中文句子“我/对/你/感到/满意”，编码器会将这句话编码成一个实数向量(0.2, −1, 6, 5, 0.7, −2)，这个向量就是源语言句子的“表示”结果。虽然有些不可思议，但是神经机器翻译模型把这个向量等同于输入序列。向量中的数字并没有实际的意义，然而解码器却能从中提取到源语言句子中所包含的信息。也有研究人员把向量的每一个维度看作是一个“特征”，这样源语言句子就被表示成多个“特征”的联合，而且这些特征可以被自动学习。有了这样的源语言句子的“表示”，解码器可以把这个实数向量作为输入，然后逐词生成目标语言句子“I am satisfied with you”。`\n\n在源语言句子的表示形式确定之后，需要设计相应的编码器和解码器结构。在当今主流的神经机器翻译系统中，编码器由词嵌入层和中间网络层组成：\n- 当输入一串单词序列时，词嵌入层(embedding)会将每个单词映射到多维实数表示空间，这个过程也被称为词嵌入。\n- 之后中间层会对词嵌入向量进行更深层的抽象，得到输入单词序列的中间表示。中间层的实现方式有很多，比如：循环神经网络、卷积神经网络、自注意力机制等都是模型常用的结构。\n\n解码器的结构基本上和编码器是一致的，在基于循环神经网络的翻译模型中，解码器只比编码器多了输出层，用于输出每个目标语言位置的单词生成概率，而在基于自注意力机制的翻译模型中，除了输出层，解码器还比编码器多一个编码­解码注意力子层，用于帮助模型更好地利用源语言信息。\n\n通过循环网络对源语言文本进行编码，并生成目标语言翻译结果的过程十分简单。然而，它仅仅使用一个定长的向量 $$h_{m}$$ 编码整个源语言序列。这对于较短的源语言文本没有什么问题，但随着文本序列长度的逐渐加长，单一的一个向量 hm 可能不足以承载源语言序列当中的所有信息。\n\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/RNN_BLUE.png\">\n</div>\n\n蓝色的线代表上述简单循环神经网络性能随源语言文本长度的变化趋势。当文本长度在 20 个单词以内时，单一向量能够承载源语言文本中的必要信息。随着文本序列的进一步增加，翻译性能的评价指标 BLEU 的值就开始出现明显地下降。因此，这就启发我们使用更加有效地机制从编码器向解码器传递源语言信息，这就是接下来要讲到的注意力机制。\n\n引入注意力机制的循环机器翻译架构与基于简单循环网络的机器翻译模型大体结构相似，均采用循环神经网络作为编码器与解码器的实现。关键的不同点在于注意力机制的引入使得不再需要把原始文本中的所有必要信息压缩到一个向量当中。引入注意力机制的循环神经网络机器翻译架构如图所示:\n\n1.无注意力机制：\n<br>\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/no_attention.png\">\n</div>\n<br>\n2.引入注意力机制：\n<br>\n<div align=\"center\">\n    <img src=\"基于术语词典干预的机器翻译挑战赛/attention.png\">\n</div>\n<br>\n\n传统的 Seq2Seq 模型在解码阶段仅依赖于编码器产生的最后一个隐藏状态，这在处理长序列时效果不佳。注意力机制允许解码器在生成每个输出词时，关注编码器产生的所有中间状态，从而更好地利用源序列的信息。具体来说，给定源语言序列经过编码器输出的向量序列 $$h_{1},h_{2},h_{3},...,h_{m}$$，注意力机制旨在依据解码端翻译的需要，自适应地从这个向量序列中查找对应的信息。\n\n*baseline 代码中实现了一个经典的序列到序列(Seq2Seq)模型，中间层使用的GRU网络，并且网络中加入了注意力机制(Attention Mechanism)*\n\n- GRU 知识讲解：https://zh.d2l.ai/chapter_recurrent-modern/gru.html\n\n### 翻译质量评价\n本世纪初研究人员提出了译文质量自动评价方法 BLEU（Bilingual Evaluation Understudy）。该方法使得机器翻译系统的评价变得自动、快速、便捷，而且评价过程可以重复。正是由于 BLEU 等自动评价方法的提出，机器翻译研究人员可以在更短的时间内得到译文质量的评价结果，加速系统研发的进程。\n\nP.S.文中涉及到的GRU门控循环单元，与改进的基于Transformer的解决方案，都会放在本系列的其他文章中单独讲解。","slug":"基于术语词典干预的机器翻译挑战赛","published":1,"updated":"2024-12-27T14:38:44.169Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfm002tmcuy8l6saxp6","content":"<h2 id=\"赛事背景\"><a class=\"anchor\" href=\"#赛事背景\">#</a> 赛事背景</h2>\n<p>赛事背景<br />\n目前神经机器翻译技术已经取得了很大的突破，但在特定领域或行业中，由于机器翻译难以保证术语的一致性，导致翻译效果还不够理想。对于术语名词、人名地名等机器翻译不准确的结果，可以通过术语词典进行纠正，避免了混淆或歧义，最大限度提高翻译质量。</p>\n<p>赛事任务<br />\n基于术语词典干预的机器翻译挑战赛选择以英文为源语言，中文为目标语言的机器翻译。本次大赛除英文到中文的双语数据，还提供英中对照的术语词典。参赛队伍需要基于提供的训练数据样本从多语言机器翻译模型的构建与训练，并基于测试集以及术语词典，提供最终的翻译结果。</p>\n<p>赛题数据</p>\n<ul>\n<li>训练集：双语数据 - 中英 14 万余双语句对</li>\n<li>开发集：英中 1000 双语句对</li>\n<li>测试集：英中 1000 双语句对</li>\n<li>术语词典：英中 2226 条</li>\n</ul>\n<p>简单说明</p>\n<ul>\n<li>训练集（training set）用于运行你的学习算法。</li>\n<li>开发集（development set）用于调整参数，选择特征，以及对学习算法作出其它决定。有时也称为留出交叉验证集（hold-out cross validation set）。</li>\n<li>测试集（test set）用于评估算法的性能，但不会据此改变学习算法或参数。</li>\n</ul>\n<p>评估指标<br />\n对于参赛队伍提交的测试集翻译结果文件，采用自动评价指标 BLEU-4 进行评价，具体工具使用 sacrebleu 开源版本。</p>\n<h3 id=\"什么是-bleu-4\"><a class=\"anchor\" href=\"#什么是-bleu-4\">#</a> 什么是 BLEU-4  ？</h3>\n<p>BLEU，全称为 Bilingual Evaluation Understudy（双语评估替换），是一种对生成语句进行评估的指标。BLEU 评分是由 Kishore Papineni 等人 2002 年的论文《BLEU: a Method for Automatic Evaluation of Machine Translation》中提出的。</p>\n<p>在机器翻译领域，BLEU（Bilingual Evaluation Understudy）是一种常用的自动评价指标，用于衡量计算机生成的翻译与一组参考译文之间的相似度。这个指标特别关注 n-grams（连续的 n 个词）的精确匹配，可以被认为是对翻译准确性和流利度的一种统计估计。计算 BLEU 分数时，首先会统计生成文本中 n-grams 的频率，然后将这些频率与参考文本中的 n-grams 进行比较。如果生成的翻译中包含的 n-grams 与参考译文中出现的相同，则认为是匹配的。最终的 BLEU 分数是一个介于 0 到 1 之间的数值，其中 1 表示与参考译文完美匹配，而 0 则表示完全没有匹配。</p>\n<p>BLEU-4 特别指的是在计算时考虑四元组（即连续四个词）的匹配情况。</p>\n<h2 id=\"基于-seq2seq-的-baseline-详解\"><a class=\"anchor\" href=\"#基于-seq2seq-的-baseline-详解\">#</a> 基于 Seq2Seq 的 Baseline 详解</h2>\n<h3 id=\"环境依赖\"><a class=\"anchor\" href=\"#环境依赖\">#</a> 环境依赖</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!pip install torchtext    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>!pip install jieba</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>!pip install sacrebleu</pre></td></tr></table></figure><p>有几个包需要额外安装：</p>\n<ul>\n<li>torchtext ：是一个用于自然语言处理（NLP）任务的库，它提供了丰富的功能，包括数据预处理、词汇构建、序列化和批处理等，特别适合于文本分类、情感分析、机器翻译等任务</li>\n<li>jieba：是一个中文分词库，用于将中文文本切分成有意义的词语</li>\n<li>sacrebleu：用于评估机器翻译质量的工具，主要通过计算 BLEU（Bilingual Evaluation Understudy）得分来衡量生成文本与参考译文之间的相似度</li>\n</ul>\n<p>这里，我们需要安装 spacy 用于英文的 tokenizer（分词，就是将句子、段落、文章这种长文本，分解为以字词为单位的数据结构，方便后续的处理分析工作）</p>\n<ul>\n<li>spacy：是一个强大的自然语言处理库，支持 70 + 语言的分词与训练</li>\n</ul>\n<div align=\"center\">\n    <style>.ktgxlajyuyqk{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/spacy.png\" class=\"ktgxlajyuyqk\">\n</div>\n<p>需要注意的是，使用命令！python -m spacy download en_core_web_trf 安装 en_core_web_sm 语言包非常的慢，经常会安装失败，因此可以离线安装 en_core_web_sm 语言包，从该路径下：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V4cGxvc2lvbi9zcGFjeS1tb2RlbHMvcmVsZWFzZXM=\">https://github.com/explosion/spacy-models/releases</span> 安装对应版本的 en_core_web_trf 语言包，可以看到我的 en_core_web_trf 3.7.3 版本的要求 spaCy &gt;=3.7.2,❤️.8.0，刚好满足我的 3.7.5 的 spacy!：</p>\n<div align=\"center\">\n    <style>.cmimwwmceway{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/encore.png\" class=\"cmimwwmceway\">\n</div>\n<p>将下载到本地的压缩包上传到你的魔搭平台上的  dataset 目录下，然后使用！pip install ../dataset/en_core_web_trf 安装英文语言包：</p>\n<div align=\"center\">\n    <style>.axqdqqudysuj{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/model.png\" class=\"axqdqqudysuj\">\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!pip install <span class=\"token operator\">-</span>U pip setuptools wheel <span class=\"token operator\">-</span>i https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip install <span class=\"token operator\">-</span>U <span class=\"token string\">'spacy[cuda12x,transformers,lookups]'</span> <span class=\"token operator\">-</span>i https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>!pip install <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>dataset<span class=\"token operator\">/</span>en_core_web_trf<span class=\"token operator\">-</span><span class=\"token number\">3.7</span><span class=\"token number\">.3</span><span class=\"token operator\">-</span>py3<span class=\"token operator\">-</span>none<span class=\"token operator\">-</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">.</span>whl</pre></td></tr></table></figure><h3 id=\"数据预处理\"><a class=\"anchor\" href=\"#数据预处理\">#</a> 数据预处理</h3>\n<p>机器翻译任务的预处理是确保模型能够有效学习源语言到目标语言映射的关键步骤。预处理阶段通常包括多个步骤，旨在清理、标准化和转换数据，使之适合模型训练。以下是机器翻译任务预处理中常见的几个处理步骤：</p>\n<ul>\n<li>\n<p>清洗和规范化数据</p>\n<ul>\n<li>去除无关信息：删除 HTML 标签、特殊字符、非文本内容等，确保文本的纯净性（本赛题的训练集中出现了非常多的脏数据，如 “Joey.        （掌声） （掌声） 乔伊”、“Thank you.        （马嘶声） 谢谢你们” 等这种声音词）</li>\n<li>统一格式：转换所有文本为小写，确保一致性；标准化日期、数字等格式。</li>\n<li>分句和分段：将长文本分割成句子或段落，便于处理和训练。</li>\n</ul>\n</li>\n<li>\n<p>分词</p>\n<ul>\n<li>分词：将句子分解成单词或词素（构成单词的基本组成部分，一个词素可以是一个完整的单词，也可以是单词的一部分，但每一个词素都至少携带一部分语义或语法信息），这是 NLP 中最基本的步骤之一。我们这里使用了使用 jieba 对中文进行分词，使用 spaCy 对英文进行分词。</li>\n</ul>\n</li>\n<li>\n<p>构建词汇表和词向量</p>\n<ul>\n<li>词汇表构建：从训练数据中收集所有出现过的词汇，构建词汇表，并为每个词分配一个唯一的索引。</li>\n<li>词向量：使用预训练的词向量或自己训练词向量，将词汇表中的词映射到高维空间中的向量，以捕捉语义信息（当前大模型领域训练的 embedding 模型就是用来完成此任务的）。</li>\n</ul>\n</li>\n<li>\n<p>序列截断和填充</p>\n<ul>\n<li>序列截断：限制输入序列的长度，过长的序列可能增加计算成本，同时也可能包含冗余信息。</li>\n<li>序列填充：将所有序列填充至相同的长度，便于批量处理。通常使用<PAD>标记填充。</li>\n</ul>\n</li>\n<li>\n<p>添加特殊标记</p>\n<ul>\n<li>序列开始和结束标记：在序列两端添加<SOS>（Sequence Start）和<EOS>（Sequence End）标记，帮助模型识别序列的起始和结束。</li>\n<li>未知词标记：为不在词汇表中的词添加<UNK>（Unknown）标记，使模型能够处理未见过的词汇。</li>\n</ul>\n</li>\n<li>\n<p>数据增强</p>\n<ul>\n<li>随机替换或删除词：在训练数据中随机替换或删除一些词，增强模型的鲁棒性。</li>\n<li>同义词替换：使用同义词替换原文中的词，增加训练数据的多样性。</li>\n</ul>\n</li>\n<li>\n<p>数据分割</p>\n<ul>\n<li>划分数据集：将数据划分为训练集、验证集和测试集，分别用于模型训练、参数调整和最终性能评估（该赛题中已划分好，不需要自己进行划分）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模型训练\"><a class=\"anchor\" href=\"#模型训练\">#</a> 模型训练</h3>\n<p>说到神经机器翻译就不得不提编码器 - 解码器模型，或编码器 - 解码器框架（EncoderDecoder Paradigm）。本质上，编码器 ­ 解码器模型是描述输入 ­ 输出之间关系的一种方式。编码器 ­ 解码器这个概念在日常生活中并不少见。</p>\n<div align=\"center\">\n    <style>.lmuddjqgaori{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/e-d.png\" class=\"lmuddjqgaori\">\n</div>\n<p><code>给定一个中文句子“我/对/你/感到/满意”，编码器会将这句话编码成一个实数向量(0.2, −1, 6, 5, 0.7, −2)，这个向量就是源语言句子的“表示”结果。虽然有些不可思议，但是神经机器翻译模型把这个向量等同于输入序列。向量中的数字并没有实际的意义，然而解码器却能从中提取到源语言句子中所包含的信息。也有研究人员把向量的每一个维度看作是一个“特征”，这样源语言句子就被表示成多个“特征”的联合，而且这些特征可以被自动学习。有了这样的源语言句子的“表示”，解码器可以把这个实数向量作为输入，然后逐词生成目标语言句子“I am satisfied with you”。</code></p>\n<p>在源语言句子的表示形式确定之后，需要设计相应的编码器和解码器结构。在当今主流的神经机器翻译系统中，编码器由词嵌入层和中间网络层组成：</p>\n<ul>\n<li>当输入一串单词序列时，词嵌入层 (embedding) 会将每个单词映射到多维实数表示空间，这个过程也被称为词嵌入。</li>\n<li>之后中间层会对词嵌入向量进行更深层的抽象，得到输入单词序列的中间表示。中间层的实现方式有很多，比如：循环神经网络、卷积神经网络、自注意力机制等都是模型常用的结构。</li>\n</ul>\n<p>解码器的结构基本上和编码器是一致的，在基于循环神经网络的翻译模型中，解码器只比编码器多了输出层，用于输出每个目标语言位置的单词生成概率，而在基于自注意力机制的翻译模型中，除了输出层，解码器还比编码器多一个编码 ­ 解码注意力子层，用于帮助模型更好地利用源语言信息。</p>\n<p>通过循环网络对源语言文本进行编码，并生成目标语言翻译结果的过程十分简单。然而，它仅仅使用一个定长的向量 $$h_{m}$$ 编码整个源语言序列。这对于较短的源语言文本没有什么问题，但随着文本序列长度的逐渐加长，单一的一个向量 hm 可能不足以承载源语言序列当中的所有信息。</p>\n<div align=\"center\">\n    <style>.zmmdxijtuwyl{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/RNN_BLUE.png\" class=\"zmmdxijtuwyl\">\n</div>\n<p>蓝色的线代表上述简单循环神经网络性能随源语言文本长度的变化趋势。当文本长度在 20 个单词以内时，单一向量能够承载源语言文本中的必要信息。随着文本序列的进一步增加，翻译性能的评价指标 BLEU 的值就开始出现明显地下降。因此，这就启发我们使用更加有效地机制从编码器向解码器传递源语言信息，这就是接下来要讲到的注意力机制。</p>\n<p>引入注意力机制的循环机器翻译架构与基于简单循环网络的机器翻译模型大体结构相似，均采用循环神经网络作为编码器与解码器的实现。关键的不同点在于注意力机制的引入使得不再需要把原始文本中的所有必要信息压缩到一个向量当中。引入注意力机制的循环神经网络机器翻译架构如图所示:</p>\n<p>1. 无注意力机制：<br />\n<br></p>\n<div align=\"center\">\n    <style>.flxxcdcpbvsr{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/no_attention.png\" class=\"flxxcdcpbvsr\">\n</div>\n<br>\n2.引入注意力机制：\n<br>\n<div align=\"center\">\n    <style>.gnwvokctwrkq{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/attention.png\" class=\"gnwvokctwrkq\">\n</div>\n<br>\n<p>传统的 Seq2Seq 模型在解码阶段仅依赖于编码器产生的最后一个隐藏状态，这在处理长序列时效果不佳。注意力机制允许解码器在生成每个输出词时，关注编码器产生的所有中间状态，从而更好地利用源序列的信息。具体来说，给定源语言序列经过编码器输出的向量序列 $$h_{1},h_{2},h_{3},...,h_{m}$$，注意力机制旨在依据解码端翻译的需要，自适应地从这个向量序列中查找对应的信息。</p>\n<p><em>baseline 代码中实现了一个经典的序列到序列 (Seq2Seq) 模型，中间层使用的 GRU 网络，并且网络中加入了注意力机制 (Attention Mechanism)</em></p>\n<ul>\n<li>GRU 知识讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5kMmwuYWkvY2hhcHRlcl9yZWN1cnJlbnQtbW9kZXJuL2dydS5odG1s\">https://zh.d2l.ai/chapter_recurrent-modern/gru.html</span></li>\n</ul>\n<h3 id=\"翻译质量评价\"><a class=\"anchor\" href=\"#翻译质量评价\">#</a> 翻译质量评价</h3>\n<p>本世纪初研究人员提出了译文质量自动评价方法 BLEU（Bilingual Evaluation Understudy）。该方法使得机器翻译系统的评价变得自动、快速、便捷，而且评价过程可以重复。正是由于 BLEU 等自动评价方法的提出，机器翻译研究人员可以在更短的时间内得到译文质量的评价结果，加速系统研发的进程。</p>\n<p>P.S. 文中涉及到的 GRU 门控循环单元，与改进的基于 Transformer 的解决方案，都会放在本系列的其他文章中单独讲解。</p>\n","length":4678,"excerpt":"","more":"<h2 id=\"赛事背景\"><a class=\"anchor\" href=\"#赛事背景\">#</a> 赛事背景</h2>\n<p>赛事背景<br />\n目前神经机器翻译技术已经取得了很大的突破，但在特定领域或行业中，由于机器翻译难以保证术语的一致性，导致翻译效果还不够理想。对于术语名词、人名地名等机器翻译不准确的结果，可以通过术语词典进行纠正，避免了混淆或歧义，最大限度提高翻译质量。</p>\n<p>赛事任务<br />\n基于术语词典干预的机器翻译挑战赛选择以英文为源语言，中文为目标语言的机器翻译。本次大赛除英文到中文的双语数据，还提供英中对照的术语词典。参赛队伍需要基于提供的训练数据样本从多语言机器翻译模型的构建与训练，并基于测试集以及术语词典，提供最终的翻译结果。</p>\n<p>赛题数据</p>\n<ul>\n<li>训练集：双语数据 - 中英 14 万余双语句对</li>\n<li>开发集：英中 1000 双语句对</li>\n<li>测试集：英中 1000 双语句对</li>\n<li>术语词典：英中 2226 条</li>\n</ul>\n<p>简单说明</p>\n<ul>\n<li>训练集（training set）用于运行你的学习算法。</li>\n<li>开发集（development set）用于调整参数，选择特征，以及对学习算法作出其它决定。有时也称为留出交叉验证集（hold-out cross validation set）。</li>\n<li>测试集（test set）用于评估算法的性能，但不会据此改变学习算法或参数。</li>\n</ul>\n<p>评估指标<br />\n对于参赛队伍提交的测试集翻译结果文件，采用自动评价指标 BLEU-4 进行评价，具体工具使用 sacrebleu 开源版本。</p>\n<h3 id=\"什么是-bleu-4\"><a class=\"anchor\" href=\"#什么是-bleu-4\">#</a> 什么是 BLEU-4  ？</h3>\n<p>BLEU，全称为 Bilingual Evaluation Understudy（双语评估替换），是一种对生成语句进行评估的指标。BLEU 评分是由 Kishore Papineni 等人 2002 年的论文《BLEU: a Method for Automatic Evaluation of Machine Translation》中提出的。</p>\n<p>在机器翻译领域，BLEU（Bilingual Evaluation Understudy）是一种常用的自动评价指标，用于衡量计算机生成的翻译与一组参考译文之间的相似度。这个指标特别关注 n-grams（连续的 n 个词）的精确匹配，可以被认为是对翻译准确性和流利度的一种统计估计。计算 BLEU 分数时，首先会统计生成文本中 n-grams 的频率，然后将这些频率与参考文本中的 n-grams 进行比较。如果生成的翻译中包含的 n-grams 与参考译文中出现的相同，则认为是匹配的。最终的 BLEU 分数是一个介于 0 到 1 之间的数值，其中 1 表示与参考译文完美匹配，而 0 则表示完全没有匹配。</p>\n<p>BLEU-4 特别指的是在计算时考虑四元组（即连续四个词）的匹配情况。</p>\n<h2 id=\"基于-seq2seq-的-baseline-详解\"><a class=\"anchor\" href=\"#基于-seq2seq-的-baseline-详解\">#</a> 基于 Seq2Seq 的 Baseline 详解</h2>\n<h3 id=\"环境依赖\"><a class=\"anchor\" href=\"#环境依赖\">#</a> 环境依赖</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!pip install torchtext    </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>!pip install jieba</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>!pip install sacrebleu</pre></td></tr></table></figure><p>有几个包需要额外安装：</p>\n<ul>\n<li>torchtext ：是一个用于自然语言处理（NLP）任务的库，它提供了丰富的功能，包括数据预处理、词汇构建、序列化和批处理等，特别适合于文本分类、情感分析、机器翻译等任务</li>\n<li>jieba：是一个中文分词库，用于将中文文本切分成有意义的词语</li>\n<li>sacrebleu：用于评估机器翻译质量的工具，主要通过计算 BLEU（Bilingual Evaluation Understudy）得分来衡量生成文本与参考译文之间的相似度</li>\n</ul>\n<p>这里，我们需要安装 spacy 用于英文的 tokenizer（分词，就是将句子、段落、文章这种长文本，分解为以字词为单位的数据结构，方便后续的处理分析工作）</p>\n<ul>\n<li>spacy：是一个强大的自然语言处理库，支持 70 + 语言的分词与训练</li>\n</ul>\n<div align=\"center\">\n    <style>.ktgxlajyuyqk{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/spacy.png\" class=\"ktgxlajyuyqk\">\n</div>\n<p>需要注意的是，使用命令！python -m spacy download en_core_web_trf 安装 en_core_web_sm 语言包非常的慢，经常会安装失败，因此可以离线安装 en_core_web_sm 语言包，从该路径下：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2V4cGxvc2lvbi9zcGFjeS1tb2RlbHMvcmVsZWFzZXM=\">https://github.com/explosion/spacy-models/releases</span> 安装对应版本的 en_core_web_trf 语言包，可以看到我的 en_core_web_trf 3.7.3 版本的要求 spaCy &gt;=3.7.2,❤️.8.0，刚好满足我的 3.7.5 的 spacy!：</p>\n<div align=\"center\">\n    <style>.cmimwwmceway{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/encore.png\" class=\"cmimwwmceway\">\n</div>\n<p>将下载到本地的压缩包上传到你的魔搭平台上的  dataset 目录下，然后使用！pip install ../dataset/en_core_web_trf 安装英文语言包：</p>\n<div align=\"center\">\n    <style>.axqdqqudysuj{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/model.png\" class=\"axqdqqudysuj\">\n</div>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>!pip install <span class=\"token operator\">-</span>U pip setuptools wheel <span class=\"token operator\">-</span>i https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pip install <span class=\"token operator\">-</span>U <span class=\"token string\">'spacy[cuda12x,transformers,lookups]'</span> <span class=\"token operator\">-</span>i https<span class=\"token punctuation\">:</span><span class=\"token operator\">//</span>pypi<span class=\"token punctuation\">.</span>tuna<span class=\"token punctuation\">.</span>tsinghua<span class=\"token punctuation\">.</span>edu<span class=\"token punctuation\">.</span>cn<span class=\"token operator\">/</span>simple</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>!pip install <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>dataset<span class=\"token operator\">/</span>en_core_web_trf<span class=\"token operator\">-</span><span class=\"token number\">3.7</span><span class=\"token number\">.3</span><span class=\"token operator\">-</span>py3<span class=\"token operator\">-</span>none<span class=\"token operator\">-</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">.</span>whl</pre></td></tr></table></figure><h3 id=\"数据预处理\"><a class=\"anchor\" href=\"#数据预处理\">#</a> 数据预处理</h3>\n<p>机器翻译任务的预处理是确保模型能够有效学习源语言到目标语言映射的关键步骤。预处理阶段通常包括多个步骤，旨在清理、标准化和转换数据，使之适合模型训练。以下是机器翻译任务预处理中常见的几个处理步骤：</p>\n<ul>\n<li>\n<p>清洗和规范化数据</p>\n<ul>\n<li>去除无关信息：删除 HTML 标签、特殊字符、非文本内容等，确保文本的纯净性（本赛题的训练集中出现了非常多的脏数据，如 “Joey.        （掌声） （掌声） 乔伊”、“Thank you.        （马嘶声） 谢谢你们” 等这种声音词）</li>\n<li>统一格式：转换所有文本为小写，确保一致性；标准化日期、数字等格式。</li>\n<li>分句和分段：将长文本分割成句子或段落，便于处理和训练。</li>\n</ul>\n</li>\n<li>\n<p>分词</p>\n<ul>\n<li>分词：将句子分解成单词或词素（构成单词的基本组成部分，一个词素可以是一个完整的单词，也可以是单词的一部分，但每一个词素都至少携带一部分语义或语法信息），这是 NLP 中最基本的步骤之一。我们这里使用了使用 jieba 对中文进行分词，使用 spaCy 对英文进行分词。</li>\n</ul>\n</li>\n<li>\n<p>构建词汇表和词向量</p>\n<ul>\n<li>词汇表构建：从训练数据中收集所有出现过的词汇，构建词汇表，并为每个词分配一个唯一的索引。</li>\n<li>词向量：使用预训练的词向量或自己训练词向量，将词汇表中的词映射到高维空间中的向量，以捕捉语义信息（当前大模型领域训练的 embedding 模型就是用来完成此任务的）。</li>\n</ul>\n</li>\n<li>\n<p>序列截断和填充</p>\n<ul>\n<li>序列截断：限制输入序列的长度，过长的序列可能增加计算成本，同时也可能包含冗余信息。</li>\n<li>序列填充：将所有序列填充至相同的长度，便于批量处理。通常使用<PAD>标记填充。</li>\n</ul>\n</li>\n<li>\n<p>添加特殊标记</p>\n<ul>\n<li>序列开始和结束标记：在序列两端添加<SOS>（Sequence Start）和<EOS>（Sequence End）标记，帮助模型识别序列的起始和结束。</li>\n<li>未知词标记：为不在词汇表中的词添加<UNK>（Unknown）标记，使模型能够处理未见过的词汇。</li>\n</ul>\n</li>\n<li>\n<p>数据增强</p>\n<ul>\n<li>随机替换或删除词：在训练数据中随机替换或删除一些词，增强模型的鲁棒性。</li>\n<li>同义词替换：使用同义词替换原文中的词，增加训练数据的多样性。</li>\n</ul>\n</li>\n<li>\n<p>数据分割</p>\n<ul>\n<li>划分数据集：将数据划分为训练集、验证集和测试集，分别用于模型训练、参数调整和最终性能评估（该赛题中已划分好，不需要自己进行划分）</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"模型训练\"><a class=\"anchor\" href=\"#模型训练\">#</a> 模型训练</h3>\n<p>说到神经机器翻译就不得不提编码器 - 解码器模型，或编码器 - 解码器框架（EncoderDecoder Paradigm）。本质上，编码器 ­ 解码器模型是描述输入 ­ 输出之间关系的一种方式。编码器 ­ 解码器这个概念在日常生活中并不少见。</p>\n<div align=\"center\">\n    <style>.lmuddjqgaori{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/e-d.png\" class=\"lmuddjqgaori\">\n</div>\n<p><code>给定一个中文句子“我/对/你/感到/满意”，编码器会将这句话编码成一个实数向量(0.2, −1, 6, 5, 0.7, −2)，这个向量就是源语言句子的“表示”结果。虽然有些不可思议，但是神经机器翻译模型把这个向量等同于输入序列。向量中的数字并没有实际的意义，然而解码器却能从中提取到源语言句子中所包含的信息。也有研究人员把向量的每一个维度看作是一个“特征”，这样源语言句子就被表示成多个“特征”的联合，而且这些特征可以被自动学习。有了这样的源语言句子的“表示”，解码器可以把这个实数向量作为输入，然后逐词生成目标语言句子“I am satisfied with you”。</code></p>\n<p>在源语言句子的表示形式确定之后，需要设计相应的编码器和解码器结构。在当今主流的神经机器翻译系统中，编码器由词嵌入层和中间网络层组成：</p>\n<ul>\n<li>当输入一串单词序列时，词嵌入层 (embedding) 会将每个单词映射到多维实数表示空间，这个过程也被称为词嵌入。</li>\n<li>之后中间层会对词嵌入向量进行更深层的抽象，得到输入单词序列的中间表示。中间层的实现方式有很多，比如：循环神经网络、卷积神经网络、自注意力机制等都是模型常用的结构。</li>\n</ul>\n<p>解码器的结构基本上和编码器是一致的，在基于循环神经网络的翻译模型中，解码器只比编码器多了输出层，用于输出每个目标语言位置的单词生成概率，而在基于自注意力机制的翻译模型中，除了输出层，解码器还比编码器多一个编码 ­ 解码注意力子层，用于帮助模型更好地利用源语言信息。</p>\n<p>通过循环网络对源语言文本进行编码，并生成目标语言翻译结果的过程十分简单。然而，它仅仅使用一个定长的向量 $$h_{m}$$ 编码整个源语言序列。这对于较短的源语言文本没有什么问题，但随着文本序列长度的逐渐加长，单一的一个向量 hm 可能不足以承载源语言序列当中的所有信息。</p>\n<div align=\"center\">\n    <style>.zmmdxijtuwyl{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/RNN_BLUE.png\" class=\"zmmdxijtuwyl\">\n</div>\n<p>蓝色的线代表上述简单循环神经网络性能随源语言文本长度的变化趋势。当文本长度在 20 个单词以内时，单一向量能够承载源语言文本中的必要信息。随着文本序列的进一步增加，翻译性能的评价指标 BLEU 的值就开始出现明显地下降。因此，这就启发我们使用更加有效地机制从编码器向解码器传递源语言信息，这就是接下来要讲到的注意力机制。</p>\n<p>引入注意力机制的循环机器翻译架构与基于简单循环网络的机器翻译模型大体结构相似，均采用循环神经网络作为编码器与解码器的实现。关键的不同点在于注意力机制的引入使得不再需要把原始文本中的所有必要信息压缩到一个向量当中。引入注意力机制的循环神经网络机器翻译架构如图所示:</p>\n<p>1. 无注意力机制：<br />\n<br></p>\n<div align=\"center\">\n    <style>.flxxcdcpbvsr{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/no_attention.png\" class=\"flxxcdcpbvsr\">\n</div>\n<br>\n2.引入注意力机制：\n<br>\n<div align=\"center\">\n    <style>.gnwvokctwrkq{}</style><img data-src=\"/2024/08/17/%E5%9F%BA%E4%BA%8E%E6%9C%AF%E8%AF%AD%E8%AF%8D%E5%85%B8%E5%B9%B2%E9%A2%84%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E6%8C%91%E6%88%98%E8%B5%9B/attention.png\" class=\"gnwvokctwrkq\">\n</div>\n<br>\n<p>传统的 Seq2Seq 模型在解码阶段仅依赖于编码器产生的最后一个隐藏状态，这在处理长序列时效果不佳。注意力机制允许解码器在生成每个输出词时，关注编码器产生的所有中间状态，从而更好地利用源序列的信息。具体来说，给定源语言序列经过编码器输出的向量序列 $$h_{1},h_{2},h_{3},...,h_{m}$$，注意力机制旨在依据解码端翻译的需要，自适应地从这个向量序列中查找对应的信息。</p>\n<p><em>baseline 代码中实现了一个经典的序列到序列 (Seq2Seq) 模型，中间层使用的 GRU 网络，并且网络中加入了注意力机制 (Attention Mechanism)</em></p>\n<ul>\n<li>GRU 知识讲解：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5kMmwuYWkvY2hhcHRlcl9yZWN1cnJlbnQtbW9kZXJuL2dydS5odG1s\">https://zh.d2l.ai/chapter_recurrent-modern/gru.html</span></li>\n</ul>\n<h3 id=\"翻译质量评价\"><a class=\"anchor\" href=\"#翻译质量评价\">#</a> 翻译质量评价</h3>\n<p>本世纪初研究人员提出了译文质量自动评价方法 BLEU（Bilingual Evaluation Understudy）。该方法使得机器翻译系统的评价变得自动、快速、便捷，而且评价过程可以重复。正是由于 BLEU 等自动评价方法的提出，机器翻译研究人员可以在更短的时间内得到译文质量的评价结果，加速系统研发的进程。</p>\n<p>P.S. 文中涉及到的 GRU 门控循环单元，与改进的基于 Transformer 的解决方案，都会放在本系列的其他文章中单独讲解。</p>\n"},{"title":"大模型基础","date":"2024-07-29T12:12:41.000Z","_content":"\n# Attention is all you need\n\n[论文精讲](https://www.bilibili.com/video/BV1pu411o7BE/?spm_id_from=333.999.0.0&vd_source=27bfe73442d060c8d6150bb8b61d24a2)\n\n## Transfomer架构\n\n### 原文片段\n\n“主流的序列转换模型都是基于复杂的循环神经网络或卷积神经网络，且都包含一个encoder和一个decoder。表现最好的模型还通过attention机制把encoder和decoder联接起来。而Transformer只基于单独的attention机制，完全避免使用循环和卷积。\n\nencoder将符号表示的输入序列( x 1 , . . . , x n ) 映射成一个连续表示的序列z = ( z 1 , . . . , z n ) \n\n给定z ，解码器以一次生成一个字符的方式生成输出序列( y 1 , . . . , y m ) 。在每一步，模型都是自回归的。在生成下一个字符时，将先前生成的符号作为附加输入。\n\nTransformer遵循这个总体架构，使用堆叠的self-attention层、point-wise和全连接层，分别用于encoder和decoder。\n\nEncoder : encoder由N(N=6)个完全相同的layer堆叠而成，每层有两个子层。第一层是multi-head self-attention机制，第二层是一个简单的、位置全连接的前馈神经网络。我们在两个子层的每一层后采用残差连接，接着进行layer normalization。\n\nDecoder : decoder也由N(N=6)个完全相同的layer堆叠而成。除了每个编码器层中的两个子层之外，解码器还插入第三个子层，该子层对编码器堆栈的输出执行multi-head attention操作，与encoder相似，我们在每个子层的后面使用了残差连接，之后采用了layer normalization。”\n\n<div align=\"center\">\n    <img src=\"大模型基础/transformer原版.png\">\n</div>\n\n### Transfomer开山之作\n\n在Transformer提出以前，主流的NLP模型包括RNN、LSTM、GRU等，这些模型是有以下缺点：\n\n- 难以并行\n- 时序中过早的信息容易被丢弃\n- 内存开销大\n\n由于这些网络都是由前往后一步步计算的，当前的状态不仅依赖当前的输入，也依赖于前一个状态的输出。即对于网络中的第个t状态，与前t-1个状态都有关，使得网络必须一步一步计算；当较为重要的信息在较早的时序中进入网络时，多次传播过程中可能保留很少甚至被丢弃；从另一角度来考虑，即使重要的信息没有被丢弃，而是随着网络继续传递，那么势必会造成内存的冗余，导致开销过大。\n\n所以，作者团队因势利导，引出了本文纯attention、高并行、高效率的Transformer网络结构。\n\nTransformer这种神经网络架构，其独特之处在于完全基于注意力机制，摒弃了传统的循环和卷积操作。通过自注意力机制（self-attention），Transformer能够有效捕捉输入序列中的长距离依赖关系，使得模型在处理长文本时更为高效和准确。多头注意力机制（multi-head attention）则进一步增强了模型的表达能力，使其能够同时关注输入序列中的不同部分，捕捉更加复杂的语义关系。\n\n<div align=\"center\">\n    <img src=\"大模型基础/transformer01.png\">\n</div>\n\n### layer norm 而不是batch norm\n\n当我们使用梯度下降法做优化时，随着网络深度的增加，输入数据的特征分布会不断发生变化，为了保证数据特征分布的稳定性，会加入Normalization。从而可以使用更大的学习率，从而加速模型的收敛速度。同时，Normalization也有一定的抗过拟合作用，使训练过程更加平稳。具体地，Normalization的主要作用就是把每层特征输入到激活函数之前，对它们进行normalization，使其转换为均值为0，方差为1的数据，从而可以避免数据落在激活函数的饱和区，以减少梯度消失的问题。\n\nBN（BatchNorm）和LN（LayerNorm）是两种最常用的Normalization的方法，它们都是将输入特征转换为均值为0，方差为1的数据，它们的形式是：\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/BNLN.jpg\">\n</div>\n<br>\n只不过，BN是对一个batch-size样本内的每个特征做归一化，LN是对每个样本的所有特征做归一化。以一个二维矩阵为例，它的行数代表batch_size，列数代表fea_nums。BN就是竖着进行归一化，LN则是横着进行归一化。\n\n所以，BN抹平了不同特征之间的大小关系，而保留了不同样本之间的大小关系。这样，如果具体任务依赖于不同样本之间的关系，BN更有效，尤其是在CV领域，例如不同图片样本进行分类，不同样本之间的大小关系得以保留。\nLN抹平了不同样本之间的大小关系，而保留了不同特征之间的大小关系。所以，LN更适合NLP领域的任务，其中，一个样本的特征实际上就是不同word embedding，通过LN可以保留特征之间的这种时序关系。\n\n\n### Encoder-Decoder框架\nEncoder-Decoder框架可以看作是一种深度学习领域的研究模式，应用场景异常广泛。\n\n文本处理领域的Encoder-Decoder框架可以这么直观地去理解：可以把它看作适合处理由一个句子（或篇章）生成另外一个句子（或篇章）的通用处理模型。对于句子对<Source,Target>，我们的目标是给定输入句子Source，期待通过Encoder-Decoder框架来生成目标句子Target。\n\nEncoder顾名思义就是对输入句子Source进行编码，将输入句子通过非线性变换转化为中间语义表示C;\n\n对于解码器Decoder来说，其任务是根据句子Source的中间语义表示C和之前已经生成的历史信息y1,y2……yi-1来生成i时刻要生成的单词yi。\n\n每个yi都依次这么产生，那么看起来就是整个系统根据输入句子Source生成了目标句子Target。\n\n- 如果Source是中文句子，Target是英文句子，那么这就是解决机器翻译问题的Encoder-Decoder框架；\n- 如果Source是一篇文章，Target是概括性的几句描述语句，那么这是文本摘要的Encoder-Decoder框架；\n- 如果Source是一句问句，Target是一句回答，那么这是问答系统或者对话机器人的Encoder-Decoder框架。\n\nP.S. 一般而言，文本处理和语音识别的Encoder部分通常采用RNN模型，图像处理的Encoder一般采用CNN模型。\n\n### Attention机制\n\nAttention 机制 3 大优点：\n\n- 参数少\n模型复杂度跟 CNN、RNN 相比，复杂度更小，参数也更少。所以对算力的要求也就更小。\n\n- 速度快\nAttention 解决了 RNN 不能并行计算的问题。Attention机制每一步计算不依赖于上一步的计算结果，因此可以和CNN一样并行处理。\n\n- 效果好\n在 Attention 机制引入之前，有一个问题大家一直很苦恼：长距离的信息会被弱化，就好像记忆能力弱的人，记不住过去的事情是一样的。\nAttention 是挑重点，就算文本比较长，也能从中间抓住重点，不丢失重要的信息。下图红色的预期就是被挑出来的重点。\n\n目前大多数注意力模型附着在Encoder-Decoder框架下，当然，其实注意力模型可以看作一种通用的思想，本身并不依赖于特定框架，这点需要注意。Attention 并不一定要在 Encoder-Decoder 框架下使用的，他是可以脱离 Encoder-Decoder 框架的。\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/attention01.png\">\n</div>\n<br>\n将Source中的构成元素想象成是由一系列的<Key,Value>数据对构成，此时给定Target中的某个元素Query，通过计算Query和各个Key的相似性或者相关性，得到每个Key对应Value的权重系数，然后对Value进行加权求和，即得到了最终的Attention数值。所以本质上Attention机制是对Source中元素的Value值进行加权求和，而Query和Key用来计算对应Value的权重系数。即可以将其本质思想改写为如下公式：\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/Attention公式.png\">\n</div>\n<br>\n在一般任务的Encoder-Decoder框架中，输入Source和输出Target内容是不一样的，比如对于英-中机器翻译来说，Source是英文句子，Target是对应的翻译出的中文句子，Attention机制发生在Target的元素Query和Source中的所有元素之间。\n\n而**Self Attention**顾名思义，指的不是Target和Source之间的Attention机制，而是Source内部元素之间或者Target内部元素之间发生的Attention机制，也可以理解为Target=Source这种特殊情况下的注意力计算机制。其具体计算过程是一样的，只是计算对象发生了变化而已\n\n\nTransformer使用的点乘注意力机制和多头注意力机制：\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/attention原版.png\">\n</div>\n<br>\n这里h=8,8个head\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/transformer原版.png\">\n</div>\n<br>\n\n#### 编码器的注意力机制：\n\n多头自注意力机制：\n- key value query都是自己本身，一个向量和各个向量计算相似度\n多头注意力块接收包含子向量（句子中的单词）的向量（句子）作为输入，然后计算每个位置与向量的所有其他位置之间的注意力。\n\n#### 解码器的注意力机制：\n\nMasked 多头自注意力机制：\n- 用 masked 把后面的内容盖住，自注意力机制，和编码器的自注意力机制一样。\n\n最后一个 多头注意力机制：\n- 不再是自注意力，编码器的输出作为value和key进来，解码器下一层的输出作为query进来。\n\n\n### Add & Norm\n\n残差连接&归一化\n就是指对新的output做标准化\n\n- add代表残差连接（Residual Connection），旨在解决深度神经网络训练过程中的梯度消失和表示瓶颈问题。\n- norm = Normalization归一化，在transformer里面，使用layer normalization。\n\nadd：残差连接，可以增加深度，不丢失初始的特征。\nnorm归一化，因为add把原始的特征加回来，为了避免梯度消失，减少运算，进行归一化处理。\n\n### FeedForward\n\nFeedForward是由全连接层（FC）与激活ReLu组成的结构\n\n为什么要用FeedForward呢？不用单纯的FC呢？\n- 主要还是想提取更深层次的特征，在Multi-Head Attention中，主要是进行矩阵乘法，即都是线性变换，而线性变换的学习能力不如非线性变换的学习能力强，我们希望通过引入ReLu激活函数，使模型增加非线性成分，强化学习能力。\n\n","source":"_posts/大模型基础.md","raw":"---\ntitle: 大模型基础\ndate: 2024-07-29 20:12:41\ncategories:\n- [深度学习]\ntags:\n- [大模型, NLP]\n---\n\n# Attention is all you need\n\n[论文精讲](https://www.bilibili.com/video/BV1pu411o7BE/?spm_id_from=333.999.0.0&vd_source=27bfe73442d060c8d6150bb8b61d24a2)\n\n## Transfomer架构\n\n### 原文片段\n\n“主流的序列转换模型都是基于复杂的循环神经网络或卷积神经网络，且都包含一个encoder和一个decoder。表现最好的模型还通过attention机制把encoder和decoder联接起来。而Transformer只基于单独的attention机制，完全避免使用循环和卷积。\n\nencoder将符号表示的输入序列( x 1 , . . . , x n ) 映射成一个连续表示的序列z = ( z 1 , . . . , z n ) \n\n给定z ，解码器以一次生成一个字符的方式生成输出序列( y 1 , . . . , y m ) 。在每一步，模型都是自回归的。在生成下一个字符时，将先前生成的符号作为附加输入。\n\nTransformer遵循这个总体架构，使用堆叠的self-attention层、point-wise和全连接层，分别用于encoder和decoder。\n\nEncoder : encoder由N(N=6)个完全相同的layer堆叠而成，每层有两个子层。第一层是multi-head self-attention机制，第二层是一个简单的、位置全连接的前馈神经网络。我们在两个子层的每一层后采用残差连接，接着进行layer normalization。\n\nDecoder : decoder也由N(N=6)个完全相同的layer堆叠而成。除了每个编码器层中的两个子层之外，解码器还插入第三个子层，该子层对编码器堆栈的输出执行multi-head attention操作，与encoder相似，我们在每个子层的后面使用了残差连接，之后采用了layer normalization。”\n\n<div align=\"center\">\n    <img src=\"大模型基础/transformer原版.png\">\n</div>\n\n### Transfomer开山之作\n\n在Transformer提出以前，主流的NLP模型包括RNN、LSTM、GRU等，这些模型是有以下缺点：\n\n- 难以并行\n- 时序中过早的信息容易被丢弃\n- 内存开销大\n\n由于这些网络都是由前往后一步步计算的，当前的状态不仅依赖当前的输入，也依赖于前一个状态的输出。即对于网络中的第个t状态，与前t-1个状态都有关，使得网络必须一步一步计算；当较为重要的信息在较早的时序中进入网络时，多次传播过程中可能保留很少甚至被丢弃；从另一角度来考虑，即使重要的信息没有被丢弃，而是随着网络继续传递，那么势必会造成内存的冗余，导致开销过大。\n\n所以，作者团队因势利导，引出了本文纯attention、高并行、高效率的Transformer网络结构。\n\nTransformer这种神经网络架构，其独特之处在于完全基于注意力机制，摒弃了传统的循环和卷积操作。通过自注意力机制（self-attention），Transformer能够有效捕捉输入序列中的长距离依赖关系，使得模型在处理长文本时更为高效和准确。多头注意力机制（multi-head attention）则进一步增强了模型的表达能力，使其能够同时关注输入序列中的不同部分，捕捉更加复杂的语义关系。\n\n<div align=\"center\">\n    <img src=\"大模型基础/transformer01.png\">\n</div>\n\n### layer norm 而不是batch norm\n\n当我们使用梯度下降法做优化时，随着网络深度的增加，输入数据的特征分布会不断发生变化，为了保证数据特征分布的稳定性，会加入Normalization。从而可以使用更大的学习率，从而加速模型的收敛速度。同时，Normalization也有一定的抗过拟合作用，使训练过程更加平稳。具体地，Normalization的主要作用就是把每层特征输入到激活函数之前，对它们进行normalization，使其转换为均值为0，方差为1的数据，从而可以避免数据落在激活函数的饱和区，以减少梯度消失的问题。\n\nBN（BatchNorm）和LN（LayerNorm）是两种最常用的Normalization的方法，它们都是将输入特征转换为均值为0，方差为1的数据，它们的形式是：\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/BNLN.jpg\">\n</div>\n<br>\n只不过，BN是对一个batch-size样本内的每个特征做归一化，LN是对每个样本的所有特征做归一化。以一个二维矩阵为例，它的行数代表batch_size，列数代表fea_nums。BN就是竖着进行归一化，LN则是横着进行归一化。\n\n所以，BN抹平了不同特征之间的大小关系，而保留了不同样本之间的大小关系。这样，如果具体任务依赖于不同样本之间的关系，BN更有效，尤其是在CV领域，例如不同图片样本进行分类，不同样本之间的大小关系得以保留。\nLN抹平了不同样本之间的大小关系，而保留了不同特征之间的大小关系。所以，LN更适合NLP领域的任务，其中，一个样本的特征实际上就是不同word embedding，通过LN可以保留特征之间的这种时序关系。\n\n\n### Encoder-Decoder框架\nEncoder-Decoder框架可以看作是一种深度学习领域的研究模式，应用场景异常广泛。\n\n文本处理领域的Encoder-Decoder框架可以这么直观地去理解：可以把它看作适合处理由一个句子（或篇章）生成另外一个句子（或篇章）的通用处理模型。对于句子对<Source,Target>，我们的目标是给定输入句子Source，期待通过Encoder-Decoder框架来生成目标句子Target。\n\nEncoder顾名思义就是对输入句子Source进行编码，将输入句子通过非线性变换转化为中间语义表示C;\n\n对于解码器Decoder来说，其任务是根据句子Source的中间语义表示C和之前已经生成的历史信息y1,y2……yi-1来生成i时刻要生成的单词yi。\n\n每个yi都依次这么产生，那么看起来就是整个系统根据输入句子Source生成了目标句子Target。\n\n- 如果Source是中文句子，Target是英文句子，那么这就是解决机器翻译问题的Encoder-Decoder框架；\n- 如果Source是一篇文章，Target是概括性的几句描述语句，那么这是文本摘要的Encoder-Decoder框架；\n- 如果Source是一句问句，Target是一句回答，那么这是问答系统或者对话机器人的Encoder-Decoder框架。\n\nP.S. 一般而言，文本处理和语音识别的Encoder部分通常采用RNN模型，图像处理的Encoder一般采用CNN模型。\n\n### Attention机制\n\nAttention 机制 3 大优点：\n\n- 参数少\n模型复杂度跟 CNN、RNN 相比，复杂度更小，参数也更少。所以对算力的要求也就更小。\n\n- 速度快\nAttention 解决了 RNN 不能并行计算的问题。Attention机制每一步计算不依赖于上一步的计算结果，因此可以和CNN一样并行处理。\n\n- 效果好\n在 Attention 机制引入之前，有一个问题大家一直很苦恼：长距离的信息会被弱化，就好像记忆能力弱的人，记不住过去的事情是一样的。\nAttention 是挑重点，就算文本比较长，也能从中间抓住重点，不丢失重要的信息。下图红色的预期就是被挑出来的重点。\n\n目前大多数注意力模型附着在Encoder-Decoder框架下，当然，其实注意力模型可以看作一种通用的思想，本身并不依赖于特定框架，这点需要注意。Attention 并不一定要在 Encoder-Decoder 框架下使用的，他是可以脱离 Encoder-Decoder 框架的。\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/attention01.png\">\n</div>\n<br>\n将Source中的构成元素想象成是由一系列的<Key,Value>数据对构成，此时给定Target中的某个元素Query，通过计算Query和各个Key的相似性或者相关性，得到每个Key对应Value的权重系数，然后对Value进行加权求和，即得到了最终的Attention数值。所以本质上Attention机制是对Source中元素的Value值进行加权求和，而Query和Key用来计算对应Value的权重系数。即可以将其本质思想改写为如下公式：\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/Attention公式.png\">\n</div>\n<br>\n在一般任务的Encoder-Decoder框架中，输入Source和输出Target内容是不一样的，比如对于英-中机器翻译来说，Source是英文句子，Target是对应的翻译出的中文句子，Attention机制发生在Target的元素Query和Source中的所有元素之间。\n\n而**Self Attention**顾名思义，指的不是Target和Source之间的Attention机制，而是Source内部元素之间或者Target内部元素之间发生的Attention机制，也可以理解为Target=Source这种特殊情况下的注意力计算机制。其具体计算过程是一样的，只是计算对象发生了变化而已\n\n\nTransformer使用的点乘注意力机制和多头注意力机制：\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/attention原版.png\">\n</div>\n<br>\n这里h=8,8个head\n<br>\n<div align=\"center\">\n    <img src=\"大模型基础/transformer原版.png\">\n</div>\n<br>\n\n#### 编码器的注意力机制：\n\n多头自注意力机制：\n- key value query都是自己本身，一个向量和各个向量计算相似度\n多头注意力块接收包含子向量（句子中的单词）的向量（句子）作为输入，然后计算每个位置与向量的所有其他位置之间的注意力。\n\n#### 解码器的注意力机制：\n\nMasked 多头自注意力机制：\n- 用 masked 把后面的内容盖住，自注意力机制，和编码器的自注意力机制一样。\n\n最后一个 多头注意力机制：\n- 不再是自注意力，编码器的输出作为value和key进来，解码器下一层的输出作为query进来。\n\n\n### Add & Norm\n\n残差连接&归一化\n就是指对新的output做标准化\n\n- add代表残差连接（Residual Connection），旨在解决深度神经网络训练过程中的梯度消失和表示瓶颈问题。\n- norm = Normalization归一化，在transformer里面，使用layer normalization。\n\nadd：残差连接，可以增加深度，不丢失初始的特征。\nnorm归一化，因为add把原始的特征加回来，为了避免梯度消失，减少运算，进行归一化处理。\n\n### FeedForward\n\nFeedForward是由全连接层（FC）与激活ReLu组成的结构\n\n为什么要用FeedForward呢？不用单纯的FC呢？\n- 主要还是想提取更深层次的特征，在Multi-Head Attention中，主要是进行矩阵乘法，即都是线性变换，而线性变换的学习能力不如非线性变换的学习能力强，我们希望通过引入ReLu激活函数，使模型增加非线性成分，强化学习能力。\n\n","slug":"大模型基础","published":1,"updated":"2024-12-27T14:38:31.705Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfm002umcuyeiw92doi","content":"<h1 id=\"attention-is-all-you-need\"><a class=\"anchor\" href=\"#attention-is-all-you-need\">#</a> Attention is all you need</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXB1NDExbzdCRS8/c3BtX2lkX2Zyb209MzMzLjk5OS4wLjAmYW1wO3ZkX3NvdXJjZT0yN2JmZTczNDQyZDA2MGM4ZDYxNTBiYjhiNjFkMjRhMg==\">论文精讲</span></p>\n<h2 id=\"transfomer架构\"><a class=\"anchor\" href=\"#transfomer架构\">#</a> Transfomer 架构</h2>\n<h3 id=\"原文片段\"><a class=\"anchor\" href=\"#原文片段\">#</a> 原文片段</h3>\n<p>“主流的序列转换模型都是基于复杂的循环神经网络或卷积神经网络，且都包含一个 encoder 和一个 decoder。表现最好的模型还通过 attention 机制把 encoder 和 decoder 联接起来。而 Transformer 只基于单独的 attention 机制，完全避免使用循环和卷积。</p>\n<p>encoder 将符号表示的输入序列 (x 1 , . . . , x n) 映射成一个连续表示的序列 z = ( z 1 , . . . , z n )</p>\n<p>给定 z ，解码器以一次生成一个字符的方式生成输出序列 (y 1 , . . . , y m) 。在每一步，模型都是自回归的。在生成下一个字符时，将先前生成的符号作为附加输入。</p>\n<p>Transformer 遵循这个总体架构，使用堆叠的 self-attention 层、point-wise 和全连接层，分别用于 encoder 和 decoder。</p>\n<p>Encoder : encoder 由 N (N=6) 个完全相同的 layer 堆叠而成，每层有两个子层。第一层是 multi-head self-attention 机制，第二层是一个简单的、位置全连接的前馈神经网络。我们在两个子层的每一层后采用残差连接，接着进行 layer normalization。</p>\n<p>Decoder : decoder 也由 N (N=6) 个完全相同的 layer 堆叠而成。除了每个编码器层中的两个子层之外，解码器还插入第三个子层，该子层对编码器堆栈的输出执行 multi-head attention 操作，与 encoder 相似，我们在每个子层的后面使用了残差连接，之后采用了 layer normalization。”</p>\n<div align=\"center\">\n    <style>.oywfbyrebgqc{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer%E5%8E%9F%E7%89%88.png\" class=\"oywfbyrebgqc\">\n</div>\n<h3 id=\"transfomer开山之作\"><a class=\"anchor\" href=\"#transfomer开山之作\">#</a> Transfomer 开山之作</h3>\n<p>在 Transformer 提出以前，主流的 NLP 模型包括 RNN、LSTM、GRU 等，这些模型是有以下缺点：</p>\n<ul>\n<li>难以并行</li>\n<li>时序中过早的信息容易被丢弃</li>\n<li>内存开销大</li>\n</ul>\n<p>由于这些网络都是由前往后一步步计算的，当前的状态不仅依赖当前的输入，也依赖于前一个状态的输出。即对于网络中的第个 t 状态，与前 t-1 个状态都有关，使得网络必须一步一步计算；当较为重要的信息在较早的时序中进入网络时，多次传播过程中可能保留很少甚至被丢弃；从另一角度来考虑，即使重要的信息没有被丢弃，而是随着网络继续传递，那么势必会造成内存的冗余，导致开销过大。</p>\n<p>所以，作者团队因势利导，引出了本文纯 attention、高并行、高效率的 Transformer 网络结构。</p>\n<p>Transformer 这种神经网络架构，其独特之处在于完全基于注意力机制，摒弃了传统的循环和卷积操作。通过自注意力机制（self-attention），Transformer 能够有效捕捉输入序列中的长距离依赖关系，使得模型在处理长文本时更为高效和准确。多头注意力机制（multi-head attention）则进一步增强了模型的表达能力，使其能够同时关注输入序列中的不同部分，捕捉更加复杂的语义关系。</p>\n<div align=\"center\">\n    <style>.adqnohdwywyt{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer01.png\" class=\"adqnohdwywyt\">\n</div>\n<h3 id=\"layer-norm-而不是batch-norm\"><a class=\"anchor\" href=\"#layer-norm-而不是batch-norm\">#</a> layer norm 而不是 batch norm</h3>\n<p>当我们使用梯度下降法做优化时，随着网络深度的增加，输入数据的特征分布会不断发生变化，为了保证数据特征分布的稳定性，会加入 Normalization。从而可以使用更大的学习率，从而加速模型的收敛速度。同时，Normalization 也有一定的抗过拟合作用，使训练过程更加平稳。具体地，Normalization 的主要作用就是把每层特征输入到激活函数之前，对它们进行 normalization，使其转换为均值为 0，方差为 1 的数据，从而可以避免数据落在激活函数的饱和区，以减少梯度消失的问题。</p>\n<p>BN（BatchNorm）和 LN（LayerNorm）是两种最常用的 Normalization 的方法，它们都是将输入特征转换为均值为 0，方差为 1 的数据，它们的形式是：<br />\n<br></p>\n<div align=\"center\">\n    <style>.kpimytdcntqh{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/BNLN.jpg\" class=\"kpimytdcntqh\">\n</div>\n<br>\n只不过，BN是对一个batch-size样本内的每个特征做归一化，LN是对每个样本的所有特征做归一化。以一个二维矩阵为例，它的行数代表batch_size，列数代表fea_nums。BN就是竖着进行归一化，LN则是横着进行归一化。\n<p>所以，BN 抹平了不同特征之间的大小关系，而保留了不同样本之间的大小关系。这样，如果具体任务依赖于不同样本之间的关系，BN 更有效，尤其是在 CV 领域，例如不同图片样本进行分类，不同样本之间的大小关系得以保留。<br />\nLN 抹平了不同样本之间的大小关系，而保留了不同特征之间的大小关系。所以，LN 更适合 NLP 领域的任务，其中，一个样本的特征实际上就是不同 word embedding，通过 LN 可以保留特征之间的这种时序关系。</p>\n<h3 id=\"encoder-decoder框架\"><a class=\"anchor\" href=\"#encoder-decoder框架\">#</a> Encoder-Decoder 框架</h3>\n<p>Encoder-Decoder 框架可以看作是一种深度学习领域的研究模式，应用场景异常广泛。</p>\n<p>文本处理领域的 Encoder-Decoder 框架可以这么直观地去理解：可以把它看作适合处理由一个句子（或篇章）生成另外一个句子（或篇章）的通用处理模型。对于句子对 &lt;Source,Target&gt;，我们的目标是给定输入句子 Source，期待通过 Encoder-Decoder 框架来生成目标句子 Target。</p>\n<p>Encoder 顾名思义就是对输入句子 Source 进行编码，将输入句子通过非线性变换转化为中间语义表示 C;</p>\n<p>对于解码器 Decoder 来说，其任务是根据句子 Source 的中间语义表示 C 和之前已经生成的历史信息 y1,y2……yi-1 来生成 i 时刻要生成的单词 yi。</p>\n<p>每个 yi 都依次这么产生，那么看起来就是整个系统根据输入句子 Source 生成了目标句子 Target。</p>\n<ul>\n<li>如果 Source 是中文句子，Target 是英文句子，那么这就是解决机器翻译问题的 Encoder-Decoder 框架；</li>\n<li>如果 Source 是一篇文章，Target 是概括性的几句描述语句，那么这是文本摘要的 Encoder-Decoder 框架；</li>\n<li>如果 Source 是一句问句，Target 是一句回答，那么这是问答系统或者对话机器人的 Encoder-Decoder 框架。</li>\n</ul>\n<p>P.S. 一般而言，文本处理和语音识别的 Encoder 部分通常采用 RNN 模型，图像处理的 Encoder 一般采用 CNN 模型。</p>\n<h3 id=\"attention机制\"><a class=\"anchor\" href=\"#attention机制\">#</a> Attention 机制</h3>\n<p>Attention 机制 3 大优点：</p>\n<ul>\n<li>\n<p>参数少<br />\n模型复杂度跟 CNN、RNN 相比，复杂度更小，参数也更少。所以对算力的要求也就更小。</p>\n</li>\n<li>\n<p>速度快<br />\n Attention 解决了 RNN 不能并行计算的问题。Attention 机制每一步计算不依赖于上一步的计算结果，因此可以和 CNN 一样并行处理。</p>\n</li>\n<li>\n<p>效果好<br />\n在 Attention 机制引入之前，有一个问题大家一直很苦恼：长距离的信息会被弱化，就好像记忆能力弱的人，记不住过去的事情是一样的。<br />\nAttention 是挑重点，就算文本比较长，也能从中间抓住重点，不丢失重要的信息。下图红色的预期就是被挑出来的重点。</p>\n</li>\n</ul>\n<p>目前大多数注意力模型附着在 Encoder-Decoder 框架下，当然，其实注意力模型可以看作一种通用的思想，本身并不依赖于特定框架，这点需要注意。Attention 并不一定要在 Encoder-Decoder 框架下使用的，他是可以脱离 Encoder-Decoder 框架的。<br />\n<br></p>\n<div align=\"center\">\n    <style>.vlgsldyxjnvc{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/attention01.png\" class=\"vlgsldyxjnvc\">\n</div>\n<br>\n将Source中的构成元素想象成是由一系列的<Key,Value>数据对构成，此时给定Target中的某个元素Query，通过计算Query和各个Key的相似性或者相关性，得到每个Key对应Value的权重系数，然后对Value进行加权求和，即得到了最终的Attention数值。所以本质上Attention机制是对Source中元素的Value值进行加权求和，而Query和Key用来计算对应Value的权重系数。即可以将其本质思想改写为如下公式：\n<br>\n<div align=\"center\">\n    <style>.sgwqvxqaygxd{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/Attention%E5%85%AC%E5%BC%8F.png\" class=\"sgwqvxqaygxd\">\n</div>\n<br>\n在一般任务的Encoder-Decoder框架中，输入Source和输出Target内容是不一样的，比如对于英-中机器翻译来说，Source是英文句子，Target是对应的翻译出的中文句子，Attention机制发生在Target的元素Query和Source中的所有元素之间。\n<p>而<strong> Self Attention</strong> 顾名思义，指的不是 Target 和 Source 之间的 Attention 机制，而是 Source 内部元素之间或者 Target 内部元素之间发生的 Attention 机制，也可以理解为 Target=Source 这种特殊情况下的注意力计算机制。其具体计算过程是一样的，只是计算对象发生了变化而已</p>\n<p>Transformer 使用的点乘注意力机制和多头注意力机制：<br />\n<br></p>\n<div align=\"center\">\n    <style>.ievaoeuqlaku{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/attention%E5%8E%9F%E7%89%88.png\" class=\"ievaoeuqlaku\">\n</div>\n<br>\n这里h=8,8个head\n<br>\n<div align=\"center\">\n    <style>.mpkcbgtqqzkf{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer%E5%8E%9F%E7%89%88.png\" class=\"mpkcbgtqqzkf\">\n</div>\n<br>\n<h4 id=\"编码器的注意力机制\"><a class=\"anchor\" href=\"#编码器的注意力机制\">#</a> 编码器的注意力机制：</h4>\n<p>多头自注意力机制：</p>\n<ul>\n<li>key value query 都是自己本身，一个向量和各个向量计算相似度<br />\n多头注意力块接收包含子向量（句子中的单词）的向量（句子）作为输入，然后计算每个位置与向量的所有其他位置之间的注意力。</li>\n</ul>\n<h4 id=\"解码器的注意力机制\"><a class=\"anchor\" href=\"#解码器的注意力机制\">#</a> 解码器的注意力机制：</h4>\n<p>Masked 多头自注意力机制：</p>\n<ul>\n<li>用 masked 把后面的内容盖住，自注意力机制，和编码器的自注意力机制一样。</li>\n</ul>\n<p>最后一个 多头注意力机制：</p>\n<ul>\n<li>不再是自注意力，编码器的输出作为 value 和 key 进来，解码器下一层的输出作为 query 进来。</li>\n</ul>\n<h3 id=\"add-norm\"><a class=\"anchor\" href=\"#add-norm\">#</a> Add &amp; Norm</h3>\n<p>残差连接 &amp; 归一化<br />\n就是指对新的 output 做标准化</p>\n<ul>\n<li>add 代表残差连接（Residual Connection），旨在解决深度神经网络训练过程中的梯度消失和表示瓶颈问题。</li>\n<li>norm = Normalization 归一化，在 transformer 里面，使用 layer normalization。</li>\n</ul>\n<p>add：残差连接，可以增加深度，不丢失初始的特征。<br />\nnorm 归一化，因为 add 把原始的特征加回来，为了避免梯度消失，减少运算，进行归一化处理。</p>\n<h3 id=\"feedforward\"><a class=\"anchor\" href=\"#feedforward\">#</a> FeedForward</h3>\n<p>FeedForward 是由全连接层（FC）与激活 ReLu 组成的结构</p>\n<p>为什么要用 FeedForward 呢？不用单纯的 FC 呢？</p>\n<ul>\n<li>主要还是想提取更深层次的特征，在 Multi-Head Attention 中，主要是进行矩阵乘法，即都是线性变换，而线性变换的学习能力不如非线性变换的学习能力强，我们希望通过引入 ReLu 激活函数，使模型增加非线性成分，强化学习能力。</li>\n</ul>\n","length":4213,"excerpt":"","more":"<h1 id=\"attention-is-all-you-need\"><a class=\"anchor\" href=\"#attention-is-all-you-need\">#</a> Attention is all you need</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXB1NDExbzdCRS8/c3BtX2lkX2Zyb209MzMzLjk5OS4wLjAmYW1wO3ZkX3NvdXJjZT0yN2JmZTczNDQyZDA2MGM4ZDYxNTBiYjhiNjFkMjRhMg==\">论文精讲</span></p>\n<h2 id=\"transfomer架构\"><a class=\"anchor\" href=\"#transfomer架构\">#</a> Transfomer 架构</h2>\n<h3 id=\"原文片段\"><a class=\"anchor\" href=\"#原文片段\">#</a> 原文片段</h3>\n<p>“主流的序列转换模型都是基于复杂的循环神经网络或卷积神经网络，且都包含一个 encoder 和一个 decoder。表现最好的模型还通过 attention 机制把 encoder 和 decoder 联接起来。而 Transformer 只基于单独的 attention 机制，完全避免使用循环和卷积。</p>\n<p>encoder 将符号表示的输入序列 (x 1 , . . . , x n) 映射成一个连续表示的序列 z = ( z 1 , . . . , z n )</p>\n<p>给定 z ，解码器以一次生成一个字符的方式生成输出序列 (y 1 , . . . , y m) 。在每一步，模型都是自回归的。在生成下一个字符时，将先前生成的符号作为附加输入。</p>\n<p>Transformer 遵循这个总体架构，使用堆叠的 self-attention 层、point-wise 和全连接层，分别用于 encoder 和 decoder。</p>\n<p>Encoder : encoder 由 N (N=6) 个完全相同的 layer 堆叠而成，每层有两个子层。第一层是 multi-head self-attention 机制，第二层是一个简单的、位置全连接的前馈神经网络。我们在两个子层的每一层后采用残差连接，接着进行 layer normalization。</p>\n<p>Decoder : decoder 也由 N (N=6) 个完全相同的 layer 堆叠而成。除了每个编码器层中的两个子层之外，解码器还插入第三个子层，该子层对编码器堆栈的输出执行 multi-head attention 操作，与 encoder 相似，我们在每个子层的后面使用了残差连接，之后采用了 layer normalization。”</p>\n<div align=\"center\">\n    <style>.oywfbyrebgqc{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer%E5%8E%9F%E7%89%88.png\" class=\"oywfbyrebgqc\">\n</div>\n<h3 id=\"transfomer开山之作\"><a class=\"anchor\" href=\"#transfomer开山之作\">#</a> Transfomer 开山之作</h3>\n<p>在 Transformer 提出以前，主流的 NLP 模型包括 RNN、LSTM、GRU 等，这些模型是有以下缺点：</p>\n<ul>\n<li>难以并行</li>\n<li>时序中过早的信息容易被丢弃</li>\n<li>内存开销大</li>\n</ul>\n<p>由于这些网络都是由前往后一步步计算的，当前的状态不仅依赖当前的输入，也依赖于前一个状态的输出。即对于网络中的第个 t 状态，与前 t-1 个状态都有关，使得网络必须一步一步计算；当较为重要的信息在较早的时序中进入网络时，多次传播过程中可能保留很少甚至被丢弃；从另一角度来考虑，即使重要的信息没有被丢弃，而是随着网络继续传递，那么势必会造成内存的冗余，导致开销过大。</p>\n<p>所以，作者团队因势利导，引出了本文纯 attention、高并行、高效率的 Transformer 网络结构。</p>\n<p>Transformer 这种神经网络架构，其独特之处在于完全基于注意力机制，摒弃了传统的循环和卷积操作。通过自注意力机制（self-attention），Transformer 能够有效捕捉输入序列中的长距离依赖关系，使得模型在处理长文本时更为高效和准确。多头注意力机制（multi-head attention）则进一步增强了模型的表达能力，使其能够同时关注输入序列中的不同部分，捕捉更加复杂的语义关系。</p>\n<div align=\"center\">\n    <style>.adqnohdwywyt{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer01.png\" class=\"adqnohdwywyt\">\n</div>\n<h3 id=\"layer-norm-而不是batch-norm\"><a class=\"anchor\" href=\"#layer-norm-而不是batch-norm\">#</a> layer norm 而不是 batch norm</h3>\n<p>当我们使用梯度下降法做优化时，随着网络深度的增加，输入数据的特征分布会不断发生变化，为了保证数据特征分布的稳定性，会加入 Normalization。从而可以使用更大的学习率，从而加速模型的收敛速度。同时，Normalization 也有一定的抗过拟合作用，使训练过程更加平稳。具体地，Normalization 的主要作用就是把每层特征输入到激活函数之前，对它们进行 normalization，使其转换为均值为 0，方差为 1 的数据，从而可以避免数据落在激活函数的饱和区，以减少梯度消失的问题。</p>\n<p>BN（BatchNorm）和 LN（LayerNorm）是两种最常用的 Normalization 的方法，它们都是将输入特征转换为均值为 0，方差为 1 的数据，它们的形式是：<br />\n<br></p>\n<div align=\"center\">\n    <style>.kpimytdcntqh{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/BNLN.jpg\" class=\"kpimytdcntqh\">\n</div>\n<br>\n只不过，BN是对一个batch-size样本内的每个特征做归一化，LN是对每个样本的所有特征做归一化。以一个二维矩阵为例，它的行数代表batch_size，列数代表fea_nums。BN就是竖着进行归一化，LN则是横着进行归一化。\n<p>所以，BN 抹平了不同特征之间的大小关系，而保留了不同样本之间的大小关系。这样，如果具体任务依赖于不同样本之间的关系，BN 更有效，尤其是在 CV 领域，例如不同图片样本进行分类，不同样本之间的大小关系得以保留。<br />\nLN 抹平了不同样本之间的大小关系，而保留了不同特征之间的大小关系。所以，LN 更适合 NLP 领域的任务，其中，一个样本的特征实际上就是不同 word embedding，通过 LN 可以保留特征之间的这种时序关系。</p>\n<h3 id=\"encoder-decoder框架\"><a class=\"anchor\" href=\"#encoder-decoder框架\">#</a> Encoder-Decoder 框架</h3>\n<p>Encoder-Decoder 框架可以看作是一种深度学习领域的研究模式，应用场景异常广泛。</p>\n<p>文本处理领域的 Encoder-Decoder 框架可以这么直观地去理解：可以把它看作适合处理由一个句子（或篇章）生成另外一个句子（或篇章）的通用处理模型。对于句子对 &lt;Source,Target&gt;，我们的目标是给定输入句子 Source，期待通过 Encoder-Decoder 框架来生成目标句子 Target。</p>\n<p>Encoder 顾名思义就是对输入句子 Source 进行编码，将输入句子通过非线性变换转化为中间语义表示 C;</p>\n<p>对于解码器 Decoder 来说，其任务是根据句子 Source 的中间语义表示 C 和之前已经生成的历史信息 y1,y2……yi-1 来生成 i 时刻要生成的单词 yi。</p>\n<p>每个 yi 都依次这么产生，那么看起来就是整个系统根据输入句子 Source 生成了目标句子 Target。</p>\n<ul>\n<li>如果 Source 是中文句子，Target 是英文句子，那么这就是解决机器翻译问题的 Encoder-Decoder 框架；</li>\n<li>如果 Source 是一篇文章，Target 是概括性的几句描述语句，那么这是文本摘要的 Encoder-Decoder 框架；</li>\n<li>如果 Source 是一句问句，Target 是一句回答，那么这是问答系统或者对话机器人的 Encoder-Decoder 框架。</li>\n</ul>\n<p>P.S. 一般而言，文本处理和语音识别的 Encoder 部分通常采用 RNN 模型，图像处理的 Encoder 一般采用 CNN 模型。</p>\n<h3 id=\"attention机制\"><a class=\"anchor\" href=\"#attention机制\">#</a> Attention 机制</h3>\n<p>Attention 机制 3 大优点：</p>\n<ul>\n<li>\n<p>参数少<br />\n模型复杂度跟 CNN、RNN 相比，复杂度更小，参数也更少。所以对算力的要求也就更小。</p>\n</li>\n<li>\n<p>速度快<br />\n Attention 解决了 RNN 不能并行计算的问题。Attention 机制每一步计算不依赖于上一步的计算结果，因此可以和 CNN 一样并行处理。</p>\n</li>\n<li>\n<p>效果好<br />\n在 Attention 机制引入之前，有一个问题大家一直很苦恼：长距离的信息会被弱化，就好像记忆能力弱的人，记不住过去的事情是一样的。<br />\nAttention 是挑重点，就算文本比较长，也能从中间抓住重点，不丢失重要的信息。下图红色的预期就是被挑出来的重点。</p>\n</li>\n</ul>\n<p>目前大多数注意力模型附着在 Encoder-Decoder 框架下，当然，其实注意力模型可以看作一种通用的思想，本身并不依赖于特定框架，这点需要注意。Attention 并不一定要在 Encoder-Decoder 框架下使用的，他是可以脱离 Encoder-Decoder 框架的。<br />\n<br></p>\n<div align=\"center\">\n    <style>.vlgsldyxjnvc{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/attention01.png\" class=\"vlgsldyxjnvc\">\n</div>\n<br>\n将Source中的构成元素想象成是由一系列的<Key,Value>数据对构成，此时给定Target中的某个元素Query，通过计算Query和各个Key的相似性或者相关性，得到每个Key对应Value的权重系数，然后对Value进行加权求和，即得到了最终的Attention数值。所以本质上Attention机制是对Source中元素的Value值进行加权求和，而Query和Key用来计算对应Value的权重系数。即可以将其本质思想改写为如下公式：\n<br>\n<div align=\"center\">\n    <style>.sgwqvxqaygxd{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/Attention%E5%85%AC%E5%BC%8F.png\" class=\"sgwqvxqaygxd\">\n</div>\n<br>\n在一般任务的Encoder-Decoder框架中，输入Source和输出Target内容是不一样的，比如对于英-中机器翻译来说，Source是英文句子，Target是对应的翻译出的中文句子，Attention机制发生在Target的元素Query和Source中的所有元素之间。\n<p>而<strong> Self Attention</strong> 顾名思义，指的不是 Target 和 Source 之间的 Attention 机制，而是 Source 内部元素之间或者 Target 内部元素之间发生的 Attention 机制，也可以理解为 Target=Source 这种特殊情况下的注意力计算机制。其具体计算过程是一样的，只是计算对象发生了变化而已</p>\n<p>Transformer 使用的点乘注意力机制和多头注意力机制：<br />\n<br></p>\n<div align=\"center\">\n    <style>.ievaoeuqlaku{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/attention%E5%8E%9F%E7%89%88.png\" class=\"ievaoeuqlaku\">\n</div>\n<br>\n这里h=8,8个head\n<br>\n<div align=\"center\">\n    <style>.mpkcbgtqqzkf{}</style><img data-src=\"/2024/07/29/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/transformer%E5%8E%9F%E7%89%88.png\" class=\"mpkcbgtqqzkf\">\n</div>\n<br>\n<h4 id=\"编码器的注意力机制\"><a class=\"anchor\" href=\"#编码器的注意力机制\">#</a> 编码器的注意力机制：</h4>\n<p>多头自注意力机制：</p>\n<ul>\n<li>key value query 都是自己本身，一个向量和各个向量计算相似度<br />\n多头注意力块接收包含子向量（句子中的单词）的向量（句子）作为输入，然后计算每个位置与向量的所有其他位置之间的注意力。</li>\n</ul>\n<h4 id=\"解码器的注意力机制\"><a class=\"anchor\" href=\"#解码器的注意力机制\">#</a> 解码器的注意力机制：</h4>\n<p>Masked 多头自注意力机制：</p>\n<ul>\n<li>用 masked 把后面的内容盖住，自注意力机制，和编码器的自注意力机制一样。</li>\n</ul>\n<p>最后一个 多头注意力机制：</p>\n<ul>\n<li>不再是自注意力，编码器的输出作为 value 和 key 进来，解码器下一层的输出作为 query 进来。</li>\n</ul>\n<h3 id=\"add-norm\"><a class=\"anchor\" href=\"#add-norm\">#</a> Add &amp; Norm</h3>\n<p>残差连接 &amp; 归一化<br />\n就是指对新的 output 做标准化</p>\n<ul>\n<li>add 代表残差连接（Residual Connection），旨在解决深度神经网络训练过程中的梯度消失和表示瓶颈问题。</li>\n<li>norm = Normalization 归一化，在 transformer 里面，使用 layer normalization。</li>\n</ul>\n<p>add：残差连接，可以增加深度，不丢失初始的特征。<br />\nnorm 归一化，因为 add 把原始的特征加回来，为了避免梯度消失，减少运算，进行归一化处理。</p>\n<h3 id=\"feedforward\"><a class=\"anchor\" href=\"#feedforward\">#</a> FeedForward</h3>\n<p>FeedForward 是由全连接层（FC）与激活 ReLu 组成的结构</p>\n<p>为什么要用 FeedForward 呢？不用单纯的 FC 呢？</p>\n<ul>\n<li>主要还是想提取更深层次的特征，在 Multi-Head Attention 中，主要是进行矩阵乘法，即都是线性变换，而线性变换的学习能力不如非线性变换的学习能力强，我们希望通过引入 ReLu 激活函数，使模型增加非线性成分，强化学习能力。</li>\n</ul>\n"},{"title":"node版本引起的加密库OpenSSL无法支持算法问题","date":"2025-01-09T07:50:57.000Z","_content":"\n#### 问题描述\n\ndigital envelope routines::unsupported\n\n#### 解决方法\n\n在package.json文件中，将serve和build行修改为如下格式：\n\n``` json\n  \"scripts\": {\n   \"serve\": \"SET NODE_OPTIONS=--openssl-legacy-provider && vue-cli-service serve\",\n   \"build\": \"SET NODE_OPTIONS=--openssl-legacy-provider && vue-cli-service build\"\n},\n```\n\n#### 原因\n\n这个错误是因为 Node.js 中的加密库 OpenSSL 版本过低，无法支持算法。\n因为 node.js V17版本中最近发布的OpenSSL3.0, 而OpenSSL3.0对允许算法和密钥大小增加了严格的限制，可能会对生态系统造成一些影响。故此以前的项目在升级 nodejs 版本后会报错。\n\n您可以尝试使用 node@14 版本，或者在安装 Node.js 时选择包含较新的 OpenSSL 版本。如果您确实需要使用 Node.js v18.14.2 版本，可以更新 OpenSSL 版本来解决这个问题。具体的做法可以参考 OpenSSL 官方文档：https://www.openssl.org/docs/。","source":"_posts/node版本引起的加密库OpenSSL无法支持算法问题.md","raw":"---\ntitle: node版本引起的加密库OpenSSL无法支持算法问题\ndate: 2025-01-09 15:50:57\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n#### 问题描述\n\ndigital envelope routines::unsupported\n\n#### 解决方法\n\n在package.json文件中，将serve和build行修改为如下格式：\n\n``` json\n  \"scripts\": {\n   \"serve\": \"SET NODE_OPTIONS=--openssl-legacy-provider && vue-cli-service serve\",\n   \"build\": \"SET NODE_OPTIONS=--openssl-legacy-provider && vue-cli-service build\"\n},\n```\n\n#### 原因\n\n这个错误是因为 Node.js 中的加密库 OpenSSL 版本过低，无法支持算法。\n因为 node.js V17版本中最近发布的OpenSSL3.0, 而OpenSSL3.0对允许算法和密钥大小增加了严格的限制，可能会对生态系统造成一些影响。故此以前的项目在升级 nodejs 版本后会报错。\n\n您可以尝试使用 node@14 版本，或者在安装 Node.js 时选择包含较新的 OpenSSL 版本。如果您确实需要使用 Node.js v18.14.2 版本，可以更新 OpenSSL 版本来解决这个问题。具体的做法可以参考 OpenSSL 官方文档：https://www.openssl.org/docs/。","slug":"node版本引起的加密库OpenSSL无法支持算法问题","published":1,"updated":"2025-01-09T07:55:35.991Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfm002wmcuyghug22nd","content":"<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<p>digital envelope routines::unsupported</p>\n<h4 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h4>\n<p>在 package.json 文件中，将 serve 和 build 行修改为如下格式：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service serve\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service build\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"原因\"><a class=\"anchor\" href=\"#原因\">#</a> 原因</h4>\n<p>这个错误是因为 Node.js 中的加密库 OpenSSL 版本过低，无法支持算法。<br />\n因为 node.js V17 版本中最近发布的 OpenSSL3.0, 而 OpenSSL3.0 对允许算法和密钥大小增加了严格的限制，可能会对生态系统造成一些影响。故此以前的项目在升级 nodejs 版本后会报错。</p>\n<p>您可以尝试使用 node@14 版本，或者在安装 Node.js 时选择包含较新的 OpenSSL 版本。如果您确实需要使用 Node.js v18.14.2 版本，可以更新 OpenSSL 版本来解决这个问题。具体的做法可以参考 OpenSSL 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3BlbnNzbC5vcmcvZG9jcy8lRTMlODAlODI=\">https://www.openssl.org/docs/。</span></p>\n","length":557,"excerpt":"","more":"<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<p>digital envelope routines::unsupported</p>\n<h4 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h4>\n<p>在 package.json 文件中，将 serve 和 build 行修改为如下格式：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service serve\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service build\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"原因\"><a class=\"anchor\" href=\"#原因\">#</a> 原因</h4>\n<p>这个错误是因为 Node.js 中的加密库 OpenSSL 版本过低，无法支持算法。<br />\n因为 node.js V17 版本中最近发布的 OpenSSL3.0, 而 OpenSSL3.0 对允许算法和密钥大小增加了严格的限制，可能会对生态系统造成一些影响。故此以前的项目在升级 nodejs 版本后会报错。</p>\n<p>您可以尝试使用 node@14 版本，或者在安装 Node.js 时选择包含较新的 OpenSSL 版本。如果您确实需要使用 Node.js v18.14.2 版本，可以更新 OpenSSL 版本来解决这个问题。具体的做法可以参考 OpenSSL 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3BlbnNzbC5vcmcvZG9jcy8lRTMlODAlODI=\">https://www.openssl.org/docs/。</span></p>\n"},{"title":"开发问题记录-AI命理师","date":"2025-02-24T03:27:51.000Z","_content":"\n# 百无禁忌Varmeta开发日志帖\n\n终于体验了Cursor！效果还不错！ChatGPT-4o代码生成永远的神！\n\n可以直接把原型图和多个组件 add 到chat台，选择Claude-3.5或GPT-4o来帮忙生成回答和代码。\n\n<br>\n<div align=\"center\">\n    <img src=\"开发问题记录-AI命理师/cursor-1.jpg\">\n</div>\n<br>\n\n<div align=\"center\">\n    <img src=\"开发问题记录-AI命理师/aichat.jpg\">\n</div>\n<br>\n\n\n记录一个借助chatgpt-4o解决的小问题：\n\n``` javascript\n\n    // 发送消息后滚动到底部\n    // scrollToBottom() {\n    //   setTimeout(() => {\n    //     const query = uni.createSelectorQuery().in(this)\n    //     query.select('.scrollable-content').boundingClientRect(res => {\n    //       if (res) {\n    //         // 直接滚动到底部\n    //         this.scrollTop = res.height // 直接设置为内容高度即可\n    //       }\n    //     }).exec()\n    //   }, 100)\n    // },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const query = uni.createSelectorQuery().in(this)\n        query.select('.scrollable-content').boundingClientRect()\n        query.selectAll('.message-wrapper').boundingClientRect()\n        query.exec(res => {\n          if (res[1] && res[1].length > 0) {\n            const lastMessage = res[1][res[1].length - 1]\n            this.scrollTop = lastMessage.bottom // 滚动到最后一条消息的底部\n          }\n        })\n      })\n    },\n\n```\n\n需求是每次对话完，都自动滚动到聊天区域的底部，以确保用户始终可以看到最新一条对话记录。\n\n上面注释掉的解决办法是一开始不能奏效的滚动函数，下面是改动后的函数：\n\n- 关键点： \n1. 使用 $nextTick: 确保在 DOM 更新后再执行滚动操作。 \n2. 获取最后一条消息的位置: 使用 boundingClientRect 获取最后一条消息的位置，并将 scrollTop 设置为该位置的底部。  \n3. 确保 scroll-view 的 :scroll-top 绑定到 scrollTop: 确保 scroll-view 的 :scroll-top 属性正确绑定到 scrollTop 数据。  \n\n这样，每次发送消息后，页面应该会自动滚动到最后一条消息的位置。\n\n- 原因：\n\n主要是由于 DOM 更新时机 和 滚动逻辑 的不同导致的：\n\n\n1. 函数1：使用 setTimeout 的目的是等待 DOM 更新完成后再执行滚动逻辑。但 setTimeout 的延迟时间（100ms）是固定的，无法保证 DOM 更新一定在 100ms 内完成。如果 DOM 更新较慢，setTimeout 可能仍然在 DOM 更新前执行，导致滚动失败。\n2. 函数2：$nextTick 是 Vue 提供的一个方法，用于在 下一次 DOM 更新循环结束之后 执行回调函数。使用 $nextTick 可以确保 DOM 更新完成后再执行滚动逻辑，避免了 setTimeout 的延迟不确定性。\n3. 函数1直接使用容器高度，可能不准确；函数2使用最后一条消息的底部位置，更精确。\n\n\n- 原理：\n\n1. 为什么需要 $nextTick？\n\n在 Vue 中，数据的变化会触发视图的更新，但 DOM 更新是异步的。也就是说，当你修改了数据后，Vue 并不会立即更新 DOM，而是将这些更新操作放入一个队列中，在下一个事件循环中统一处理。\n\n如果你在数据变化后立即操作 DOM，可能会因为 DOM 还未更新而出现问题。例如：\n\n获取不到最新的 DOM 元素、获取到的 DOM 元素尺寸或位置不准确。\n\n$nextTick 就是为了解决这个问题而设计的。它允许你在 DOM 更新完成后执行回调函数，确保操作的是最新的 DOM。\n\n2. $nextTick 的工作原理\n\n当你调用 $nextTick 时，Vue 会将传入的回调函数放入一个队列中。\n\n在当前事件循环中，Vue 会处理所有的数据更新和 DOM 更新。\n\n当 DOM 更新完成后，Vue 会执行队列中的回调函数。\n\n3. $nextTick 的使用方法\n\n$nextTick 可以作为一个实例方法（this.$nextTick）或全局方法（Vue.nextTick）使用。\n\n4. $nextTick 的返回值\n$nextTick 返回一个 Promise 对象，因此你可以使用 async/await 语法。\n\n\n\n- 总结：\n\n$nextTick 是 Vue 提供的一个用于在 DOM 更新完成后执行回调函数的方法。\n\n它解决了因 DOM 更新异步性导致的操作不一致问题。\n\n适用于需要操作更新后的 DOM、获取更新后的 DOM 尺寸或位置等场景。\n\n与 setTimeout 相比，$nextTick 更精确、更高效。","source":"_posts/开发问题记录-AI命理师.md","raw":"---\ntitle: 开发问题记录-AI命理师\ndate: 2025-02-24 11:27:51\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n# 百无禁忌Varmeta开发日志帖\n\n终于体验了Cursor！效果还不错！ChatGPT-4o代码生成永远的神！\n\n可以直接把原型图和多个组件 add 到chat台，选择Claude-3.5或GPT-4o来帮忙生成回答和代码。\n\n<br>\n<div align=\"center\">\n    <img src=\"开发问题记录-AI命理师/cursor-1.jpg\">\n</div>\n<br>\n\n<div align=\"center\">\n    <img src=\"开发问题记录-AI命理师/aichat.jpg\">\n</div>\n<br>\n\n\n记录一个借助chatgpt-4o解决的小问题：\n\n``` javascript\n\n    // 发送消息后滚动到底部\n    // scrollToBottom() {\n    //   setTimeout(() => {\n    //     const query = uni.createSelectorQuery().in(this)\n    //     query.select('.scrollable-content').boundingClientRect(res => {\n    //       if (res) {\n    //         // 直接滚动到底部\n    //         this.scrollTop = res.height // 直接设置为内容高度即可\n    //       }\n    //     }).exec()\n    //   }, 100)\n    // },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const query = uni.createSelectorQuery().in(this)\n        query.select('.scrollable-content').boundingClientRect()\n        query.selectAll('.message-wrapper').boundingClientRect()\n        query.exec(res => {\n          if (res[1] && res[1].length > 0) {\n            const lastMessage = res[1][res[1].length - 1]\n            this.scrollTop = lastMessage.bottom // 滚动到最后一条消息的底部\n          }\n        })\n      })\n    },\n\n```\n\n需求是每次对话完，都自动滚动到聊天区域的底部，以确保用户始终可以看到最新一条对话记录。\n\n上面注释掉的解决办法是一开始不能奏效的滚动函数，下面是改动后的函数：\n\n- 关键点： \n1. 使用 $nextTick: 确保在 DOM 更新后再执行滚动操作。 \n2. 获取最后一条消息的位置: 使用 boundingClientRect 获取最后一条消息的位置，并将 scrollTop 设置为该位置的底部。  \n3. 确保 scroll-view 的 :scroll-top 绑定到 scrollTop: 确保 scroll-view 的 :scroll-top 属性正确绑定到 scrollTop 数据。  \n\n这样，每次发送消息后，页面应该会自动滚动到最后一条消息的位置。\n\n- 原因：\n\n主要是由于 DOM 更新时机 和 滚动逻辑 的不同导致的：\n\n\n1. 函数1：使用 setTimeout 的目的是等待 DOM 更新完成后再执行滚动逻辑。但 setTimeout 的延迟时间（100ms）是固定的，无法保证 DOM 更新一定在 100ms 内完成。如果 DOM 更新较慢，setTimeout 可能仍然在 DOM 更新前执行，导致滚动失败。\n2. 函数2：$nextTick 是 Vue 提供的一个方法，用于在 下一次 DOM 更新循环结束之后 执行回调函数。使用 $nextTick 可以确保 DOM 更新完成后再执行滚动逻辑，避免了 setTimeout 的延迟不确定性。\n3. 函数1直接使用容器高度，可能不准确；函数2使用最后一条消息的底部位置，更精确。\n\n\n- 原理：\n\n1. 为什么需要 $nextTick？\n\n在 Vue 中，数据的变化会触发视图的更新，但 DOM 更新是异步的。也就是说，当你修改了数据后，Vue 并不会立即更新 DOM，而是将这些更新操作放入一个队列中，在下一个事件循环中统一处理。\n\n如果你在数据变化后立即操作 DOM，可能会因为 DOM 还未更新而出现问题。例如：\n\n获取不到最新的 DOM 元素、获取到的 DOM 元素尺寸或位置不准确。\n\n$nextTick 就是为了解决这个问题而设计的。它允许你在 DOM 更新完成后执行回调函数，确保操作的是最新的 DOM。\n\n2. $nextTick 的工作原理\n\n当你调用 $nextTick 时，Vue 会将传入的回调函数放入一个队列中。\n\n在当前事件循环中，Vue 会处理所有的数据更新和 DOM 更新。\n\n当 DOM 更新完成后，Vue 会执行队列中的回调函数。\n\n3. $nextTick 的使用方法\n\n$nextTick 可以作为一个实例方法（this.$nextTick）或全局方法（Vue.nextTick）使用。\n\n4. $nextTick 的返回值\n$nextTick 返回一个 Promise 对象，因此你可以使用 async/await 语法。\n\n\n\n- 总结：\n\n$nextTick 是 Vue 提供的一个用于在 DOM 更新完成后执行回调函数的方法。\n\n它解决了因 DOM 更新异步性导致的操作不一致问题。\n\n适用于需要操作更新后的 DOM、获取更新后的 DOM 尺寸或位置等场景。\n\n与 setTimeout 相比，$nextTick 更精确、更高效。","slug":"开发问题记录-AI命理师","published":1,"updated":"2025-02-24T06:34:54.904Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfn002ymcuyadd3ccbs","content":"<h1 id=\"百无禁忌varmeta开发日志帖\"><a class=\"anchor\" href=\"#百无禁忌varmeta开发日志帖\">#</a> 百无禁忌 Varmeta 开发日志帖</h1>\n<p>终于体验了 Cursor！效果还不错！ChatGPT-4o 代码生成永远的神！</p>\n<p>可以直接把原型图和多个组件 add 到 chat 台，选择 Claude-3.5 或 GPT-4o 来帮忙生成回答和代码。</p>\n<br>\n<div align=\"center\">\n    <style>.glxyjzmarkik{}</style><img data-src=\"/2025/02/24/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-AI%E5%91%BD%E7%90%86%E5%B8%88/cursor-1.jpg\" class=\"glxyjzmarkik\">\n</div>\n<br>\n<div align=\"center\">\n    <style>.yghwugctoqur{}</style><img data-src=\"/2025/02/24/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-AI%E5%91%BD%E7%90%86%E5%B8%88/aichat.jpg\" class=\"yghwugctoqur\">\n</div>\n<br>\n<p>记录一个借助 chatgpt-4o 解决的小问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送消息后滚动到底部</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// scrollToBottom() &#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//   setTimeout(() => &#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//     const query = uni.createSelectorQuery().in(this)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//     query.select('.scrollable-content').boundingClientRect(res => &#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//       if (res) &#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//         // 直接滚动到底部</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//         this.scrollTop = res.height// 直接设置为内容高度即可</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//       &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//     &#125;).exec()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//   &#125;, 100)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// &#125;,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">scrollToBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> uni<span class=\"token punctuation\">.</span><span class=\"token function\">createSelectorQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scrollable-content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.message-wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">const</span> lastMessage <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> lastMessage<span class=\"token punctuation\">.</span>bottom <span class=\"token comment\">// 滚动到最后一条消息的底部</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>需求是每次对话完，都自动滚动到聊天区域的底部，以确保用户始终可以看到最新一条对话记录。</p>\n<p>上面注释掉的解决办法是一开始不能奏效的滚动函数，下面是改动后的函数：</p>\n<ul>\n<li>关键点：</li>\n</ul>\n<ol>\n<li>使用 $nextTick: 确保在 DOM 更新后再执行滚动操作。</li>\n<li>获取最后一条消息的位置：使用 boundingClientRect 获取最后一条消息的位置，并将 scrollTop 设置为该位置的底部。</li>\n<li>确保 scroll-view 的 :scroll-top 绑定到 scrollTop: 确保 scroll-view 的 :scroll-top 属性正确绑定到 scrollTop 数据。</li>\n</ol>\n<p>这样，每次发送消息后，页面应该会自动滚动到最后一条消息的位置。</p>\n<ul>\n<li>原因：</li>\n</ul>\n<p>主要是由于 DOM 更新时机 和 滚动逻辑 的不同导致的：</p>\n<ol>\n<li>函数 1：使用 setTimeout 的目的是等待 DOM 更新完成后再执行滚动逻辑。但 setTimeout 的延迟时间（100ms）是固定的，无法保证 DOM 更新一定在 100ms 内完成。如果 DOM 更新较慢，setTimeout 可能仍然在 DOM 更新前执行，导致滚动失败。</li>\n<li>函数 2：$nextTick 是 Vue 提供的一个方法，用于在 下一次 DOM 更新循环结束之后 执行回调函数。使用 $nextTick 可以确保 DOM 更新完成后再执行滚动逻辑，避免了 setTimeout 的延迟不确定性。</li>\n<li>函数 1 直接使用容器高度，可能不准确；函数 2 使用最后一条消息的底部位置，更精确。</li>\n</ol>\n<ul>\n<li>原理：</li>\n</ul>\n<ol>\n<li>为什么需要 $nextTick？</li>\n</ol>\n<p>在 Vue 中，数据的变化会触发视图的更新，但 DOM 更新是异步的。也就是说，当你修改了数据后，Vue 并不会立即更新 DOM，而是将这些更新操作放入一个队列中，在下一个事件循环中统一处理。</p>\n<p>如果你在数据变化后立即操作 DOM，可能会因为 DOM 还未更新而出现问题。例如：</p>\n<p>获取不到最新的 DOM 元素、获取到的 DOM 元素尺寸或位置不准确。</p>\n<p>$nextTick 就是为了解决这个问题而设计的。它允许你在 DOM 更新完成后执行回调函数，确保操作的是最新的 DOM。</p>\n<ol start=\"2\">\n<li>$nextTick 的工作原理</li>\n</ol>\n<p>当你调用 $nextTick 时，Vue 会将传入的回调函数放入一个队列中。</p>\n<p>在当前事件循环中，Vue 会处理所有的数据更新和 DOM 更新。</p>\n<p>当 DOM 更新完成后，Vue 会执行队列中的回调函数。</p>\n<ol start=\"3\">\n<li>$nextTick 的使用方法</li>\n</ol>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>c</mi><mi>k</mi><mtext>可以作为一个实例方法（</mtext><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">nextTick 可以作为一个实例方法（this.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">实</span><span class=\"mord cjk_fallback\">例</span><span class=\"mord cjk_fallback\">方</span><span class=\"mord cjk_fallback\">法</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>nextTick）或全局方法（Vue.nextTick）使用。</p>\n<ol start=\"4\">\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>c</mi><mi>k</mi><mtext>的返回值</mtext></mrow><annotation encoding=\"application/x-tex\">nextTick 的返回值\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">返</span><span class=\"mord cjk_fallback\">回</span><span class=\"mord cjk_fallback\">值</span></span></span></span>nextTick 返回一个 Promise 对象，因此你可以使用 async/await 语法。</li>\n</ol>\n<ul>\n<li>总结：</li>\n</ul>\n<p>$nextTick 是 Vue 提供的一个用于在 DOM 更新完成后执行回调函数的方法。</p>\n<p>它解决了因 DOM 更新异步性导致的操作不一致问题。</p>\n<p>适用于需要操作更新后的 DOM、获取更新后的 DOM 尺寸或位置等场景。</p>\n<p>与 setTimeout 相比，$nextTick 更精确、更高效。</p>\n","length":2074,"excerpt":"","more":"<h1 id=\"百无禁忌varmeta开发日志帖\"><a class=\"anchor\" href=\"#百无禁忌varmeta开发日志帖\">#</a> 百无禁忌 Varmeta 开发日志帖</h1>\n<p>终于体验了 Cursor！效果还不错！ChatGPT-4o 代码生成永远的神！</p>\n<p>可以直接把原型图和多个组件 add 到 chat 台，选择 Claude-3.5 或 GPT-4o 来帮忙生成回答和代码。</p>\n<br>\n<div align=\"center\">\n    <style>.glxyjzmarkik{}</style><img data-src=\"/2025/02/24/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-AI%E5%91%BD%E7%90%86%E5%B8%88/cursor-1.jpg\" class=\"glxyjzmarkik\">\n</div>\n<br>\n<div align=\"center\">\n    <style>.yghwugctoqur{}</style><img data-src=\"/2025/02/24/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-AI%E5%91%BD%E7%90%86%E5%B8%88/aichat.jpg\" class=\"yghwugctoqur\">\n</div>\n<br>\n<p>记录一个借助 chatgpt-4o 解决的小问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送消息后滚动到底部</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// scrollToBottom() &#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//   setTimeout(() => &#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//     const query = uni.createSelectorQuery().in(this)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//     query.select('.scrollable-content').boundingClientRect(res => &#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//       if (res) &#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//         // 直接滚动到底部</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//         this.scrollTop = res.height// 直接设置为内容高度即可</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//       &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//     &#125;).exec()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//   &#125;, 100)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// &#125;,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">scrollToBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> uni<span class=\"token punctuation\">.</span><span class=\"token function\">createSelectorQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scrollable-content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.message-wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">const</span> lastMessage <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> lastMessage<span class=\"token punctuation\">.</span>bottom <span class=\"token comment\">// 滚动到最后一条消息的底部</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>需求是每次对话完，都自动滚动到聊天区域的底部，以确保用户始终可以看到最新一条对话记录。</p>\n<p>上面注释掉的解决办法是一开始不能奏效的滚动函数，下面是改动后的函数：</p>\n<ul>\n<li>关键点：</li>\n</ul>\n<ol>\n<li>使用 $nextTick: 确保在 DOM 更新后再执行滚动操作。</li>\n<li>获取最后一条消息的位置：使用 boundingClientRect 获取最后一条消息的位置，并将 scrollTop 设置为该位置的底部。</li>\n<li>确保 scroll-view 的 :scroll-top 绑定到 scrollTop: 确保 scroll-view 的 :scroll-top 属性正确绑定到 scrollTop 数据。</li>\n</ol>\n<p>这样，每次发送消息后，页面应该会自动滚动到最后一条消息的位置。</p>\n<ul>\n<li>原因：</li>\n</ul>\n<p>主要是由于 DOM 更新时机 和 滚动逻辑 的不同导致的：</p>\n<ol>\n<li>函数 1：使用 setTimeout 的目的是等待 DOM 更新完成后再执行滚动逻辑。但 setTimeout 的延迟时间（100ms）是固定的，无法保证 DOM 更新一定在 100ms 内完成。如果 DOM 更新较慢，setTimeout 可能仍然在 DOM 更新前执行，导致滚动失败。</li>\n<li>函数 2：$nextTick 是 Vue 提供的一个方法，用于在 下一次 DOM 更新循环结束之后 执行回调函数。使用 $nextTick 可以确保 DOM 更新完成后再执行滚动逻辑，避免了 setTimeout 的延迟不确定性。</li>\n<li>函数 1 直接使用容器高度，可能不准确；函数 2 使用最后一条消息的底部位置，更精确。</li>\n</ol>\n<ul>\n<li>原理：</li>\n</ul>\n<ol>\n<li>为什么需要 $nextTick？</li>\n</ol>\n<p>在 Vue 中，数据的变化会触发视图的更新，但 DOM 更新是异步的。也就是说，当你修改了数据后，Vue 并不会立即更新 DOM，而是将这些更新操作放入一个队列中，在下一个事件循环中统一处理。</p>\n<p>如果你在数据变化后立即操作 DOM，可能会因为 DOM 还未更新而出现问题。例如：</p>\n<p>获取不到最新的 DOM 元素、获取到的 DOM 元素尺寸或位置不准确。</p>\n<p>$nextTick 就是为了解决这个问题而设计的。它允许你在 DOM 更新完成后执行回调函数，确保操作的是最新的 DOM。</p>\n<ol start=\"2\">\n<li>$nextTick 的工作原理</li>\n</ol>\n<p>当你调用 $nextTick 时，Vue 会将传入的回调函数放入一个队列中。</p>\n<p>在当前事件循环中，Vue 会处理所有的数据更新和 DOM 更新。</p>\n<p>当 DOM 更新完成后，Vue 会执行队列中的回调函数。</p>\n<ol start=\"3\">\n<li>$nextTick 的使用方法</li>\n</ol>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>c</mi><mi>k</mi><mtext>可以作为一个实例方法（</mtext><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">nextTick 可以作为一个实例方法（this.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">实</span><span class=\"mord cjk_fallback\">例</span><span class=\"mord cjk_fallback\">方</span><span class=\"mord cjk_fallback\">法</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>nextTick）或全局方法（Vue.nextTick）使用。</p>\n<ol start=\"4\">\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>c</mi><mi>k</mi><mtext>的返回值</mtext></mrow><annotation encoding=\"application/x-tex\">nextTick 的返回值\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">返</span><span class=\"mord cjk_fallback\">回</span><span class=\"mord cjk_fallback\">值</span></span></span></span>nextTick 返回一个 Promise 对象，因此你可以使用 async/await 语法。</li>\n</ol>\n<ul>\n<li>总结：</li>\n</ul>\n<p>$nextTick 是 Vue 提供的一个用于在 DOM 更新完成后执行回调函数的方法。</p>\n<p>它解决了因 DOM 更新异步性导致的操作不一致问题。</p>\n<p>适用于需要操作更新后的 DOM、获取更新后的 DOM 尺寸或位置等场景。</p>\n<p>与 setTimeout 相比，$nextTick 更精确、更高效。</p>\n"},{"title":"昇腾CANN-Ascend C算子开发学习笔记","date":"2024-07-25T07:54:03.000Z","_content":"\n\n# 前言\n\n此为华为昇腾AI训练营（南京站）授课内容，经个人整理发布\n\n为了更好的理解课程内容，建议读者有一定的计算机组成原理、编译原理学习基础\n\n本文在笔者CSDN账号先行发布，后同步到此，因此图片水印皆为笔者本人CSDN账号水印\n\n#### 因文章图片使用CSDN图片链接，有时因某些原因可能无法访问，导致下面图片有时无法正常展示，本人在CSDN更新文章不多，因本硕多年来有多个CSDN账号有时分不清楚，暂时没再维护文章中这些可能无法正常显示的图片啦嘤嘤嘤\n\n# 一、背景知识\n## 1. CANN&AI core\n\n<div align=center>\n    <img src=\"https://i-blog.csdnimg.cn/direct/959d581b757747989d8e39ed91e96fae.jpeg\">\n</div>\n\n1.华为的异构计算架构CANN（Compute Architecture for Neural Networks）对标NVIDA的CUDA<br>\n2.NPU（Neural Processing Unit）架构是一种新型的处理器设计理念，它将传统的CPU和GPU架构进行整合，并引入了深度学习算法。<br>\n3.AI core 采用华为自研的达芬奇架构，它包含下面几个组成部分：<br>\n\n - 计算单元（矩阵计算、向量计算、标量计算） \n - 存储系统 \n - 控制单元\n\nAscend C编程语言开发的算子运行在AI core上\n## 2. Ascend C算子\n\n - 算子：一个函数空间到函数空间上的映射\n\n - 从广义上讲，对任何函数进行某一项操作都可以认为是一个算子\n - CUDA与CANN的算子不通用\n\n## 3. 核函数\n\n - 核函数：Ascend C算子设备侧的入口\n- 核函数是直接在设备侧执行的代码\n- 使用变量类型限定符\n- 核函数必须具有void返回类型\n- 核函数的调用语句是C/C++函数调用语句的一种扩展\n\n# 二、编程范式\nAscend C采用标准C++语法和一组类库API进行编程\n\n1）矢量编程主要分为：\n - CopyIn \n- Compute \n- CopyOut\n\n3个流水任务：CopyIn负责搬入操作，Compute负责矢量计算操作，CopyOut负责搬出操作\n\n2）矩阵编程主要分为：\n- CopyIn\n- Split\n- Compute\n- Aggregate\n- CopyOut\n\n相比矢量编程多了矩阵分割（Split）和聚合（Aggregate）两步\n\n# 三、香橙派的连接\n\n文档：[Orange pai连接及操作实验文档](https://www.hiascend.com/document/detail/zh/Atlas200IDKA2DeveloperKit/23.0.RC2/qs/qs_0017.html)\n\n# 四、改造sinh任务\n\n首先运动add任务，然后修改add算子功能为sinh函数功能\n\n## 1.测试运行\n\n根据实验手册，成功运行后会显示：test pass\n\n<div align=center>\n    <img src=\"https://i-blog.csdnimg.cn/direct/3f611475c7504a4a888b70c4934fd5d1.jpeg\">\n</div>\n\n\n## 2.改造成sinh\n\n<div align=center>\n    <img src=\"https://img-blog.csdnimg.cn/img_convert/f7aa26cc2b49cc5c825e95f01d321dad.png\">\n</div>\n\n\n需要参考一些官方的API：\n[华为昇腾社区-Ascend C](https://link.csdn.net/?target=https://www.hiascend.com/zh/developer/courses/detail/1696414606799486977)\n\n需要修改目录：`~/samples/operator/AddCustomSample/KernelLaunch/test`\n下的两个文档：\n- add_custom.cpp\n- scripts / gen_data.py\n\n分别需要修改的地方为：\n- 1\n\n<div align=center>\n    <img src=\"https://img-blog.csdnimg.cn/img_convert/55a966993b663a71b8d7feadf8c7fbf3.png\">\n</div>\n\n\n- 2\n\n<div align=center>\n    <img src=\"https://img-blog.csdnimg.cn/img_convert/e0ddb5c183803561c5c3588e45e492d0.png\">\n</div>\n\n\n将公式修改为sinh的公式，之后用实验文档中的运行命令再次运行即可\n\n# 五、Ascend C中级认证\n\n[**点击链接：Ascend C中级认证考试**](https://www.hiascend.com/edu/certification/detail/34bf904cb410497cb9c582be6c047ff7)\n\n题目：\n***参考tensorflow的Sinh算子，实现Ascend C算子Sinh，算子命名为SinhCustom，并完成aclnn算子调用相关算法: sinh(x) = (exp(x) - exp(-x)) / 2.0\n要求:\n1、完成host侧和kernel侧代码实现。\n2、实现sinh功能，支持float16类型输入，使用内核调试符方式调用算子测试通过。\n3、使用单算子API调用方式调用SinhCustom算子测试通过\n提交要求:\n完成编程后，将上述实现的工程代码打包在rar包内提交，如SinhCustom.rar.***\n\n所有需要补充的文件包括：\n- op_host文件夹下的sinh_custom_tiling.h文件\n- op_host文件夹下的sinh_custom.cpp文件\n- op_kernel文件夹下的sinh_custom.cpp文件\n\n这个实现过程可以参考samples仓库的Add算子，把Add算子的内核调用代码复制一份到SinhCustom，Add需要x，y，z三个变量，sinh只需x和y两个变量，因此删掉关于z的操作\n\n 1. kernel侧的sinh_custom.cpp文件内关键公式修改方法参考前文所示，完整代码如下：\n \n ```c\n #include \"kernel_operator.h\"\nusing namespace AscendC;\nconstexpr int32_t BUFFER_NUM = 2;\nclass KernelSinh {\npublic:\n __aicore__ inline KernelSinh() {}\n __aicore__ inline void Init(GM_ADDR x, GM_ADDR y, uint32_t totalLength, uint32_t \ntileNum)\n {\n //考生补充初始化代码\n ASSERT(GetBlockNum() != 0 && \"block dim can not be zero!\");\n this->blockLength = totalLength / GetBlockNum();\n this->tileNum = tileNum;\n ASSERT(tileNum != 0 && \"tile num can not be zero!\");\n this->tileLength = this->blockLength / tileNum / BUFFER_NUM;\n xGm.SetGlobalBuffer((__gm__ DTYPE_X *)x + this->blockLength * GetBlockIdx(), \nthis->blockLength);\n yGm.SetGlobalBuffer((__gm__ DTYPE_Y *)y + this->blockLength * GetBlockIdx(), \nthis->blockLength);\n pipe.InitBuffer(inQueueX, BUFFER_NUM, this->tileLength * sizeof(DTYPE_X));\n pipe.InitBuffer(outQueueY, BUFFER_NUM, this->tileLength * sizeof(DTYPE_Y));\n pipe.InitBuffer(tmpBuffer1, this->tileLength * sizeof(DTYPE_X));\n pipe.InitBuffer(tmpBuffer2, this->tileLength * sizeof(DTYPE_X));\n pipe.InitBuffer(tmpBuffer3, this->tileLength * sizeof(DTYPE_X));\n pipe.InitBuffer(tmpBuffer4, this->tileLength * sizeof(DTYPE_X));\n }\n __aicore__ inline void Process()\n {\n //考生补充对“loopCount”的定义，注意对 Tiling 的处理\n int32_t loopCount = this->tileNum * BUFFER_NUM;\n for (int32_t i = 0; i < loopCount; i++) {\n CopyIn(i);\n Compute(i);\n CopyOut(i);\n }\n }\nprivate:\n __aicore__ inline void CopyIn(int32_t progress)\n {\n //考生补充算子代码\n LocalTensor<DTYPE_X> xLocal = inQueueX.AllocTensor<DTYPE_X>();\n DataCopy(xLocal, xGm[progress * this->tileLength], this->tileLength);\n inQueueX.EnQue(xLocal);\n }\n __aicore__ inline void Compute(int32_t progress)\n {\n //考生补充算子计算代码\n LocalTensor<DTYPE_X> xLocal = inQueueX.DeQue<DTYPE_X>();\n LocalTensor<DTYPE_Y> yLocal = outQueueY.AllocTensor<DTYPE_Y>();\n LocalTensor<DTYPE_X> tmpTensor1 = tmpBuffer1.Get<DTYPE_X>();\n LocalTensor<DTYPE_X> tmpTensor2 = tmpBuffer2.Get<DTYPE_X>();\n LocalTensor<DTYPE_X> tmpTensor3 = tmpBuffer3.Get<DTYPE_X>();\n LocalTensor<DTYPE_X> tmpTensor4 = tmpBuffer4.Get<DTYPE_X>();\n DTYPE_X inputVal1 = -1;\n DTYPE_X inputVal2 = 0.5;\n //sinh(x) = (exp(x) - exp(-x)) / 2.0\n Muls(tmpTensor1, xLocal, inputVal1, this->tileLength);\n Exp(tmpTensor2, tmpTensor1, this->tileLength);\n Exp(tmpTensor3, xLocal, this->tileLength);\n Sub(tmpTensor4, tmpTensor3, tmpTensor2, this->tileLength);\n Muls(yLocal, tmpTensor4, inputVal2, this->tileLength);\n outQueueY.EnQue<DTYPE_Y>(yLocal);\n inQueueX.FreeTensor(xLocal);\n }\n __aicore__ inline void CopyOut(int32_t progress)\n {\n //考生补充算子代码\n LocalTensor<DTYPE_Y> yLocal = outQueueY.DeQue<DTYPE_Y>();\n DataCopy(yGm[progress * this->tileLength], yLocal, this->tileLength);\n outQueueY.FreeTensor(yLocal);\n }\nprivate:\n TPipe pipe;\n //create queue for input, in this case depth is equal to buffer num\n TQue<QuePosition::VECIN, BUFFER_NUM> inQueueX;\n //create queue for output, in this case depth is equal to buffer num\n TQue<QuePosition::VECOUT, BUFFER_NUM> outQueueY;\n GlobalTensor<half> xGm;\n GlobalTensor<half> yGm;\n //考生补充自定义成员变量\n TBuf<QuePosition::VECCALC> tmpBuffer1, tmpBuffer2, tmpBuffer3, tmpBuffer4;\n uint32_t blockLength;\n uint32_t tileNum;\n uint32_t tileLength;\n};\nextern \"C\" __global__ __aicore__ void sinh_custom(GM_ADDR x, GM_ADDR y, GM_ADDR \nworkspace, GM_ADDR tiling) {\n GET_TILING_DATA(tiling_data, tiling);\n KernelSinh op;\n //补充 init 和 process 函数调用内容\n op.Init(x, y, tiling_data.totalLength, tiling_data.tileNum);\n op.Process();\n}\n```\n\n \n 2. host侧的tiling.h文件：\n \n```c\n#include \"register/tilingdata_base.h\"\nnamespace optiling {\nBEGIN_TILING_DATA_DEF(SinhCustomTilingData)\n //考生自行定义 tiling 结构体成员变量\nTILING_DATA_FIELD_DEF(uint32_t, totalLength);\nTILING_DATA_FIELD_DEF(uint32_t, tileNum);\nEND_TILING_DATA_DEF;\nREGISTER_TILING_DATA_CLASS(SinhCustom, SinhCustomTilingData)\n```\n 3. host侧的sinh_custom.cpp文件：\n\n```c\n#include \"sinh_custom_tiling.h\"\n#include \"register/op_def_registry.h\"\nnamespace optiling {\nstatic ge::graphStatus TilingFunc(gert::TilingContext* context)\n{\n SinhCustomTilingData tiling;\n //考生自行填充\n const uint32_t BLOCK_DIM = 8;\n const uint32_t TILE_NUM = 8;\n uint32_t totalLength = context->GetInputShape(0)->GetOriginShape().GetShapeSize();\n context->SetBlockDim(BLOCK_DIM);\n tiling.set_totalLength(totalLength);\n tiling.set_tileNum(TILE_NUM);\n tiling.SaveToBuffer(context->GetRawTilingData()->GetData(), \ncontext->GetRawTilingData()->GetCapacity());\n context->GetRawTilingData()->SetDataSize(tiling.GetDataSize());\n size_t *currentWorkspace = context->GetWorkspaceSizes(1);\n currentWorkspace[0] = 0;\n return ge::GRAPH_SUCCESS;\n}\n}\nnamespace ge {\nstatic ge::graphStatus InferShape(gert::InferShapeContext* context)\n{\n const gert::Shape* x1_shape = context->GetInputShape(0);\n gert::Shape* y_shape = context->GetOutputShape(0);\n *y_shape = *x1_shape;\n return GRAPH_SUCCESS;\n}\n}\nnamespace ops {\nclass SinhCustom : public OpDef {\npublic:\n explicit SinhCustom(const char* name) : OpDef(name)\n {\n this->Input(\"x\")\n .ParamType(REQUIRED)\n .DataType({ge::DT_FLOAT16})\n .Format({ge::FORMAT_ND})\n .UnknownShapeFormat({ge::FORMAT_ND});\n this->Output(\"y\")\n .ParamType(REQUIRED)\n .DataType({ge::DT_FLOAT16})\n .Format({ge::FORMAT_ND})\n .UnknownShapeFormat({ge::FORMAT_ND});\n this->SetInferShape(ge::InferShape);\n this->AICore()\n .SetTiling(optiling::TilingFunc);\n this->AICore().AddConfig(\"ascend310b\");\n }\n};\nOP_ADD(SinhCustom);\n}\n\n```\n\n**认证成功！**\n\n<div align=center>\n    <img src=\"https://i-blog.csdnimg.cn/direct/b40d1557f2a04714ab2ac31adba789d8.jpeg\">\n</div>\n\n\n# 总结\n训练营时间不长但收获满满，同时认识到自己有很多不足，希望勤能补拙！","source":"_posts/昇腾CANN-Ascend-C算子开发学习笔记.md","raw":"---\ntitle: 昇腾CANN-Ascend C算子开发学习笔记\ndate: 2024-07-25 15:54:03\ncategories:\n- [计算机科学]\ntags:\n- [操作系统, 计算机组成原理]\n---\n\n\n# 前言\n\n此为华为昇腾AI训练营（南京站）授课内容，经个人整理发布\n\n为了更好的理解课程内容，建议读者有一定的计算机组成原理、编译原理学习基础\n\n本文在笔者CSDN账号先行发布，后同步到此，因此图片水印皆为笔者本人CSDN账号水印\n\n#### 因文章图片使用CSDN图片链接，有时因某些原因可能无法访问，导致下面图片有时无法正常展示，本人在CSDN更新文章不多，因本硕多年来有多个CSDN账号有时分不清楚，暂时没再维护文章中这些可能无法正常显示的图片啦嘤嘤嘤\n\n# 一、背景知识\n## 1. CANN&AI core\n\n<div align=center>\n    <img src=\"https://i-blog.csdnimg.cn/direct/959d581b757747989d8e39ed91e96fae.jpeg\">\n</div>\n\n1.华为的异构计算架构CANN（Compute Architecture for Neural Networks）对标NVIDA的CUDA<br>\n2.NPU（Neural Processing Unit）架构是一种新型的处理器设计理念，它将传统的CPU和GPU架构进行整合，并引入了深度学习算法。<br>\n3.AI core 采用华为自研的达芬奇架构，它包含下面几个组成部分：<br>\n\n - 计算单元（矩阵计算、向量计算、标量计算） \n - 存储系统 \n - 控制单元\n\nAscend C编程语言开发的算子运行在AI core上\n## 2. Ascend C算子\n\n - 算子：一个函数空间到函数空间上的映射\n\n - 从广义上讲，对任何函数进行某一项操作都可以认为是一个算子\n - CUDA与CANN的算子不通用\n\n## 3. 核函数\n\n - 核函数：Ascend C算子设备侧的入口\n- 核函数是直接在设备侧执行的代码\n- 使用变量类型限定符\n- 核函数必须具有void返回类型\n- 核函数的调用语句是C/C++函数调用语句的一种扩展\n\n# 二、编程范式\nAscend C采用标准C++语法和一组类库API进行编程\n\n1）矢量编程主要分为：\n - CopyIn \n- Compute \n- CopyOut\n\n3个流水任务：CopyIn负责搬入操作，Compute负责矢量计算操作，CopyOut负责搬出操作\n\n2）矩阵编程主要分为：\n- CopyIn\n- Split\n- Compute\n- Aggregate\n- CopyOut\n\n相比矢量编程多了矩阵分割（Split）和聚合（Aggregate）两步\n\n# 三、香橙派的连接\n\n文档：[Orange pai连接及操作实验文档](https://www.hiascend.com/document/detail/zh/Atlas200IDKA2DeveloperKit/23.0.RC2/qs/qs_0017.html)\n\n# 四、改造sinh任务\n\n首先运动add任务，然后修改add算子功能为sinh函数功能\n\n## 1.测试运行\n\n根据实验手册，成功运行后会显示：test pass\n\n<div align=center>\n    <img src=\"https://i-blog.csdnimg.cn/direct/3f611475c7504a4a888b70c4934fd5d1.jpeg\">\n</div>\n\n\n## 2.改造成sinh\n\n<div align=center>\n    <img src=\"https://img-blog.csdnimg.cn/img_convert/f7aa26cc2b49cc5c825e95f01d321dad.png\">\n</div>\n\n\n需要参考一些官方的API：\n[华为昇腾社区-Ascend C](https://link.csdn.net/?target=https://www.hiascend.com/zh/developer/courses/detail/1696414606799486977)\n\n需要修改目录：`~/samples/operator/AddCustomSample/KernelLaunch/test`\n下的两个文档：\n- add_custom.cpp\n- scripts / gen_data.py\n\n分别需要修改的地方为：\n- 1\n\n<div align=center>\n    <img src=\"https://img-blog.csdnimg.cn/img_convert/55a966993b663a71b8d7feadf8c7fbf3.png\">\n</div>\n\n\n- 2\n\n<div align=center>\n    <img src=\"https://img-blog.csdnimg.cn/img_convert/e0ddb5c183803561c5c3588e45e492d0.png\">\n</div>\n\n\n将公式修改为sinh的公式，之后用实验文档中的运行命令再次运行即可\n\n# 五、Ascend C中级认证\n\n[**点击链接：Ascend C中级认证考试**](https://www.hiascend.com/edu/certification/detail/34bf904cb410497cb9c582be6c047ff7)\n\n题目：\n***参考tensorflow的Sinh算子，实现Ascend C算子Sinh，算子命名为SinhCustom，并完成aclnn算子调用相关算法: sinh(x) = (exp(x) - exp(-x)) / 2.0\n要求:\n1、完成host侧和kernel侧代码实现。\n2、实现sinh功能，支持float16类型输入，使用内核调试符方式调用算子测试通过。\n3、使用单算子API调用方式调用SinhCustom算子测试通过\n提交要求:\n完成编程后，将上述实现的工程代码打包在rar包内提交，如SinhCustom.rar.***\n\n所有需要补充的文件包括：\n- op_host文件夹下的sinh_custom_tiling.h文件\n- op_host文件夹下的sinh_custom.cpp文件\n- op_kernel文件夹下的sinh_custom.cpp文件\n\n这个实现过程可以参考samples仓库的Add算子，把Add算子的内核调用代码复制一份到SinhCustom，Add需要x，y，z三个变量，sinh只需x和y两个变量，因此删掉关于z的操作\n\n 1. kernel侧的sinh_custom.cpp文件内关键公式修改方法参考前文所示，完整代码如下：\n \n ```c\n #include \"kernel_operator.h\"\nusing namespace AscendC;\nconstexpr int32_t BUFFER_NUM = 2;\nclass KernelSinh {\npublic:\n __aicore__ inline KernelSinh() {}\n __aicore__ inline void Init(GM_ADDR x, GM_ADDR y, uint32_t totalLength, uint32_t \ntileNum)\n {\n //考生补充初始化代码\n ASSERT(GetBlockNum() != 0 && \"block dim can not be zero!\");\n this->blockLength = totalLength / GetBlockNum();\n this->tileNum = tileNum;\n ASSERT(tileNum != 0 && \"tile num can not be zero!\");\n this->tileLength = this->blockLength / tileNum / BUFFER_NUM;\n xGm.SetGlobalBuffer((__gm__ DTYPE_X *)x + this->blockLength * GetBlockIdx(), \nthis->blockLength);\n yGm.SetGlobalBuffer((__gm__ DTYPE_Y *)y + this->blockLength * GetBlockIdx(), \nthis->blockLength);\n pipe.InitBuffer(inQueueX, BUFFER_NUM, this->tileLength * sizeof(DTYPE_X));\n pipe.InitBuffer(outQueueY, BUFFER_NUM, this->tileLength * sizeof(DTYPE_Y));\n pipe.InitBuffer(tmpBuffer1, this->tileLength * sizeof(DTYPE_X));\n pipe.InitBuffer(tmpBuffer2, this->tileLength * sizeof(DTYPE_X));\n pipe.InitBuffer(tmpBuffer3, this->tileLength * sizeof(DTYPE_X));\n pipe.InitBuffer(tmpBuffer4, this->tileLength * sizeof(DTYPE_X));\n }\n __aicore__ inline void Process()\n {\n //考生补充对“loopCount”的定义，注意对 Tiling 的处理\n int32_t loopCount = this->tileNum * BUFFER_NUM;\n for (int32_t i = 0; i < loopCount; i++) {\n CopyIn(i);\n Compute(i);\n CopyOut(i);\n }\n }\nprivate:\n __aicore__ inline void CopyIn(int32_t progress)\n {\n //考生补充算子代码\n LocalTensor<DTYPE_X> xLocal = inQueueX.AllocTensor<DTYPE_X>();\n DataCopy(xLocal, xGm[progress * this->tileLength], this->tileLength);\n inQueueX.EnQue(xLocal);\n }\n __aicore__ inline void Compute(int32_t progress)\n {\n //考生补充算子计算代码\n LocalTensor<DTYPE_X> xLocal = inQueueX.DeQue<DTYPE_X>();\n LocalTensor<DTYPE_Y> yLocal = outQueueY.AllocTensor<DTYPE_Y>();\n LocalTensor<DTYPE_X> tmpTensor1 = tmpBuffer1.Get<DTYPE_X>();\n LocalTensor<DTYPE_X> tmpTensor2 = tmpBuffer2.Get<DTYPE_X>();\n LocalTensor<DTYPE_X> tmpTensor3 = tmpBuffer3.Get<DTYPE_X>();\n LocalTensor<DTYPE_X> tmpTensor4 = tmpBuffer4.Get<DTYPE_X>();\n DTYPE_X inputVal1 = -1;\n DTYPE_X inputVal2 = 0.5;\n //sinh(x) = (exp(x) - exp(-x)) / 2.0\n Muls(tmpTensor1, xLocal, inputVal1, this->tileLength);\n Exp(tmpTensor2, tmpTensor1, this->tileLength);\n Exp(tmpTensor3, xLocal, this->tileLength);\n Sub(tmpTensor4, tmpTensor3, tmpTensor2, this->tileLength);\n Muls(yLocal, tmpTensor4, inputVal2, this->tileLength);\n outQueueY.EnQue<DTYPE_Y>(yLocal);\n inQueueX.FreeTensor(xLocal);\n }\n __aicore__ inline void CopyOut(int32_t progress)\n {\n //考生补充算子代码\n LocalTensor<DTYPE_Y> yLocal = outQueueY.DeQue<DTYPE_Y>();\n DataCopy(yGm[progress * this->tileLength], yLocal, this->tileLength);\n outQueueY.FreeTensor(yLocal);\n }\nprivate:\n TPipe pipe;\n //create queue for input, in this case depth is equal to buffer num\n TQue<QuePosition::VECIN, BUFFER_NUM> inQueueX;\n //create queue for output, in this case depth is equal to buffer num\n TQue<QuePosition::VECOUT, BUFFER_NUM> outQueueY;\n GlobalTensor<half> xGm;\n GlobalTensor<half> yGm;\n //考生补充自定义成员变量\n TBuf<QuePosition::VECCALC> tmpBuffer1, tmpBuffer2, tmpBuffer3, tmpBuffer4;\n uint32_t blockLength;\n uint32_t tileNum;\n uint32_t tileLength;\n};\nextern \"C\" __global__ __aicore__ void sinh_custom(GM_ADDR x, GM_ADDR y, GM_ADDR \nworkspace, GM_ADDR tiling) {\n GET_TILING_DATA(tiling_data, tiling);\n KernelSinh op;\n //补充 init 和 process 函数调用内容\n op.Init(x, y, tiling_data.totalLength, tiling_data.tileNum);\n op.Process();\n}\n```\n\n \n 2. host侧的tiling.h文件：\n \n```c\n#include \"register/tilingdata_base.h\"\nnamespace optiling {\nBEGIN_TILING_DATA_DEF(SinhCustomTilingData)\n //考生自行定义 tiling 结构体成员变量\nTILING_DATA_FIELD_DEF(uint32_t, totalLength);\nTILING_DATA_FIELD_DEF(uint32_t, tileNum);\nEND_TILING_DATA_DEF;\nREGISTER_TILING_DATA_CLASS(SinhCustom, SinhCustomTilingData)\n```\n 3. host侧的sinh_custom.cpp文件：\n\n```c\n#include \"sinh_custom_tiling.h\"\n#include \"register/op_def_registry.h\"\nnamespace optiling {\nstatic ge::graphStatus TilingFunc(gert::TilingContext* context)\n{\n SinhCustomTilingData tiling;\n //考生自行填充\n const uint32_t BLOCK_DIM = 8;\n const uint32_t TILE_NUM = 8;\n uint32_t totalLength = context->GetInputShape(0)->GetOriginShape().GetShapeSize();\n context->SetBlockDim(BLOCK_DIM);\n tiling.set_totalLength(totalLength);\n tiling.set_tileNum(TILE_NUM);\n tiling.SaveToBuffer(context->GetRawTilingData()->GetData(), \ncontext->GetRawTilingData()->GetCapacity());\n context->GetRawTilingData()->SetDataSize(tiling.GetDataSize());\n size_t *currentWorkspace = context->GetWorkspaceSizes(1);\n currentWorkspace[0] = 0;\n return ge::GRAPH_SUCCESS;\n}\n}\nnamespace ge {\nstatic ge::graphStatus InferShape(gert::InferShapeContext* context)\n{\n const gert::Shape* x1_shape = context->GetInputShape(0);\n gert::Shape* y_shape = context->GetOutputShape(0);\n *y_shape = *x1_shape;\n return GRAPH_SUCCESS;\n}\n}\nnamespace ops {\nclass SinhCustom : public OpDef {\npublic:\n explicit SinhCustom(const char* name) : OpDef(name)\n {\n this->Input(\"x\")\n .ParamType(REQUIRED)\n .DataType({ge::DT_FLOAT16})\n .Format({ge::FORMAT_ND})\n .UnknownShapeFormat({ge::FORMAT_ND});\n this->Output(\"y\")\n .ParamType(REQUIRED)\n .DataType({ge::DT_FLOAT16})\n .Format({ge::FORMAT_ND})\n .UnknownShapeFormat({ge::FORMAT_ND});\n this->SetInferShape(ge::InferShape);\n this->AICore()\n .SetTiling(optiling::TilingFunc);\n this->AICore().AddConfig(\"ascend310b\");\n }\n};\nOP_ADD(SinhCustom);\n}\n\n```\n\n**认证成功！**\n\n<div align=center>\n    <img src=\"https://i-blog.csdnimg.cn/direct/b40d1557f2a04714ab2ac31adba789d8.jpeg\">\n</div>\n\n\n# 总结\n训练营时间不长但收获满满，同时认识到自己有很多不足，希望勤能补拙！","slug":"昇腾CANN-Ascend-C算子开发学习笔记","published":1,"updated":"2024-12-28T10:14:36.047Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfn0030mcuydyebe3hc","content":"<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>此为华为昇腾 AI 训练营（南京站）授课内容，经个人整理发布</p>\n<p>为了更好的理解课程内容，建议读者有一定的计算机组成原理、编译原理学习基础</p>\n<p>本文在笔者 CSDN 账号先行发布，后同步到此，因此图片水印皆为笔者本人 CSDN 账号水印</p>\n<h4 id=\"因文章图片使用csdn图片链接有时因某些原因可能无法访问导致下面图片有时无法正常展示本人在csdn更新文章不多因本硕多年来有多个csdn账号有时分不清楚暂时没再维护文章中这些可能无法正常显示的图片啦嘤嘤嘤\"><a class=\"anchor\" href=\"#因文章图片使用csdn图片链接有时因某些原因可能无法访问导致下面图片有时无法正常展示本人在csdn更新文章不多因本硕多年来有多个csdn账号有时分不清楚暂时没再维护文章中这些可能无法正常显示的图片啦嘤嘤嘤\">#</a> 因文章图片使用 CSDN 图片链接，有时因某些原因可能无法访问，导致下面图片有时无法正常展示，本人在 CSDN 更新文章不多，因本硕多年来有多个 CSDN 账号有时分不清楚，暂时没再维护文章中这些可能无法正常显示的图片啦嘤嘤嘤</h4>\n<h1 id=\"一-背景知识\"><a class=\"anchor\" href=\"#一-背景知识\">#</a> 一、背景知识</h1>\n<h2 id=\"1-cannai-core\"><a class=\"anchor\" href=\"#1-cannai-core\">#</a> 1. CANN&amp;AI core</h2>\n<div align=center>\n    <img data-src=\"https://i-blog.csdnimg.cn/direct/959d581b757747989d8e39ed91e96fae.jpeg\">\n</div>\n<p>1. 华为的异构计算架构 CANN（Compute Architecture for Neural Networks）对标 NVIDA 的 CUDA<br><br />\n2.NPU（Neural Processing Unit）架构是一种新型的处理器设计理念，它将传统的 CPU 和 GPU 架构进行整合，并引入了深度学习算法。<br><br />\n<span class=\"exturl\" data-url=\"aHR0cDovLzMuQUk=\">3.AI</span> core 采用华为自研的达芬奇架构，它包含下面几个组成部分：<br></p>\n<ul>\n<li>计算单元（矩阵计算、向量计算、标量计算）</li>\n<li>存储系统</li>\n<li>控制单元</li>\n</ul>\n<p>Ascend C 编程语言开发的算子运行在 AI core 上</p>\n<h2 id=\"2-ascend-c算子\"><a class=\"anchor\" href=\"#2-ascend-c算子\">#</a> 2. Ascend C 算子</h2>\n<ul>\n<li>\n<p>算子：一个函数空间到函数空间上的映射</p>\n</li>\n<li>\n<p>从广义上讲，对任何函数进行某一项操作都可以认为是一个算子</p>\n</li>\n<li>\n<p>CUDA 与 CANN 的算子不通用</p>\n</li>\n</ul>\n<h2 id=\"3-核函数\"><a class=\"anchor\" href=\"#3-核函数\">#</a> 3. 核函数</h2>\n<ul>\n<li>核函数：Ascend C 算子设备侧的入口</li>\n<li>核函数是直接在设备侧执行的代码</li>\n<li>使用变量类型限定符</li>\n<li>核函数必须具有 void 返回类型</li>\n<li>核函数的调用语句是 C/C++ 函数调用语句的一种扩展</li>\n</ul>\n<h1 id=\"二-编程范式\"><a class=\"anchor\" href=\"#二-编程范式\">#</a> 二、编程范式</h1>\n<p>Ascend C 采用标准 C++ 语法和一组类库 API 进行编程</p>\n<p>1）矢量编程主要分为：</p>\n<ul>\n<li>CopyIn</li>\n<li>Compute</li>\n<li>CopyOut</li>\n</ul>\n<p>3 个流水任务：CopyIn 负责搬入操作，Compute 负责矢量计算操作，CopyOut 负责搬出操作</p>\n<p>2）矩阵编程主要分为：</p>\n<ul>\n<li>CopyIn</li>\n<li>Split</li>\n<li>Compute</li>\n<li>Aggregate</li>\n<li>CopyOut</li>\n</ul>\n<p>相比矢量编程多了矩阵分割（Split）和聚合（Aggregate）两步</p>\n<h1 id=\"三-香橙派的连接\"><a class=\"anchor\" href=\"#三-香橙派的连接\">#</a> 三、香橙派的连接</h1>\n<p>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGlhc2NlbmQuY29tL2RvY3VtZW50L2RldGFpbC96aC9BdGxhczIwMElES0EyRGV2ZWxvcGVyS2l0LzIzLjAuUkMyL3FzL3FzXzAwMTcuaHRtbA==\">Orange pai 连接及操作实验文档</span></p>\n<h1 id=\"四-改造sinh任务\"><a class=\"anchor\" href=\"#四-改造sinh任务\">#</a> 四、改造 sinh 任务</h1>\n<p>首先运动 add 任务，然后修改 add 算子功能为 sinh 函数功能</p>\n<h2 id=\"1测试运行\"><a class=\"anchor\" href=\"#1测试运行\">#</a> 1. 测试运行</h2>\n<p>根据实验手册，成功运行后会显示：test pass</p>\n<div align=center>\n    <img data-src=\"https://i-blog.csdnimg.cn/direct/3f611475c7504a4a888b70c4934fd5d1.jpeg\">\n</div>\n<h2 id=\"2改造成sinh\"><a class=\"anchor\" href=\"#2改造成sinh\">#</a> 2. 改造成 sinh</h2>\n<div align=center>\n    <img data-src=\"https://img-blog.csdnimg.cn/img_convert/f7aa26cc2b49cc5c825e95f01d321dad.png\">\n</div>\n<p>需要参考一些官方的 API：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmNzZG4ubmV0Lz90YXJnZXQ9aHR0cHM6Ly93d3cuaGlhc2NlbmQuY29tL3poL2RldmVsb3Blci9jb3Vyc2VzL2RldGFpbC8xNjk2NDE0NjA2Nzk5NDg2OTc3\">华为昇腾社区 - Ascend C</span></p>\n<p>需要修改目录： <code>~/samples/operator/AddCustomSample/KernelLaunch/test</code> <br />\n 下的两个文档：</p>\n<ul>\n<li>add_custom.cpp</li>\n<li>scripts / gen_data.py</li>\n</ul>\n<p>分别需要修改的地方为：</p>\n<ul>\n<li>1</li>\n</ul>\n<div align=center>\n    <img data-src=\"https://img-blog.csdnimg.cn/img_convert/55a966993b663a71b8d7feadf8c7fbf3.png\">\n</div>\n<ul>\n<li>2</li>\n</ul>\n<div align=center>\n    <img data-src=\"https://img-blog.csdnimg.cn/img_convert/e0ddb5c183803561c5c3588e45e492d0.png\">\n</div>\n<p>将公式修改为 sinh 的公式，之后用实验文档中的运行命令再次运行即可</p>\n<h1 id=\"五-ascend-c中级认证\"><a class=\"anchor\" href=\"#五-ascend-c中级认证\">#</a> 五、Ascend C 中级认证</h1>\n<p><a href=\"https://www.hiascend.com/edu/certification/detail/34bf904cb410497cb9c582be6c047ff7\"><strong>点击链接：Ascend C 中级认证考试</strong></a></p>\n<p>题目：<br />\n<em><strong>参考 tensorflow 的 Sinh 算子，实现 Ascend C 算子 Sinh，算子命名为 SinhCustom，并完成 aclnn 算子调用相关算法: sinh (x) = (exp (x) - exp (-x)) / 2.0<br />\n 要求:<br />\n1、完成 host 侧和 kernel 侧代码实现。<br />\n2、实现 sinh 功能，支持 float16 类型输入，使用内核调试符方式调用算子测试通过。<br />\n3、使用单算子 API 调用方式调用 SinhCustom 算子测试通过<br />\n提交要求:<br />\n 完成编程后，将上述实现的工程代码打包在 rar 包内提交，如 SinhCustom.rar.</strong></em></p>\n<p>所有需要补充的文件包括：</p>\n<ul>\n<li>op_host 文件夹下的 sinh_custom_tiling.h 文件</li>\n<li>op_host 文件夹下的 sinh_custom.cpp 文件</li>\n<li>op_kernel 文件夹下的 sinh_custom.cpp 文件</li>\n</ul>\n<p>这个实现过程可以参考 samples 仓库的 Add 算子，把 Add 算子的内核调用代码复制一份到 SinhCustom，Add 需要 x，y，z 三个变量，sinh 只需 x 和 y 两个变量，因此删掉关于 z 的操作</p>\n<ol>\n<li>kernel 侧的 sinh_custom.cpp 文件内关键公式修改方法参考前文所示，完整代码如下：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernel_operator.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace AscendC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>constexpr <span class=\"token class-name\">int32_t</span> BUFFER_NUM <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>class KernelSinh <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token function\">KernelSinh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>GM_ADDR x<span class=\"token punctuation\">,</span> GM_ADDR y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> totalLength<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>tileNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 考生补充初始化代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetBlockNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"block dim can not be zero!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>this<span class=\"token operator\">-></span>blockLength <span class=\"token operator\">=</span> totalLength <span class=\"token operator\">/</span> <span class=\"token function\">GetBlockNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>this<span class=\"token operator\">-></span>tileNum <span class=\"token operator\">=</span> tileNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>tileNum <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"tile num can not be zero!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">=</span> this<span class=\"token operator\">-></span>blockLength <span class=\"token operator\">/</span> tileNum <span class=\"token operator\">/</span> BUFFER_NUM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>xGm<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobalBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__gm__ DTYPE_X <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>x <span class=\"token operator\">+</span> this<span class=\"token operator\">-></span>blockLength <span class=\"token operator\">*</span> <span class=\"token function\">GetBlockIdx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>this<span class=\"token operator\">-></span>blockLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>yGm<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobalBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__gm__ DTYPE_Y <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>y <span class=\"token operator\">+</span> this<span class=\"token operator\">-></span>blockLength <span class=\"token operator\">*</span> <span class=\"token function\">GetBlockIdx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>this<span class=\"token operator\">-></span>blockLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>inQueueX<span class=\"token punctuation\">,</span> BUFFER_NUM<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>outQueueY<span class=\"token punctuation\">,</span> BUFFER_NUM<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>tmpBuffer1<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>tmpBuffer2<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>tmpBuffer3<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>tmpBuffer4<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 考生补充对 “loopCount” 的定义，注意对 Tiling 的处理</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token class-name\">int32_t</span> loopCount <span class=\"token operator\">=</span> this<span class=\"token operator\">-></span>tileNum <span class=\"token operator\">*</span> BUFFER_NUM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loopCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">CopyIn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">Compute</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">CopyOut</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>private<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyIn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> progress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 考生补充算子代码</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> xLocal <span class=\"token operator\">=</span> inQueueX<span class=\"token punctuation\">.</span>AllocTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">DataCopy</span><span class=\"token punctuation\">(</span>xLocal<span class=\"token punctuation\">,</span> xGm<span class=\"token punctuation\">[</span>progress <span class=\"token operator\">*</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>inQueueX<span class=\"token punctuation\">.</span><span class=\"token function\">EnQue</span><span class=\"token punctuation\">(</span>xLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Compute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> progress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 考生补充算子计算代码</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> xLocal <span class=\"token operator\">=</span> inQueueX<span class=\"token punctuation\">.</span>DeQue<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span> yLocal <span class=\"token operator\">=</span> outQueueY<span class=\"token punctuation\">.</span>AllocTensor<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> tmpTensor1 <span class=\"token operator\">=</span> tmpBuffer1<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> tmpTensor2 <span class=\"token operator\">=</span> tmpBuffer2<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> tmpTensor3 <span class=\"token operator\">=</span> tmpBuffer3<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> tmpTensor4 <span class=\"token operator\">=</span> tmpBuffer4<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>DTYPE_X inputVal1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>DTYPE_X inputVal2 <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">//sinh(x) = (exp(x) - exp(-x)) / 2.0</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token function\">Muls</span><span class=\"token punctuation\">(</span>tmpTensor1<span class=\"token punctuation\">,</span> xLocal<span class=\"token punctuation\">,</span> inputVal1<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span>tmpTensor2<span class=\"token punctuation\">,</span> tmpTensor1<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span>tmpTensor3<span class=\"token punctuation\">,</span> xLocal<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>tmpTensor4<span class=\"token punctuation\">,</span> tmpTensor3<span class=\"token punctuation\">,</span> tmpTensor2<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token function\">Muls</span><span class=\"token punctuation\">(</span>yLocal<span class=\"token punctuation\">,</span> tmpTensor4<span class=\"token punctuation\">,</span> inputVal2<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>outQueueY<span class=\"token punctuation\">.</span>EnQue<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>yLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>inQueueX<span class=\"token punctuation\">.</span><span class=\"token function\">FreeTensor</span><span class=\"token punctuation\">(</span>xLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyOut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> progress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 考生补充算子代码</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span> yLocal <span class=\"token operator\">=</span> outQueueY<span class=\"token punctuation\">.</span>DeQue<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token function\">DataCopy</span><span class=\"token punctuation\">(</span>yGm<span class=\"token punctuation\">[</span>progress <span class=\"token operator\">*</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> yLocal<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>outQueueY<span class=\"token punctuation\">.</span><span class=\"token function\">FreeTensor</span><span class=\"token punctuation\">(</span>yLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>private<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>TPipe pipe<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">//create queue for input, in this case depth is equal to buffer num</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>TQue<span class=\"token operator\">&lt;</span>QuePosition<span class=\"token operator\">::</span>VECIN<span class=\"token punctuation\">,</span> BUFFER_NUM<span class=\"token operator\">></span> inQueueX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">//create queue for output, in this case depth is equal to buffer num</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>TQue<span class=\"token operator\">&lt;</span>QuePosition<span class=\"token operator\">::</span>VECOUT<span class=\"token punctuation\">,</span> BUFFER_NUM<span class=\"token operator\">></span> outQueueY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>GlobalTensor<span class=\"token operator\">&lt;</span>half<span class=\"token operator\">></span> xGm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>GlobalTensor<span class=\"token operator\">&lt;</span>half<span class=\"token operator\">></span> yGm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 考生补充自定义成员变量</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>TBuf<span class=\"token operator\">&lt;</span>QuePosition<span class=\"token operator\">::</span>VECCALC<span class=\"token operator\">></span> tmpBuffer1<span class=\"token punctuation\">,</span> tmpBuffer2<span class=\"token punctuation\">,</span> tmpBuffer3<span class=\"token punctuation\">,</span> tmpBuffer4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token class-name\">uint32_t</span> blockLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token class-name\">uint32_t</span> tileNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token class-name\">uint32_t</span> tileLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> __global__ __aicore__ <span class=\"token keyword\">void</span> <span class=\"token function\">sinh_custom</span><span class=\"token punctuation\">(</span>GM_ADDR x<span class=\"token punctuation\">,</span> GM_ADDR y<span class=\"token punctuation\">,</span> GM_ADDR </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>workspace<span class=\"token punctuation\">,</span> GM_ADDR tiling<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token function\">GET_TILING_DATA</span><span class=\"token punctuation\">(</span>tiling_data<span class=\"token punctuation\">,</span> tiling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>KernelSinh op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">// 补充 init 和 process 函数调用内容</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>op<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> tiling_data<span class=\"token punctuation\">.</span>totalLength<span class=\"token punctuation\">,</span> tiling_data<span class=\"token punctuation\">.</span>tileNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>op<span class=\"token punctuation\">.</span><span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>host 侧的 tiling.h 文件：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"register/tilingdata_base.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>namespace optiling <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">BEGIN_TILING_DATA_DEF</span><span class=\"token punctuation\">(</span>SinhCustomTilingData<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 考生自行定义 tiling 结构体成员变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">TILING_DATA_FIELD_DEF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">,</span> totalLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">TILING_DATA_FIELD_DEF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">,</span> tileNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>END_TILING_DATA_DEF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">REGISTER_TILING_DATA_CLASS</span><span class=\"token punctuation\">(</span>SinhCustom<span class=\"token punctuation\">,</span> SinhCustomTilingData<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>host 侧的 sinh_custom.cpp 文件：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sinh_custom_tiling.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"register/op_def_registry.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>namespace optiling <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">static</span> ge<span class=\"token operator\">::</span>graphStatus <span class=\"token function\">TilingFunc</span><span class=\"token punctuation\">(</span>gert<span class=\"token operator\">::</span>TilingContext<span class=\"token operator\">*</span> context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> SinhCustomTilingData tiling<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// 考生自行填充</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> BLOCK_DIM <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> TILE_NUM <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token class-name\">uint32_t</span> totalLength <span class=\"token operator\">=</span> context<span class=\"token operator\">-></span><span class=\"token function\">GetInputShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetOriginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetShapeSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> context<span class=\"token operator\">-></span><span class=\"token function\">SetBlockDim</span><span class=\"token punctuation\">(</span>BLOCK_DIM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> tiling<span class=\"token punctuation\">.</span><span class=\"token function\">set_totalLength</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> tiling<span class=\"token punctuation\">.</span><span class=\"token function\">set_tileNum</span><span class=\"token punctuation\">(</span>TILE_NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> tiling<span class=\"token punctuation\">.</span><span class=\"token function\">SaveToBuffer</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">-></span><span class=\"token function\">GetRawTilingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>context<span class=\"token operator\">-></span><span class=\"token function\">GetRawTilingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> context<span class=\"token operator\">-></span><span class=\"token function\">GetRawTilingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">SetDataSize</span><span class=\"token punctuation\">(</span>tiling<span class=\"token punctuation\">.</span><span class=\"token function\">GetDataSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token class-name\">size_t</span> <span class=\"token operator\">*</span>currentWorkspace <span class=\"token operator\">=</span> context<span class=\"token operator\">-></span><span class=\"token function\">GetWorkspaceSizes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> currentWorkspace<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">return</span> ge<span class=\"token operator\">::</span>GRAPH_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>namespace ge <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">static</span> ge<span class=\"token operator\">::</span>graphStatus <span class=\"token function\">InferShape</span><span class=\"token punctuation\">(</span>gert<span class=\"token operator\">::</span>InferShapeContext<span class=\"token operator\">*</span> context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">const</span> gert<span class=\"token operator\">::</span>Shape<span class=\"token operator\">*</span> x1_shape <span class=\"token operator\">=</span> context<span class=\"token operator\">-></span><span class=\"token function\">GetInputShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> gert<span class=\"token operator\">::</span>Shape<span class=\"token operator\">*</span> y_shape <span class=\"token operator\">=</span> context<span class=\"token operator\">-></span><span class=\"token function\">GetOutputShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token operator\">*</span>y_shape <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x1_shape<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token keyword\">return</span> GRAPH_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>namespace ops <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>class SinhCustom <span class=\"token operator\">:</span> public OpDef <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> explicit <span class=\"token function\">SinhCustom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">OpDef</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">ParamType</span><span class=\"token punctuation\">(</span>REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">DataType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>DT_FLOAT16<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>FORMAT_ND<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">UnknownShapeFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>FORMAT_ND<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">ParamType</span><span class=\"token punctuation\">(</span>REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">DataType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>DT_FLOAT16<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>FORMAT_ND<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">UnknownShapeFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>FORMAT_ND<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">SetInferShape</span><span class=\"token punctuation\">(</span>ge<span class=\"token operator\">::</span>InferShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">AICore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">SetTiling</span><span class=\"token punctuation\">(</span>optiling<span class=\"token operator\">::</span>TilingFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">AICore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ascend310b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token function\">OP_ADD</span><span class=\"token punctuation\">(</span>SinhCustom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>认证成功！</strong></p>\n<div align=center>\n    <img data-src=\"https://i-blog.csdnimg.cn/direct/b40d1557f2a04714ab2ac31adba789d8.jpeg\">\n</div>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>训练营时间不长但收获满满，同时认识到自己有很多不足，希望勤能补拙！</p>\n","length":6685,"excerpt":"","more":"<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>此为华为昇腾 AI 训练营（南京站）授课内容，经个人整理发布</p>\n<p>为了更好的理解课程内容，建议读者有一定的计算机组成原理、编译原理学习基础</p>\n<p>本文在笔者 CSDN 账号先行发布，后同步到此，因此图片水印皆为笔者本人 CSDN 账号水印</p>\n<h4 id=\"因文章图片使用csdn图片链接有时因某些原因可能无法访问导致下面图片有时无法正常展示本人在csdn更新文章不多因本硕多年来有多个csdn账号有时分不清楚暂时没再维护文章中这些可能无法正常显示的图片啦嘤嘤嘤\"><a class=\"anchor\" href=\"#因文章图片使用csdn图片链接有时因某些原因可能无法访问导致下面图片有时无法正常展示本人在csdn更新文章不多因本硕多年来有多个csdn账号有时分不清楚暂时没再维护文章中这些可能无法正常显示的图片啦嘤嘤嘤\">#</a> 因文章图片使用 CSDN 图片链接，有时因某些原因可能无法访问，导致下面图片有时无法正常展示，本人在 CSDN 更新文章不多，因本硕多年来有多个 CSDN 账号有时分不清楚，暂时没再维护文章中这些可能无法正常显示的图片啦嘤嘤嘤</h4>\n<h1 id=\"一-背景知识\"><a class=\"anchor\" href=\"#一-背景知识\">#</a> 一、背景知识</h1>\n<h2 id=\"1-cannai-core\"><a class=\"anchor\" href=\"#1-cannai-core\">#</a> 1. CANN&amp;AI core</h2>\n<div align=center>\n    <img data-src=\"https://i-blog.csdnimg.cn/direct/959d581b757747989d8e39ed91e96fae.jpeg\">\n</div>\n<p>1. 华为的异构计算架构 CANN（Compute Architecture for Neural Networks）对标 NVIDA 的 CUDA<br><br />\n2.NPU（Neural Processing Unit）架构是一种新型的处理器设计理念，它将传统的 CPU 和 GPU 架构进行整合，并引入了深度学习算法。<br><br />\n<span class=\"exturl\" data-url=\"aHR0cDovLzMuQUk=\">3.AI</span> core 采用华为自研的达芬奇架构，它包含下面几个组成部分：<br></p>\n<ul>\n<li>计算单元（矩阵计算、向量计算、标量计算）</li>\n<li>存储系统</li>\n<li>控制单元</li>\n</ul>\n<p>Ascend C 编程语言开发的算子运行在 AI core 上</p>\n<h2 id=\"2-ascend-c算子\"><a class=\"anchor\" href=\"#2-ascend-c算子\">#</a> 2. Ascend C 算子</h2>\n<ul>\n<li>\n<p>算子：一个函数空间到函数空间上的映射</p>\n</li>\n<li>\n<p>从广义上讲，对任何函数进行某一项操作都可以认为是一个算子</p>\n</li>\n<li>\n<p>CUDA 与 CANN 的算子不通用</p>\n</li>\n</ul>\n<h2 id=\"3-核函数\"><a class=\"anchor\" href=\"#3-核函数\">#</a> 3. 核函数</h2>\n<ul>\n<li>核函数：Ascend C 算子设备侧的入口</li>\n<li>核函数是直接在设备侧执行的代码</li>\n<li>使用变量类型限定符</li>\n<li>核函数必须具有 void 返回类型</li>\n<li>核函数的调用语句是 C/C++ 函数调用语句的一种扩展</li>\n</ul>\n<h1 id=\"二-编程范式\"><a class=\"anchor\" href=\"#二-编程范式\">#</a> 二、编程范式</h1>\n<p>Ascend C 采用标准 C++ 语法和一组类库 API 进行编程</p>\n<p>1）矢量编程主要分为：</p>\n<ul>\n<li>CopyIn</li>\n<li>Compute</li>\n<li>CopyOut</li>\n</ul>\n<p>3 个流水任务：CopyIn 负责搬入操作，Compute 负责矢量计算操作，CopyOut 负责搬出操作</p>\n<p>2）矩阵编程主要分为：</p>\n<ul>\n<li>CopyIn</li>\n<li>Split</li>\n<li>Compute</li>\n<li>Aggregate</li>\n<li>CopyOut</li>\n</ul>\n<p>相比矢量编程多了矩阵分割（Split）和聚合（Aggregate）两步</p>\n<h1 id=\"三-香橙派的连接\"><a class=\"anchor\" href=\"#三-香橙派的连接\">#</a> 三、香橙派的连接</h1>\n<p>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaGlhc2NlbmQuY29tL2RvY3VtZW50L2RldGFpbC96aC9BdGxhczIwMElES0EyRGV2ZWxvcGVyS2l0LzIzLjAuUkMyL3FzL3FzXzAwMTcuaHRtbA==\">Orange pai 连接及操作实验文档</span></p>\n<h1 id=\"四-改造sinh任务\"><a class=\"anchor\" href=\"#四-改造sinh任务\">#</a> 四、改造 sinh 任务</h1>\n<p>首先运动 add 任务，然后修改 add 算子功能为 sinh 函数功能</p>\n<h2 id=\"1测试运行\"><a class=\"anchor\" href=\"#1测试运行\">#</a> 1. 测试运行</h2>\n<p>根据实验手册，成功运行后会显示：test pass</p>\n<div align=center>\n    <img data-src=\"https://i-blog.csdnimg.cn/direct/3f611475c7504a4a888b70c4934fd5d1.jpeg\">\n</div>\n<h2 id=\"2改造成sinh\"><a class=\"anchor\" href=\"#2改造成sinh\">#</a> 2. 改造成 sinh</h2>\n<div align=center>\n    <img data-src=\"https://img-blog.csdnimg.cn/img_convert/f7aa26cc2b49cc5c825e95f01d321dad.png\">\n</div>\n<p>需要参考一些官方的 API：<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLmNzZG4ubmV0Lz90YXJnZXQ9aHR0cHM6Ly93d3cuaGlhc2NlbmQuY29tL3poL2RldmVsb3Blci9jb3Vyc2VzL2RldGFpbC8xNjk2NDE0NjA2Nzk5NDg2OTc3\">华为昇腾社区 - Ascend C</span></p>\n<p>需要修改目录： <code>~/samples/operator/AddCustomSample/KernelLaunch/test</code> <br />\n 下的两个文档：</p>\n<ul>\n<li>add_custom.cpp</li>\n<li>scripts / gen_data.py</li>\n</ul>\n<p>分别需要修改的地方为：</p>\n<ul>\n<li>1</li>\n</ul>\n<div align=center>\n    <img data-src=\"https://img-blog.csdnimg.cn/img_convert/55a966993b663a71b8d7feadf8c7fbf3.png\">\n</div>\n<ul>\n<li>2</li>\n</ul>\n<div align=center>\n    <img data-src=\"https://img-blog.csdnimg.cn/img_convert/e0ddb5c183803561c5c3588e45e492d0.png\">\n</div>\n<p>将公式修改为 sinh 的公式，之后用实验文档中的运行命令再次运行即可</p>\n<h1 id=\"五-ascend-c中级认证\"><a class=\"anchor\" href=\"#五-ascend-c中级认证\">#</a> 五、Ascend C 中级认证</h1>\n<p><a href=\"https://www.hiascend.com/edu/certification/detail/34bf904cb410497cb9c582be6c047ff7\"><strong>点击链接：Ascend C 中级认证考试</strong></a></p>\n<p>题目：<br />\n<em><strong>参考 tensorflow 的 Sinh 算子，实现 Ascend C 算子 Sinh，算子命名为 SinhCustom，并完成 aclnn 算子调用相关算法: sinh (x) = (exp (x) - exp (-x)) / 2.0<br />\n 要求:<br />\n1、完成 host 侧和 kernel 侧代码实现。<br />\n2、实现 sinh 功能，支持 float16 类型输入，使用内核调试符方式调用算子测试通过。<br />\n3、使用单算子 API 调用方式调用 SinhCustom 算子测试通过<br />\n提交要求:<br />\n 完成编程后，将上述实现的工程代码打包在 rar 包内提交，如 SinhCustom.rar.</strong></em></p>\n<p>所有需要补充的文件包括：</p>\n<ul>\n<li>op_host 文件夹下的 sinh_custom_tiling.h 文件</li>\n<li>op_host 文件夹下的 sinh_custom.cpp 文件</li>\n<li>op_kernel 文件夹下的 sinh_custom.cpp 文件</li>\n</ul>\n<p>这个实现过程可以参考 samples 仓库的 Add 算子，把 Add 算子的内核调用代码复制一份到 SinhCustom，Add 需要 x，y，z 三个变量，sinh 只需 x 和 y 两个变量，因此删掉关于 z 的操作</p>\n<ol>\n<li>kernel 侧的 sinh_custom.cpp 文件内关键公式修改方法参考前文所示，完整代码如下：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"kernel_operator.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>using namespace AscendC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>constexpr <span class=\"token class-name\">int32_t</span> BUFFER_NUM <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>class KernelSinh <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token function\">KernelSinh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>GM_ADDR x<span class=\"token punctuation\">,</span> GM_ADDR y<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> totalLength<span class=\"token punctuation\">,</span> <span class=\"token class-name\">uint32_t</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>tileNum<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 考生补充初始化代码</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetBlockNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"block dim can not be zero!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>this<span class=\"token operator\">-></span>blockLength <span class=\"token operator\">=</span> totalLength <span class=\"token operator\">/</span> <span class=\"token function\">GetBlockNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>this<span class=\"token operator\">-></span>tileNum <span class=\"token operator\">=</span> tileNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">ASSERT</span><span class=\"token punctuation\">(</span>tileNum <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"tile num can not be zero!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">=</span> this<span class=\"token operator\">-></span>blockLength <span class=\"token operator\">/</span> tileNum <span class=\"token operator\">/</span> BUFFER_NUM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>xGm<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobalBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__gm__ DTYPE_X <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>x <span class=\"token operator\">+</span> this<span class=\"token operator\">-></span>blockLength <span class=\"token operator\">*</span> <span class=\"token function\">GetBlockIdx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>this<span class=\"token operator\">-></span>blockLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>yGm<span class=\"token punctuation\">.</span><span class=\"token function\">SetGlobalBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__gm__ DTYPE_Y <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>y <span class=\"token operator\">+</span> this<span class=\"token operator\">-></span>blockLength <span class=\"token operator\">*</span> <span class=\"token function\">GetBlockIdx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>this<span class=\"token operator\">-></span>blockLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>inQueueX<span class=\"token punctuation\">,</span> BUFFER_NUM<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>outQueueY<span class=\"token punctuation\">,</span> BUFFER_NUM<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_Y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>tmpBuffer1<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>tmpBuffer2<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>tmpBuffer3<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>pipe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBuffer</span><span class=\"token punctuation\">(</span>tmpBuffer4<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength <span class=\"token operator\">*</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>DTYPE_X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 考生补充对 “loopCount” 的定义，注意对 Tiling 的处理</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token class-name\">int32_t</span> loopCount <span class=\"token operator\">=</span> this<span class=\"token operator\">-></span>tileNum <span class=\"token operator\">*</span> BUFFER_NUM<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> loopCount<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token function\">CopyIn</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token function\">Compute</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token function\">CopyOut</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>private<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyIn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> progress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token comment\">// 考生补充算子代码</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> xLocal <span class=\"token operator\">=</span> inQueueX<span class=\"token punctuation\">.</span>AllocTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token function\">DataCopy</span><span class=\"token punctuation\">(</span>xLocal<span class=\"token punctuation\">,</span> xGm<span class=\"token punctuation\">[</span>progress <span class=\"token operator\">*</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>inQueueX<span class=\"token punctuation\">.</span><span class=\"token function\">EnQue</span><span class=\"token punctuation\">(</span>xLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">Compute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> progress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">// 考生补充算子计算代码</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> xLocal <span class=\"token operator\">=</span> inQueueX<span class=\"token punctuation\">.</span>DeQue<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span> yLocal <span class=\"token operator\">=</span> outQueueY<span class=\"token punctuation\">.</span>AllocTensor<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> tmpTensor1 <span class=\"token operator\">=</span> tmpBuffer1<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> tmpTensor2 <span class=\"token operator\">=</span> tmpBuffer2<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> tmpTensor3 <span class=\"token operator\">=</span> tmpBuffer3<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span> tmpTensor4 <span class=\"token operator\">=</span> tmpBuffer4<span class=\"token punctuation\">.</span>Get<span class=\"token operator\">&lt;</span>DTYPE_X<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>DTYPE_X inputVal1 <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>DTYPE_X inputVal2 <span class=\"token operator\">=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">//sinh(x) = (exp(x) - exp(-x)) / 2.0</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token function\">Muls</span><span class=\"token punctuation\">(</span>tmpTensor1<span class=\"token punctuation\">,</span> xLocal<span class=\"token punctuation\">,</span> inputVal1<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span>tmpTensor2<span class=\"token punctuation\">,</span> tmpTensor1<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token function\">Exp</span><span class=\"token punctuation\">(</span>tmpTensor3<span class=\"token punctuation\">,</span> xLocal<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token function\">Sub</span><span class=\"token punctuation\">(</span>tmpTensor4<span class=\"token punctuation\">,</span> tmpTensor3<span class=\"token punctuation\">,</span> tmpTensor2<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token function\">Muls</span><span class=\"token punctuation\">(</span>yLocal<span class=\"token punctuation\">,</span> tmpTensor4<span class=\"token punctuation\">,</span> inputVal2<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>outQueueY<span class=\"token punctuation\">.</span>EnQue<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>yLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>inQueueX<span class=\"token punctuation\">.</span><span class=\"token function\">FreeTensor</span><span class=\"token punctuation\">(</span>xLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>__aicore__ <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">CopyOut</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">int32_t</span> progress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre><span class=\"token comment\">// 考生补充算子代码</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>LocalTensor<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span> yLocal <span class=\"token operator\">=</span> outQueueY<span class=\"token punctuation\">.</span>DeQue<span class=\"token operator\">&lt;</span>DTYPE_Y<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token function\">DataCopy</span><span class=\"token punctuation\">(</span>yGm<span class=\"token punctuation\">[</span>progress <span class=\"token operator\">*</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> yLocal<span class=\"token punctuation\">,</span> this<span class=\"token operator\">-></span>tileLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>outQueueY<span class=\"token punctuation\">.</span><span class=\"token function\">FreeTensor</span><span class=\"token punctuation\">(</span>yLocal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>private<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>TPipe pipe<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">//create queue for input, in this case depth is equal to buffer num</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>TQue<span class=\"token operator\">&lt;</span>QuePosition<span class=\"token operator\">::</span>VECIN<span class=\"token punctuation\">,</span> BUFFER_NUM<span class=\"token operator\">></span> inQueueX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\">//create queue for output, in this case depth is equal to buffer num</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>TQue<span class=\"token operator\">&lt;</span>QuePosition<span class=\"token operator\">::</span>VECOUT<span class=\"token punctuation\">,</span> BUFFER_NUM<span class=\"token operator\">></span> outQueueY<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>GlobalTensor<span class=\"token operator\">&lt;</span>half<span class=\"token operator\">></span> xGm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>GlobalTensor<span class=\"token operator\">&lt;</span>half<span class=\"token operator\">></span> yGm<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 考生补充自定义成员变量</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>TBuf<span class=\"token operator\">&lt;</span>QuePosition<span class=\"token operator\">::</span>VECCALC<span class=\"token operator\">></span> tmpBuffer1<span class=\"token punctuation\">,</span> tmpBuffer2<span class=\"token punctuation\">,</span> tmpBuffer3<span class=\"token punctuation\">,</span> tmpBuffer4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token class-name\">uint32_t</span> blockLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token class-name\">uint32_t</span> tileNum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token class-name\">uint32_t</span> tileLength<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token keyword\">extern</span> <span class=\"token string\">\"C\"</span> __global__ __aicore__ <span class=\"token keyword\">void</span> <span class=\"token function\">sinh_custom</span><span class=\"token punctuation\">(</span>GM_ADDR x<span class=\"token punctuation\">,</span> GM_ADDR y<span class=\"token punctuation\">,</span> GM_ADDR </pre></td></tr><tr><td data-num=\"87\"></td><td><pre>workspace<span class=\"token punctuation\">,</span> GM_ADDR tiling<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token function\">GET_TILING_DATA</span><span class=\"token punctuation\">(</span>tiling_data<span class=\"token punctuation\">,</span> tiling<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>KernelSinh op<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre><span class=\"token comment\">// 补充 init 和 process 函数调用内容</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>op<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> tiling_data<span class=\"token punctuation\">.</span>totalLength<span class=\"token punctuation\">,</span> tiling_data<span class=\"token punctuation\">.</span>tileNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>op<span class=\"token punctuation\">.</span><span class=\"token function\">Process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>host 侧的 tiling.h 文件：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"register/tilingdata_base.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>namespace optiling <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">BEGIN_TILING_DATA_DEF</span><span class=\"token punctuation\">(</span>SinhCustomTilingData<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 考生自行定义 tiling 结构体成员变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">TILING_DATA_FIELD_DEF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">,</span> totalLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">TILING_DATA_FIELD_DEF</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">uint32_t</span><span class=\"token punctuation\">,</span> tileNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>END_TILING_DATA_DEF<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">REGISTER_TILING_DATA_CLASS</span><span class=\"token punctuation\">(</span>SinhCustom<span class=\"token punctuation\">,</span> SinhCustomTilingData<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>host 侧的 sinh_custom.cpp 文件：</li>\n</ol>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"sinh_custom_tiling.h\"</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"register/op_def_registry.h\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>namespace optiling <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">static</span> ge<span class=\"token operator\">::</span>graphStatus <span class=\"token function\">TilingFunc</span><span class=\"token punctuation\">(</span>gert<span class=\"token operator\">::</span>TilingContext<span class=\"token operator\">*</span> context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> SinhCustomTilingData tiling<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token comment\">// 考生自行填充</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> BLOCK_DIM <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token keyword\">const</span> <span class=\"token class-name\">uint32_t</span> TILE_NUM <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token class-name\">uint32_t</span> totalLength <span class=\"token operator\">=</span> context<span class=\"token operator\">-></span><span class=\"token function\">GetInputShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetOriginShape</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetShapeSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre> context<span class=\"token operator\">-></span><span class=\"token function\">SetBlockDim</span><span class=\"token punctuation\">(</span>BLOCK_DIM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> tiling<span class=\"token punctuation\">.</span><span class=\"token function\">set_totalLength</span><span class=\"token punctuation\">(</span>totalLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> tiling<span class=\"token punctuation\">.</span><span class=\"token function\">set_tileNum</span><span class=\"token punctuation\">(</span>TILE_NUM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> tiling<span class=\"token punctuation\">.</span><span class=\"token function\">SaveToBuffer</span><span class=\"token punctuation\">(</span>context<span class=\"token operator\">-></span><span class=\"token function\">GetRawTilingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>context<span class=\"token operator\">-></span><span class=\"token function\">GetRawTilingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">GetCapacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> context<span class=\"token operator\">-></span><span class=\"token function\">GetRawTilingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token function\">SetDataSize</span><span class=\"token punctuation\">(</span>tiling<span class=\"token punctuation\">.</span><span class=\"token function\">GetDataSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre> <span class=\"token class-name\">size_t</span> <span class=\"token operator\">*</span>currentWorkspace <span class=\"token operator\">=</span> context<span class=\"token operator\">-></span><span class=\"token function\">GetWorkspaceSizes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre> currentWorkspace<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token keyword\">return</span> ge<span class=\"token operator\">::</span>GRAPH_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>namespace ge <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">static</span> ge<span class=\"token operator\">::</span>graphStatus <span class=\"token function\">InferShape</span><span class=\"token punctuation\">(</span>gert<span class=\"token operator\">::</span>InferShapeContext<span class=\"token operator\">*</span> context<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token keyword\">const</span> gert<span class=\"token operator\">::</span>Shape<span class=\"token operator\">*</span> x1_shape <span class=\"token operator\">=</span> context<span class=\"token operator\">-></span><span class=\"token function\">GetInputShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre> gert<span class=\"token operator\">::</span>Shape<span class=\"token operator\">*</span> y_shape <span class=\"token operator\">=</span> context<span class=\"token operator\">-></span><span class=\"token function\">GetOutputShape</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre> <span class=\"token operator\">*</span>y_shape <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x1_shape<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre> <span class=\"token keyword\">return</span> GRAPH_SUCCESS<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>namespace ops <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>class SinhCustom <span class=\"token operator\">:</span> public OpDef <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>public<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre> explicit <span class=\"token function\">SinhCustom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> name<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">OpDef</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">ParamType</span><span class=\"token punctuation\">(</span>REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">DataType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>DT_FLOAT16<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>FORMAT_ND<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">UnknownShapeFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>FORMAT_ND<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">Output</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">ParamType</span><span class=\"token punctuation\">(</span>REQUIRED<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">DataType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>DT_FLOAT16<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>FORMAT_ND<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">UnknownShapeFormat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>ge<span class=\"token operator\">::</span>FORMAT_ND<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">SetInferShape</span><span class=\"token punctuation\">(</span>ge<span class=\"token operator\">::</span>InferShape<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">AICore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">SetTiling</span><span class=\"token punctuation\">(</span>optiling<span class=\"token operator\">::</span>TilingFunc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> this<span class=\"token operator\">-></span><span class=\"token function\">AICore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">AddConfig</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ascend310b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token function\">OP_ADD</span><span class=\"token punctuation\">(</span>SinhCustom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>认证成功！</strong></p>\n<div align=center>\n    <img data-src=\"https://i-blog.csdnimg.cn/direct/b40d1557f2a04714ab2ac31adba789d8.jpeg\">\n</div>\n<h1 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h1>\n<p>训练营时间不长但收获满满，同时认识到自己有很多不足，希望勤能补拙！</p>\n"},{"title":"机器翻译赛-门控循环单元GRU","date":"2024-08-19T07:24:50.000Z","_content":"\n## GRU 门控循环单元\n\n- 早期观测值对预测所有未来观测值具有非常重要的意义。我们希望有某些机制能够在一个记忆元里存储重要的早期信息。 如果没有这样的机制，我们将不得不给这个观测值指定一个非常大的梯度， 因为它会影响所有后续的观测值。\n- 一些词元没有相关的观测值。我们希望有一些机制来跳过隐状态表示中的此类词元。\n- 序列的各个部分之间存在逻辑中断。在这种情况下，最好有一种方法来重置我们的内部状态表示。\n\n在学术界已经提出了许多方法来解决这类问题。 其中最早的方法是“长短期记忆”（long-short-term memory，LSTM） (Hochreiter and Schmidhuber, 1997)， \n门控循环单元（gated recurrent unit，GRU） (Cho et al., 2014) 是一个稍微简化的变体，通常能够提供同等的效果， 并且计算 (Chung et al., 2014)的速度明显更快。 由于门控循环单元更简单，我们从它开始解读。\n\n门控循环单元与普通的循环神经网络之间的关键区别在于： 前者支持隐状态的门控。 这意味着模型有专门的机制来确定应该何时更新隐状态， 以及应该何时重置隐状态。 这些机制是可学习的，并且能够解决了上面列出的问题。 例如，如果第一个词元非常重要， 模型将学会在第一次观测之后不更新隐状态。 同样，模型也可以学会跳过不相关的临时观测。 最后，模型还将学会在需要的时候重置隐状态。 下面我们将详细讨论各类门控。\n\n我们首先介绍重置门（reset gate）和更新门（update gate）。 我们把它们设计成（0，1）区间中的向量， 这样我们就可以进行凸组合。 重置门允许我们控制“可能还想记住”的过去状态的数量； 更新门将允许我们控制新状态中有多少个是旧状态的副本。\n\n我们从构造这些门控开始。 图9.1.1 描述了门控循环单元中的重置门和更新门的输入， 输入是由当前时间步的输入和前一时间步的隐状态给出。 两个门的输出是由使用sigmoid激活函数的两个全连接层给出。\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-门控循环单元GRU/01.png\">\n</div>\n<br>\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-门控循环单元GRU/02.png\">\n</div>\n<br>\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-门控循环单元GRU/03.png\">\n</div>\n<br>\n\n总之，门控循环单元具有以下两个显著特征：\n\n- 重置门有助于捕获序列中的短期依赖关系；\n\n- 更新门有助于捕获序列中的长期依赖关系。\n\n### 小结\n- 门控循环神经网络可以更好地捕获时间步距离很长的序列上的依赖关系。\n\n- 重置门有助于捕获序列中的短期依赖关系。\n\n- 更新门有助于捕获序列中的长期依赖关系。\n\n- 重置门打开时，门控循环单元包含基本循环神经网络；更新门打开时，门控循环单元可以跳过子序列。","source":"_posts/机器翻译赛-门控循环单元GRU.md","raw":"---\ntitle: 机器翻译赛-门控循环单元GRU\ndate: 2024-08-19 15:24:50\ncategories:\n- [机器学习]\ntags:\n- [NLP]\n---\n\n## GRU 门控循环单元\n\n- 早期观测值对预测所有未来观测值具有非常重要的意义。我们希望有某些机制能够在一个记忆元里存储重要的早期信息。 如果没有这样的机制，我们将不得不给这个观测值指定一个非常大的梯度， 因为它会影响所有后续的观测值。\n- 一些词元没有相关的观测值。我们希望有一些机制来跳过隐状态表示中的此类词元。\n- 序列的各个部分之间存在逻辑中断。在这种情况下，最好有一种方法来重置我们的内部状态表示。\n\n在学术界已经提出了许多方法来解决这类问题。 其中最早的方法是“长短期记忆”（long-short-term memory，LSTM） (Hochreiter and Schmidhuber, 1997)， \n门控循环单元（gated recurrent unit，GRU） (Cho et al., 2014) 是一个稍微简化的变体，通常能够提供同等的效果， 并且计算 (Chung et al., 2014)的速度明显更快。 由于门控循环单元更简单，我们从它开始解读。\n\n门控循环单元与普通的循环神经网络之间的关键区别在于： 前者支持隐状态的门控。 这意味着模型有专门的机制来确定应该何时更新隐状态， 以及应该何时重置隐状态。 这些机制是可学习的，并且能够解决了上面列出的问题。 例如，如果第一个词元非常重要， 模型将学会在第一次观测之后不更新隐状态。 同样，模型也可以学会跳过不相关的临时观测。 最后，模型还将学会在需要的时候重置隐状态。 下面我们将详细讨论各类门控。\n\n我们首先介绍重置门（reset gate）和更新门（update gate）。 我们把它们设计成（0，1）区间中的向量， 这样我们就可以进行凸组合。 重置门允许我们控制“可能还想记住”的过去状态的数量； 更新门将允许我们控制新状态中有多少个是旧状态的副本。\n\n我们从构造这些门控开始。 图9.1.1 描述了门控循环单元中的重置门和更新门的输入， 输入是由当前时间步的输入和前一时间步的隐状态给出。 两个门的输出是由使用sigmoid激活函数的两个全连接层给出。\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-门控循环单元GRU/01.png\">\n</div>\n<br>\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-门控循环单元GRU/02.png\">\n</div>\n<br>\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-门控循环单元GRU/03.png\">\n</div>\n<br>\n\n总之，门控循环单元具有以下两个显著特征：\n\n- 重置门有助于捕获序列中的短期依赖关系；\n\n- 更新门有助于捕获序列中的长期依赖关系。\n\n### 小结\n- 门控循环神经网络可以更好地捕获时间步距离很长的序列上的依赖关系。\n\n- 重置门有助于捕获序列中的短期依赖关系。\n\n- 更新门有助于捕获序列中的长期依赖关系。\n\n- 重置门打开时，门控循环单元包含基本循环神经网络；更新门打开时，门控循环单元可以跳过子序列。","slug":"机器翻译赛-门控循环单元GRU","published":1,"updated":"2024-12-27T14:38:22.240Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfn0033mcuyb7bj72hv","content":"<h2 id=\"gru-门控循环单元\"><a class=\"anchor\" href=\"#gru-门控循环单元\">#</a> GRU 门控循环单元</h2>\n<ul>\n<li>早期观测值对预测所有未来观测值具有非常重要的意义。我们希望有某些机制能够在一个记忆元里存储重要的早期信息。 如果没有这样的机制，我们将不得不给这个观测值指定一个非常大的梯度， 因为它会影响所有后续的观测值。</li>\n<li>一些词元没有相关的观测值。我们希望有一些机制来跳过隐状态表示中的此类词元。</li>\n<li>序列的各个部分之间存在逻辑中断。在这种情况下，最好有一种方法来重置我们的内部状态表示。</li>\n</ul>\n<p>在学术界已经提出了许多方法来解决这类问题。 其中最早的方法是 “长短期记忆”（long-short-term memory，LSTM） (Hochreiter and Schmidhuber, 1997)，<br />\n门控循环单元（gated recurrent unit，GRU） (Cho et al., 2014) 是一个稍微简化的变体，通常能够提供同等的效果， 并且计算 (Chung et al., 2014) 的速度明显更快。 由于门控循环单元更简单，我们从它开始解读。</p>\n<p>门控循环单元与普通的循环神经网络之间的关键区别在于： 前者支持隐状态的门控。 这意味着模型有专门的机制来确定应该何时更新隐状态， 以及应该何时重置隐状态。 这些机制是可学习的，并且能够解决了上面列出的问题。 例如，如果第一个词元非常重要， 模型将学会在第一次观测之后不更新隐状态。 同样，模型也可以学会跳过不相关的临时观测。 最后，模型还将学会在需要的时候重置隐状态。 下面我们将详细讨论各类门控。</p>\n<p>我们首先介绍重置门（reset gate）和更新门（update gate）。 我们把它们设计成（0，1）区间中的向量， 这样我们就可以进行凸组合。 重置门允许我们控制 “可能还想记住” 的过去状态的数量； 更新门将允许我们控制新状态中有多少个是旧状态的副本。</p>\n<p>我们从构造这些门控开始。 图 9.1.1 描述了门控循环单元中的重置门和更新门的输入， 输入是由当前时间步的输入和前一时间步的隐状态给出。 两个门的输出是由使用 sigmoid 激活函数的两个全连接层给出。</p>\n<br>\n<div align=\"center\">\n    <style>.ectydhojgpkp{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/01.png\" class=\"ectydhojgpkp\">\n</div>\n<br>\n<br>\n<div align=\"center\">\n    <style>.eyhvbsciwiud{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/02.png\" class=\"eyhvbsciwiud\">\n</div>\n<br>\n<br>\n<div align=\"center\">\n    <style>.sqfgqfgrcuta{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/03.png\" class=\"sqfgqfgrcuta\">\n</div>\n<br>\n<p>总之，门控循环单元具有以下两个显著特征：</p>\n<ul>\n<li>\n<p>重置门有助于捕获序列中的短期依赖关系；</p>\n</li>\n<li>\n<p>更新门有助于捕获序列中的长期依赖关系。</p>\n</li>\n</ul>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<ul>\n<li>\n<p>门控循环神经网络可以更好地捕获时间步距离很长的序列上的依赖关系。</p>\n</li>\n<li>\n<p>重置门有助于捕获序列中的短期依赖关系。</p>\n</li>\n<li>\n<p>更新门有助于捕获序列中的长期依赖关系。</p>\n</li>\n<li>\n<p>重置门打开时，门控循环单元包含基本循环神经网络；更新门打开时，门控循环单元可以跳过子序列。</p>\n</li>\n</ul>\n","length":1034,"excerpt":"","more":"<h2 id=\"gru-门控循环单元\"><a class=\"anchor\" href=\"#gru-门控循环单元\">#</a> GRU 门控循环单元</h2>\n<ul>\n<li>早期观测值对预测所有未来观测值具有非常重要的意义。我们希望有某些机制能够在一个记忆元里存储重要的早期信息。 如果没有这样的机制，我们将不得不给这个观测值指定一个非常大的梯度， 因为它会影响所有后续的观测值。</li>\n<li>一些词元没有相关的观测值。我们希望有一些机制来跳过隐状态表示中的此类词元。</li>\n<li>序列的各个部分之间存在逻辑中断。在这种情况下，最好有一种方法来重置我们的内部状态表示。</li>\n</ul>\n<p>在学术界已经提出了许多方法来解决这类问题。 其中最早的方法是 “长短期记忆”（long-short-term memory，LSTM） (Hochreiter and Schmidhuber, 1997)，<br />\n门控循环单元（gated recurrent unit，GRU） (Cho et al., 2014) 是一个稍微简化的变体，通常能够提供同等的效果， 并且计算 (Chung et al., 2014) 的速度明显更快。 由于门控循环单元更简单，我们从它开始解读。</p>\n<p>门控循环单元与普通的循环神经网络之间的关键区别在于： 前者支持隐状态的门控。 这意味着模型有专门的机制来确定应该何时更新隐状态， 以及应该何时重置隐状态。 这些机制是可学习的，并且能够解决了上面列出的问题。 例如，如果第一个词元非常重要， 模型将学会在第一次观测之后不更新隐状态。 同样，模型也可以学会跳过不相关的临时观测。 最后，模型还将学会在需要的时候重置隐状态。 下面我们将详细讨论各类门控。</p>\n<p>我们首先介绍重置门（reset gate）和更新门（update gate）。 我们把它们设计成（0，1）区间中的向量， 这样我们就可以进行凸组合。 重置门允许我们控制 “可能还想记住” 的过去状态的数量； 更新门将允许我们控制新状态中有多少个是旧状态的副本。</p>\n<p>我们从构造这些门控开始。 图 9.1.1 描述了门控循环单元中的重置门和更新门的输入， 输入是由当前时间步的输入和前一时间步的隐状态给出。 两个门的输出是由使用 sigmoid 激活函数的两个全连接层给出。</p>\n<br>\n<div align=\"center\">\n    <style>.ectydhojgpkp{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/01.png\" class=\"ectydhojgpkp\">\n</div>\n<br>\n<br>\n<div align=\"center\">\n    <style>.eyhvbsciwiud{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/02.png\" class=\"eyhvbsciwiud\">\n</div>\n<br>\n<br>\n<div align=\"center\">\n    <style>.sqfgqfgrcuta{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-%E9%97%A8%E6%8E%A7%E5%BE%AA%E7%8E%AF%E5%8D%95%E5%85%83GRU/03.png\" class=\"sqfgqfgrcuta\">\n</div>\n<br>\n<p>总之，门控循环单元具有以下两个显著特征：</p>\n<ul>\n<li>\n<p>重置门有助于捕获序列中的短期依赖关系；</p>\n</li>\n<li>\n<p>更新门有助于捕获序列中的长期依赖关系。</p>\n</li>\n</ul>\n<h3 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h3>\n<ul>\n<li>\n<p>门控循环神经网络可以更好地捕获时间步距离很长的序列上的依赖关系。</p>\n</li>\n<li>\n<p>重置门有助于捕获序列中的短期依赖关系。</p>\n</li>\n<li>\n<p>更新门有助于捕获序列中的长期依赖关系。</p>\n</li>\n<li>\n<p>重置门打开时，门控循环单元包含基本循环神经网络；更新门打开时，门控循环单元可以跳过子序列。</p>\n</li>\n</ul>\n"},{"title":"浏览器输入URL会发生什么","date":"2025-02-26T07:09:37.000Z","_content":"\n# 输入一个url会发生什么\n\n本问题在之前的学习合集文章————计算机网络与浏览器原理篇有过总结，因为本问题经典、关键、常见，所以此处单独开一篇博文再次作以更为详细的总结~\n\n## 输入一个url会发生什么?\n\n1. URL 解析\n\n- 步骤：\n\n - 浏览器解析用户输入的 URL，提取协议（如 http 或 https）、域名（如 google.com）、端口（默认 80 或 443）、路径和查询参数。\n\n- 示例：\n\n输入 https://www.google.com/search?q=vue，浏览器会解析出：\n\n协议：https\n\n域名：www.google.com\n\n路径：/search\n\n查询参数：q=vue\n\n2. DNS 查询\n\n步骤：\n\n - 浏览器通过 DNS（域名系统）将域名解析为对应的 IP 地址。\n\n - 如果本地缓存中有域名对应的 IP 地址，则直接使用；否则，浏览器会向 DNS 服务器发起查询请求。\n\n示例：\n\n解析 www.google.com 可能会返回 142.250.190.78。\n\n3. 建立 TCP 连接\n\n步骤：\n\n- 浏览器通过 IP 地址和端口与服务器建立 TCP 连接。\n\n- 如果是 HTTPS，还会进行 TLS 握手，建立加密通道。\n\n示例：\n\n与 142.250.190.78:443 建立 TCP 连接，并进行 TLS 握手。\n\n4. 发送 HTTP 请求\n\n步骤：\n\n- 浏览器向服务器发送 HTTP 请求，包括请求方法（如 GET）、路径、请求头和请求体。\n\n示例：\n\n发送 GET /search?q=vue HTTP/1.1 请求。\n\n5. 服务器处理请求\n\n步骤：\n\n- 服务器接收到请求后，根据路径和参数处理请求，生成响应数据（如 HTML 页面）。\n\n- 服务器返回 HTTP 响应，包括状态码（如 200）、响应头和响应体。\n\n示例：\n\n服务器返回 200 OK 和 Google 搜索结果的 HTML 页面。\n\n6. 浏览器接收响应\n\n步骤：\n\n- 浏览器接收到服务器的响应后，开始解析响应内容。\n\n- 如果是 HTML 页面，浏览器会解析 HTML、CSS 和 JavaScript，并加载页面所需的资源（如图片、样式表、脚本等）。\n\n示例：\n\n解析 Google 搜索结果的 HTML，并加载相关资源。\n\n7. 渲染页面\n\n步骤：\n\n- 浏览器根据 HTML 和 CSS 构建 DOM 树和 CSSOM 树，然后合并生成渲染树。\n\n- 根据渲染树计算布局，绘制页面内容。\n\n- 执行 JavaScript 代码，动态更新页面。\n\n示例：\n\n渲染 Google 搜索结果的页面，并显示给用户。\n\n8. 加载完成\n\n步骤：\n\n- 页面加载完成后，触发 load 事件。\n\n- 如果有异步操作（如 AJAX 请求），页面可能会继续更新。\n\n示例：\n\nGoogle 搜索页面加载完成后，用户可以与页面交互。\n\n## 如果 URL 是 google.com 会有什么不同？\n\n1. 域名解析：\n\n浏览器会解析 google.com，但通常会重定向到 www.google.com（Google 的主域名）。\n\n例如，输入 google.com 后，浏览器可能会收到 301 或 302 重定向响应，指向 https://www.google.com。\n\n2. HTTPS 强制跳转：\n\nGoogle 会强制使用 HTTPS，因此即使输入 http://google.com，浏览器也会重定向到 https://www.google.com。\n\n3. 首页内容：\n\n如果访问的是 https://www.google.com，服务器会返回 Google 搜索首页的 HTML 页面。\n\n页面内容相对简单，主要是搜索框和一些链接。\n\n4. 资源加载：\n\nGoogle 首页的资源（如图片、CSS、JavaScript）通常较少，加载速度较快。\n\nGoogle 会使用 CDN 和缓存技术，进一步加速页面加载。\n\n5. 用户体验：\n\nGoogle 首页设计简洁，加载速度快，用户可以立即进行搜索操作。\n\n## 总结\n\n输入 URL 后，浏览器会执行以下步骤：\n\n1. URL 解析：提取协议、域名、路径等信息。\n\n2. DNS 查询：将域名解析为 IP 地址。\n\n3. 建立 TCP 连接：与服务器建立连接（HTTPS 还会进行 TLS 握手）。\n\n4. 发送 HTTP 请求：向服务器发送请求。\n\n5. 服务器处理请求：服务器生成响应并返回。\n\n6. 浏览器接收响应：解析 HTML、CSS 和 JavaScript。\n\n7. 渲染页面：构建 DOM 树、CSSOM 树，绘制页面。\n\n8. 加载完成：页面显示并触发 load 事件。\n\n如果 URL 是 google.com，浏览器会重定向到 https://www.google.com，并加载 Google 搜索首页。由于 Google 的优化措施（如 CDN、缓存、简洁设计），页面加载速度会非常快。","source":"_posts/浏览器输入URL会发生什么.md","raw":"---\ntitle: 浏览器输入URL会发生什么\ndate: 2025-02-26 15:09:37\ncategories:\n- [计算机科学]\ntags:\n- [计算机网络]\n---\n\n# 输入一个url会发生什么\n\n本问题在之前的学习合集文章————计算机网络与浏览器原理篇有过总结，因为本问题经典、关键、常见，所以此处单独开一篇博文再次作以更为详细的总结~\n\n## 输入一个url会发生什么?\n\n1. URL 解析\n\n- 步骤：\n\n - 浏览器解析用户输入的 URL，提取协议（如 http 或 https）、域名（如 google.com）、端口（默认 80 或 443）、路径和查询参数。\n\n- 示例：\n\n输入 https://www.google.com/search?q=vue，浏览器会解析出：\n\n协议：https\n\n域名：www.google.com\n\n路径：/search\n\n查询参数：q=vue\n\n2. DNS 查询\n\n步骤：\n\n - 浏览器通过 DNS（域名系统）将域名解析为对应的 IP 地址。\n\n - 如果本地缓存中有域名对应的 IP 地址，则直接使用；否则，浏览器会向 DNS 服务器发起查询请求。\n\n示例：\n\n解析 www.google.com 可能会返回 142.250.190.78。\n\n3. 建立 TCP 连接\n\n步骤：\n\n- 浏览器通过 IP 地址和端口与服务器建立 TCP 连接。\n\n- 如果是 HTTPS，还会进行 TLS 握手，建立加密通道。\n\n示例：\n\n与 142.250.190.78:443 建立 TCP 连接，并进行 TLS 握手。\n\n4. 发送 HTTP 请求\n\n步骤：\n\n- 浏览器向服务器发送 HTTP 请求，包括请求方法（如 GET）、路径、请求头和请求体。\n\n示例：\n\n发送 GET /search?q=vue HTTP/1.1 请求。\n\n5. 服务器处理请求\n\n步骤：\n\n- 服务器接收到请求后，根据路径和参数处理请求，生成响应数据（如 HTML 页面）。\n\n- 服务器返回 HTTP 响应，包括状态码（如 200）、响应头和响应体。\n\n示例：\n\n服务器返回 200 OK 和 Google 搜索结果的 HTML 页面。\n\n6. 浏览器接收响应\n\n步骤：\n\n- 浏览器接收到服务器的响应后，开始解析响应内容。\n\n- 如果是 HTML 页面，浏览器会解析 HTML、CSS 和 JavaScript，并加载页面所需的资源（如图片、样式表、脚本等）。\n\n示例：\n\n解析 Google 搜索结果的 HTML，并加载相关资源。\n\n7. 渲染页面\n\n步骤：\n\n- 浏览器根据 HTML 和 CSS 构建 DOM 树和 CSSOM 树，然后合并生成渲染树。\n\n- 根据渲染树计算布局，绘制页面内容。\n\n- 执行 JavaScript 代码，动态更新页面。\n\n示例：\n\n渲染 Google 搜索结果的页面，并显示给用户。\n\n8. 加载完成\n\n步骤：\n\n- 页面加载完成后，触发 load 事件。\n\n- 如果有异步操作（如 AJAX 请求），页面可能会继续更新。\n\n示例：\n\nGoogle 搜索页面加载完成后，用户可以与页面交互。\n\n## 如果 URL 是 google.com 会有什么不同？\n\n1. 域名解析：\n\n浏览器会解析 google.com，但通常会重定向到 www.google.com（Google 的主域名）。\n\n例如，输入 google.com 后，浏览器可能会收到 301 或 302 重定向响应，指向 https://www.google.com。\n\n2. HTTPS 强制跳转：\n\nGoogle 会强制使用 HTTPS，因此即使输入 http://google.com，浏览器也会重定向到 https://www.google.com。\n\n3. 首页内容：\n\n如果访问的是 https://www.google.com，服务器会返回 Google 搜索首页的 HTML 页面。\n\n页面内容相对简单，主要是搜索框和一些链接。\n\n4. 资源加载：\n\nGoogle 首页的资源（如图片、CSS、JavaScript）通常较少，加载速度较快。\n\nGoogle 会使用 CDN 和缓存技术，进一步加速页面加载。\n\n5. 用户体验：\n\nGoogle 首页设计简洁，加载速度快，用户可以立即进行搜索操作。\n\n## 总结\n\n输入 URL 后，浏览器会执行以下步骤：\n\n1. URL 解析：提取协议、域名、路径等信息。\n\n2. DNS 查询：将域名解析为 IP 地址。\n\n3. 建立 TCP 连接：与服务器建立连接（HTTPS 还会进行 TLS 握手）。\n\n4. 发送 HTTP 请求：向服务器发送请求。\n\n5. 服务器处理请求：服务器生成响应并返回。\n\n6. 浏览器接收响应：解析 HTML、CSS 和 JavaScript。\n\n7. 渲染页面：构建 DOM 树、CSSOM 树，绘制页面。\n\n8. 加载完成：页面显示并触发 load 事件。\n\n如果 URL 是 google.com，浏览器会重定向到 https://www.google.com，并加载 Google 搜索首页。由于 Google 的优化措施（如 CDN、缓存、简洁设计），页面加载速度会非常快。","slug":"浏览器输入URL会发生什么","published":1,"updated":"2025-02-26T07:19:32.957Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfo0036mcuya88z726d","content":"<h1 id=\"输入一个url会发生什么\"><a class=\"anchor\" href=\"#输入一个url会发生什么\">#</a> 输入一个 url 会发生什么</h1>\n<p>本问题在之前的学习合集文章 ———— 计算机网络与浏览器原理篇有过总结，因为本问题经典、关键、常见，所以此处单独开一篇博文再次作以更为详细的总结～</p>\n<h2 id=\"输入一个url会发生什么-2\"><a class=\"anchor\" href=\"#输入一个url会发生什么-2\">#</a> 输入一个 url 会发生什么？</h2>\n<ol>\n<li>URL 解析</li>\n</ol>\n<ul>\n<li>\n<p>步骤：</p>\n</li>\n<li>\n<p>浏览器解析用户输入的 URL，提取协议（如 http 或 https）、域名（如 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span>）、端口（默认 80 或 443）、路径和查询参数。</p>\n</li>\n<li>\n<p>示例：</p>\n</li>\n</ul>\n<p>输入 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT12dWUlRUYlQkMlOEMlRTYlQjUlOEYlRTglQTclODglRTUlOTklQTglRTQlQkMlOUElRTglQTclQTMlRTYlOUUlOTAlRTUlODclQkElRUYlQkMlOUE=\">https://www.google.com/search?q=vue，浏览器会解析出：</span></p>\n<p>协议：https</p>\n<p>域名：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span></p>\n<p>路径：/search</p>\n<p>查询参数：q=vue</p>\n<ol start=\"2\">\n<li>DNS 查询</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器通过 DNS（域名系统）将域名解析为对应的 IP 地址。</p>\n</li>\n<li>\n<p>如果本地缓存中有域名对应的 IP 地址，则直接使用；否则，浏览器会向 DNS 服务器发起查询请求。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>解析 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span> 可能会返回 142.250.190.78。</p>\n<ol start=\"3\">\n<li>建立 TCP 连接</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器通过 IP 地址和端口与服务器建立 TCP 连接。</p>\n</li>\n<li>\n<p>如果是 HTTPS，还会进行 TLS 握手，建立加密通道。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>与 142.250.190.78:443 建立 TCP 连接，并进行 TLS 握手。</p>\n<ol start=\"4\">\n<li>发送 HTTP 请求</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>浏览器向服务器发送 HTTP 请求，包括请求方法（如 GET）、路径、请求头和请求体。</li>\n</ul>\n<p>示例：</p>\n<p>发送 GET /search?q=vue HTTP/1.1 请求。</p>\n<ol start=\"5\">\n<li>服务器处理请求</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>服务器接收到请求后，根据路径和参数处理请求，生成响应数据（如 HTML 页面）。</p>\n</li>\n<li>\n<p>服务器返回 HTTP 响应，包括状态码（如 200）、响应头和响应体。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>服务器返回 200 OK 和 Google 搜索结果的 HTML 页面。</p>\n<ol start=\"6\">\n<li>浏览器接收响应</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器接收到服务器的响应后，开始解析响应内容。</p>\n</li>\n<li>\n<p>如果是 HTML 页面，浏览器会解析 HTML、CSS 和 JavaScript，并加载页面所需的资源（如图片、样式表、脚本等）。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>解析 Google 搜索结果的 HTML，并加载相关资源。</p>\n<ol start=\"7\">\n<li>渲染页面</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器根据 HTML 和 CSS 构建 DOM 树和 CSSOM 树，然后合并生成渲染树。</p>\n</li>\n<li>\n<p>根据渲染树计算布局，绘制页面内容。</p>\n</li>\n<li>\n<p>执行 JavaScript 代码，动态更新页面。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>渲染 Google 搜索结果的页面，并显示给用户。</p>\n<ol start=\"8\">\n<li>加载完成</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>页面加载完成后，触发 load 事件。</p>\n</li>\n<li>\n<p>如果有异步操作（如 AJAX 请求），页面可能会继续更新。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>Google 搜索页面加载完成后，用户可以与页面交互。</p>\n<h2 id=\"如果-url-是-googlecom-会有什么不同\"><a class=\"anchor\" href=\"#如果-url-是-googlecom-会有什么不同\">#</a> 如果 URL 是 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span> 会有什么不同？</h2>\n<ol>\n<li>域名解析：</li>\n</ol>\n<p>浏览器会解析 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span>，但通常会重定向到 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span>（Google 的主域名）。</p>\n<p>例如，输入 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span> 后，浏览器可能会收到 301 或 302 重定向响应，指向 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>。</p>\n<ol start=\"2\">\n<li>HTTPS 强制跳转：</li>\n</ol>\n<p>Google 会强制使用 HTTPS，因此即使输入 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">http://google.com</span>，浏览器也会重定向到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>。</p>\n<ol start=\"3\">\n<li>首页内容：</li>\n</ol>\n<p>如果访问的是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>，服务器会返回 Google 搜索首页的 HTML 页面。</p>\n<p>页面内容相对简单，主要是搜索框和一些链接。</p>\n<ol start=\"4\">\n<li>资源加载：</li>\n</ol>\n<p>Google 首页的资源（如图片、CSS、JavaScript）通常较少，加载速度较快。</p>\n<p>Google 会使用 CDN 和缓存技术，进一步加速页面加载。</p>\n<ol start=\"5\">\n<li>用户体验：</li>\n</ol>\n<p>Google 首页设计简洁，加载速度快，用户可以立即进行搜索操作。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>输入 URL 后，浏览器会执行以下步骤：</p>\n<ol>\n<li>\n<p>URL 解析：提取协议、域名、路径等信息。</p>\n</li>\n<li>\n<p>DNS 查询：将域名解析为 IP 地址。</p>\n</li>\n<li>\n<p>建立 TCP 连接：与服务器建立连接（HTTPS 还会进行 TLS 握手）。</p>\n</li>\n<li>\n<p>发送 HTTP 请求：向服务器发送请求。</p>\n</li>\n<li>\n<p>服务器处理请求：服务器生成响应并返回。</p>\n</li>\n<li>\n<p>浏览器接收响应：解析 HTML、CSS 和 JavaScript。</p>\n</li>\n<li>\n<p>渲染页面：构建 DOM 树、CSSOM 树，绘制页面。</p>\n</li>\n<li>\n<p>加载完成：页面显示并触发 load 事件。</p>\n</li>\n</ol>\n<p>如果 URL 是 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span>，浏览器会重定向到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>，并加载 Google 搜索首页。由于 Google 的优化措施（如 CDN、缓存、简洁设计），页面加载速度会非常快。</p>\n","length":1715,"excerpt":"","more":"<h1 id=\"输入一个url会发生什么\"><a class=\"anchor\" href=\"#输入一个url会发生什么\">#</a> 输入一个 url 会发生什么</h1>\n<p>本问题在之前的学习合集文章 ———— 计算机网络与浏览器原理篇有过总结，因为本问题经典、关键、常见，所以此处单独开一篇博文再次作以更为详细的总结～</p>\n<h2 id=\"输入一个url会发生什么-2\"><a class=\"anchor\" href=\"#输入一个url会发生什么-2\">#</a> 输入一个 url 会发生什么？</h2>\n<ol>\n<li>URL 解析</li>\n</ol>\n<ul>\n<li>\n<p>步骤：</p>\n</li>\n<li>\n<p>浏览器解析用户输入的 URL，提取协议（如 http 或 https）、域名（如 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span>）、端口（默认 80 或 443）、路径和查询参数。</p>\n</li>\n<li>\n<p>示例：</p>\n</li>\n</ul>\n<p>输入 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT12dWUlRUYlQkMlOEMlRTYlQjUlOEYlRTglQTclODglRTUlOTklQTglRTQlQkMlOUElRTglQTclQTMlRTYlOUUlOTAlRTUlODclQkElRUYlQkMlOUE=\">https://www.google.com/search?q=vue，浏览器会解析出：</span></p>\n<p>协议：https</p>\n<p>域名：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span></p>\n<p>路径：/search</p>\n<p>查询参数：q=vue</p>\n<ol start=\"2\">\n<li>DNS 查询</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器通过 DNS（域名系统）将域名解析为对应的 IP 地址。</p>\n</li>\n<li>\n<p>如果本地缓存中有域名对应的 IP 地址，则直接使用；否则，浏览器会向 DNS 服务器发起查询请求。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>解析 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span> 可能会返回 142.250.190.78。</p>\n<ol start=\"3\">\n<li>建立 TCP 连接</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器通过 IP 地址和端口与服务器建立 TCP 连接。</p>\n</li>\n<li>\n<p>如果是 HTTPS，还会进行 TLS 握手，建立加密通道。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>与 142.250.190.78:443 建立 TCP 连接，并进行 TLS 握手。</p>\n<ol start=\"4\">\n<li>发送 HTTP 请求</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>浏览器向服务器发送 HTTP 请求，包括请求方法（如 GET）、路径、请求头和请求体。</li>\n</ul>\n<p>示例：</p>\n<p>发送 GET /search?q=vue HTTP/1.1 请求。</p>\n<ol start=\"5\">\n<li>服务器处理请求</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>服务器接收到请求后，根据路径和参数处理请求，生成响应数据（如 HTML 页面）。</p>\n</li>\n<li>\n<p>服务器返回 HTTP 响应，包括状态码（如 200）、响应头和响应体。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>服务器返回 200 OK 和 Google 搜索结果的 HTML 页面。</p>\n<ol start=\"6\">\n<li>浏览器接收响应</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器接收到服务器的响应后，开始解析响应内容。</p>\n</li>\n<li>\n<p>如果是 HTML 页面，浏览器会解析 HTML、CSS 和 JavaScript，并加载页面所需的资源（如图片、样式表、脚本等）。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>解析 Google 搜索结果的 HTML，并加载相关资源。</p>\n<ol start=\"7\">\n<li>渲染页面</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器根据 HTML 和 CSS 构建 DOM 树和 CSSOM 树，然后合并生成渲染树。</p>\n</li>\n<li>\n<p>根据渲染树计算布局，绘制页面内容。</p>\n</li>\n<li>\n<p>执行 JavaScript 代码，动态更新页面。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>渲染 Google 搜索结果的页面，并显示给用户。</p>\n<ol start=\"8\">\n<li>加载完成</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>页面加载完成后，触发 load 事件。</p>\n</li>\n<li>\n<p>如果有异步操作（如 AJAX 请求），页面可能会继续更新。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>Google 搜索页面加载完成后，用户可以与页面交互。</p>\n<h2 id=\"如果-url-是-googlecom-会有什么不同\"><a class=\"anchor\" href=\"#如果-url-是-googlecom-会有什么不同\">#</a> 如果 URL 是 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span> 会有什么不同？</h2>\n<ol>\n<li>域名解析：</li>\n</ol>\n<p>浏览器会解析 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span>，但通常会重定向到 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span>（Google 的主域名）。</p>\n<p>例如，输入 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span> 后，浏览器可能会收到 301 或 302 重定向响应，指向 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>。</p>\n<ol start=\"2\">\n<li>HTTPS 强制跳转：</li>\n</ol>\n<p>Google 会强制使用 HTTPS，因此即使输入 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">http://google.com</span>，浏览器也会重定向到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>。</p>\n<ol start=\"3\">\n<li>首页内容：</li>\n</ol>\n<p>如果访问的是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>，服务器会返回 Google 搜索首页的 HTML 页面。</p>\n<p>页面内容相对简单，主要是搜索框和一些链接。</p>\n<ol start=\"4\">\n<li>资源加载：</li>\n</ol>\n<p>Google 首页的资源（如图片、CSS、JavaScript）通常较少，加载速度较快。</p>\n<p>Google 会使用 CDN 和缓存技术，进一步加速页面加载。</p>\n<ol start=\"5\">\n<li>用户体验：</li>\n</ol>\n<p>Google 首页设计简洁，加载速度快，用户可以立即进行搜索操作。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>输入 URL 后，浏览器会执行以下步骤：</p>\n<ol>\n<li>\n<p>URL 解析：提取协议、域名、路径等信息。</p>\n</li>\n<li>\n<p>DNS 查询：将域名解析为 IP 地址。</p>\n</li>\n<li>\n<p>建立 TCP 连接：与服务器建立连接（HTTPS 还会进行 TLS 握手）。</p>\n</li>\n<li>\n<p>发送 HTTP 请求：向服务器发送请求。</p>\n</li>\n<li>\n<p>服务器处理请求：服务器生成响应并返回。</p>\n</li>\n<li>\n<p>浏览器接收响应：解析 HTML、CSS 和 JavaScript。</p>\n</li>\n<li>\n<p>渲染页面：构建 DOM 树、CSSOM 树，绘制页面。</p>\n</li>\n<li>\n<p>加载完成：页面显示并触发 load 事件。</p>\n</li>\n</ol>\n<p>如果 URL 是 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span>，浏览器会重定向到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>，并加载 Google 搜索首页。由于 Google 的优化措施（如 CDN、缓存、简洁设计），页面加载速度会非常快。</p>\n"},{"title":"机器翻译赛-seq2seq与transformer","date":"2024-08-19T08:02:58.000Z","_content":"\n## Seq2Seq架构\n\nbaseline 代码中实现了一个经典的序列到序列(Seq2Seq)模型，中间层使用的GRU网络，并且网络中加入了注意力机制(Attention Mechanism)\n\n编码器将长度可变的输入序列转换成 形状固定的上下文变量， 并且将输入序列的信息在该上下文变量中进行编码。\n\n让我们实现循环神经网络编码器。 注意，我们使用了嵌入层（embedding layer） 来获得输入序列中每个词元的特征向量。 嵌入层的权重是一个矩阵， 其行数等于输入词表的大小（vocab_size）， 其列数等于特征向量的维度（embed_size）。 对于任意输入词元的索引 i ， 嵌入层获取权重矩阵的第 i 行（从0开始）以返回其特征向量。 另外，本文选择了一个多层门控循环单元来实现编码器。\n\n``` python\nclass Seq2SeqEncoder(d2l.Encoder):\n    \"\"\"用于序列到序列学习的循环神经网络编码器\"\"\"\n    def __init__(self, vocab_size, embed_size, num_hiddens, num_layers,\n                 dropout=0, **kwargs):\n        super(Seq2SeqEncoder, self).__init__(**kwargs)\n        # 嵌入层\n        self.embedding = nn.Embedding(vocab_size, embed_size)\n        self.rnn = nn.GRU(embed_size, num_hiddens, num_layers,\n                          dropout=dropout)\n\n    def forward(self, X, *args):\n        # 输出'X'的形状：(batch_size,num_steps,embed_size)\n        X = self.embedding(X)\n        # 在循环神经网络模型中，第一个轴对应于时间步\n        X = X.permute(1, 0, 2)\n        # 如果未提及状态，则默认为0\n        output, state = self.rnn(X)\n        # output的形状:(num_steps,batch_size,num_hiddens)\n        # state的形状:(num_layers,batch_size,num_hiddens)\n        return output, state\n```\n\n下面，我们实例化上述编码器的实现： 我们使用一个两层门控循环单元编码器，其隐藏单元数为16。 给定一小批量的输入序列X（批量大小为4，时间步为7）。 在完成所有时间步后， 最后一层的隐状态的输出是一个张量（output由编码器的循环层返回）， 其形状为（时间步数，批量大小，隐藏单元数）。\n\n``` python\nencoder = Seq2SeqEncoder(vocab_size=10, embed_size=8, num_hiddens=16,\n                         num_layers=2)\nencoder.eval()\nX = torch.zeros((4, 7), dtype=torch.long)\noutput, state = encoder(X)\noutput.shape\n\n```\n\n`\ntorch.Size([7, 4, 16])\n`\n\n由于这里使用的是门控循环单元， 所以在最后一个时间步的多层隐状态的形状是 （隐藏层的数量，批量大小，隐藏单元的数量）。 如果使用长短期记忆网络，state中还将包含记忆单元信息。\n\n``` python\n\nstate.shape\n\n```\n\n`\ntorch.Size([2, 4, 16])\n`\n\n当实现解码器时， 我们直接使用编码器最后一个时间步的隐状态来初始化解码器的隐状态。 这就要求使用循环神经网络实现的编码器和解码器具有相同数量的层和隐藏单元。 为了进一步包含经过编码的输入序列的信息， 上下文变量在所有的时间步与解码器的输入进行拼接（concatenate）。 为了预测输出词元的概率分布， 在循环神经网络解码器的最后一层使用全连接层来变换隐状态。\n\n``` python\nclass Seq2SeqDecoder(d2l.Decoder):\n    \"\"\"用于序列到序列学习的循环神经网络解码器\"\"\"\n    def __init__(self, vocab_size, embed_size, num_hiddens, num_layers,\n                 dropout=0, **kwargs):\n        super(Seq2SeqDecoder, self).__init__(**kwargs)\n        self.embedding = nn.Embedding(vocab_size, embed_size)\n        self.rnn = nn.GRU(embed_size + num_hiddens, num_hiddens, num_layers,\n                          dropout=dropout)\n        self.dense = nn.Linear(num_hiddens, vocab_size)\n\n    def init_state(self, enc_outputs, *args):\n        return enc_outputs[1]\n\n    def forward(self, X, state):\n        # 输出'X'的形状：(batch_size,num_steps,embed_size)\n        X = self.embedding(X).permute(1, 0, 2)\n        # 广播context，使其具有与X相同的num_steps\n        context = state[-1].repeat(X.shape[0], 1, 1)\n        X_and_context = torch.cat((X, context), 2)\n        output, state = self.rnn(X_and_context, state)\n        output = self.dense(output).permute(1, 0, 2)\n        # output的形状:(batch_size,num_steps,vocab_size)\n        # state的形状:(num_layers,batch_size,num_hiddens)\n        return output, state\n```\n\n下面，我们用与前面提到的编码器中相同的超参数来实例化解码器。 如我们所见，解码器的输出形状变为（批量大小，时间步数，词表大小）， 其中张量的最后一个维度存储预测的词元分布。\n\n``` python\ndecoder = Seq2SeqDecoder(vocab_size=10, embed_size=8, num_hiddens=16,\n                         num_layers=2)\ndecoder.eval()\nstate = decoder.init_state(encoder(X))\noutput, state = decoder(X, state)\noutput.shape, state.shape\n```\n\n`\n(torch.Size([4, 7, 10]), torch.Size([2, 4, 16]))\n`\n\n上述循环神经网络“编码器－解码器”模型中的各层如:\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-seq2seq与transformer/01.png\">\n</div>\n<br>\n\n在每个时间步，解码器预测了输出词元的概率分布。 类似于语言模型，可以使用softmax来获得分布， 并通过计算交叉熵损失函数来进行优化。\n特定的填充词元被添加到序列的末尾， 因此不同长度的序列可以以相同形状的小批量加载。 但是，我们应该将填充词元的预测排除在损失函数的计算之外。\n为此，我们可以使用下面的sequence_mask函数 通过零值化屏蔽不相关的项， 以便后面任何不相关预测的计算都是与零的乘积，结果都等于零。 例如，如果两个序列的有效长度（不包括填充词元）分别为1和2， 则第一个序列的第一项和第二个序列的前两项之后的剩余项将被清除为零。\n\n``` python\ndef sequence_mask(X, valid_len, value=0):\n    \"\"\"在序列中屏蔽不相关的项\"\"\"\n    maxlen = X.size(1)\n    mask = torch.arange((maxlen), dtype=torch.float32,\n                        device=X.device)[None, :] < valid_len[:, None]\n    X[~mask] = value\n    return X\n\nX = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsequence_mask(X, torch.tensor([1, 2]))\n```\n\n`\ntensor([[1, 0, 0],\n        [4, 5, 0]])\n`\n\n我们还可以使用此函数屏蔽最后几个轴上的所有项。如果愿意，也可以使用指定的非零值来替换这些项。\n\n``` python\nX = torch.ones(2, 3, 4)\nsequence_mask(X, torch.tensor([1, 2]), value=-1)\n```\n\n`\ntensor([[[ 1.,  1.,  1.,  1.],\n         [-1., -1., -1., -1.],\n         [-1., -1., -1., -1.]],\n\n        [[ 1.,  1.,  1.,  1.],\n         [ 1.,  1.,  1.,  1.],\n         [-1., -1., -1., -1.]]])\n`\n\n现在，我们可以通过扩展softmax交叉熵损失函数来遮蔽不相关的预测。 最初，所有预测词元的掩码都设置为1。 一旦给定了有效长度，与填充词元对应的掩码将被设置为0。 最后，将所有词元的损失乘以掩码，以过滤掉损失中填充词元产生的不相关预测。\n\n``` python\nclass MaskedSoftmaxCELoss(nn.CrossEntropyLoss):\n    \"\"\"带遮蔽的softmax交叉熵损失函数\"\"\"\n    # pred的形状：(batch_size,num_steps,vocab_size)\n    # label的形状：(batch_size,num_steps)\n    # valid_len的形状：(batch_size,)\n    def forward(self, pred, label, valid_len):\n        weights = torch.ones_like(label)\n        weights = sequence_mask(weights, valid_len)\n        self.reduction='none'\n        unweighted_loss = super(MaskedSoftmaxCELoss, self).forward(\n            pred.permute(0, 2, 1), label)\n        weighted_loss = (unweighted_loss * weights).mean(dim=1)\n        return weighted_loss\n```\n\n我们可以创建三个相同的序列来进行代码健全性检查， 然后分别指定这些序列的有效长度为4、2和0。 结果就是，第一个序列的损失应为第二个序列的两倍，而第三个序列的损失应为零。\n\n``` python\nloss = MaskedSoftmaxCELoss()\nloss(torch.ones(3, 4, 10), torch.ones((3, 4), dtype=torch.long),\n     torch.tensor([4, 2, 0]))\n```\n\n`tensor([2.3026, 1.1513, 0.0000])`\n\n在下面的循环训练过程中，特定的序列开始词元（“<bos>”）和 原始的输出序列（不包括序列结束词元“<eos>”） 拼接在一起作为解码器的输入。 这被称为强制教学（teacher forcing）， 因为原始的输出序列（词元的标签）被送入解码器。 或者，将来自上一个时间步的预测得到的词元作为解码器的当前输入。\n\n``` python\ndef train_seq2seq(net, data_iter, lr, num_epochs, tgt_vocab, device):\n    \"\"\"训练序列到序列模型\"\"\"\n    def xavier_init_weights(m):\n        if type(m) == nn.Linear:\n            nn.init.xavier_uniform_(m.weight)\n        if type(m) == nn.GRU:\n            for param in m._flat_weights_names:\n                if \"weight\" in param:\n                    nn.init.xavier_uniform_(m._parameters[param])\n\n    net.apply(xavier_init_weights)\n    net.to(device)\n    optimizer = torch.optim.Adam(net.parameters(), lr=lr)\n    loss = MaskedSoftmaxCELoss()\n    net.train()\n    animator = d2l.Animator(xlabel='epoch', ylabel='loss',\n                     xlim=[10, num_epochs])\n    for epoch in range(num_epochs):\n        timer = d2l.Timer()\n        metric = d2l.Accumulator(2)  # 训练损失总和，词元数量\n        for batch in data_iter:\n            optimizer.zero_grad()\n            X, X_valid_len, Y, Y_valid_len = [x.to(device) for x in batch]\n            bos = torch.tensor([tgt_vocab['<bos>']] * Y.shape[0],\n                          device=device).reshape(-1, 1)\n            dec_input = torch.cat([bos, Y[:, :-1]], 1)  # 强制教学\n            Y_hat, _ = net(X, dec_input, X_valid_len)\n            l = loss(Y_hat, Y, Y_valid_len)\n            l.sum().backward()      # 损失函数的标量进行“反向传播”\n            d2l.grad_clipping(net, 1)\n            num_tokens = Y_valid_len.sum()\n            optimizer.step()\n            with torch.no_grad():\n                metric.add(l.sum(), num_tokens)\n        if (epoch + 1) % 10 == 0:\n            animator.add(epoch + 1, (metric[0] / metric[1],))\n    print(f'loss {metric[0] / metric[1]:.3f}, {metric[1] / timer.stop():.1f} '\n        f'tokens/sec on {str(device)}')\n```\n\n现在，在机器翻译数据集上，我们可以 创建和训练一个循环神经网络“编码器－解码器”模型用于序列到序列的学习。\n``` python\nembed_size, num_hiddens, num_layers, dropout = 32, 32, 2, 0.1\nbatch_size, num_steps = 64, 10\nlr, num_epochs, device = 0.005, 300, d2l.try_gpu()\n\ntrain_iter, src_vocab, tgt_vocab = d2l.load_data_nmt(batch_size, num_steps)\nencoder = Seq2SeqEncoder(len(src_vocab), embed_size, num_hiddens, num_layers,\n                        dropout)\ndecoder = Seq2SeqDecoder(len(tgt_vocab), embed_size, num_hiddens, num_layers,\n                        dropout)\nnet = d2l.EncoderDecoder(encoder, decoder)\ntrain_seq2seq(net, train_iter, lr, num_epochs, tgt_vocab, device)\n```\n\n为了采用一个接着一个词元的方式预测输出序列， 每个解码器当前时间步的输入都将来自于前一时间步的预测词元。 与训练类似，序列开始词元（“<bos>”） 在初始时间步被输入到解码器中。 该预测过程如 图所示， 当输出序列的预测遇到序列结束词元（“<eos>”）时，预测就结束了。\n\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-seq2seq与transformer/02.png\">\n</div>\n<br>\n\n``` python\ndef predict_seq2seq(net, src_sentence, src_vocab, tgt_vocab, num_steps,\n                    device, save_attention_weights=False):\n    \"\"\"序列到序列模型的预测\"\"\"\n    # 在预测时将net设置为评估模式\n    net.eval()\n    src_tokens = src_vocab[src_sentence.lower().split(' ')] + [\n        src_vocab['<eos>']]\n    enc_valid_len = torch.tensor([len(src_tokens)], device=device)\n    src_tokens = d2l.truncate_pad(src_tokens, num_steps, src_vocab['<pad>'])\n    # 添加批量轴\n    enc_X = torch.unsqueeze(\n        torch.tensor(src_tokens, dtype=torch.long, device=device), dim=0)\n    enc_outputs = net.encoder(enc_X, enc_valid_len)\n    dec_state = net.decoder.init_state(enc_outputs, enc_valid_len)\n    # 添加批量轴\n    dec_X = torch.unsqueeze(torch.tensor(\n        [tgt_vocab['<bos>']], dtype=torch.long, device=device), dim=0)\n    output_seq, attention_weight_seq = [], []\n    for _ in range(num_steps):\n        Y, dec_state = net.decoder(dec_X, dec_state)\n        # 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入\n        dec_X = Y.argmax(dim=2)\n        pred = dec_X.squeeze(dim=0).type(torch.int32).item()\n        # 保存注意力权重（稍后讨论）\n        if save_attention_weights:\n            attention_weight_seq.append(net.decoder.attention_weights)\n        # 一旦序列结束词元被预测，输出序列的生成就完成了\n        if pred == tgt_vocab['<eos>']:\n            break\n        output_seq.append(pred)\n    return ' '.join(tgt_vocab.to_tokens(output_seq)), attention_weight_seq\n```\n\nBLUE的计算代码如下\n``` python\ndef bleu(pred_seq, label_seq, k):  #@save\n    \"\"\"计算BLEU\"\"\"\n    pred_tokens, label_tokens = pred_seq.split(' '), label_seq.split(' ')\n    len_pred, len_label = len(pred_tokens), len(label_tokens)\n    score = math.exp(min(0, 1 - len_label / len_pred))\n    for n in range(1, k + 1):\n        num_matches, label_subs = 0, collections.defaultdict(int)\n        for i in range(len_label - n + 1):\n            label_subs[' '.join(label_tokens[i: i + n])] += 1\n        for i in range(len_pred - n + 1):\n            if label_subs[' '.join(pred_tokens[i: i + n])] > 0:\n                num_matches += 1\n                label_subs[' '.join(pred_tokens[i: i + n])] -= 1\n        score *= math.pow(num_matches / (len_pred - n + 1), math.pow(0.5, n))\n    return score\n```\n\n最后，利用训练好的循环神经网络“编码器－解码器”模型， 将几个英语句子翻译成法语，并计算BLEU的最终结果。\n\n``` python\nengs = ['go .', \"i lost .\", 'he\\'s calm .', 'i\\'m home .']\nfras = ['va !', 'j\\'ai perdu .', 'il est calme .', 'je suis chez moi .']\nfor eng, fra in zip(engs, fras):\n    translation, attention_weight_seq = predict_seq2seq(\n        net, eng, src_vocab, tgt_vocab, num_steps, device)\n    print(f'{eng} => {translation}, bleu {bleu(translation, fra, k=2):.3f}')\n```\n\n`\ngo . => va !, bleu 1.000\ni lost . => j'ai perdu ., bleu 1.000\nhe's calm . => il est riche ., bleu 0.658\ni'm home . => je suis en retard ?, bleu 0.447\n`\n\n### Seq2Seq 小结\n\n- 根据“编码器-解码器”架构的设计， 我们可以使用两个循环神经网络来设计一个序列到序列学习的模型。\n\n- 在实现编码器和解码器时，我们可以使用多层循环神经网络。\n\n- 我们可以使用遮蔽来过滤不相关的计算，例如在计算损失时。\n\n- 在“编码器－解码器”训练中，强制教学方法将原始输出序列（而非预测结果）输入解码器。\n\n- BLEU是一种常用的评估方法，它通过测量预测序列和标签序列之间的n元语法的匹配度来评估预测。\n\n### Transformer\n\nTransformer架构与论文精讲已经在前面的文章中阐述过了。\n\n基于循环或卷积神经网络的序列到序列建模方法是现存机器翻译任务中的经典方法。然而，它们在建模文本长程依赖方面都存在一定的局限性。\n\n- 对于卷积神经网络来说，受限的上下文窗口在建模长文本方面天然地存在不足。如果要对长距离依赖进行描述，需要多层卷积操作，而且不同层之间信息传递也可能有损失，这些都限制了模型的能力。\n- 而对于循环神经网络来说，上下文的语义依赖是通过维护循环单元中的隐状态实现的。在编码过程中，每一个时间步的输入建模都涉及到对隐藏状态的修改。随着序列长度的增加，编码在隐藏状态中的序列早期的上下文信息被逐渐遗忘。尽管注意力机制的引入在一定程度上缓解了这个问题，但循环网络在编码效率方面仍存在很大的不足之处。由于编码端和解码端的每一个时间步的隐藏状态都依赖于前一时间步的计算结果，这就造成了在训练和推断阶段的低效。\n- 为了更好地描述文字序列，谷歌的研究人员在 2017 年提出了一种新的模型 Transformer。\n\nTransformer 在原论文中第一次提出就是将其应用到机器翻译领域，它的出现使得机器翻译的性能和效率迈向了一个新的阶段。它摒弃了循环结构，并完全通过注意力机制完成对源语言序列和目标语言序列全局依赖的建模。在抽取每个单词的上下文特征时，Transformer 通过自注意力机制（self-attention）衡量上下文中每一个单词对当前单词的重要程度。在这个过程当中没有任何的循环单元参与计算。这种高度可并行化的编码过程使得模型的运行变得十分高效。\n\nTransformer的主要组件包括编码器(Encoder)、解码器(Decoder)和注意力层。其核心是利用多头自注意力机制（Multi-Head Self-Attention），使每个位置的表示不仅依赖于当前位置，还能够直接获取其他位置的表示。自从提出以来，Transformer模型在机器翻译、文本生成等自然语言处理任务中均取得了突破性进展，成为NLP领域新的主流模型。\n\n从宏观角度来看，Transformer的编码器是由多个相同的层叠加而成的，每个层都有两个子层（子层表示为sublayer）。第⼀个子层是多头自注意力（multi-head self-attention）汇聚；第二个子层是基于位置的前馈网络（positionwise feed-forward network）。\n\n``` python\n# 位置编码\nclass PositionalEncoding(nn.Module):\n    def __init__(self, d_model, dropout=0.1, max_len=5000):\n        super(PositionalEncoding, self).__init__()\n        self.dropout = nn.Dropout(p=dropout)\n\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        pe = pe.unsqueeze(0).transpose(0, 1)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        x = x + self.pe[:x.size(0), :]\n        return self.dropout(x)\n\n# Transformer\nclass TransformerModel(nn.Module):\n    def __init__(self, src_vocab, tgt_vocab, d_model, nhead, num_encoder_layers, num_decoder_layers, dim_feedforward, dropout):\n        super(TransformerModel, self).__init__()\n        self.transformer = nn.Transformer(d_model, nhead, num_encoder_layers, num_decoder_layers, dim_feedforward, dropout)\n        self.src_embedding = nn.Embedding(len(src_vocab), d_model)\n        self.tgt_embedding = nn.Embedding(len(tgt_vocab), d_model)\n        self.positional_encoding = PositionalEncoding(d_model, dropout)\n        self.fc_out = nn.Linear(d_model, len(tgt_vocab))\n        self.src_vocab = src_vocab\n        self.tgt_vocab = tgt_vocab\n        self.d_model = d_model\n\n    def forward(self, src, tgt):\n        # 调整src和tgt的维度\n        src = src.transpose(0, 1)  # (seq_len, batch_size)\n        tgt = tgt.transpose(0, 1)  # (seq_len, batch_size)\n\n        src_mask = self.transformer.generate_square_subsequent_mask(src.size(0)).to(src.device)\n        tgt_mask = self.transformer.generate_square_subsequent_mask(tgt.size(0)).to(tgt.device)\n\n        src_padding_mask = (src == self.src_vocab['<pad>']).transpose(0, 1)\n        tgt_padding_mask = (tgt == self.tgt_vocab['<pad>']).transpose(0, 1)\n\n        src_embedded = self.positional_encoding(self.src_embedding(src) * math.sqrt(self.d_model))\n        tgt_embedded = self.positional_encoding(self.tgt_embedding(tgt) * math.sqrt(self.d_model))\n\n        output = self.transformer(src_embedded, tgt_embedded,\n                                  src_mask, tgt_mask, None, src_padding_mask, tgt_padding_mask, src_padding_mask)\n        return self.fc_out(output).transpose(0, 1)\n```\n\n### 上分技巧\n\n- 最简单的就是调参，将 epochs 调大一点，使用全部训练集，以及调整模型的参数，如head、layers等。如果数据量允许，增加模型的深度（更多的编码器/解码器层）或宽度（更大的隐藏层尺寸），这通常可以提高模型的表达能力和翻译质量，尤其是在处理复杂或专业内容时。\n- 加入术语词典，这是在此竞赛中比较有效的方法，加入术语词典的方法策略也有很多，如：\n  - 在模型生成的翻译输出中替换术语，这是最简单的方法\n  - 整合到数据预处理流程，确保它们在翻译中保持一致\n  - 在模型内部动态地调整术语的嵌入，这涉及到在模型中加入一个额外的层，该层负责查找术语词典中的术语，并为其生成专门的嵌入向量，然后将这些向量与常规的词嵌入结合使用\n- 认真做数据清洗\n\n- 数据扩增：\n  - 回译（back-translation）：将源语言文本先翻译成目标语言，再将目标语言文本翻译回源语言，生成的新文本作为额外的训练数据\n  - 同义词替换：随机选择句子中的词，并用其同义词替换\n  - 使用句法分析和语义解析技术重新表述句子，保持原意不变\n  - 将文本翻译成多种语言后再翻译回原语言，以获得多样化翻译\n- 采用更精细的学习率调度策略（baseline我们使用的是固定学习率）：\n  - Noam Scheduler：结合了warmup（预热）阶段和衰减阶段\n  - Step Decay：最简单的一种学习率衰减策略，每隔一定数量的epoch，学习率按固定比例衰减\n  - Cosine Annealing：学习率随周期性变化，通常从初始值下降到接近零，然后再逐渐上升\n\n- 集成学习：训练多个不同初始化或架构的模型，并使用集成方法（如投票或平均）来产生最终翻译。这可以减少单一模型的过拟合风险，提高翻译的稳定性。","source":"_posts/机器翻译赛-seq2seq与transformer.md","raw":"---\ntitle: 机器翻译赛-seq2seq与transformer\ndate: 2024-08-19 16:02:58\ncategories:\n- [机器学习]\ntags:\n- [NLP]\n---\n\n## Seq2Seq架构\n\nbaseline 代码中实现了一个经典的序列到序列(Seq2Seq)模型，中间层使用的GRU网络，并且网络中加入了注意力机制(Attention Mechanism)\n\n编码器将长度可变的输入序列转换成 形状固定的上下文变量， 并且将输入序列的信息在该上下文变量中进行编码。\n\n让我们实现循环神经网络编码器。 注意，我们使用了嵌入层（embedding layer） 来获得输入序列中每个词元的特征向量。 嵌入层的权重是一个矩阵， 其行数等于输入词表的大小（vocab_size）， 其列数等于特征向量的维度（embed_size）。 对于任意输入词元的索引 i ， 嵌入层获取权重矩阵的第 i 行（从0开始）以返回其特征向量。 另外，本文选择了一个多层门控循环单元来实现编码器。\n\n``` python\nclass Seq2SeqEncoder(d2l.Encoder):\n    \"\"\"用于序列到序列学习的循环神经网络编码器\"\"\"\n    def __init__(self, vocab_size, embed_size, num_hiddens, num_layers,\n                 dropout=0, **kwargs):\n        super(Seq2SeqEncoder, self).__init__(**kwargs)\n        # 嵌入层\n        self.embedding = nn.Embedding(vocab_size, embed_size)\n        self.rnn = nn.GRU(embed_size, num_hiddens, num_layers,\n                          dropout=dropout)\n\n    def forward(self, X, *args):\n        # 输出'X'的形状：(batch_size,num_steps,embed_size)\n        X = self.embedding(X)\n        # 在循环神经网络模型中，第一个轴对应于时间步\n        X = X.permute(1, 0, 2)\n        # 如果未提及状态，则默认为0\n        output, state = self.rnn(X)\n        # output的形状:(num_steps,batch_size,num_hiddens)\n        # state的形状:(num_layers,batch_size,num_hiddens)\n        return output, state\n```\n\n下面，我们实例化上述编码器的实现： 我们使用一个两层门控循环单元编码器，其隐藏单元数为16。 给定一小批量的输入序列X（批量大小为4，时间步为7）。 在完成所有时间步后， 最后一层的隐状态的输出是一个张量（output由编码器的循环层返回）， 其形状为（时间步数，批量大小，隐藏单元数）。\n\n``` python\nencoder = Seq2SeqEncoder(vocab_size=10, embed_size=8, num_hiddens=16,\n                         num_layers=2)\nencoder.eval()\nX = torch.zeros((4, 7), dtype=torch.long)\noutput, state = encoder(X)\noutput.shape\n\n```\n\n`\ntorch.Size([7, 4, 16])\n`\n\n由于这里使用的是门控循环单元， 所以在最后一个时间步的多层隐状态的形状是 （隐藏层的数量，批量大小，隐藏单元的数量）。 如果使用长短期记忆网络，state中还将包含记忆单元信息。\n\n``` python\n\nstate.shape\n\n```\n\n`\ntorch.Size([2, 4, 16])\n`\n\n当实现解码器时， 我们直接使用编码器最后一个时间步的隐状态来初始化解码器的隐状态。 这就要求使用循环神经网络实现的编码器和解码器具有相同数量的层和隐藏单元。 为了进一步包含经过编码的输入序列的信息， 上下文变量在所有的时间步与解码器的输入进行拼接（concatenate）。 为了预测输出词元的概率分布， 在循环神经网络解码器的最后一层使用全连接层来变换隐状态。\n\n``` python\nclass Seq2SeqDecoder(d2l.Decoder):\n    \"\"\"用于序列到序列学习的循环神经网络解码器\"\"\"\n    def __init__(self, vocab_size, embed_size, num_hiddens, num_layers,\n                 dropout=0, **kwargs):\n        super(Seq2SeqDecoder, self).__init__(**kwargs)\n        self.embedding = nn.Embedding(vocab_size, embed_size)\n        self.rnn = nn.GRU(embed_size + num_hiddens, num_hiddens, num_layers,\n                          dropout=dropout)\n        self.dense = nn.Linear(num_hiddens, vocab_size)\n\n    def init_state(self, enc_outputs, *args):\n        return enc_outputs[1]\n\n    def forward(self, X, state):\n        # 输出'X'的形状：(batch_size,num_steps,embed_size)\n        X = self.embedding(X).permute(1, 0, 2)\n        # 广播context，使其具有与X相同的num_steps\n        context = state[-1].repeat(X.shape[0], 1, 1)\n        X_and_context = torch.cat((X, context), 2)\n        output, state = self.rnn(X_and_context, state)\n        output = self.dense(output).permute(1, 0, 2)\n        # output的形状:(batch_size,num_steps,vocab_size)\n        # state的形状:(num_layers,batch_size,num_hiddens)\n        return output, state\n```\n\n下面，我们用与前面提到的编码器中相同的超参数来实例化解码器。 如我们所见，解码器的输出形状变为（批量大小，时间步数，词表大小）， 其中张量的最后一个维度存储预测的词元分布。\n\n``` python\ndecoder = Seq2SeqDecoder(vocab_size=10, embed_size=8, num_hiddens=16,\n                         num_layers=2)\ndecoder.eval()\nstate = decoder.init_state(encoder(X))\noutput, state = decoder(X, state)\noutput.shape, state.shape\n```\n\n`\n(torch.Size([4, 7, 10]), torch.Size([2, 4, 16]))\n`\n\n上述循环神经网络“编码器－解码器”模型中的各层如:\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-seq2seq与transformer/01.png\">\n</div>\n<br>\n\n在每个时间步，解码器预测了输出词元的概率分布。 类似于语言模型，可以使用softmax来获得分布， 并通过计算交叉熵损失函数来进行优化。\n特定的填充词元被添加到序列的末尾， 因此不同长度的序列可以以相同形状的小批量加载。 但是，我们应该将填充词元的预测排除在损失函数的计算之外。\n为此，我们可以使用下面的sequence_mask函数 通过零值化屏蔽不相关的项， 以便后面任何不相关预测的计算都是与零的乘积，结果都等于零。 例如，如果两个序列的有效长度（不包括填充词元）分别为1和2， 则第一个序列的第一项和第二个序列的前两项之后的剩余项将被清除为零。\n\n``` python\ndef sequence_mask(X, valid_len, value=0):\n    \"\"\"在序列中屏蔽不相关的项\"\"\"\n    maxlen = X.size(1)\n    mask = torch.arange((maxlen), dtype=torch.float32,\n                        device=X.device)[None, :] < valid_len[:, None]\n    X[~mask] = value\n    return X\n\nX = torch.tensor([[1, 2, 3], [4, 5, 6]])\nsequence_mask(X, torch.tensor([1, 2]))\n```\n\n`\ntensor([[1, 0, 0],\n        [4, 5, 0]])\n`\n\n我们还可以使用此函数屏蔽最后几个轴上的所有项。如果愿意，也可以使用指定的非零值来替换这些项。\n\n``` python\nX = torch.ones(2, 3, 4)\nsequence_mask(X, torch.tensor([1, 2]), value=-1)\n```\n\n`\ntensor([[[ 1.,  1.,  1.,  1.],\n         [-1., -1., -1., -1.],\n         [-1., -1., -1., -1.]],\n\n        [[ 1.,  1.,  1.,  1.],\n         [ 1.,  1.,  1.,  1.],\n         [-1., -1., -1., -1.]]])\n`\n\n现在，我们可以通过扩展softmax交叉熵损失函数来遮蔽不相关的预测。 最初，所有预测词元的掩码都设置为1。 一旦给定了有效长度，与填充词元对应的掩码将被设置为0。 最后，将所有词元的损失乘以掩码，以过滤掉损失中填充词元产生的不相关预测。\n\n``` python\nclass MaskedSoftmaxCELoss(nn.CrossEntropyLoss):\n    \"\"\"带遮蔽的softmax交叉熵损失函数\"\"\"\n    # pred的形状：(batch_size,num_steps,vocab_size)\n    # label的形状：(batch_size,num_steps)\n    # valid_len的形状：(batch_size,)\n    def forward(self, pred, label, valid_len):\n        weights = torch.ones_like(label)\n        weights = sequence_mask(weights, valid_len)\n        self.reduction='none'\n        unweighted_loss = super(MaskedSoftmaxCELoss, self).forward(\n            pred.permute(0, 2, 1), label)\n        weighted_loss = (unweighted_loss * weights).mean(dim=1)\n        return weighted_loss\n```\n\n我们可以创建三个相同的序列来进行代码健全性检查， 然后分别指定这些序列的有效长度为4、2和0。 结果就是，第一个序列的损失应为第二个序列的两倍，而第三个序列的损失应为零。\n\n``` python\nloss = MaskedSoftmaxCELoss()\nloss(torch.ones(3, 4, 10), torch.ones((3, 4), dtype=torch.long),\n     torch.tensor([4, 2, 0]))\n```\n\n`tensor([2.3026, 1.1513, 0.0000])`\n\n在下面的循环训练过程中，特定的序列开始词元（“<bos>”）和 原始的输出序列（不包括序列结束词元“<eos>”） 拼接在一起作为解码器的输入。 这被称为强制教学（teacher forcing）， 因为原始的输出序列（词元的标签）被送入解码器。 或者，将来自上一个时间步的预测得到的词元作为解码器的当前输入。\n\n``` python\ndef train_seq2seq(net, data_iter, lr, num_epochs, tgt_vocab, device):\n    \"\"\"训练序列到序列模型\"\"\"\n    def xavier_init_weights(m):\n        if type(m) == nn.Linear:\n            nn.init.xavier_uniform_(m.weight)\n        if type(m) == nn.GRU:\n            for param in m._flat_weights_names:\n                if \"weight\" in param:\n                    nn.init.xavier_uniform_(m._parameters[param])\n\n    net.apply(xavier_init_weights)\n    net.to(device)\n    optimizer = torch.optim.Adam(net.parameters(), lr=lr)\n    loss = MaskedSoftmaxCELoss()\n    net.train()\n    animator = d2l.Animator(xlabel='epoch', ylabel='loss',\n                     xlim=[10, num_epochs])\n    for epoch in range(num_epochs):\n        timer = d2l.Timer()\n        metric = d2l.Accumulator(2)  # 训练损失总和，词元数量\n        for batch in data_iter:\n            optimizer.zero_grad()\n            X, X_valid_len, Y, Y_valid_len = [x.to(device) for x in batch]\n            bos = torch.tensor([tgt_vocab['<bos>']] * Y.shape[0],\n                          device=device).reshape(-1, 1)\n            dec_input = torch.cat([bos, Y[:, :-1]], 1)  # 强制教学\n            Y_hat, _ = net(X, dec_input, X_valid_len)\n            l = loss(Y_hat, Y, Y_valid_len)\n            l.sum().backward()      # 损失函数的标量进行“反向传播”\n            d2l.grad_clipping(net, 1)\n            num_tokens = Y_valid_len.sum()\n            optimizer.step()\n            with torch.no_grad():\n                metric.add(l.sum(), num_tokens)\n        if (epoch + 1) % 10 == 0:\n            animator.add(epoch + 1, (metric[0] / metric[1],))\n    print(f'loss {metric[0] / metric[1]:.3f}, {metric[1] / timer.stop():.1f} '\n        f'tokens/sec on {str(device)}')\n```\n\n现在，在机器翻译数据集上，我们可以 创建和训练一个循环神经网络“编码器－解码器”模型用于序列到序列的学习。\n``` python\nembed_size, num_hiddens, num_layers, dropout = 32, 32, 2, 0.1\nbatch_size, num_steps = 64, 10\nlr, num_epochs, device = 0.005, 300, d2l.try_gpu()\n\ntrain_iter, src_vocab, tgt_vocab = d2l.load_data_nmt(batch_size, num_steps)\nencoder = Seq2SeqEncoder(len(src_vocab), embed_size, num_hiddens, num_layers,\n                        dropout)\ndecoder = Seq2SeqDecoder(len(tgt_vocab), embed_size, num_hiddens, num_layers,\n                        dropout)\nnet = d2l.EncoderDecoder(encoder, decoder)\ntrain_seq2seq(net, train_iter, lr, num_epochs, tgt_vocab, device)\n```\n\n为了采用一个接着一个词元的方式预测输出序列， 每个解码器当前时间步的输入都将来自于前一时间步的预测词元。 与训练类似，序列开始词元（“<bos>”） 在初始时间步被输入到解码器中。 该预测过程如 图所示， 当输出序列的预测遇到序列结束词元（“<eos>”）时，预测就结束了。\n\n\n<br>\n<div align=\"center\">\n    <img src=\"机器翻译赛-seq2seq与transformer/02.png\">\n</div>\n<br>\n\n``` python\ndef predict_seq2seq(net, src_sentence, src_vocab, tgt_vocab, num_steps,\n                    device, save_attention_weights=False):\n    \"\"\"序列到序列模型的预测\"\"\"\n    # 在预测时将net设置为评估模式\n    net.eval()\n    src_tokens = src_vocab[src_sentence.lower().split(' ')] + [\n        src_vocab['<eos>']]\n    enc_valid_len = torch.tensor([len(src_tokens)], device=device)\n    src_tokens = d2l.truncate_pad(src_tokens, num_steps, src_vocab['<pad>'])\n    # 添加批量轴\n    enc_X = torch.unsqueeze(\n        torch.tensor(src_tokens, dtype=torch.long, device=device), dim=0)\n    enc_outputs = net.encoder(enc_X, enc_valid_len)\n    dec_state = net.decoder.init_state(enc_outputs, enc_valid_len)\n    # 添加批量轴\n    dec_X = torch.unsqueeze(torch.tensor(\n        [tgt_vocab['<bos>']], dtype=torch.long, device=device), dim=0)\n    output_seq, attention_weight_seq = [], []\n    for _ in range(num_steps):\n        Y, dec_state = net.decoder(dec_X, dec_state)\n        # 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入\n        dec_X = Y.argmax(dim=2)\n        pred = dec_X.squeeze(dim=0).type(torch.int32).item()\n        # 保存注意力权重（稍后讨论）\n        if save_attention_weights:\n            attention_weight_seq.append(net.decoder.attention_weights)\n        # 一旦序列结束词元被预测，输出序列的生成就完成了\n        if pred == tgt_vocab['<eos>']:\n            break\n        output_seq.append(pred)\n    return ' '.join(tgt_vocab.to_tokens(output_seq)), attention_weight_seq\n```\n\nBLUE的计算代码如下\n``` python\ndef bleu(pred_seq, label_seq, k):  #@save\n    \"\"\"计算BLEU\"\"\"\n    pred_tokens, label_tokens = pred_seq.split(' '), label_seq.split(' ')\n    len_pred, len_label = len(pred_tokens), len(label_tokens)\n    score = math.exp(min(0, 1 - len_label / len_pred))\n    for n in range(1, k + 1):\n        num_matches, label_subs = 0, collections.defaultdict(int)\n        for i in range(len_label - n + 1):\n            label_subs[' '.join(label_tokens[i: i + n])] += 1\n        for i in range(len_pred - n + 1):\n            if label_subs[' '.join(pred_tokens[i: i + n])] > 0:\n                num_matches += 1\n                label_subs[' '.join(pred_tokens[i: i + n])] -= 1\n        score *= math.pow(num_matches / (len_pred - n + 1), math.pow(0.5, n))\n    return score\n```\n\n最后，利用训练好的循环神经网络“编码器－解码器”模型， 将几个英语句子翻译成法语，并计算BLEU的最终结果。\n\n``` python\nengs = ['go .', \"i lost .\", 'he\\'s calm .', 'i\\'m home .']\nfras = ['va !', 'j\\'ai perdu .', 'il est calme .', 'je suis chez moi .']\nfor eng, fra in zip(engs, fras):\n    translation, attention_weight_seq = predict_seq2seq(\n        net, eng, src_vocab, tgt_vocab, num_steps, device)\n    print(f'{eng} => {translation}, bleu {bleu(translation, fra, k=2):.3f}')\n```\n\n`\ngo . => va !, bleu 1.000\ni lost . => j'ai perdu ., bleu 1.000\nhe's calm . => il est riche ., bleu 0.658\ni'm home . => je suis en retard ?, bleu 0.447\n`\n\n### Seq2Seq 小结\n\n- 根据“编码器-解码器”架构的设计， 我们可以使用两个循环神经网络来设计一个序列到序列学习的模型。\n\n- 在实现编码器和解码器时，我们可以使用多层循环神经网络。\n\n- 我们可以使用遮蔽来过滤不相关的计算，例如在计算损失时。\n\n- 在“编码器－解码器”训练中，强制教学方法将原始输出序列（而非预测结果）输入解码器。\n\n- BLEU是一种常用的评估方法，它通过测量预测序列和标签序列之间的n元语法的匹配度来评估预测。\n\n### Transformer\n\nTransformer架构与论文精讲已经在前面的文章中阐述过了。\n\n基于循环或卷积神经网络的序列到序列建模方法是现存机器翻译任务中的经典方法。然而，它们在建模文本长程依赖方面都存在一定的局限性。\n\n- 对于卷积神经网络来说，受限的上下文窗口在建模长文本方面天然地存在不足。如果要对长距离依赖进行描述，需要多层卷积操作，而且不同层之间信息传递也可能有损失，这些都限制了模型的能力。\n- 而对于循环神经网络来说，上下文的语义依赖是通过维护循环单元中的隐状态实现的。在编码过程中，每一个时间步的输入建模都涉及到对隐藏状态的修改。随着序列长度的增加，编码在隐藏状态中的序列早期的上下文信息被逐渐遗忘。尽管注意力机制的引入在一定程度上缓解了这个问题，但循环网络在编码效率方面仍存在很大的不足之处。由于编码端和解码端的每一个时间步的隐藏状态都依赖于前一时间步的计算结果，这就造成了在训练和推断阶段的低效。\n- 为了更好地描述文字序列，谷歌的研究人员在 2017 年提出了一种新的模型 Transformer。\n\nTransformer 在原论文中第一次提出就是将其应用到机器翻译领域，它的出现使得机器翻译的性能和效率迈向了一个新的阶段。它摒弃了循环结构，并完全通过注意力机制完成对源语言序列和目标语言序列全局依赖的建模。在抽取每个单词的上下文特征时，Transformer 通过自注意力机制（self-attention）衡量上下文中每一个单词对当前单词的重要程度。在这个过程当中没有任何的循环单元参与计算。这种高度可并行化的编码过程使得模型的运行变得十分高效。\n\nTransformer的主要组件包括编码器(Encoder)、解码器(Decoder)和注意力层。其核心是利用多头自注意力机制（Multi-Head Self-Attention），使每个位置的表示不仅依赖于当前位置，还能够直接获取其他位置的表示。自从提出以来，Transformer模型在机器翻译、文本生成等自然语言处理任务中均取得了突破性进展，成为NLP领域新的主流模型。\n\n从宏观角度来看，Transformer的编码器是由多个相同的层叠加而成的，每个层都有两个子层（子层表示为sublayer）。第⼀个子层是多头自注意力（multi-head self-attention）汇聚；第二个子层是基于位置的前馈网络（positionwise feed-forward network）。\n\n``` python\n# 位置编码\nclass PositionalEncoding(nn.Module):\n    def __init__(self, d_model, dropout=0.1, max_len=5000):\n        super(PositionalEncoding, self).__init__()\n        self.dropout = nn.Dropout(p=dropout)\n\n        pe = torch.zeros(max_len, d_model)\n        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)\n        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-math.log(10000.0) / d_model))\n        pe[:, 0::2] = torch.sin(position * div_term)\n        pe[:, 1::2] = torch.cos(position * div_term)\n        pe = pe.unsqueeze(0).transpose(0, 1)\n        self.register_buffer('pe', pe)\n\n    def forward(self, x):\n        x = x + self.pe[:x.size(0), :]\n        return self.dropout(x)\n\n# Transformer\nclass TransformerModel(nn.Module):\n    def __init__(self, src_vocab, tgt_vocab, d_model, nhead, num_encoder_layers, num_decoder_layers, dim_feedforward, dropout):\n        super(TransformerModel, self).__init__()\n        self.transformer = nn.Transformer(d_model, nhead, num_encoder_layers, num_decoder_layers, dim_feedforward, dropout)\n        self.src_embedding = nn.Embedding(len(src_vocab), d_model)\n        self.tgt_embedding = nn.Embedding(len(tgt_vocab), d_model)\n        self.positional_encoding = PositionalEncoding(d_model, dropout)\n        self.fc_out = nn.Linear(d_model, len(tgt_vocab))\n        self.src_vocab = src_vocab\n        self.tgt_vocab = tgt_vocab\n        self.d_model = d_model\n\n    def forward(self, src, tgt):\n        # 调整src和tgt的维度\n        src = src.transpose(0, 1)  # (seq_len, batch_size)\n        tgt = tgt.transpose(0, 1)  # (seq_len, batch_size)\n\n        src_mask = self.transformer.generate_square_subsequent_mask(src.size(0)).to(src.device)\n        tgt_mask = self.transformer.generate_square_subsequent_mask(tgt.size(0)).to(tgt.device)\n\n        src_padding_mask = (src == self.src_vocab['<pad>']).transpose(0, 1)\n        tgt_padding_mask = (tgt == self.tgt_vocab['<pad>']).transpose(0, 1)\n\n        src_embedded = self.positional_encoding(self.src_embedding(src) * math.sqrt(self.d_model))\n        tgt_embedded = self.positional_encoding(self.tgt_embedding(tgt) * math.sqrt(self.d_model))\n\n        output = self.transformer(src_embedded, tgt_embedded,\n                                  src_mask, tgt_mask, None, src_padding_mask, tgt_padding_mask, src_padding_mask)\n        return self.fc_out(output).transpose(0, 1)\n```\n\n### 上分技巧\n\n- 最简单的就是调参，将 epochs 调大一点，使用全部训练集，以及调整模型的参数，如head、layers等。如果数据量允许，增加模型的深度（更多的编码器/解码器层）或宽度（更大的隐藏层尺寸），这通常可以提高模型的表达能力和翻译质量，尤其是在处理复杂或专业内容时。\n- 加入术语词典，这是在此竞赛中比较有效的方法，加入术语词典的方法策略也有很多，如：\n  - 在模型生成的翻译输出中替换术语，这是最简单的方法\n  - 整合到数据预处理流程，确保它们在翻译中保持一致\n  - 在模型内部动态地调整术语的嵌入，这涉及到在模型中加入一个额外的层，该层负责查找术语词典中的术语，并为其生成专门的嵌入向量，然后将这些向量与常规的词嵌入结合使用\n- 认真做数据清洗\n\n- 数据扩增：\n  - 回译（back-translation）：将源语言文本先翻译成目标语言，再将目标语言文本翻译回源语言，生成的新文本作为额外的训练数据\n  - 同义词替换：随机选择句子中的词，并用其同义词替换\n  - 使用句法分析和语义解析技术重新表述句子，保持原意不变\n  - 将文本翻译成多种语言后再翻译回原语言，以获得多样化翻译\n- 采用更精细的学习率调度策略（baseline我们使用的是固定学习率）：\n  - Noam Scheduler：结合了warmup（预热）阶段和衰减阶段\n  - Step Decay：最简单的一种学习率衰减策略，每隔一定数量的epoch，学习率按固定比例衰减\n  - Cosine Annealing：学习率随周期性变化，通常从初始值下降到接近零，然后再逐渐上升\n\n- 集成学习：训练多个不同初始化或架构的模型，并使用集成方法（如投票或平均）来产生最终翻译。这可以减少单一模型的过拟合风险，提高翻译的稳定性。","slug":"机器翻译赛-seq2seq与transformer","published":1,"updated":"2024-12-27T14:38:17.736Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfo003amcuygnt98amf","content":"<h2 id=\"seq2seq架构\"><a class=\"anchor\" href=\"#seq2seq架构\">#</a> Seq2Seq 架构</h2>\n<p>baseline 代码中实现了一个经典的序列到序列 (Seq2Seq) 模型，中间层使用的 GRU 网络，并且网络中加入了注意力机制 (Attention Mechanism)</p>\n<p>编码器将长度可变的输入序列转换成 形状固定的上下文变量， 并且将输入序列的信息在该上下文变量中进行编码。</p>\n<p>让我们实现循环神经网络编码器。 注意，我们使用了嵌入层（embedding layer） 来获得输入序列中每个词元的特征向量。 嵌入层的权重是一个矩阵， 其行数等于输入词表的大小（vocab_size）， 其列数等于特征向量的维度（embed_size）。 对于任意输入词元的索引 i ， 嵌入层获取权重矩阵的第 i 行（从 0 开始）以返回其特征向量。 另外，本文选择了一个多层门控循环单元来实现编码器。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Seq2SeqEncoder</span><span class=\"token punctuation\">(</span>d2l<span class=\"token punctuation\">.</span>Encoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用于序列到序列学习的循环神经网络编码器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 dropout<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Seq2SeqEncoder<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 嵌入层</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rnn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">(</span>embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                          dropout<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># 输出 'X' 的形状：(batch_size,num_steps,embed_size)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        X <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>embedding<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\"># 在循环神经网络模型中，第一个轴对应于时间步</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        X <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\"># 如果未提及状态，则默认为 0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rnn<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\"># output 的形状：(num_steps,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\"># state 的形状：(num_layers,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">,</span> state</pre></td></tr></table></figure><p>下面，我们实例化上述编码器的实现： 我们使用一个两层门控循环单元编码器，其隐藏单元数为 16。 给定一小批量的输入序列 X（批量大小为 4，时间步为 7）。 在完成所有时间步后， 最后一层的隐状态的输出是一个张量（output 由编码器的循环层返回）， 其形状为（时间步数，批量大小，隐藏单元数）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>encoder <span class=\"token operator\">=</span> Seq2SeqEncoder<span class=\"token punctuation\">(</span>vocab_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> num_hiddens<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                         num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>encoder<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>torch.Size([7, 4, 16])</code></p>\n<p>由于这里使用的是门控循环单元， 所以在最后一个时间步的多层隐状态的形状是 （隐藏层的数量，批量大小，隐藏单元的数量）。 如果使用长短期记忆网络，state 中还将包含记忆单元信息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>state<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>torch.Size([2, 4, 16])</code></p>\n<p>当实现解码器时， 我们直接使用编码器最后一个时间步的隐状态来初始化解码器的隐状态。 这就要求使用循环神经网络实现的编码器和解码器具有相同数量的层和隐藏单元。 为了进一步包含经过编码的输入序列的信息， 上下文变量在所有的时间步与解码器的输入进行拼接（concatenate）。 为了预测输出词元的概率分布， 在循环神经网络解码器的最后一层使用全连接层来变换隐状态。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Seq2SeqDecoder</span><span class=\"token punctuation\">(</span>d2l<span class=\"token punctuation\">.</span>Decoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用于序列到序列学习的循环神经网络解码器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 dropout<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Seq2SeqDecoder<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rnn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">(</span>embed_size <span class=\"token operator\">+</span> num_hiddens<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          dropout<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>dense <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>num_hiddens<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">init_state</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> enc_outputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> enc_outputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\"># 输出 'X' 的形状：(batch_size,num_steps,embed_size)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        X <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>embedding<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\"># 广播 context，使其具有与 X 相同的 num_steps</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        context <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>repeat<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        X_and_context <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rnn<span class=\"token punctuation\">(</span>X_and_context<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\"># output 的形状：(batch_size,num_steps,vocab_size)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># state 的形状：(num_layers,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">,</span> state</pre></td></tr></table></figure><p>下面，我们用与前面提到的编码器中相同的超参数来实例化解码器。 如我们所见，解码器的输出形状变为（批量大小，时间步数，词表大小）， 其中张量的最后一个维度存储预测的词元分布。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>decoder <span class=\"token operator\">=</span> Seq2SeqDecoder<span class=\"token punctuation\">(</span>vocab_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> num_hiddens<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                         num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>decoder<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>state <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">.</span>init_state<span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>(torch.Size([4, 7, 10]), torch.Size([2, 4, 16]))</code></p>\n<p>上述循环神经网络 “编码器－解码器” 模型中的各层如:</p>\n<br>\n<div align=\"center\">\n    <style>.evmbcegufjzv{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/01.png\" class=\"evmbcegufjzv\">\n</div>\n<br>\n<p>在每个时间步，解码器预测了输出词元的概率分布。 类似于语言模型，可以使用 softmax 来获得分布， 并通过计算交叉熵损失函数来进行优化。<br />\n特定的填充词元被添加到序列的末尾， 因此不同长度的序列可以以相同形状的小批量加载。 但是，我们应该将填充词元的预测排除在损失函数的计算之外。<br />\n为此，我们可以使用下面的 sequence_mask 函数 通过零值化屏蔽不相关的项， 以便后面任何不相关预测的计算都是与零的乘积，结果都等于零。 例如，如果两个序列的有效长度（不包括填充词元）分别为 1 和 2， 则第一个序列的第一项和第二个序列的前两项之后的剩余项将被清除为零。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sequence_mask</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"在序列中屏蔽不相关的项\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    maxlen <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mask <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        device<span class=\"token operator\">=</span>X<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> valid_len<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> X</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sequence_mask<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tensor([[1, 0, 0],         [4, 5, 0]])</code></p>\n<p>我们还可以使用此函数屏蔽最后几个轴上的所有项。如果愿意，也可以使用指定的非零值来替换这些项。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sequence_mask<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>`<br />\ntensor([[[ 1.,  1.,  1.,  1.],<br />\n[-1., -1., -1., -1.],<br />\n[-1., -1., -1., -1.]],</p>\n<pre><code>    [[ 1.,  1.,  1.,  1.],\n     [ 1.,  1.,  1.,  1.],\n     [-1., -1., -1., -1.]]])\n</code></pre>\n<p>`</p>\n<p>现在，我们可以通过扩展 softmax 交叉熵损失函数来遮蔽不相关的预测。 最初，所有预测词元的掩码都设置为 1。 一旦给定了有效长度，与填充词元对应的掩码将被设置为 0。 最后，将所有词元的损失乘以掩码，以过滤掉损失中填充词元产生的不相关预测。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MaskedSoftmaxCELoss</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"带遮蔽的softmax交叉熵损失函数\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># pred 的形状：(batch_size,num_steps,vocab_size)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># label 的形状：(batch_size,num_steps)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># valid_len 的形状：(batch_size,)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pred<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        weights <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        weights <span class=\"token operator\">=</span> sequence_mask<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>reduction<span class=\"token operator\">=</span><span class=\"token string\">'none'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        unweighted_loss <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MaskedSoftmaxCELoss<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            pred<span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        weighted_loss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>unweighted_loss <span class=\"token operator\">*</span> weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> weighted_loss</pre></td></tr></table></figure><p>我们可以创建三个相同的序列来进行代码健全性检查， 然后分别指定这些序列的有效长度为 4、2 和 0。 结果就是，第一个序列的损失应为第二个序列的两倍，而第三个序列的损失应为零。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loss <span class=\"token operator\">=</span> MaskedSoftmaxCELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>loss<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tensor([2.3026, 1.1513, 0.0000])</code></p>\n<p>在下面的循环训练过程中，特定的序列开始词元（“<bos>”）和 原始的输出序列（不包括序列结束词元 “<eos>”） 拼接在一起作为解码器的输入。 这被称为强制教学（teacher forcing）， 因为原始的输出序列（词元的标签）被送入解码器。 或者，将来自上一个时间步的预测得到的词元作为解码器的当前输入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">train_seq2seq</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> data_iter<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"训练序列到序列模型\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">xavier_init_weights</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>xavier_uniform_<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> m<span class=\"token punctuation\">.</span>_flat_weights_names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token string\">\"weight\"</span> <span class=\"token keyword\">in</span> param<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    nn<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>xavier_uniform_<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_parameters<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>xavier_init_weights<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    net<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>lr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    loss <span class=\"token operator\">=</span> MaskedSoftmaxCELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    net<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    animator <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Animator<span class=\"token punctuation\">(</span>xlabel<span class=\"token operator\">=</span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">,</span> ylabel<span class=\"token operator\">=</span><span class=\"token string\">'loss'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                     xlim<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        timer <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        metric <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Accumulator<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 训练损失总和，词元数量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> batch <span class=\"token keyword\">in</span> data_iter<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            X<span class=\"token punctuation\">,</span> X_valid_len<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> Y_valid_len <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> batch<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            bos <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;bos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> Y<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                          device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            dec_input <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>bos<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 强制教学</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            Y_hat<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> dec_input<span class=\"token punctuation\">,</span> X_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            l <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">(</span>Y_hat<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> Y_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            l<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 损失函数的标量进行 “反向传播”</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            d2l<span class=\"token punctuation\">.</span>grad_clipping<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            num_tokens <span class=\"token operator\">=</span> Y_valid_len<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                metric<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> num_tokens<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            animator<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'loss </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.3f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> timer<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> '</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token string-interpolation\"><span class=\"token string\">f'tokens/sec on </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，在机器翻译数据集上，我们可以 创建和训练一个循环神经网络 “编码器－解码器” 模型用于序列到序列的学习。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span> dropout <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>batch_size<span class=\"token punctuation\">,</span> num_steps <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> device <span class=\"token operator\">=</span> <span class=\"token number\">0.005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> d2l<span class=\"token punctuation\">.</span>try_gpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>train_iter<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>load_data_nmt<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>encoder <span class=\"token operator\">=</span> Seq2SeqEncoder<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>decoder <span class=\"token operator\">=</span> Seq2SeqDecoder<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>net <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>EncoderDecoder<span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> decoder<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>train_seq2seq<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> train_iter<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了采用一个接着一个词元的方式预测输出序列， 每个解码器当前时间步的输入都将来自于前一时间步的预测词元。 与训练类似，序列开始词元（“<bos>”） 在初始时间步被输入到解码器中。 该预测过程如 图所示， 当输出序列的预测遇到序列结束词元（“<eos>”）时，预测就结束了。</p>\n<br>\n<div align=\"center\">\n    <style>.gaiiejmjeeeq{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/02.png\" class=\"gaiiejmjeeeq\">\n</div>\n<br>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">predict_seq2seq</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> src_sentence<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    device<span class=\"token punctuation\">,</span> save_attention_weights<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"序列到序列模型的预测\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 在预测时将 net 设置为评估模式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    src_tokens <span class=\"token operator\">=</span> src_vocab<span class=\"token punctuation\">[</span>src_sentence<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;eos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    enc_valid_len <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    src_tokens <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>truncate_pad<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 添加批量轴</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    enc_X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    enc_outputs <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">(</span>enc_X<span class=\"token punctuation\">,</span> enc_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    dec_state <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>init_state<span class=\"token punctuation\">(</span>enc_outputs<span class=\"token punctuation\">,</span> enc_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 添加批量轴</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    dec_X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">[</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;bos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    output_seq<span class=\"token punctuation\">,</span> attention_weight_seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_steps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Y<span class=\"token punctuation\">,</span> dec_state <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">(</span>dec_X<span class=\"token punctuation\">,</span> dec_state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        dec_X <span class=\"token operator\">=</span> Y<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        pred <span class=\"token operator\">=</span> dec_X<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\"># 保存注意力权重（稍后讨论）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> save_attention_weights<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            attention_weight_seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>attention_weights<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\"># 一旦序列结束词元被预测，输出序列的生成就完成了</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> pred <span class=\"token operator\">==</span> tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;eos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        output_seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">.</span>to_tokens<span class=\"token punctuation\">(</span>output_seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> attention_weight_seq</pre></td></tr></table></figure><p>BLUE 的计算代码如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">bleu</span><span class=\"token punctuation\">(</span>pred_seq<span class=\"token punctuation\">,</span> label_seq<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#@save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"计算BLEU\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    pred_tokens<span class=\"token punctuation\">,</span> label_tokens <span class=\"token operator\">=</span> pred_seq<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label_seq<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    len_pred<span class=\"token punctuation\">,</span> len_label <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>label_tokens<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    score <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> len_label <span class=\"token operator\">/</span> len_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        num_matches<span class=\"token punctuation\">,</span> label_subs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>len_label <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>label_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>len_pred <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                num_matches <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        score <span class=\"token operator\">*=</span> math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>num_matches <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>len_pred <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> score</pre></td></tr></table></figure><p>最后，利用训练好的循环神经网络 “编码器－解码器” 模型， 将几个英语句子翻译成法语，并计算 BLEU 的最终结果。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>engs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'go .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i lost .\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'he\\'s calm .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i\\'m home .'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fras <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'va !'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j\\'ai perdu .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'il est calme .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'je suis chez moi .'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> eng<span class=\"token punctuation\">,</span> fra <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>engs<span class=\"token punctuation\">,</span> fras<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    translation<span class=\"token punctuation\">,</span> attention_weight_seq <span class=\"token operator\">=</span> predict_seq2seq<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        net<span class=\"token punctuation\">,</span> eng<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>eng<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> => </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>translation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, bleu </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>bleu<span class=\"token punctuation\">(</span>translation<span class=\"token punctuation\">,</span> fra<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.3f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>go . =&gt; va !, bleu 1.000 i lost . =&gt; j'ai perdu ., bleu 1.000 he's calm . =&gt; il est riche ., bleu 0.658 i'm home . =&gt; je suis en retard ?, bleu 0.447</code></p>\n<h3 id=\"seq2seq-小结\"><a class=\"anchor\" href=\"#seq2seq-小结\">#</a> Seq2Seq 小结</h3>\n<ul>\n<li>\n<p>根据 “编码器 - 解码器” 架构的设计， 我们可以使用两个循环神经网络来设计一个序列到序列学习的模型。</p>\n</li>\n<li>\n<p>在实现编码器和解码器时，我们可以使用多层循环神经网络。</p>\n</li>\n<li>\n<p>我们可以使用遮蔽来过滤不相关的计算，例如在计算损失时。</p>\n</li>\n<li>\n<p>在 “编码器－解码器” 训练中，强制教学方法将原始输出序列（而非预测结果）输入解码器。</p>\n</li>\n<li>\n<p>BLEU 是一种常用的评估方法，它通过测量预测序列和标签序列之间的 n 元语法的匹配度来评估预测。</p>\n</li>\n</ul>\n<h3 id=\"transformer\"><a class=\"anchor\" href=\"#transformer\">#</a> Transformer</h3>\n<p>Transformer 架构与论文精讲已经在前面的文章中阐述过了。</p>\n<p>基于循环或卷积神经网络的序列到序列建模方法是现存机器翻译任务中的经典方法。然而，它们在建模文本长程依赖方面都存在一定的局限性。</p>\n<ul>\n<li>对于卷积神经网络来说，受限的上下文窗口在建模长文本方面天然地存在不足。如果要对长距离依赖进行描述，需要多层卷积操作，而且不同层之间信息传递也可能有损失，这些都限制了模型的能力。</li>\n<li>而对于循环神经网络来说，上下文的语义依赖是通过维护循环单元中的隐状态实现的。在编码过程中，每一个时间步的输入建模都涉及到对隐藏状态的修改。随着序列长度的增加，编码在隐藏状态中的序列早期的上下文信息被逐渐遗忘。尽管注意力机制的引入在一定程度上缓解了这个问题，但循环网络在编码效率方面仍存在很大的不足之处。由于编码端和解码端的每一个时间步的隐藏状态都依赖于前一时间步的计算结果，这就造成了在训练和推断阶段的低效。</li>\n<li>为了更好地描述文字序列，谷歌的研究人员在 2017 年提出了一种新的模型 Transformer。</li>\n</ul>\n<p>Transformer 在原论文中第一次提出就是将其应用到机器翻译领域，它的出现使得机器翻译的性能和效率迈向了一个新的阶段。它摒弃了循环结构，并完全通过注意力机制完成对源语言序列和目标语言序列全局依赖的建模。在抽取每个单词的上下文特征时，Transformer 通过自注意力机制（self-attention）衡量上下文中每一个单词对当前单词的重要程度。在这个过程当中没有任何的循环单元参与计算。这种高度可并行化的编码过程使得模型的运行变得十分高效。</p>\n<p>Transformer 的主要组件包括编码器 (Encoder)、解码器 (Decoder) 和注意力层。其核心是利用多头自注意力机制（Multi-Head Self-Attention），使每个位置的表示不仅依赖于当前位置，还能够直接获取其他位置的表示。自从提出以来，Transformer 模型在机器翻译、文本生成等自然语言处理任务中均取得了突破性进展，成为 NLP 领域新的主流模型。</p>\n<p>从宏观角度来看，Transformer 的编码器是由多个相同的层叠加而成的，每个层都有两个子层（子层表示为 sublayer）。第⼀个子层是多头自注意力（multi-head self-attention）汇聚；第二个子层是基于位置的前馈网络（positionwise feed-forward network）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 位置编码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PositionalEncoding</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> dropout<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> max_len<span class=\"token operator\">=</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PositionalEncoding<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>dropout <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        pe <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>max_len<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        position <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max_len<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        div_term <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token number\">10000.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>position <span class=\"token operator\">*</span> div_term<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>position <span class=\"token operator\">*</span> div_term<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pe <span class=\"token operator\">=</span> pe<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>register_buffer<span class=\"token punctuation\">(</span><span class=\"token string\">'pe'</span><span class=\"token punctuation\">,</span> pe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dropout<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Transformer</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TransformerModel</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> nhead<span class=\"token punctuation\">,</span> num_encoder_layers<span class=\"token punctuation\">,</span> num_decoder_layers<span class=\"token punctuation\">,</span> dim_feedforward<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TransformerModel<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Transformer<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> nhead<span class=\"token punctuation\">,</span> num_encoder_layers<span class=\"token punctuation\">,</span> num_decoder_layers<span class=\"token punctuation\">,</span> dim_feedforward<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        self<span class=\"token punctuation\">.</span>src_embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        self<span class=\"token punctuation\">.</span>tgt_embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>positional_encoding <span class=\"token operator\">=</span> PositionalEncoding<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc_out <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        self<span class=\"token punctuation\">.</span>src_vocab <span class=\"token operator\">=</span> src_vocab</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        self<span class=\"token punctuation\">.</span>tgt_vocab <span class=\"token operator\">=</span> tgt_vocab</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        self<span class=\"token punctuation\">.</span>d_model <span class=\"token operator\">=</span> d_model</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> tgt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\"># 调整 src 和 tgt 的维度</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (seq_len, batch_size)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        tgt <span class=\"token operator\">=</span> tgt<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (seq_len, batch_size)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        src_mask <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span>generate_square_subsequent_mask<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        tgt_mask <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span>generate_square_subsequent_mask<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        src_padding_mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>src <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        tgt_padding_mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tgt <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        src_embedded <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>positional_encoding<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>src_embedding<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        tgt_embedded <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>positional_encoding<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tgt_embedding<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">(</span>src_embedded<span class=\"token punctuation\">,</span> tgt_embedded<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                                  src_mask<span class=\"token punctuation\">,</span> tgt_mask<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> src_padding_mask<span class=\"token punctuation\">,</span> tgt_padding_mask<span class=\"token punctuation\">,</span> src_padding_mask<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>fc_out<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"上分技巧\"><a class=\"anchor\" href=\"#上分技巧\">#</a> 上分技巧</h3>\n<ul>\n<li>\n<p>最简单的就是调参，将 epochs 调大一点，使用全部训练集，以及调整模型的参数，如 head、layers 等。如果数据量允许，增加模型的深度（更多的编码器 / 解码器层）或宽度（更大的隐藏层尺寸），这通常可以提高模型的表达能力和翻译质量，尤其是在处理复杂或专业内容时。</p>\n</li>\n<li>\n<p>加入术语词典，这是在此竞赛中比较有效的方法，加入术语词典的方法策略也有很多，如：</p>\n<ul>\n<li>在模型生成的翻译输出中替换术语，这是最简单的方法</li>\n<li>整合到数据预处理流程，确保它们在翻译中保持一致</li>\n<li>在模型内部动态地调整术语的嵌入，这涉及到在模型中加入一个额外的层，该层负责查找术语词典中的术语，并为其生成专门的嵌入向量，然后将这些向量与常规的词嵌入结合使用</li>\n</ul>\n</li>\n<li>\n<p>认真做数据清洗</p>\n</li>\n<li>\n<p>数据扩增：</p>\n<ul>\n<li>回译（back-translation）：将源语言文本先翻译成目标语言，再将目标语言文本翻译回源语言，生成的新文本作为额外的训练数据</li>\n<li>同义词替换：随机选择句子中的词，并用其同义词替换</li>\n<li>使用句法分析和语义解析技术重新表述句子，保持原意不变</li>\n<li>将文本翻译成多种语言后再翻译回原语言，以获得多样化翻译</li>\n</ul>\n</li>\n<li>\n<p>采用更精细的学习率调度策略（baseline 我们使用的是固定学习率）：</p>\n<ul>\n<li>Noam Scheduler：结合了 warmup（预热）阶段和衰减阶段</li>\n<li>Step Decay：最简单的一种学习率衰减策略，每隔一定数量的 epoch，学习率按固定比例衰减</li>\n<li>Cosine Annealing：学习率随周期性变化，通常从初始值下降到接近零，然后再逐渐上升</li>\n</ul>\n</li>\n<li>\n<p>集成学习：训练多个不同初始化或架构的模型，并使用集成方法（如投票或平均）来产生最终翻译。这可以减少单一模型的过拟合风险，提高翻译的稳定性。</p>\n</li>\n</ul>\n","length":12143,"excerpt":"","more":"<h2 id=\"seq2seq架构\"><a class=\"anchor\" href=\"#seq2seq架构\">#</a> Seq2Seq 架构</h2>\n<p>baseline 代码中实现了一个经典的序列到序列 (Seq2Seq) 模型，中间层使用的 GRU 网络，并且网络中加入了注意力机制 (Attention Mechanism)</p>\n<p>编码器将长度可变的输入序列转换成 形状固定的上下文变量， 并且将输入序列的信息在该上下文变量中进行编码。</p>\n<p>让我们实现循环神经网络编码器。 注意，我们使用了嵌入层（embedding layer） 来获得输入序列中每个词元的特征向量。 嵌入层的权重是一个矩阵， 其行数等于输入词表的大小（vocab_size）， 其列数等于特征向量的维度（embed_size）。 对于任意输入词元的索引 i ， 嵌入层获取权重矩阵的第 i 行（从 0 开始）以返回其特征向量。 另外，本文选择了一个多层门控循环单元来实现编码器。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Seq2SeqEncoder</span><span class=\"token punctuation\">(</span>d2l<span class=\"token punctuation\">.</span>Encoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用于序列到序列学习的循环神经网络编码器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 dropout<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Seq2SeqEncoder<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\"># 嵌入层</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rnn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">(</span>embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                          dropout<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\"># 输出 'X' 的形状：(batch_size,num_steps,embed_size)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        X <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>embedding<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\"># 在循环神经网络模型中，第一个轴对应于时间步</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        X <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\"># 如果未提及状态，则默认为 0</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rnn<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token comment\"># output 的形状：(num_steps,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\"># state 的形状：(num_layers,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">,</span> state</pre></td></tr></table></figure><p>下面，我们实例化上述编码器的实现： 我们使用一个两层门控循环单元编码器，其隐藏单元数为 16。 给定一小批量的输入序列 X（批量大小为 4，时间步为 7）。 在完成所有时间步后， 最后一层的隐状态的输出是一个张量（output 由编码器的循环层返回）， 其形状为（时间步数，批量大小，隐藏单元数）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>encoder <span class=\"token operator\">=</span> Seq2SeqEncoder<span class=\"token punctuation\">(</span>vocab_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> num_hiddens<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                         num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>encoder<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> encoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>torch.Size([7, 4, 16])</code></p>\n<p>由于这里使用的是门控循环单元， 所以在最后一个时间步的多层隐状态的形状是 （隐藏层的数量，批量大小，隐藏单元的数量）。 如果使用长短期记忆网络，state 中还将包含记忆单元信息。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>state<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>torch.Size([2, 4, 16])</code></p>\n<p>当实现解码器时， 我们直接使用编码器最后一个时间步的隐状态来初始化解码器的隐状态。 这就要求使用循环神经网络实现的编码器和解码器具有相同数量的层和隐藏单元。 为了进一步包含经过编码的输入序列的信息， 上下文变量在所有的时间步与解码器的输入进行拼接（concatenate）。 为了预测输出词元的概率分布， 在循环神经网络解码器的最后一层使用全连接层来变换隐状态。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Seq2SeqDecoder</span><span class=\"token punctuation\">(</span>d2l<span class=\"token punctuation\">.</span>Decoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"用于序列到序列学习的循环神经网络解码器\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                 dropout<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>Seq2SeqDecoder<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span>vocab_size<span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        self<span class=\"token punctuation\">.</span>rnn <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">(</span>embed_size <span class=\"token operator\">+</span> num_hiddens<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                          dropout<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>dense <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>num_hiddens<span class=\"token punctuation\">,</span> vocab_size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">init_state</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> enc_outputs<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> enc_outputs<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> X<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\"># 输出 'X' 的形状：(batch_size,num_steps,embed_size)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        X <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>embedding<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\"># 广播 context，使其具有与 X 相同的 num_steps</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        context <span class=\"token operator\">=</span> state<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>repeat<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        X_and_context <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>rnn<span class=\"token punctuation\">(</span>X_and_context<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dense<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\"># output 的形状：(batch_size,num_steps,vocab_size)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\"># state 的形状：(num_layers,batch_size,num_hiddens)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> output<span class=\"token punctuation\">,</span> state</pre></td></tr></table></figure><p>下面，我们用与前面提到的编码器中相同的超参数来实例化解码器。 如我们所见，解码器的输出形状变为（批量大小，时间步数，词表大小）， 其中张量的最后一个维度存储预测的词元分布。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>decoder <span class=\"token operator\">=</span> Seq2SeqDecoder<span class=\"token punctuation\">(</span>vocab_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> num_hiddens<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                         num_layers<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>decoder<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>state <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">.</span>init_state<span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>output<span class=\"token punctuation\">,</span> state <span class=\"token operator\">=</span> decoder<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>output<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">.</span>shape</pre></td></tr></table></figure><p><code>(torch.Size([4, 7, 10]), torch.Size([2, 4, 16]))</code></p>\n<p>上述循环神经网络 “编码器－解码器” 模型中的各层如:</p>\n<br>\n<div align=\"center\">\n    <style>.evmbcegufjzv{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/01.png\" class=\"evmbcegufjzv\">\n</div>\n<br>\n<p>在每个时间步，解码器预测了输出词元的概率分布。 类似于语言模型，可以使用 softmax 来获得分布， 并通过计算交叉熵损失函数来进行优化。<br />\n特定的填充词元被添加到序列的末尾， 因此不同长度的序列可以以相同形状的小批量加载。 但是，我们应该将填充词元的预测排除在损失函数的计算之外。<br />\n为此，我们可以使用下面的 sequence_mask 函数 通过零值化屏蔽不相关的项， 以便后面任何不相关预测的计算都是与零的乘积，结果都等于零。 例如，如果两个序列的有效长度（不包括填充词元）分别为 1 和 2， 则第一个序列的第一项和第二个序列的前两项之后的剩余项将被清除为零。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">sequence_mask</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"在序列中屏蔽不相关的项\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    maxlen <span class=\"token operator\">=</span> X<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    mask <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                        device<span class=\"token operator\">=</span>X<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> valid_len<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    X<span class=\"token punctuation\">[</span><span class=\"token operator\">~</span>mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> X</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>sequence_mask<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tensor([[1, 0, 0],         [4, 5, 0]])</code></p>\n<p>我们还可以使用此函数屏蔽最后几个轴上的所有项。如果愿意，也可以使用指定的非零值来替换这些项。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sequence_mask<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> value<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>`<br />\ntensor([[[ 1.,  1.,  1.,  1.],<br />\n[-1., -1., -1., -1.],<br />\n[-1., -1., -1., -1.]],</p>\n<pre><code>    [[ 1.,  1.,  1.,  1.],\n     [ 1.,  1.,  1.,  1.],\n     [-1., -1., -1., -1.]]])\n</code></pre>\n<p>`</p>\n<p>现在，我们可以通过扩展 softmax 交叉熵损失函数来遮蔽不相关的预测。 最初，所有预测词元的掩码都设置为 1。 一旦给定了有效长度，与填充词元对应的掩码将被设置为 0。 最后，将所有词元的损失乘以掩码，以过滤掉损失中填充词元产生的不相关预测。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">MaskedSoftmaxCELoss</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>CrossEntropyLoss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"带遮蔽的softmax交叉熵损失函数\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># pred 的形状：(batch_size,num_steps,vocab_size)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># label 的形状：(batch_size,num_steps)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># valid_len 的形状：(batch_size,)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pred<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        weights <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        weights <span class=\"token operator\">=</span> sequence_mask<span class=\"token punctuation\">(</span>weights<span class=\"token punctuation\">,</span> valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        self<span class=\"token punctuation\">.</span>reduction<span class=\"token operator\">=</span><span class=\"token string\">'none'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        unweighted_loss <span class=\"token operator\">=</span> <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>MaskedSoftmaxCELoss<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            pred<span class=\"token punctuation\">.</span>permute<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        weighted_loss <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>unweighted_loss <span class=\"token operator\">*</span> weights<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> weighted_loss</pre></td></tr></table></figure><p>我们可以创建三个相同的序列来进行代码健全性检查， 然后分别指定这些序列的有效长度为 4、2 和 0。 结果就是，第一个序列的损失应为第二个序列的两倍，而第三个序列的损失应为零。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>loss <span class=\"token operator\">=</span> MaskedSoftmaxCELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>loss<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>tensor([2.3026, 1.1513, 0.0000])</code></p>\n<p>在下面的循环训练过程中，特定的序列开始词元（“<bos>”）和 原始的输出序列（不包括序列结束词元 “<eos>”） 拼接在一起作为解码器的输入。 这被称为强制教学（teacher forcing）， 因为原始的输出序列（词元的标签）被送入解码器。 或者，将来自上一个时间步的预测得到的词元作为解码器的当前输入。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">train_seq2seq</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> data_iter<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"训练序列到序列模型\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">xavier_init_weights</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            nn<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>xavier_uniform_<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> nn<span class=\"token punctuation\">.</span>GRU<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">for</span> param <span class=\"token keyword\">in</span> m<span class=\"token punctuation\">.</span>_flat_weights_names<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token string\">\"weight\"</span> <span class=\"token keyword\">in</span> param<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    nn<span class=\"token punctuation\">.</span>init<span class=\"token punctuation\">.</span>xavier_uniform_<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">.</span>_parameters<span class=\"token punctuation\">[</span>param<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span>xavier_init_weights<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    net<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    optimizer <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span>lr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    loss <span class=\"token operator\">=</span> MaskedSoftmaxCELoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    net<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    animator <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Animator<span class=\"token punctuation\">(</span>xlabel<span class=\"token operator\">=</span><span class=\"token string\">'epoch'</span><span class=\"token punctuation\">,</span> ylabel<span class=\"token operator\">=</span><span class=\"token string\">'loss'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                     xlim<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">for</span> epoch <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_epochs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        timer <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Timer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        metric <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>Accumulator<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 训练损失总和，词元数量</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> batch <span class=\"token keyword\">in</span> data_iter<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            optimizer<span class=\"token punctuation\">.</span>zero_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            X<span class=\"token punctuation\">,</span> X_valid_len<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> Y_valid_len <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> batch<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            bos <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;bos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> Y<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                          device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            dec_input <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>bos<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 强制教学</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            Y_hat<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> net<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> dec_input<span class=\"token punctuation\">,</span> X_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            l <span class=\"token operator\">=</span> loss<span class=\"token punctuation\">(</span>Y_hat<span class=\"token punctuation\">,</span> Y<span class=\"token punctuation\">,</span> Y_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            l<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 损失函数的标量进行 “反向传播”</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            d2l<span class=\"token punctuation\">.</span>grad_clipping<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            num_tokens <span class=\"token operator\">=</span> Y_valid_len<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            optimizer<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">with</span> torch<span class=\"token punctuation\">.</span>no_grad<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                metric<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> num_tokens<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            animator<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>epoch <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'loss </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.3f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>metric<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> timer<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> '</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token string-interpolation\"><span class=\"token string\">f'tokens/sec on </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>现在，在机器翻译数据集上，我们可以 创建和训练一个循环神经网络 “编码器－解码器” 模型用于序列到序列的学习。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span> dropout <span class=\"token operator\">=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>batch_size<span class=\"token punctuation\">,</span> num_steps <span class=\"token operator\">=</span> <span class=\"token number\">64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> device <span class=\"token operator\">=</span> <span class=\"token number\">0.005</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span> d2l<span class=\"token punctuation\">.</span>try_gpu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>train_iter<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>load_data_nmt<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>encoder <span class=\"token operator\">=</span> Seq2SeqEncoder<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>decoder <span class=\"token operator\">=</span> Seq2SeqDecoder<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> embed_size<span class=\"token punctuation\">,</span> num_hiddens<span class=\"token punctuation\">,</span> num_layers<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                        dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>net <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>EncoderDecoder<span class=\"token punctuation\">(</span>encoder<span class=\"token punctuation\">,</span> decoder<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>train_seq2seq<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> train_iter<span class=\"token punctuation\">,</span> lr<span class=\"token punctuation\">,</span> num_epochs<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>为了采用一个接着一个词元的方式预测输出序列， 每个解码器当前时间步的输入都将来自于前一时间步的预测词元。 与训练类似，序列开始词元（“<bos>”） 在初始时间步被输入到解码器中。 该预测过程如 图所示， 当输出序列的预测遇到序列结束词元（“<eos>”）时，预测就结束了。</p>\n<br>\n<div align=\"center\">\n    <style>.gaiiejmjeeeq{}</style><img data-src=\"/2024/08/19/%E6%9C%BA%E5%99%A8%E7%BF%BB%E8%AF%91%E8%B5%9B-seq2seq%E4%B8%8Etransformer/02.png\" class=\"gaiiejmjeeeq\">\n</div>\n<br>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">predict_seq2seq</span><span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">,</span> src_sentence<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                    device<span class=\"token punctuation\">,</span> save_attention_weights<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"序列到序列模型的预测\"\"\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 在预测时将 net 设置为评估模式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    net<span class=\"token punctuation\">.</span><span class=\"token builtin\">eval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    src_tokens <span class=\"token operator\">=</span> src_vocab<span class=\"token punctuation\">[</span>src_sentence<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;eos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    enc_valid_len <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    src_tokens <span class=\"token operator\">=</span> d2l<span class=\"token punctuation\">.</span>truncate_pad<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 添加批量轴</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    enc_X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span>src_tokens<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    enc_outputs <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>encoder<span class=\"token punctuation\">(</span>enc_X<span class=\"token punctuation\">,</span> enc_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    dec_state <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>init_state<span class=\"token punctuation\">(</span>enc_outputs<span class=\"token punctuation\">,</span> enc_valid_len<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 添加批量轴</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    dec_X <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">[</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;bos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">long</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    output_seq<span class=\"token punctuation\">,</span> attention_weight_seq <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>num_steps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        Y<span class=\"token punctuation\">,</span> dec_state <span class=\"token operator\">=</span> net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">(</span>dec_X<span class=\"token punctuation\">,</span> dec_state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\"># 我们使用具有预测最高可能性的词元，作为解码器在下一时间步的输入</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        dec_X <span class=\"token operator\">=</span> Y<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        pred <span class=\"token operator\">=</span> dec_X<span class=\"token punctuation\">.</span>squeeze<span class=\"token punctuation\">(</span>dim<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token comment\"># 保存注意力权重（稍后讨论）</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> save_attention_weights<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            attention_weight_seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>net<span class=\"token punctuation\">.</span>decoder<span class=\"token punctuation\">.</span>attention_weights<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\"># 一旦序列结束词元被预测，输出序列的生成就完成了</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> pred <span class=\"token operator\">==</span> tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;eos>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        output_seq<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">.</span>to_tokens<span class=\"token punctuation\">(</span>output_seq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> attention_weight_seq</pre></td></tr></table></figure><p>BLUE 的计算代码如下</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">bleu</span><span class=\"token punctuation\">(</span>pred_seq<span class=\"token punctuation\">,</span> label_seq<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\">#@save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token triple-quoted-string string\">\"\"\"计算BLEU\"\"\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    pred_tokens<span class=\"token punctuation\">,</span> label_tokens <span class=\"token operator\">=</span> pred_seq<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> label_seq<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    len_pred<span class=\"token punctuation\">,</span> len_label <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>label_tokens<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    score <span class=\"token operator\">=</span> math<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> len_label <span class=\"token operator\">/</span> len_pred<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> n <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        num_matches<span class=\"token punctuation\">,</span> label_subs <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> collections<span class=\"token punctuation\">.</span>defaultdict<span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>len_label <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>label_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>len_pred <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                num_matches <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                label_subs<span class=\"token punctuation\">[</span><span class=\"token string\">' '</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>pred_tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        score <span class=\"token operator\">*=</span> math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span>num_matches <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>len_pred <span class=\"token operator\">-</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span><span class=\"token builtin\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> score</pre></td></tr></table></figure><p>最后，利用训练好的循环神经网络 “编码器－解码器” 模型， 将几个英语句子翻译成法语，并计算 BLEU 的最终结果。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>engs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'go .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i lost .\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'he\\'s calm .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i\\'m home .'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fras <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'va !'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'j\\'ai perdu .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'il est calme .'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'je suis chez moi .'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> eng<span class=\"token punctuation\">,</span> fra <span class=\"token keyword\">in</span> <span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>engs<span class=\"token punctuation\">,</span> fras<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    translation<span class=\"token punctuation\">,</span> attention_weight_seq <span class=\"token operator\">=</span> predict_seq2seq<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        net<span class=\"token punctuation\">,</span> eng<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> num_steps<span class=\"token punctuation\">,</span> device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>eng<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\"> => </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>translation<span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">, bleu </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>bleu<span class=\"token punctuation\">(</span>translation<span class=\"token punctuation\">,</span> fra<span class=\"token punctuation\">,</span> k<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token format-spec\">.3f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>go . =&gt; va !, bleu 1.000 i lost . =&gt; j'ai perdu ., bleu 1.000 he's calm . =&gt; il est riche ., bleu 0.658 i'm home . =&gt; je suis en retard ?, bleu 0.447</code></p>\n<h3 id=\"seq2seq-小结\"><a class=\"anchor\" href=\"#seq2seq-小结\">#</a> Seq2Seq 小结</h3>\n<ul>\n<li>\n<p>根据 “编码器 - 解码器” 架构的设计， 我们可以使用两个循环神经网络来设计一个序列到序列学习的模型。</p>\n</li>\n<li>\n<p>在实现编码器和解码器时，我们可以使用多层循环神经网络。</p>\n</li>\n<li>\n<p>我们可以使用遮蔽来过滤不相关的计算，例如在计算损失时。</p>\n</li>\n<li>\n<p>在 “编码器－解码器” 训练中，强制教学方法将原始输出序列（而非预测结果）输入解码器。</p>\n</li>\n<li>\n<p>BLEU 是一种常用的评估方法，它通过测量预测序列和标签序列之间的 n 元语法的匹配度来评估预测。</p>\n</li>\n</ul>\n<h3 id=\"transformer\"><a class=\"anchor\" href=\"#transformer\">#</a> Transformer</h3>\n<p>Transformer 架构与论文精讲已经在前面的文章中阐述过了。</p>\n<p>基于循环或卷积神经网络的序列到序列建模方法是现存机器翻译任务中的经典方法。然而，它们在建模文本长程依赖方面都存在一定的局限性。</p>\n<ul>\n<li>对于卷积神经网络来说，受限的上下文窗口在建模长文本方面天然地存在不足。如果要对长距离依赖进行描述，需要多层卷积操作，而且不同层之间信息传递也可能有损失，这些都限制了模型的能力。</li>\n<li>而对于循环神经网络来说，上下文的语义依赖是通过维护循环单元中的隐状态实现的。在编码过程中，每一个时间步的输入建模都涉及到对隐藏状态的修改。随着序列长度的增加，编码在隐藏状态中的序列早期的上下文信息被逐渐遗忘。尽管注意力机制的引入在一定程度上缓解了这个问题，但循环网络在编码效率方面仍存在很大的不足之处。由于编码端和解码端的每一个时间步的隐藏状态都依赖于前一时间步的计算结果，这就造成了在训练和推断阶段的低效。</li>\n<li>为了更好地描述文字序列，谷歌的研究人员在 2017 年提出了一种新的模型 Transformer。</li>\n</ul>\n<p>Transformer 在原论文中第一次提出就是将其应用到机器翻译领域，它的出现使得机器翻译的性能和效率迈向了一个新的阶段。它摒弃了循环结构，并完全通过注意力机制完成对源语言序列和目标语言序列全局依赖的建模。在抽取每个单词的上下文特征时，Transformer 通过自注意力机制（self-attention）衡量上下文中每一个单词对当前单词的重要程度。在这个过程当中没有任何的循环单元参与计算。这种高度可并行化的编码过程使得模型的运行变得十分高效。</p>\n<p>Transformer 的主要组件包括编码器 (Encoder)、解码器 (Decoder) 和注意力层。其核心是利用多头自注意力机制（Multi-Head Self-Attention），使每个位置的表示不仅依赖于当前位置，还能够直接获取其他位置的表示。自从提出以来，Transformer 模型在机器翻译、文本生成等自然语言处理任务中均取得了突破性进展，成为 NLP 领域新的主流模型。</p>\n<p>从宏观角度来看，Transformer 的编码器是由多个相同的层叠加而成的，每个层都有两个子层（子层表示为 sublayer）。第⼀个子层是多头自注意力（multi-head self-attention）汇聚；第二个子层是基于位置的前馈网络（positionwise feed-forward network）。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 位置编码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PositionalEncoding</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> dropout<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> max_len<span class=\"token operator\">=</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>PositionalEncoding<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>dropout <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        pe <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>max_len<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        position <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> max_len<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        div_term <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>math<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token number\">10000.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>position <span class=\"token operator\">*</span> div_term<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>cos<span class=\"token punctuation\">(</span>position <span class=\"token operator\">*</span> div_term<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pe <span class=\"token operator\">=</span> pe<span class=\"token punctuation\">.</span>unsqueeze<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        self<span class=\"token punctuation\">.</span>register_buffer<span class=\"token punctuation\">(</span><span class=\"token string\">'pe'</span><span class=\"token punctuation\">,</span> pe<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>pe<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>dropout<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># Transformer</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">TransformerModel</span><span class=\"token punctuation\">(</span>nn<span class=\"token punctuation\">.</span>Module<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> src_vocab<span class=\"token punctuation\">,</span> tgt_vocab<span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">,</span> nhead<span class=\"token punctuation\">,</span> num_encoder_layers<span class=\"token punctuation\">,</span> num_decoder_layers<span class=\"token punctuation\">,</span> dim_feedforward<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token builtin\">super</span><span class=\"token punctuation\">(</span>TransformerModel<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        self<span class=\"token punctuation\">.</span>transformer <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Transformer<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> nhead<span class=\"token punctuation\">,</span> num_encoder_layers<span class=\"token punctuation\">,</span> num_decoder_layers<span class=\"token punctuation\">,</span> dim_feedforward<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        self<span class=\"token punctuation\">.</span>src_embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>src_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        self<span class=\"token punctuation\">.</span>tgt_embedding <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Embedding<span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> d_model<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        self<span class=\"token punctuation\">.</span>positional_encoding <span class=\"token operator\">=</span> PositionalEncoding<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> dropout<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        self<span class=\"token punctuation\">.</span>fc_out <span class=\"token operator\">=</span> nn<span class=\"token punctuation\">.</span>Linear<span class=\"token punctuation\">(</span>d_model<span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>tgt_vocab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        self<span class=\"token punctuation\">.</span>src_vocab <span class=\"token operator\">=</span> src_vocab</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        self<span class=\"token punctuation\">.</span>tgt_vocab <span class=\"token operator\">=</span> tgt_vocab</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        self<span class=\"token punctuation\">.</span>d_model <span class=\"token operator\">=</span> d_model</pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> tgt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\"># 调整 src 和 tgt 的维度</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        src <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (seq_len, batch_size)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        tgt <span class=\"token operator\">=</span> tgt<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># (seq_len, batch_size)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        src_mask <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span>generate_square_subsequent_mask<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        tgt_mask <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">.</span>generate_square_subsequent_mask<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        src_padding_mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>src <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>src_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        tgt_padding_mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tgt <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>tgt_vocab<span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;pad>'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        src_embedded <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>positional_encoding<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>src_embedding<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        tgt_embedded <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>positional_encoding<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>tgt_embedding<span class=\"token punctuation\">(</span>tgt<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> math<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>d_model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        output <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>transformer<span class=\"token punctuation\">(</span>src_embedded<span class=\"token punctuation\">,</span> tgt_embedded<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                                  src_mask<span class=\"token punctuation\">,</span> tgt_mask<span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> src_padding_mask<span class=\"token punctuation\">,</span> tgt_padding_mask<span class=\"token punctuation\">,</span> src_padding_mask<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>fc_out<span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"上分技巧\"><a class=\"anchor\" href=\"#上分技巧\">#</a> 上分技巧</h3>\n<ul>\n<li>\n<p>最简单的就是调参，将 epochs 调大一点，使用全部训练集，以及调整模型的参数，如 head、layers 等。如果数据量允许，增加模型的深度（更多的编码器 / 解码器层）或宽度（更大的隐藏层尺寸），这通常可以提高模型的表达能力和翻译质量，尤其是在处理复杂或专业内容时。</p>\n</li>\n<li>\n<p>加入术语词典，这是在此竞赛中比较有效的方法，加入术语词典的方法策略也有很多，如：</p>\n<ul>\n<li>在模型生成的翻译输出中替换术语，这是最简单的方法</li>\n<li>整合到数据预处理流程，确保它们在翻译中保持一致</li>\n<li>在模型内部动态地调整术语的嵌入，这涉及到在模型中加入一个额外的层，该层负责查找术语词典中的术语，并为其生成专门的嵌入向量，然后将这些向量与常规的词嵌入结合使用</li>\n</ul>\n</li>\n<li>\n<p>认真做数据清洗</p>\n</li>\n<li>\n<p>数据扩增：</p>\n<ul>\n<li>回译（back-translation）：将源语言文本先翻译成目标语言，再将目标语言文本翻译回源语言，生成的新文本作为额外的训练数据</li>\n<li>同义词替换：随机选择句子中的词，并用其同义词替换</li>\n<li>使用句法分析和语义解析技术重新表述句子，保持原意不变</li>\n<li>将文本翻译成多种语言后再翻译回原语言，以获得多样化翻译</li>\n</ul>\n</li>\n<li>\n<p>采用更精细的学习率调度策略（baseline 我们使用的是固定学习率）：</p>\n<ul>\n<li>Noam Scheduler：结合了 warmup（预热）阶段和衰减阶段</li>\n<li>Step Decay：最简单的一种学习率衰减策略，每隔一定数量的 epoch，学习率按固定比例衰减</li>\n<li>Cosine Annealing：学习率随周期性变化，通常从初始值下降到接近零，然后再逐渐上升</li>\n</ul>\n</li>\n<li>\n<p>集成学习：训练多个不同初始化或架构的模型，并使用集成方法（如投票或平均）来产生最终翻译。这可以减少单一模型的过拟合风险，提高翻译的稳定性。</p>\n</li>\n</ul>\n"},{"title":"简单有效的密钥配置教程","date":"2024-12-28T10:20:22.000Z","_content":"\n## 免密登录配置\n\n### 服务器1\n\n``` bash\ncd .ssh\nls\nssh-keygen\nls\n```\n\n然后把.pub文件里的内容放入服务器2的authorized_keys文件里\n\n第一次配置时往往没有authorized_keys文件，需要手动创建，然后修改权限\n\n``` bash\ntouch authorized_keys\nchmod 600 authorized_keys\nchmod 700 ~/.ssh\n```\n\n### 服务器2\n\n和服务器1端的操作类似。\n互相将id_ras.pub文件中的内容复制一份到对方的authorized_keys文件中，就可以互相免密登录了。","source":"_posts/简单有效的密钥配置教程.md","raw":"---\ntitle: 简单有效的密钥配置教程\ndate: 2024-12-28 18:20:22\ncategories:\n- [计算机科学]\ntags:\n- [操作系统]\n---\n\n## 免密登录配置\n\n### 服务器1\n\n``` bash\ncd .ssh\nls\nssh-keygen\nls\n```\n\n然后把.pub文件里的内容放入服务器2的authorized_keys文件里\n\n第一次配置时往往没有authorized_keys文件，需要手动创建，然后修改权限\n\n``` bash\ntouch authorized_keys\nchmod 600 authorized_keys\nchmod 700 ~/.ssh\n```\n\n### 服务器2\n\n和服务器1端的操作类似。\n互相将id_ras.pub文件中的内容复制一份到对方的authorized_keys文件中，就可以互相免密登录了。","slug":"简单有效的密钥配置教程","published":1,"updated":"2024-12-28T10:30:13.122Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfo003dmcuy8q677nig","content":"<h2 id=\"免密登录配置\"><a class=\"anchor\" href=\"#免密登录配置\">#</a> 免密登录配置</h2>\n<h3 id=\"服务器1\"><a class=\"anchor\" href=\"#服务器1\">#</a> 服务器 1</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> .ssh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ssh-keygen</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr></table></figure><p>然后把.pub 文件里的内容放入服务器 2 的 authorized_keys 文件里</p>\n<p>第一次配置时往往没有 authorized_keys 文件，需要手动创建，然后修改权限</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> authorized_keys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> authorized_keys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">700</span> ~/.ssh</pre></td></tr></table></figure><h3 id=\"服务器2\"><a class=\"anchor\" href=\"#服务器2\">#</a> 服务器 2</h3>\n<p>和服务器 1 端的操作类似。<br />\n互相将 id_ras.pub 文件中的内容复制一份到对方的 authorized_keys 文件中，就可以互相免密登录了。</p>\n","length":244,"excerpt":"","more":"<h2 id=\"免密登录配置\"><a class=\"anchor\" href=\"#免密登录配置\">#</a> 免密登录配置</h2>\n<h3 id=\"服务器1\"><a class=\"anchor\" href=\"#服务器1\">#</a> 服务器 1</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> .ssh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ssh-keygen</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ls</span></pre></td></tr></table></figure><p>然后把.pub 文件里的内容放入服务器 2 的 authorized_keys 文件里</p>\n<p>第一次配置时往往没有 authorized_keys 文件，需要手动创建，然后修改权限</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> authorized_keys</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">600</span> authorized_keys</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">chmod</span> <span class=\"token number\">700</span> ~/.ssh</pre></td></tr></table></figure><h3 id=\"服务器2\"><a class=\"anchor\" href=\"#服务器2\">#</a> 服务器 2</h3>\n<p>和服务器 1 端的操作类似。<br />\n互相将 id_ras.pub 文件中的内容复制一份到对方的 authorized_keys 文件中，就可以互相免密登录了。</p>\n"},{"title":"自用常备linux命令","date":"2024-12-28T10:43:12.000Z","_content":"\n## 自用的一些常备linux命令\n\n基本命令如cd ls pwd mkdir rm cp mv touch等\n\n以及如下这些：\n\n``` bash\n# 查看设备空间使用情况\ndf -h\n```\n\n``` bash\n# 查看本计算节点使用情况\ntop\n```\n\n``` bash\n# 查看文件的生成时间戳\nstat <filename>\n```\n\n``` bash\n# 查看进程\nps -ef | grep 'work12.sh'\n```\n\n``` bash\n# 杀死进程\nkill <pid>\n```\n\n``` bash\n# 杀死用户为<username>的进程\npkill -u <username>\n```\n\n``` bash\n# 查看CPU核数\nnproc\n```\n\n``` bash\n# 运行任务\nnohup taskset -c 0-1 sh work1.sh >/dev/null 2>&1 &\nnohup taskset -c 2-3 sh work2.sh >/dev/null 2>&1 &\nnohup taskset -c 4-5 sh work3.sh >/dev/null 2>&1 &\nnohup taskset -c 6-7 sh work4.sh >/dev/null 2>&1 &\nnohup taskset -c 8-9 sh work5.sh >/dev/null 2>&1 &\nnohup taskset -c 10-11 sh work6.sh >/dev/null 2>&1 &\nnohup taskset -c 12-13 sh work7.sh >/dev/null 2>&1 &\nnohup taskset -c 14-15 sh work8.sh >/dev/null 2>&1 &\nnohup taskset -c 16-17 sh work9.sh >/dev/null 2>&1 &\nnohup taskset -c 18-19 sh work10.sh >/dev/null 2>&1 &\nnohup taskset -c 20-21 sh work11.sh >/dev/null 2>&1 &\nnohup taskset -c 22-23 sh work12.sh >/dev/null 2>&1 &\n```\n\n清除原本的minimized_pdb文件，以及，查看当下文件中minimized_pdb文件数量的命令：\n\n``` bash\nfind . -type f -name '*_minimized.pdb' -exec rm -f {} +\nfind . -type f -name '*_minimized.pdb' | wc -l\n```\n\n限时60s，并指定每个任务占据核的编号\n\n``` bash\n# 前8个任务，每个任务使用2个核心\ntimeout 60s taskset -c 0-1 sh work1.sh &\ntimeout 60s taskset -c 2-3 sh work2.sh &\ntimeout 60s taskset -c 4-5 sh work3.sh &\ntimeout 60s taskset -c 6-7 sh work4.sh &\ntimeout 60s taskset -c 8-9 sh work5.sh &\ntimeout 60s taskset -c 10-11 sh work6.sh &\ntimeout 60s taskset -c 12-13 sh work7.sh &\ntimeout 60s taskset -c 14-15 sh work8.sh &\n\n# 后8个任务，每个任务使用1个核心\ntimeout 60s taskset -c 16 sh work9.sh &\ntimeout 60s taskset -c 17 sh work10.sh &\ntimeout 60s taskset -c 18 sh work11.sh &\ntimeout 60s taskset -c 19 sh work12.sh &\ntimeout 60s taskset -c 20 sh work13.sh &\ntimeout 60s taskset -c 21 sh work14.sh &\ntimeout 60s taskset -c 22 sh work15.sh &\ntimeout 60s taskset -c 23 sh work16.sh &\n\n# 等待所有后台任务完成\nwait\n```\n\n查看当下文件夹下每个文件占据多少空间\n\n``` bash\ndu -h --max-depth=1 | sort -hr\n```\n\n常用的一套命令\n\n``` bash\nfind . -type f -name '*_center.pdb' | wc -l\nrsync -auvh *_center.pdb ../recon11_5w_center/\nvim get(tab补全)\nmodule load Anaconda3\nconda activate\nvim minimi_dihe(tab补全)\nmodule load NAMD/CPU/2.14\nps -ef | grep 'work12.sh'\nfind . -type f -name '*_minimized.pdb' | wc -l\n\nrsync -auvhz *_minimized.pdb zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_pdbs/recon1_4w_pdb/\n\nrsync -auvhz *.log zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_logs/recon1_4w_log/\n\nnohup namd2 +p4 work1.tcl > /dev/null 2>&1 &\n\n```\n\n另一套命令\n\n``` bash\nmodule load CUDA/11.0.0\nmodule load VMD/1.9.3\nvmd -dispdev none -e hbb_align2initial.tcl.txt\n```\n\n只需要传输文件（不包括文件夹及其子文件）\n\n``` bash\nrsync -av --progress --exclude='*/' ./ ../task2/\n```","source":"_posts/自用常备linux命令.md","raw":"---\ntitle: 自用常备linux命令\ndate: 2024-12-28 18:43:12\ncategories:\n- [计算机科学]\ntags:\n- [linux]\n---\n\n## 自用的一些常备linux命令\n\n基本命令如cd ls pwd mkdir rm cp mv touch等\n\n以及如下这些：\n\n``` bash\n# 查看设备空间使用情况\ndf -h\n```\n\n``` bash\n# 查看本计算节点使用情况\ntop\n```\n\n``` bash\n# 查看文件的生成时间戳\nstat <filename>\n```\n\n``` bash\n# 查看进程\nps -ef | grep 'work12.sh'\n```\n\n``` bash\n# 杀死进程\nkill <pid>\n```\n\n``` bash\n# 杀死用户为<username>的进程\npkill -u <username>\n```\n\n``` bash\n# 查看CPU核数\nnproc\n```\n\n``` bash\n# 运行任务\nnohup taskset -c 0-1 sh work1.sh >/dev/null 2>&1 &\nnohup taskset -c 2-3 sh work2.sh >/dev/null 2>&1 &\nnohup taskset -c 4-5 sh work3.sh >/dev/null 2>&1 &\nnohup taskset -c 6-7 sh work4.sh >/dev/null 2>&1 &\nnohup taskset -c 8-9 sh work5.sh >/dev/null 2>&1 &\nnohup taskset -c 10-11 sh work6.sh >/dev/null 2>&1 &\nnohup taskset -c 12-13 sh work7.sh >/dev/null 2>&1 &\nnohup taskset -c 14-15 sh work8.sh >/dev/null 2>&1 &\nnohup taskset -c 16-17 sh work9.sh >/dev/null 2>&1 &\nnohup taskset -c 18-19 sh work10.sh >/dev/null 2>&1 &\nnohup taskset -c 20-21 sh work11.sh >/dev/null 2>&1 &\nnohup taskset -c 22-23 sh work12.sh >/dev/null 2>&1 &\n```\n\n清除原本的minimized_pdb文件，以及，查看当下文件中minimized_pdb文件数量的命令：\n\n``` bash\nfind . -type f -name '*_minimized.pdb' -exec rm -f {} +\nfind . -type f -name '*_minimized.pdb' | wc -l\n```\n\n限时60s，并指定每个任务占据核的编号\n\n``` bash\n# 前8个任务，每个任务使用2个核心\ntimeout 60s taskset -c 0-1 sh work1.sh &\ntimeout 60s taskset -c 2-3 sh work2.sh &\ntimeout 60s taskset -c 4-5 sh work3.sh &\ntimeout 60s taskset -c 6-7 sh work4.sh &\ntimeout 60s taskset -c 8-9 sh work5.sh &\ntimeout 60s taskset -c 10-11 sh work6.sh &\ntimeout 60s taskset -c 12-13 sh work7.sh &\ntimeout 60s taskset -c 14-15 sh work8.sh &\n\n# 后8个任务，每个任务使用1个核心\ntimeout 60s taskset -c 16 sh work9.sh &\ntimeout 60s taskset -c 17 sh work10.sh &\ntimeout 60s taskset -c 18 sh work11.sh &\ntimeout 60s taskset -c 19 sh work12.sh &\ntimeout 60s taskset -c 20 sh work13.sh &\ntimeout 60s taskset -c 21 sh work14.sh &\ntimeout 60s taskset -c 22 sh work15.sh &\ntimeout 60s taskset -c 23 sh work16.sh &\n\n# 等待所有后台任务完成\nwait\n```\n\n查看当下文件夹下每个文件占据多少空间\n\n``` bash\ndu -h --max-depth=1 | sort -hr\n```\n\n常用的一套命令\n\n``` bash\nfind . -type f -name '*_center.pdb' | wc -l\nrsync -auvh *_center.pdb ../recon11_5w_center/\nvim get(tab补全)\nmodule load Anaconda3\nconda activate\nvim minimi_dihe(tab补全)\nmodule load NAMD/CPU/2.14\nps -ef | grep 'work12.sh'\nfind . -type f -name '*_minimized.pdb' | wc -l\n\nrsync -auvhz *_minimized.pdb zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_pdbs/recon1_4w_pdb/\n\nrsync -auvhz *.log zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_logs/recon1_4w_log/\n\nnohup namd2 +p4 work1.tcl > /dev/null 2>&1 &\n\n```\n\n另一套命令\n\n``` bash\nmodule load CUDA/11.0.0\nmodule load VMD/1.9.3\nvmd -dispdev none -e hbb_align2initial.tcl.txt\n```\n\n只需要传输文件（不包括文件夹及其子文件）\n\n``` bash\nrsync -av --progress --exclude='*/' ./ ../task2/\n```","slug":"自用常备linux命令","published":1,"updated":"2025-01-12T05:24:30.593Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfp003gmcuyekwh2pko","content":"<h2 id=\"自用的一些常备linux命令\"><a class=\"anchor\" href=\"#自用的一些常备linux命令\">#</a> 自用的一些常备 linux 命令</h2>\n<p>基本命令如 cd ls pwd mkdir rm cp mv touch 等</p>\n<p>以及如下这些：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看设备空间使用情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看本计算节点使用情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">top</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看文件的生成时间戳</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">stat</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'work12.sh'</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 杀死进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token operator\">&lt;</span>pid<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 杀死用户为 & lt;username > 的进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pkill</span> <span class=\"token parameter variable\">-u</span> <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看 CPU 核数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nproc</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 运行任务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">0</span>-1 <span class=\"token function\">sh</span> work1.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">2</span>-3 <span class=\"token function\">sh</span> work2.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">4</span>-5 <span class=\"token function\">sh</span> work3.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>-7 <span class=\"token function\">sh</span> work4.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">8</span>-9 <span class=\"token function\">sh</span> work5.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">10</span>-11 <span class=\"token function\">sh</span> work6.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">12</span>-13 <span class=\"token function\">sh</span> work7.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">14</span>-15 <span class=\"token function\">sh</span> work8.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">16</span>-17 <span class=\"token function\">sh</span> work9.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">18</span>-19 <span class=\"token function\">sh</span> work10.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">20</span>-21 <span class=\"token function\">sh</span> work11.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">22</span>-23 <span class=\"token function\">sh</span> work12.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>清除原本的 minimized_pdb 文件，以及，查看当下文件中 minimized_pdb 文件数量的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> +</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr></table></figure><p>限时 60s，并指定每个任务占据核的编号</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 前 8 个任务，每个任务使用 2 个核心</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">0</span>-1 <span class=\"token function\">sh</span> work1.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">2</span>-3 <span class=\"token function\">sh</span> work2.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">4</span>-5 <span class=\"token function\">sh</span> work3.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>-7 <span class=\"token function\">sh</span> work4.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">8</span>-9 <span class=\"token function\">sh</span> work5.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">10</span>-11 <span class=\"token function\">sh</span> work6.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">12</span>-13 <span class=\"token function\">sh</span> work7.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">14</span>-15 <span class=\"token function\">sh</span> work8.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 后 8 个任务，每个任务使用 1 个核心</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">16</span> <span class=\"token function\">sh</span> work9.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">17</span> <span class=\"token function\">sh</span> work10.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">18</span> <span class=\"token function\">sh</span> work11.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">19</span> <span class=\"token function\">sh</span> work12.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">20</span> <span class=\"token function\">sh</span> work13.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">21</span> <span class=\"token function\">sh</span> work14.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">22</span> <span class=\"token function\">sh</span> work15.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">23</span> <span class=\"token function\">sh</span> work16.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 等待所有后台任务完成</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">wait</span></pre></td></tr></table></figure><p>查看当下文件夹下每个文件占据多少空间</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">du</span> <span class=\"token parameter variable\">-h</span> --max-depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-hr</span></pre></td></tr></table></figure><p>常用的一套命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_center.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvh</span> *_center.pdb <span class=\"token punctuation\">..</span>/recon11_5w_center/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">vim</span> get<span class=\"token punctuation\">(</span>tab补全<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module load Anaconda3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>conda activate</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">vim</span> minimi_dihe<span class=\"token punctuation\">(</span>tab补全<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>module load NAMD/CPU/2.14</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'work12.sh'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvhz</span> *_minimized.pdb zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_pdbs/recon1_4w_pdb/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvhz</span> *.log zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_logs/recon1_4w_log/</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">nohup</span> namd2 +p4 work1.tcl <span class=\"token operator\">></span> /dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>另一套命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module load CUDA/11.0.0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module load VMD/1.9.3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vmd <span class=\"token parameter variable\">-dispdev</span> none <span class=\"token parameter variable\">-e</span> hbb_align2initial.tcl.txt</pre></td></tr></table></figure><p>只需要传输文件（不包括文件夹及其子文件）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-av</span> <span class=\"token parameter variable\">--progress</span> <span class=\"token parameter variable\">--exclude</span><span class=\"token operator\">=</span><span class=\"token string\">'*/'</span> ./ <span class=\"token punctuation\">..</span>/task2/</pre></td></tr></table></figure>","length":2378,"excerpt":"","more":"<h2 id=\"自用的一些常备linux命令\"><a class=\"anchor\" href=\"#自用的一些常备linux命令\">#</a> 自用的一些常备 linux 命令</h2>\n<p>基本命令如 cd ls pwd mkdir rm cp mv touch 等</p>\n<p>以及如下这些：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看设备空间使用情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">df</span> <span class=\"token parameter variable\">-h</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看本计算节点使用情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">top</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看文件的生成时间戳</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">stat</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'work12.sh'</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 杀死进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">kill</span> <span class=\"token operator\">&lt;</span>pid<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 杀死用户为 & lt;username > 的进程</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">pkill</span> <span class=\"token parameter variable\">-u</span> <span class=\"token operator\">&lt;</span>username<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看 CPU 核数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nproc</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 运行任务</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">0</span>-1 <span class=\"token function\">sh</span> work1.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">2</span>-3 <span class=\"token function\">sh</span> work2.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">4</span>-5 <span class=\"token function\">sh</span> work3.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>-7 <span class=\"token function\">sh</span> work4.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">8</span>-9 <span class=\"token function\">sh</span> work5.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">10</span>-11 <span class=\"token function\">sh</span> work6.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">12</span>-13 <span class=\"token function\">sh</span> work7.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">14</span>-15 <span class=\"token function\">sh</span> work8.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">16</span>-17 <span class=\"token function\">sh</span> work9.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">18</span>-19 <span class=\"token function\">sh</span> work10.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">20</span>-21 <span class=\"token function\">sh</span> work11.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">nohup</span> taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">22</span>-23 <span class=\"token function\">sh</span> work12.sh <span class=\"token operator\">></span>/dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>清除原本的 minimized_pdb 文件，以及，查看当下文件中 minimized_pdb 文件数量的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> +</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr></table></figure><p>限时 60s，并指定每个任务占据核的编号</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 前 8 个任务，每个任务使用 2 个核心</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">0</span>-1 <span class=\"token function\">sh</span> work1.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">2</span>-3 <span class=\"token function\">sh</span> work2.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">4</span>-5 <span class=\"token function\">sh</span> work3.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">6</span>-7 <span class=\"token function\">sh</span> work4.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">8</span>-9 <span class=\"token function\">sh</span> work5.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">10</span>-11 <span class=\"token function\">sh</span> work6.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">12</span>-13 <span class=\"token function\">sh</span> work7.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">14</span>-15 <span class=\"token function\">sh</span> work8.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># 后 8 个任务，每个任务使用 1 个核心</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">16</span> <span class=\"token function\">sh</span> work9.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">17</span> <span class=\"token function\">sh</span> work10.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">18</span> <span class=\"token function\">sh</span> work11.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">19</span> <span class=\"token function\">sh</span> work12.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">20</span> <span class=\"token function\">sh</span> work13.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">21</span> <span class=\"token function\">sh</span> work14.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">22</span> <span class=\"token function\">sh</span> work15.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">timeout</span> 60s taskset <span class=\"token parameter variable\">-c</span> <span class=\"token number\">23</span> <span class=\"token function\">sh</span> work16.sh <span class=\"token operator\">&amp;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># 等待所有后台任务完成</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token function\">wait</span></pre></td></tr></table></figure><p>查看当下文件夹下每个文件占据多少空间</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">du</span> <span class=\"token parameter variable\">-h</span> --max-depth<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">|</span> <span class=\"token function\">sort</span> <span class=\"token parameter variable\">-hr</span></pre></td></tr></table></figure><p>常用的一套命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_center.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvh</span> *_center.pdb <span class=\"token punctuation\">..</span>/recon11_5w_center/</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">vim</span> get<span class=\"token punctuation\">(</span>tab补全<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>module load Anaconda3</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>conda activate</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">vim</span> minimi_dihe<span class=\"token punctuation\">(</span>tab补全<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>module load NAMD/CPU/2.14</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token string\">'work12.sh'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token builtin class-name\">.</span> <span class=\"token parameter variable\">-type</span> f <span class=\"token parameter variable\">-name</span> <span class=\"token string\">'*_minimized.pdb'</span> <span class=\"token operator\">|</span> <span class=\"token function\">wc</span> <span class=\"token parameter variable\">-l</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvhz</span> *_minimized.pdb zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_pdbs/recon1_4w_pdb/</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-auvhz</span> *.log zhaomiaomiao@XXXLab:/mnt/sto2/zhaomiaomiao/select_trainset_241203/mini4w_reconset/mini_logs/recon1_4w_log/</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">nohup</span> namd2 +p4 work1.tcl <span class=\"token operator\">></span> /dev/null <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span></pre></td></tr></table></figure><p>另一套命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module load CUDA/11.0.0</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>module load VMD/1.9.3</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>vmd <span class=\"token parameter variable\">-dispdev</span> none <span class=\"token parameter variable\">-e</span> hbb_align2initial.tcl.txt</pre></td></tr></table></figure><p>只需要传输文件（不包括文件夹及其子文件）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-av</span> <span class=\"token parameter variable\">--progress</span> <span class=\"token parameter variable\">--exclude</span><span class=\"token operator\">=</span><span class=\"token string\">'*/'</span> ./ <span class=\"token punctuation\">..</span>/task2/</pre></td></tr></table></figure>"},{"title":"计算机网络-基础知识笔记（一）","date":"2024-08-02T06:23:45.000Z","_content":"## DNS在现代前端中扮演着怎样的角色\n\nDNS的全称是域名系统（Domain Name System）\n它的主要功能就是将人们容易记住的域名转换成计算机能理解的IP地址，从而实现正确的网络连接，而执行这项转换任务的便是DNS服务器\n\nDNS服务器除了部署在互联网的各个角落，其实每一台终端设备都会内置本地DNS服务器\nDNS查询时，会依次经过应用程序，比如浏览器的缓存、本地hosts、本地DNS服务器、根服务器、顶级域名服务器、权威服务器，最后得到真正的IP地址\n\n作为开发者，我们通常会从域名服务商购买顶级域名，同时服务商也会提供域名解析服务\n\n配置DNS records，最重要的便是A记录和CNAME记录，A记录保存最终要返回的IP地址，而CNAME则是将子域名映射到另一个域名，可以指向相同主域名也可以是其他主域名\n\n这种在A记录上直接填写固定IP地址的方式，只适用于简单的单机部署网站\n在大型应用中，应用服务器以分布式方式部署，IP地址是动态变化的，因此，大型应用会采用动态解析IP地址的方式，将同一个域名，根据不同网络运营商、不同地区，解析到不同IP地址的服务器上。\n在真实世界中，这些服务器大概率并非最终的应用服务器，而是具备反向代理能力的负载均衡（LB）服务器、WEB应用防火墙（WAF）等等。而真正的应用服务器IP地址是不会暴露于公网环境的。\n\n现代DNS服务器除了具备基本的域名解析功能外，还会提供安全插件（DNSSEC）、DNS分析、利用边缘网络加速解析、DDos防护这些功能。它们都是为了更快、更安全的为用户提供服务\n\n前端熟知的内容分发网络（CDN）与DNS有着密切关系，当不同地区的用户访问前端静态资源时，会从不同的CDN节点下载数据，这归功于DNS系统的CNAME记录，DNS服务器会根据用户所在地区，返回不同的CNAME域名，我们通常称之为CDN加速域名\n\n假设我们的图片资源托管在img.alicdn.com上，如何知道用户实际上会访问到哪台CDN服务器呢\n使用nslookup工具依次查询该域名的CNAME和A记录，最终我们会得到CDN服务器的IP地址，它的实际地理位置刚好就是用户所在地附近\n\n\n真实世界中DNS解析并非一轮完成，它背后会经历多次反复查询，在没有任何缓存的情况下，它会非常慢，以至于显著影响到你的网站打开速度，因此，无论是DNS云服务商还是互联网上的基础设施，都会想尽办法加速DNS解析，诸如：\n- 使用高性能的DNS服务器\n- 配置DNS缓存\n- 增加DNS记录的缓存时间（TTL）等等\n\n作为前端，我们也可以通过浏览器提供的DNS预取功能，来指定需要提前解析的域名，比如：\n- 通过在HTML中添加dns-prefetch link标签，可以让浏览器在解析完该标签后立即进行DNS查询，来提升用户后续访问该域名的速度。\n\n- 利用DNS查询原理，我们可以通过修改本地hosts的方式来给项目配置一个域名，而不是直接使用localhost,这能有效解决与服务端联调时，cookie无法跨越传输的问题\n\n- 另外，如果项目依赖中硬编码了线上域名，通过修改本地DNS记录，可以在不改变代码的情况下，将线上域名映射到本地或者联调环境，方便问题验证和多环节联调\n\n","source":"_posts/计算机网络-基础知识笔记（一）.md","raw":"---\ntitle: 计算机网络-基础知识笔记（一）\ndate: 2024-08-02 14:23:45\ncategories:\n- [计算机科学]\ntags:\n- [计算机网络]\n---\n## DNS在现代前端中扮演着怎样的角色\n\nDNS的全称是域名系统（Domain Name System）\n它的主要功能就是将人们容易记住的域名转换成计算机能理解的IP地址，从而实现正确的网络连接，而执行这项转换任务的便是DNS服务器\n\nDNS服务器除了部署在互联网的各个角落，其实每一台终端设备都会内置本地DNS服务器\nDNS查询时，会依次经过应用程序，比如浏览器的缓存、本地hosts、本地DNS服务器、根服务器、顶级域名服务器、权威服务器，最后得到真正的IP地址\n\n作为开发者，我们通常会从域名服务商购买顶级域名，同时服务商也会提供域名解析服务\n\n配置DNS records，最重要的便是A记录和CNAME记录，A记录保存最终要返回的IP地址，而CNAME则是将子域名映射到另一个域名，可以指向相同主域名也可以是其他主域名\n\n这种在A记录上直接填写固定IP地址的方式，只适用于简单的单机部署网站\n在大型应用中，应用服务器以分布式方式部署，IP地址是动态变化的，因此，大型应用会采用动态解析IP地址的方式，将同一个域名，根据不同网络运营商、不同地区，解析到不同IP地址的服务器上。\n在真实世界中，这些服务器大概率并非最终的应用服务器，而是具备反向代理能力的负载均衡（LB）服务器、WEB应用防火墙（WAF）等等。而真正的应用服务器IP地址是不会暴露于公网环境的。\n\n现代DNS服务器除了具备基本的域名解析功能外，还会提供安全插件（DNSSEC）、DNS分析、利用边缘网络加速解析、DDos防护这些功能。它们都是为了更快、更安全的为用户提供服务\n\n前端熟知的内容分发网络（CDN）与DNS有着密切关系，当不同地区的用户访问前端静态资源时，会从不同的CDN节点下载数据，这归功于DNS系统的CNAME记录，DNS服务器会根据用户所在地区，返回不同的CNAME域名，我们通常称之为CDN加速域名\n\n假设我们的图片资源托管在img.alicdn.com上，如何知道用户实际上会访问到哪台CDN服务器呢\n使用nslookup工具依次查询该域名的CNAME和A记录，最终我们会得到CDN服务器的IP地址，它的实际地理位置刚好就是用户所在地附近\n\n\n真实世界中DNS解析并非一轮完成，它背后会经历多次反复查询，在没有任何缓存的情况下，它会非常慢，以至于显著影响到你的网站打开速度，因此，无论是DNS云服务商还是互联网上的基础设施，都会想尽办法加速DNS解析，诸如：\n- 使用高性能的DNS服务器\n- 配置DNS缓存\n- 增加DNS记录的缓存时间（TTL）等等\n\n作为前端，我们也可以通过浏览器提供的DNS预取功能，来指定需要提前解析的域名，比如：\n- 通过在HTML中添加dns-prefetch link标签，可以让浏览器在解析完该标签后立即进行DNS查询，来提升用户后续访问该域名的速度。\n\n- 利用DNS查询原理，我们可以通过修改本地hosts的方式来给项目配置一个域名，而不是直接使用localhost,这能有效解决与服务端联调时，cookie无法跨越传输的问题\n\n- 另外，如果项目依赖中硬编码了线上域名，通过修改本地DNS记录，可以在不改变代码的情况下，将线上域名映射到本地或者联调环境，方便问题验证和多环节联调\n\n","slug":"计算机网络-基础知识笔记（一）","published":1,"updated":"2024-12-27T14:39:04.855Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfp003kmcuyhvrtdx4t","content":"<h2 id=\"dns在现代前端中扮演着怎样的角色\"><a class=\"anchor\" href=\"#dns在现代前端中扮演着怎样的角色\">#</a> DNS 在现代前端中扮演着怎样的角色</h2>\n<p>DNS 的全称是域名系统（Domain Name System）<br />\n它的主要功能就是将人们容易记住的域名转换成计算机能理解的 IP 地址，从而实现正确的网络连接，而执行这项转换任务的便是 DNS 服务器</p>\n<p>DNS 服务器除了部署在互联网的各个角落，其实每一台终端设备都会内置本地 DNS 服务器<br />\n DNS 查询时，会依次经过应用程序，比如浏览器的缓存、本地 hosts、本地 DNS 服务器、根服务器、顶级域名服务器、权威服务器，最后得到真正的 IP 地址</p>\n<p>作为开发者，我们通常会从域名服务商购买顶级域名，同时服务商也会提供域名解析服务</p>\n<p>配置 DNS records，最重要的便是 A 记录和 CNAME 记录，A 记录保存最终要返回的 IP 地址，而 CNAME 则是将子域名映射到另一个域名，可以指向相同主域名也可以是其他主域名</p>\n<p>这种在 A 记录上直接填写固定 IP 地址的方式，只适用于简单的单机部署网站<br />\n在大型应用中，应用服务器以分布式方式部署，IP 地址是动态变化的，因此，大型应用会采用动态解析 IP 地址的方式，将同一个域名，根据不同网络运营商、不同地区，解析到不同 IP 地址的服务器上。<br />\n在真实世界中，这些服务器大概率并非最终的应用服务器，而是具备反向代理能力的负载均衡（LB）服务器、WEB 应用防火墙（WAF）等等。而真正的应用服务器 IP 地址是不会暴露于公网环境的。</p>\n<p>现代 DNS 服务器除了具备基本的域名解析功能外，还会提供安全插件（DNSSEC）、DNS 分析、利用边缘网络加速解析、DDos 防护这些功能。它们都是为了更快、更安全的为用户提供服务</p>\n<p>前端熟知的内容分发网络（CDN）与 DNS 有着密切关系，当不同地区的用户访问前端静态资源时，会从不同的 CDN 节点下载数据，这归功于 DNS 系统的 CNAME 记录，DNS 服务器会根据用户所在地区，返回不同的 CNAME 域名，我们通常称之为 CDN 加速域名</p>\n<p>假设我们的图片资源托管在 img.alicdn.com 上，如何知道用户实际上会访问到哪台 CDN 服务器呢<br />\n使用 nslookup 工具依次查询该域名的 CNAME 和 A 记录，最终我们会得到 CDN 服务器的 IP 地址，它的实际地理位置刚好就是用户所在地附近</p>\n<p>真实世界中 DNS 解析并非一轮完成，它背后会经历多次反复查询，在没有任何缓存的情况下，它会非常慢，以至于显著影响到你的网站打开速度，因此，无论是 DNS 云服务商还是互联网上的基础设施，都会想尽办法加速 DNS 解析，诸如：</p>\n<ul>\n<li>使用高性能的 DNS 服务器</li>\n<li>配置 DNS 缓存</li>\n<li>增加 DNS 记录的缓存时间（TTL）等等</li>\n</ul>\n<p>作为前端，我们也可以通过浏览器提供的 DNS 预取功能，来指定需要提前解析的域名，比如：</p>\n<ul>\n<li>\n<p>通过在 HTML 中添加 dns-prefetch link 标签，可以让浏览器在解析完该标签后立即进行 DNS 查询，来提升用户后续访问该域名的速度。</p>\n</li>\n<li>\n<p>利用 DNS 查询原理，我们可以通过修改本地 hosts 的方式来给项目配置一个域名，而不是直接使用 localhost, 这能有效解决与服务端联调时，cookie 无法跨越传输的问题</p>\n</li>\n<li>\n<p>另外，如果项目依赖中硬编码了线上域名，通过修改本地 DNS 记录，可以在不改变代码的情况下，将线上域名映射到本地或者联调环境，方便问题验证和多环节联调</p>\n</li>\n</ul>\n","length":1305,"excerpt":"","more":"<h2 id=\"dns在现代前端中扮演着怎样的角色\"><a class=\"anchor\" href=\"#dns在现代前端中扮演着怎样的角色\">#</a> DNS 在现代前端中扮演着怎样的角色</h2>\n<p>DNS 的全称是域名系统（Domain Name System）<br />\n它的主要功能就是将人们容易记住的域名转换成计算机能理解的 IP 地址，从而实现正确的网络连接，而执行这项转换任务的便是 DNS 服务器</p>\n<p>DNS 服务器除了部署在互联网的各个角落，其实每一台终端设备都会内置本地 DNS 服务器<br />\n DNS 查询时，会依次经过应用程序，比如浏览器的缓存、本地 hosts、本地 DNS 服务器、根服务器、顶级域名服务器、权威服务器，最后得到真正的 IP 地址</p>\n<p>作为开发者，我们通常会从域名服务商购买顶级域名，同时服务商也会提供域名解析服务</p>\n<p>配置 DNS records，最重要的便是 A 记录和 CNAME 记录，A 记录保存最终要返回的 IP 地址，而 CNAME 则是将子域名映射到另一个域名，可以指向相同主域名也可以是其他主域名</p>\n<p>这种在 A 记录上直接填写固定 IP 地址的方式，只适用于简单的单机部署网站<br />\n在大型应用中，应用服务器以分布式方式部署，IP 地址是动态变化的，因此，大型应用会采用动态解析 IP 地址的方式，将同一个域名，根据不同网络运营商、不同地区，解析到不同 IP 地址的服务器上。<br />\n在真实世界中，这些服务器大概率并非最终的应用服务器，而是具备反向代理能力的负载均衡（LB）服务器、WEB 应用防火墙（WAF）等等。而真正的应用服务器 IP 地址是不会暴露于公网环境的。</p>\n<p>现代 DNS 服务器除了具备基本的域名解析功能外，还会提供安全插件（DNSSEC）、DNS 分析、利用边缘网络加速解析、DDos 防护这些功能。它们都是为了更快、更安全的为用户提供服务</p>\n<p>前端熟知的内容分发网络（CDN）与 DNS 有着密切关系，当不同地区的用户访问前端静态资源时，会从不同的 CDN 节点下载数据，这归功于 DNS 系统的 CNAME 记录，DNS 服务器会根据用户所在地区，返回不同的 CNAME 域名，我们通常称之为 CDN 加速域名</p>\n<p>假设我们的图片资源托管在 img.alicdn.com 上，如何知道用户实际上会访问到哪台 CDN 服务器呢<br />\n使用 nslookup 工具依次查询该域名的 CNAME 和 A 记录，最终我们会得到 CDN 服务器的 IP 地址，它的实际地理位置刚好就是用户所在地附近</p>\n<p>真实世界中 DNS 解析并非一轮完成，它背后会经历多次反复查询，在没有任何缓存的情况下，它会非常慢，以至于显著影响到你的网站打开速度，因此，无论是 DNS 云服务商还是互联网上的基础设施，都会想尽办法加速 DNS 解析，诸如：</p>\n<ul>\n<li>使用高性能的 DNS 服务器</li>\n<li>配置 DNS 缓存</li>\n<li>增加 DNS 记录的缓存时间（TTL）等等</li>\n</ul>\n<p>作为前端，我们也可以通过浏览器提供的 DNS 预取功能，来指定需要提前解析的域名，比如：</p>\n<ul>\n<li>\n<p>通过在 HTML 中添加 dns-prefetch link 标签，可以让浏览器在解析完该标签后立即进行 DNS 查询，来提升用户后续访问该域名的速度。</p>\n</li>\n<li>\n<p>利用 DNS 查询原理，我们可以通过修改本地 hosts 的方式来给项目配置一个域名，而不是直接使用 localhost, 这能有效解决与服务端联调时，cookie 无法跨越传输的问题</p>\n</li>\n<li>\n<p>另外，如果项目依赖中硬编码了线上域名，通过修改本地 DNS 记录，可以在不改变代码的情况下，将线上域名映射到本地或者联调环境，方便问题验证和多环节联调</p>\n</li>\n</ul>\n"},{"title":"超级常用的一些git命令","date":"2024-12-28T10:32:09.000Z","_content":"\n常用git命令一览表\n\n<br>\n<div align=\"center\">\n    <img src=\"超级常用的一些git命令/01.jpg\">\n</div>\n<br>\n\n自用的一些常备git命令：\n\n``` bash\n# 重命名分支\ngit branch -m <old_name> <new_name>\n```\n\n``` bash\n# 查看分支\ngit branch\n```\n\n``` bash\n# 切换分支\ngit checkout <branch_name>\n```\n\n``` bash\n# 拉取分支\ngit pull origin <branch_name>\n```\n\n``` bash\n# 推送分支\ngit push origin <branch_name>\n```\n\n``` bash\n# 查看提交记录\ngit log\n```\n``` bash\n# 合并分支\ngit merge <branch_name>\n```\n\n``` bash\n# 强制覆盖\ngit reset --hard <commit_id>\n```\n\n``` bash\n# 回退版本\ngit reset --soft <commit_id>\n```\n\n``` bash\n# 把本地分支kiyoumi推送到远程分支develop\ngit push origin kiyoumi:develop\n```\n\n``` bash\n# 把远程分支develop拉取到本地分支kiyoumi\ngit pull origin develop:kiyoumi\n```\n\n```bash\n# 从远程分支把该文件直接替换\ngit checkout origin/remote -- <file_path>\n```\n\n\n","source":"_posts/超级常用的一些git命令.md","raw":"---\ntitle: 超级常用的一些git命令\ndate: 2024-12-28 18:32:09\ncategories:\n- [计算机科学]\ntags:\n- [git]\n---\n\n常用git命令一览表\n\n<br>\n<div align=\"center\">\n    <img src=\"超级常用的一些git命令/01.jpg\">\n</div>\n<br>\n\n自用的一些常备git命令：\n\n``` bash\n# 重命名分支\ngit branch -m <old_name> <new_name>\n```\n\n``` bash\n# 查看分支\ngit branch\n```\n\n``` bash\n# 切换分支\ngit checkout <branch_name>\n```\n\n``` bash\n# 拉取分支\ngit pull origin <branch_name>\n```\n\n``` bash\n# 推送分支\ngit push origin <branch_name>\n```\n\n``` bash\n# 查看提交记录\ngit log\n```\n``` bash\n# 合并分支\ngit merge <branch_name>\n```\n\n``` bash\n# 强制覆盖\ngit reset --hard <commit_id>\n```\n\n``` bash\n# 回退版本\ngit reset --soft <commit_id>\n```\n\n``` bash\n# 把本地分支kiyoumi推送到远程分支develop\ngit push origin kiyoumi:develop\n```\n\n``` bash\n# 把远程分支develop拉取到本地分支kiyoumi\ngit pull origin develop:kiyoumi\n```\n\n```bash\n# 从远程分支把该文件直接替换\ngit checkout origin/remote -- <file_path>\n```\n\n\n","slug":"超级常用的一些git命令","published":1,"updated":"2024-12-28T10:42:26.379Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfp003nmcuy4ruk7a7s","content":"<p>常用 git 命令一览表</p>\n<br>\n<div align=\"center\">\n    <style>.orsrtynjjnmp{}</style><img data-src=\"/2024/12/28/%E8%B6%85%E7%BA%A7%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9Bgit%E5%91%BD%E4%BB%A4/01.jpg\" class=\"orsrtynjjnmp\">\n</div>\n<br>\n<p>自用的一些常备 git 命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 重命名分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">&lt;</span>old_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>new_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 切换分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 拉取分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull origin <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 推送分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看提交记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> log</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 合并分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> merge <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 强制覆盖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 回退版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 把本地分支 kiyoumi 推送到远程分支 develop</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin kiyoumi:develop</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 把远程分支 develop 拉取到本地分支 kiyoumi</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull origin develop:kiyoumi</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 从远程分支把该文件直接替换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout origin/remote -- <span class=\"token operator\">&lt;</span>file_path<span class=\"token operator\">></span></pre></td></tr></table></figure>","length":478,"excerpt":"","more":"<p>常用 git 命令一览表</p>\n<br>\n<div align=\"center\">\n    <style>.orsrtynjjnmp{}</style><img data-src=\"/2024/12/28/%E8%B6%85%E7%BA%A7%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9Bgit%E5%91%BD%E4%BB%A4/01.jpg\" class=\"orsrtynjjnmp\">\n</div>\n<br>\n<p>自用的一些常备 git 命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 重命名分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch <span class=\"token parameter variable\">-m</span> <span class=\"token operator\">&lt;</span>old_name<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>new_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> branch</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 切换分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 拉取分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull origin <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 推送分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 查看提交记录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> log</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 合并分支</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> merge <span class=\"token operator\">&lt;</span>branch_name<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 强制覆盖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--hard</span> <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 回退版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> reset <span class=\"token parameter variable\">--soft</span> <span class=\"token operator\">&lt;</span>commit_id<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 把本地分支 kiyoumi 推送到远程分支 develop</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> push origin kiyoumi:develop</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 把远程分支 develop 拉取到本地分支 kiyoumi</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> pull origin develop:kiyoumi</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 从远程分支把该文件直接替换</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> checkout origin/remote -- <span class=\"token operator\">&lt;</span>file_path<span class=\"token operator\">></span></pre></td></tr></table></figure>"},{"title":"将vite构建的vue3项目部署到githubpage教程","date":"2025-01-02T03:30:24.000Z","_content":"\n## 利用github page托管vue项目\n\n1. 设置好vite.config.js\n\n在 vite.config.js 中设置正确的 base。\n\n如果你要部署在 ```https://<USERNAME>.github.io/ ```上，你可以省略 base 使其默认为 ```‘/’```。\n如果你要部署在 ```https://<USERNAME>.github.io/<REPO>/``` 上，例如你的仓库地址为 ```https://github.com/<USERNAME>/<REPO>```，那么请设置 base 为 ```‘/<REPO>/’```。\n\n2. 构建项目\n\n``` bash\nnpm run build\n# 或者\nyarn build\n```\n\n执行上述命令后，就会看到根目录下，多了一个dist文件夹，这便是我们需要部署的文件夹。\n\n3.预览项目\n\n``` bash\nnpm run dev\n```\n\n4. 部署到github\n如果上面的preview 没有问题，就可以部署到github了。\n\n在github中，项目的源代码上传到了main分支，因此接下来要将dist 文件夹上传到另外一个分支，给这个分支起个名字gh-pages。\n\n这里将dist 文件夹上传到gh-pages：(执行这条命令的前提是你已经完成了 git add. git commit git push 这些操作。)\n\n``` bash\ngit subtree push --prefix dist origin(远程主机的名字) gh-pages\n```\n\n5. 开启pages功能\n将分支切换到gh-pages，然后save，就能成功开启页面了！","source":"_posts/将vite构建的vue3项目部署到githubpage教程.md","raw":"---\ntitle: 将vite构建的vue3项目部署到githubpage教程\ndate: 2025-01-02 11:30:24\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n## 利用github page托管vue项目\n\n1. 设置好vite.config.js\n\n在 vite.config.js 中设置正确的 base。\n\n如果你要部署在 ```https://<USERNAME>.github.io/ ```上，你可以省略 base 使其默认为 ```‘/’```。\n如果你要部署在 ```https://<USERNAME>.github.io/<REPO>/``` 上，例如你的仓库地址为 ```https://github.com/<USERNAME>/<REPO>```，那么请设置 base 为 ```‘/<REPO>/’```。\n\n2. 构建项目\n\n``` bash\nnpm run build\n# 或者\nyarn build\n```\n\n执行上述命令后，就会看到根目录下，多了一个dist文件夹，这便是我们需要部署的文件夹。\n\n3.预览项目\n\n``` bash\nnpm run dev\n```\n\n4. 部署到github\n如果上面的preview 没有问题，就可以部署到github了。\n\n在github中，项目的源代码上传到了main分支，因此接下来要将dist 文件夹上传到另外一个分支，给这个分支起个名字gh-pages。\n\n这里将dist 文件夹上传到gh-pages：(执行这条命令的前提是你已经完成了 git add. git commit git push 这些操作。)\n\n``` bash\ngit subtree push --prefix dist origin(远程主机的名字) gh-pages\n```\n\n5. 开启pages功能\n将分支切换到gh-pages，然后save，就能成功开启页面了！","slug":"将vite构建的vue3项目部署到githubpage教程","published":1,"updated":"2025-01-02T05:08:06.772Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfq003qmcuy78d7bqqn","content":"<h2 id=\"利用github-page托管vue项目\"><a class=\"anchor\" href=\"#利用github-page托管vue项目\">#</a> 利用 github page 托管 vue 项目</h2>\n<ol>\n<li>设置好 vite.config.js</li>\n</ol>\n<p>在 vite.config.js 中设置正确的 base。</p>\n<p>如果你要部署在  <code>https://&lt;USERNAME&gt;.github.io/ </code> 上，你可以省略 base 使其默认为  <code>‘/’</code> 。<br />\n如果你要部署在  <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code>  上，例如你的仓库地址为  <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code> ，那么请设置 base 为  <code>‘/&lt;REPO&gt;/’</code> 。</p>\n<ol start=\"2\">\n<li>构建项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> build</pre></td></tr></table></figure><p>执行上述命令后，就会看到根目录下，多了一个 dist 文件夹，这便是我们需要部署的文件夹。</p>\n<p>3. 预览项目</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run dev</pre></td></tr></table></figure><ol start=\"4\">\n<li>部署到 github<br />\n 如果上面的 preview 没有问题，就可以部署到 github 了。</li>\n</ol>\n<p>在 github 中，项目的源代码上传到了 main 分支，因此接下来要将 dist 文件夹上传到另外一个分支，给这个分支起个名字 gh-pages。</p>\n<p>这里将 dist 文件夹上传到 gh-pages：(执行这条命令的前提是你已经完成了 git add. git commit git push 这些操作。)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> subtree push <span class=\"token parameter variable\">--prefix</span> dist origin<span class=\"token punctuation\">(</span>远程主机的名字<span class=\"token punctuation\">)</span> gh-pages</pre></td></tr></table></figure><ol start=\"5\">\n<li>开启 pages 功能<br />\n将分支切换到 gh-pages，然后 save，就能成功开启页面了！</li>\n</ol>\n","length":621,"excerpt":"","more":"<h2 id=\"利用github-page托管vue项目\"><a class=\"anchor\" href=\"#利用github-page托管vue项目\">#</a> 利用 github page 托管 vue 项目</h2>\n<ol>\n<li>设置好 vite.config.js</li>\n</ol>\n<p>在 vite.config.js 中设置正确的 base。</p>\n<p>如果你要部署在  <code>https://&lt;USERNAME&gt;.github.io/ </code> 上，你可以省略 base 使其默认为  <code>‘/’</code> 。<br />\n如果你要部署在  <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code>  上，例如你的仓库地址为  <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code> ，那么请设置 base 为  <code>‘/&lt;REPO&gt;/’</code> 。</p>\n<ol start=\"2\">\n<li>构建项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> build</pre></td></tr></table></figure><p>执行上述命令后，就会看到根目录下，多了一个 dist 文件夹，这便是我们需要部署的文件夹。</p>\n<p>3. 预览项目</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run dev</pre></td></tr></table></figure><ol start=\"4\">\n<li>部署到 github<br />\n 如果上面的 preview 没有问题，就可以部署到 github 了。</li>\n</ol>\n<p>在 github 中，项目的源代码上传到了 main 分支，因此接下来要将 dist 文件夹上传到另外一个分支，给这个分支起个名字 gh-pages。</p>\n<p>这里将 dist 文件夹上传到 gh-pages：(执行这条命令的前提是你已经完成了 git add. git commit git push 这些操作。)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> subtree push <span class=\"token parameter variable\">--prefix</span> dist origin<span class=\"token punctuation\">(</span>远程主机的名字<span class=\"token punctuation\">)</span> gh-pages</pre></td></tr></table></figure><ol start=\"5\">\n<li>开启 pages 功能<br />\n将分支切换到 gh-pages，然后 save，就能成功开启页面了！</li>\n</ol>\n"},{"title":"项目对比注解","date":"2025-01-06T09:29:51.000Z","_content":"\n## 项目对比文章的注解篇\n\n1. Vuex 和 Pinia \n\nVuex 和 Pinia 都是 Vue.js 的状态管理库，用于帮助开发者管理大型应用中的全局状态。它们的主要功能是提供一个集中存储和管理应用状态的机制，使得状态的更新和访问更加可预测和可维护。\n\nAPI风格 \nPinia使用类似Vue组件的API来创建和使用store，而Vuex使用一个全局对象来访问store。\n在Pinia中，状态是响应式的，这意味着当状态发生变化时，组件会自动更新。在Vuex中，我们需要手动触发更新。\nPinia的store是模块化的，这意味着每个store可以包含自己的状态、操作和插件。在Vuex中，store是全局的，这意味着所有的状态和操作都在同一个store中。\n\nVuex 的功能 \n- 集中存储状态：Vuex 提供了一个全局的 state 对象，所有组件都可以访问和修改这个状态。\n- 严格的状态更新规则：状态只能通过提交 mutation 来更新，而 mutation 必须是同步的。\n- 异步操作：通过 actions 来处理异步逻辑，然后提交 mutation 更新状态。\n- 模块化：支持将状态管理拆分成多个模块，每个模块可以有自己的 state、getters、mutations 和 actions。\n- 严格模式：可以开启严格模式来确保状态只通过 mutation 来更新，避免状态被意外修改。\n\n``` javascript\n// store.js\nimport Vuex from 'vuex'\n\nexport default new Vuex.Store({\n  state: {\n    count: 0,\n  },\n  mutations: {\n    increment(state) {\n      state.count++\n    },\n    decrement(state) {\n      state.count--\n    },\n  },\n  actions: {\n    increment({ commit }) {\n      commit('increment')\n    },\n    decrement({ commit }) {\n      commit('decrement')\n    },\n  },\n})\n\n// 组件中使用\nimport { mapState, mapActions } from 'vuex'\n\nexport default {\n  computed: mapState({\n    count: state => state.count,\n  }),\n  methods: mapActions(['increment', 'decrement']),\n}\n\n\n```\n\nPinia 的功能 \n- 更简洁的 API：Pinia 提供了更简洁和直观的 API，使得状态管理更加简单易用。\n- 组合式 API 支持：Pinia 完全基于 Vue 3 的组合式 API 设计，与 Vue 3 的特性（如 setup 函数）更加契合。\n- 无严格模式：Pinia 不需要严格模式，因为它的设计使得状态更新更加自然和安全。\n- 类型推断：Pinia 提供了更好的 TypeScript 支持，能够自动推断状态的类型，减少了类型注解的需要。\n- 插件系统：支持插件系统，可以扩展 Pinia 的功能。\n\n``` javascript\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore({\n  id: 'counter',\n  state: () => ({\n    count: 0,\n  }),\n  actions: {\n    increment() {\n      this.count++\n    },\n    decrement() {\n      this.count--\n    },\n  },\n})\n\n```\n\n区别 \n- API 设计：Vuex 的 API 相对复杂，需要定义 state、getters、mutations、actions 等多个部分，而 Pinia 的 API 更为简洁，通过 defineStore 函数来定义状态管理。\n- 与 Vue 的集成：Vuex 主要与 Vue 2 和 Vue 3 的选项式 API 集成，而 Pinia 完全基于 Vue 3 的组合式 API 设计，更适合 Vue 3 的开发方式。\n- 类型支持：Pinia 提供了更好的 TypeScript 支持，能够自动推断类型，而 Vuex 在 TypeScript 支持方面需要更多的类型注解。\n- 性能和易用性：Pinia 由于其简洁的设计和与 Vue 3 的紧密集成，通常被认为在性能和易用性上更优。\n- 社区和生态：Vuex 是 Vue.js 的官方状态管理库，拥有较大的社区和丰富的生态支持，而 Pinia 是 Vue 3 推荐的状态管理库，逐渐在社区中获得更多的关注和支持。\n\n2. watch和watchEffect\n\nwatch 和 watchEffect 是 Vue 3 中用于响应式地观察数据变化的两个 API，它们在使用场景和行为上有一些区别。\n\n- watch \nwatch API 与vue2选项式 API this.$watch (以及相应的 watch 选项) 完全等效。watch\n需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的——即回调仅在侦听源发生变化时被调用。\n\n``` javascript\n// 侦听一个 getter\nconst state = reactive({ count: 0 })\nwatch(\n  () => state.count,\n  (count, prevCount) => {\n    /* ... */\n  }\n)\n\n// 直接侦听一个 ref\nconst count = ref(0)\nwatch(count, (count, prevCount) => {\n  /* ... */\n})\n\n//监听多个源\nwatch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) => {\n  /* ... */\n})\n```\n\n- watchEffect \n立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。\n\n``` javascript\nconst count = ref(0)\n\nwatchEffect(() => console.log(count.value))\n// -> logs 0\n\nsetTimeout(() => {\n  count.value++\n  // -> logs 1\n}, 100)\n\n```\n\n区别\n- 执行时机：watchEffect是立即执行的，在页面加载时会主动执行一次，来收集依赖；而watch是惰性地执行副作用，它不会立即执行，但可以配置 immediate，使其主动触发\n- 参数不同：watchEffect只需要传递一个回调函数，不需要传递侦听的数据，它会在页面加载时主动执行一次，来收集依赖；而watch至少要有两个参数（第三个参数是配置项），第一个参数是侦听的数据，第二个参数是回调函数\n- 结果不同：watchEffect获取不到更改前的值；而watch可以同时获取更改前和更改后的值\n\n\n3. 语法糖内的defineProps及defineEmits、defineExpose\n\ndefineProps 和 defineEmits 都是只能在 ``` <script setup>  ```中使用的编译器宏。他们不需要导入，且会随着 ```<script setup> ```的处理过程一同被编译掉。\n\ndefineProps 接收与 props 选项相同的值，defineEmits 接收与 emits 选项相同的值，它们具备完整的类型推断并且在 script setup 中是直接可用的。\n\ndefineProps 或 defineEmits 要么使用运行时声明，要么使用类型声明。同时使用两种声明方式会导致编译报错\n\n- defineProps\n获取组件传值: 父传子 defineProps\n\n``` javascript\n<template>\n  <h1>{{ msg }}</h1>\n  <div @click=\"clickThis\">1111</div>\n</template>\n\n<script setup lang=\"ts\">\n  defineProps<{ // 采用ts专有声明，无默认值\n    msg: string,\n    num?: number\n  }>()\n     // 采用ts专有声明，有默认值\n    interface Props {\n        msg?: string\n        labels?: string[]\n    }\n    const props = withDefaults(defineProps<Props>(), {\n        msg: 'hello',\n        labels: () => ['one', 'two']\n    })\n    \n  defineProps({ // 非ts专有声明\n    msg: String,\n    num: {\n      type:Number,\n      default: ''\n    }\n  })\n</script>\n\n<style scoped lang=\"less\">\n</style>\n\n```\n\n- defineEmits\ndefineEmits 子组件向父组件事件传递:子传父\n``` javascript\n<template>\n  <div @click=\"clickThis\">点我</div>\n</template>\n\n<script setup lang=\"ts\">\n    /*ts专有*/\n  const emit= defineEmits<{\n    (e: 'click', num: number): void\n  }>()\n    /*非ts专有*/\n  const emit= defineEmits(['click'])\n  \n  const clickThis = () => {\n    emit('click',2)\n  }\n</script>\n\n<style scoped lang=\"less\">\n</style>\n\n```\n\n- defineExpose\n子组件暴露属性和方法给父组件 defineExpose\n\n``` javascript\n<template>\n  <div>子组件helloword.vue</div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nconst count = ref(123456)\ndefineExpose({\n  count\n})\n</script>\n\n<style scoped lang=\"less\">\n</style>\n```\n\n","source":"_posts/项目对比注解.md","raw":"---\ntitle: 项目对比注解\ndate: 2025-01-06 17:29:51\ncategories:\n- [Vue]\ntags:\n- [Vue]\n---\n\n## 项目对比文章的注解篇\n\n1. Vuex 和 Pinia \n\nVuex 和 Pinia 都是 Vue.js 的状态管理库，用于帮助开发者管理大型应用中的全局状态。它们的主要功能是提供一个集中存储和管理应用状态的机制，使得状态的更新和访问更加可预测和可维护。\n\nAPI风格 \nPinia使用类似Vue组件的API来创建和使用store，而Vuex使用一个全局对象来访问store。\n在Pinia中，状态是响应式的，这意味着当状态发生变化时，组件会自动更新。在Vuex中，我们需要手动触发更新。\nPinia的store是模块化的，这意味着每个store可以包含自己的状态、操作和插件。在Vuex中，store是全局的，这意味着所有的状态和操作都在同一个store中。\n\nVuex 的功能 \n- 集中存储状态：Vuex 提供了一个全局的 state 对象，所有组件都可以访问和修改这个状态。\n- 严格的状态更新规则：状态只能通过提交 mutation 来更新，而 mutation 必须是同步的。\n- 异步操作：通过 actions 来处理异步逻辑，然后提交 mutation 更新状态。\n- 模块化：支持将状态管理拆分成多个模块，每个模块可以有自己的 state、getters、mutations 和 actions。\n- 严格模式：可以开启严格模式来确保状态只通过 mutation 来更新，避免状态被意外修改。\n\n``` javascript\n// store.js\nimport Vuex from 'vuex'\n\nexport default new Vuex.Store({\n  state: {\n    count: 0,\n  },\n  mutations: {\n    increment(state) {\n      state.count++\n    },\n    decrement(state) {\n      state.count--\n    },\n  },\n  actions: {\n    increment({ commit }) {\n      commit('increment')\n    },\n    decrement({ commit }) {\n      commit('decrement')\n    },\n  },\n})\n\n// 组件中使用\nimport { mapState, mapActions } from 'vuex'\n\nexport default {\n  computed: mapState({\n    count: state => state.count,\n  }),\n  methods: mapActions(['increment', 'decrement']),\n}\n\n\n```\n\nPinia 的功能 \n- 更简洁的 API：Pinia 提供了更简洁和直观的 API，使得状态管理更加简单易用。\n- 组合式 API 支持：Pinia 完全基于 Vue 3 的组合式 API 设计，与 Vue 3 的特性（如 setup 函数）更加契合。\n- 无严格模式：Pinia 不需要严格模式，因为它的设计使得状态更新更加自然和安全。\n- 类型推断：Pinia 提供了更好的 TypeScript 支持，能够自动推断状态的类型，减少了类型注解的需要。\n- 插件系统：支持插件系统，可以扩展 Pinia 的功能。\n\n``` javascript\nimport { defineStore } from 'pinia'\n\nexport const useCounterStore = defineStore({\n  id: 'counter',\n  state: () => ({\n    count: 0,\n  }),\n  actions: {\n    increment() {\n      this.count++\n    },\n    decrement() {\n      this.count--\n    },\n  },\n})\n\n```\n\n区别 \n- API 设计：Vuex 的 API 相对复杂，需要定义 state、getters、mutations、actions 等多个部分，而 Pinia 的 API 更为简洁，通过 defineStore 函数来定义状态管理。\n- 与 Vue 的集成：Vuex 主要与 Vue 2 和 Vue 3 的选项式 API 集成，而 Pinia 完全基于 Vue 3 的组合式 API 设计，更适合 Vue 3 的开发方式。\n- 类型支持：Pinia 提供了更好的 TypeScript 支持，能够自动推断类型，而 Vuex 在 TypeScript 支持方面需要更多的类型注解。\n- 性能和易用性：Pinia 由于其简洁的设计和与 Vue 3 的紧密集成，通常被认为在性能和易用性上更优。\n- 社区和生态：Vuex 是 Vue.js 的官方状态管理库，拥有较大的社区和丰富的生态支持，而 Pinia 是 Vue 3 推荐的状态管理库，逐渐在社区中获得更多的关注和支持。\n\n2. watch和watchEffect\n\nwatch 和 watchEffect 是 Vue 3 中用于响应式地观察数据变化的两个 API，它们在使用场景和行为上有一些区别。\n\n- watch \nwatch API 与vue2选项式 API this.$watch (以及相应的 watch 选项) 完全等效。watch\n需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的——即回调仅在侦听源发生变化时被调用。\n\n``` javascript\n// 侦听一个 getter\nconst state = reactive({ count: 0 })\nwatch(\n  () => state.count,\n  (count, prevCount) => {\n    /* ... */\n  }\n)\n\n// 直接侦听一个 ref\nconst count = ref(0)\nwatch(count, (count, prevCount) => {\n  /* ... */\n})\n\n//监听多个源\nwatch([fooRef, barRef], ([foo, bar], [prevFoo, prevBar]) => {\n  /* ... */\n})\n```\n\n- watchEffect \n立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。\n\n``` javascript\nconst count = ref(0)\n\nwatchEffect(() => console.log(count.value))\n// -> logs 0\n\nsetTimeout(() => {\n  count.value++\n  // -> logs 1\n}, 100)\n\n```\n\n区别\n- 执行时机：watchEffect是立即执行的，在页面加载时会主动执行一次，来收集依赖；而watch是惰性地执行副作用，它不会立即执行，但可以配置 immediate，使其主动触发\n- 参数不同：watchEffect只需要传递一个回调函数，不需要传递侦听的数据，它会在页面加载时主动执行一次，来收集依赖；而watch至少要有两个参数（第三个参数是配置项），第一个参数是侦听的数据，第二个参数是回调函数\n- 结果不同：watchEffect获取不到更改前的值；而watch可以同时获取更改前和更改后的值\n\n\n3. 语法糖内的defineProps及defineEmits、defineExpose\n\ndefineProps 和 defineEmits 都是只能在 ``` <script setup>  ```中使用的编译器宏。他们不需要导入，且会随着 ```<script setup> ```的处理过程一同被编译掉。\n\ndefineProps 接收与 props 选项相同的值，defineEmits 接收与 emits 选项相同的值，它们具备完整的类型推断并且在 script setup 中是直接可用的。\n\ndefineProps 或 defineEmits 要么使用运行时声明，要么使用类型声明。同时使用两种声明方式会导致编译报错\n\n- defineProps\n获取组件传值: 父传子 defineProps\n\n``` javascript\n<template>\n  <h1>{{ msg }}</h1>\n  <div @click=\"clickThis\">1111</div>\n</template>\n\n<script setup lang=\"ts\">\n  defineProps<{ // 采用ts专有声明，无默认值\n    msg: string,\n    num?: number\n  }>()\n     // 采用ts专有声明，有默认值\n    interface Props {\n        msg?: string\n        labels?: string[]\n    }\n    const props = withDefaults(defineProps<Props>(), {\n        msg: 'hello',\n        labels: () => ['one', 'two']\n    })\n    \n  defineProps({ // 非ts专有声明\n    msg: String,\n    num: {\n      type:Number,\n      default: ''\n    }\n  })\n</script>\n\n<style scoped lang=\"less\">\n</style>\n\n```\n\n- defineEmits\ndefineEmits 子组件向父组件事件传递:子传父\n``` javascript\n<template>\n  <div @click=\"clickThis\">点我</div>\n</template>\n\n<script setup lang=\"ts\">\n    /*ts专有*/\n  const emit= defineEmits<{\n    (e: 'click', num: number): void\n  }>()\n    /*非ts专有*/\n  const emit= defineEmits(['click'])\n  \n  const clickThis = () => {\n    emit('click',2)\n  }\n</script>\n\n<style scoped lang=\"less\">\n</style>\n\n```\n\n- defineExpose\n子组件暴露属性和方法给父组件 defineExpose\n\n``` javascript\n<template>\n  <div>子组件helloword.vue</div>\n</template>\n\n<script setup lang=\"ts\">\nimport { ref } from 'vue'\nconst count = ref(123456)\ndefineExpose({\n  count\n})\n</script>\n\n<style scoped lang=\"less\">\n</style>\n```\n\n","slug":"项目对比注解","published":1,"updated":"2025-01-06T09:47:37.638Z","comments":1,"layout":"post","photos":[],"_id":"cm7ll5dfq003umcuy78l36a3m","content":"<h2 id=\"项目对比文章的注解篇\"><a class=\"anchor\" href=\"#项目对比文章的注解篇\">#</a> 项目对比文章的注解篇</h2>\n<ol>\n<li>Vuex 和 Pinia</li>\n</ol>\n<p>Vuex 和 Pinia 都是 Vue.js 的状态管理库，用于帮助开发者管理大型应用中的全局状态。它们的主要功能是提供一个集中存储和管理应用状态的机制，使得状态的更新和访问更加可预测和可维护。</p>\n<p>API 风格<br />\n Pinia 使用类似 Vue 组件的 API 来创建和使用 store，而 Vuex 使用一个全局对象来访问 store。<br />\n在 Pinia 中，状态是响应式的，这意味着当状态发生变化时，组件会自动更新。在 Vuex 中，我们需要手动触发更新。<br />\nPinia 的 store 是模块化的，这意味着每个 store 可以包含自己的状态、操作和插件。在 Vuex 中，store 是全局的，这意味着所有的状态和操作都在同一个 store 中。</p>\n<p>Vuex 的功能</p>\n<ul>\n<li>集中存储状态：Vuex 提供了一个全局的 state 对象，所有组件都可以访问和修改这个状态。</li>\n<li>严格的状态更新规则：状态只能通过提交 mutation 来更新，而 mutation 必须是同步的。</li>\n<li>异步操作：通过 actions 来处理异步逻辑，然后提交 mutation 更新状态。</li>\n<li>模块化：支持将状态管理拆分成多个模块，每个模块可以有自己的 state、getters、mutations 和 actions。</li>\n<li>严格模式：可以开启严格模式来确保状态只通过 mutation 来更新，避免状态被意外修改。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// store.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'decrement'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 组件中使用</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapState<span class=\"token punctuation\">,</span> mapActions <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Pinia 的功能</p>\n<ul>\n<li>更简洁的 API：Pinia 提供了更简洁和直观的 API，使得状态管理更加简单易用。</li>\n<li>组合式 API 支持：Pinia 完全基于 Vue 3 的组合式 API 设计，与 Vue 3 的特性（如 setup 函数）更加契合。</li>\n<li>无严格模式：Pinia 不需要严格模式，因为它的设计使得状态更新更加自然和安全。</li>\n<li>类型推断：Pinia 提供了更好的 TypeScript 支持，能够自动推断状态的类型，减少了类型注解的需要。</li>\n<li>插件系统：支持插件系统，可以扩展 Pinia 的功能。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCounterStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>区别</p>\n<ul>\n<li>API 设计：Vuex 的 API 相对复杂，需要定义 state、getters、mutations、actions 等多个部分，而 Pinia 的 API 更为简洁，通过 defineStore 函数来定义状态管理。</li>\n<li>与 Vue 的集成：Vuex 主要与 Vue 2 和 Vue 3 的选项式 API 集成，而 Pinia 完全基于 Vue 3 的组合式 API 设计，更适合 Vue 3 的开发方式。</li>\n<li>类型支持：Pinia 提供了更好的 TypeScript 支持，能够自动推断类型，而 Vuex 在 TypeScript 支持方面需要更多的类型注解。</li>\n<li>性能和易用性：Pinia 由于其简洁的设计和与 Vue 3 的紧密集成，通常被认为在性能和易用性上更优。</li>\n<li>社区和生态：Vuex 是 Vue.js 的官方状态管理库，拥有较大的社区和丰富的生态支持，而 Pinia 是 Vue 3 推荐的状态管理库，逐渐在社区中获得更多的关注和支持。</li>\n</ul>\n<ol start=\"2\">\n<li>watch 和 watchEffect</li>\n</ol>\n<p>watch 和 watchEffect 是 Vue 3 中用于响应式地观察数据变化的两个 API，它们在使用场景和行为上有一些区别。</p>\n<ul>\n<li>watch<br />\nwatch API 与 vue2 选项式 API this.$watch (以及相应的 watch 选项) 完全等效。watch<br />\n 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的 —— 即回调仅在侦听源发生变化时被调用。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 侦听一个 getter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">count<span class=\"token punctuation\">,</span> prevCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 直接侦听一个 ref</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count<span class=\"token punctuation\">,</span> prevCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 监听多个源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fooRef<span class=\"token punctuation\">,</span> barRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>prevFoo<span class=\"token punctuation\">,</span> prevBar<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>watchEffect<br />\n 立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// -> logs 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// -> logs 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>区别</p>\n<ul>\n<li>执行时机：watchEffect 是立即执行的，在页面加载时会主动执行一次，来收集依赖；而 watch 是惰性地执行副作用，它不会立即执行，但可以配置 immediate，使其主动触发</li>\n<li>参数不同：watchEffect 只需要传递一个回调函数，不需要传递侦听的数据，它会在页面加载时主动执行一次，来收集依赖；而 watch 至少要有两个参数（第三个参数是配置项），第一个参数是侦听的数据，第二个参数是回调函数</li>\n<li>结果不同：watchEffect 获取不到更改前的值；而 watch 可以同时获取更改前和更改后的值</li>\n</ul>\n<ol start=\"3\">\n<li>语法糖内的 defineProps 及 defineEmits、defineExpose</li>\n</ol>\n<p>defineProps 和 defineEmits 都是只能在  <code>&lt;script setup&gt; </code> 中使用的编译器宏。他们不需要导入，且会随着  <code>&lt;script setup&gt; </code> 的处理过程一同被编译掉。</p>\n<p>defineProps 接收与 props 选项相同的值，defineEmits 接收与 emits 选项相同的值，它们具备完整的类型推断并且在 script setup 中是直接可用的。</p>\n<p>defineProps 或 defineEmits 要么使用运行时声明，要么使用类型声明。同时使用两种声明方式会导致编译报错</p>\n<ul>\n<li>defineProps<br />\n 获取组件传值：父传子 defineProps</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickThis\"</span><span class=\"token operator\">></span><span class=\"token number\">1111</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  defineProps<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 采用 ts 专有声明，无默认值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    num<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token comment\">// 采用 ts 专有声明，有默认值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        msg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        labels<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">withDefaults</span><span class=\"token punctuation\">(</span>defineProps<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function-variable function\">labels</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">defineProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 非 ts 专有声明</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span>Number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>defineEmits<br />\ndefineEmits 子组件向父组件事件传递：子传父</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickThis\"</span><span class=\"token operator\">></span>点我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*ts 专有 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> emit<span class=\"token operator\">=</span> defineEmits<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 非 ts 专有 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> emit<span class=\"token operator\">=</span> <span class=\"token function\">defineEmits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clickThis</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>defineExpose<br />\n 子组件暴露属性和方法给父组件 defineExpose</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>子组件helloword<span class=\"token punctuation\">.</span>vue<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">defineExpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  count</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure>","length":4180,"excerpt":"","more":"<h2 id=\"项目对比文章的注解篇\"><a class=\"anchor\" href=\"#项目对比文章的注解篇\">#</a> 项目对比文章的注解篇</h2>\n<ol>\n<li>Vuex 和 Pinia</li>\n</ol>\n<p>Vuex 和 Pinia 都是 Vue.js 的状态管理库，用于帮助开发者管理大型应用中的全局状态。它们的主要功能是提供一个集中存储和管理应用状态的机制，使得状态的更新和访问更加可预测和可维护。</p>\n<p>API 风格<br />\n Pinia 使用类似 Vue 组件的 API 来创建和使用 store，而 Vuex 使用一个全局对象来访问 store。<br />\n在 Pinia 中，状态是响应式的，这意味着当状态发生变化时，组件会自动更新。在 Vuex 中，我们需要手动触发更新。<br />\nPinia 的 store 是模块化的，这意味着每个 store 可以包含自己的状态、操作和插件。在 Vuex 中，store 是全局的，这意味着所有的状态和操作都在同一个 store 中。</p>\n<p>Vuex 的功能</p>\n<ul>\n<li>集中存储状态：Vuex 提供了一个全局的 state 对象，所有组件都可以访问和修改这个状态。</li>\n<li>严格的状态更新规则：状态只能通过提交 mutation 来更新，而 mutation 必须是同步的。</li>\n<li>异步操作：通过 actions 来处理异步逻辑，然后提交 mutation 更新状态。</li>\n<li>模块化：支持将状态管理拆分成多个模块，每个模块可以有自己的 state、getters、mutations 和 actions。</li>\n<li>严格模式：可以开启严格模式来确保状态只通过 mutation 来更新，避免状态被意外修改。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// store.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'decrement'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 组件中使用</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapState<span class=\"token punctuation\">,</span> mapActions <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Pinia 的功能</p>\n<ul>\n<li>更简洁的 API：Pinia 提供了更简洁和直观的 API，使得状态管理更加简单易用。</li>\n<li>组合式 API 支持：Pinia 完全基于 Vue 3 的组合式 API 设计，与 Vue 3 的特性（如 setup 函数）更加契合。</li>\n<li>无严格模式：Pinia 不需要严格模式，因为它的设计使得状态更新更加自然和安全。</li>\n<li>类型推断：Pinia 提供了更好的 TypeScript 支持，能够自动推断状态的类型，减少了类型注解的需要。</li>\n<li>插件系统：支持插件系统，可以扩展 Pinia 的功能。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCounterStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>区别</p>\n<ul>\n<li>API 设计：Vuex 的 API 相对复杂，需要定义 state、getters、mutations、actions 等多个部分，而 Pinia 的 API 更为简洁，通过 defineStore 函数来定义状态管理。</li>\n<li>与 Vue 的集成：Vuex 主要与 Vue 2 和 Vue 3 的选项式 API 集成，而 Pinia 完全基于 Vue 3 的组合式 API 设计，更适合 Vue 3 的开发方式。</li>\n<li>类型支持：Pinia 提供了更好的 TypeScript 支持，能够自动推断类型，而 Vuex 在 TypeScript 支持方面需要更多的类型注解。</li>\n<li>性能和易用性：Pinia 由于其简洁的设计和与 Vue 3 的紧密集成，通常被认为在性能和易用性上更优。</li>\n<li>社区和生态：Vuex 是 Vue.js 的官方状态管理库，拥有较大的社区和丰富的生态支持，而 Pinia 是 Vue 3 推荐的状态管理库，逐渐在社区中获得更多的关注和支持。</li>\n</ul>\n<ol start=\"2\">\n<li>watch 和 watchEffect</li>\n</ol>\n<p>watch 和 watchEffect 是 Vue 3 中用于响应式地观察数据变化的两个 API，它们在使用场景和行为上有一些区别。</p>\n<ul>\n<li>watch<br />\nwatch API 与 vue2 选项式 API this.$watch (以及相应的 watch 选项) 完全等效。watch<br />\n 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的 —— 即回调仅在侦听源发生变化时被调用。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 侦听一个 getter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">count<span class=\"token punctuation\">,</span> prevCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 直接侦听一个 ref</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count<span class=\"token punctuation\">,</span> prevCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 监听多个源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fooRef<span class=\"token punctuation\">,</span> barRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>prevFoo<span class=\"token punctuation\">,</span> prevBar<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>watchEffect<br />\n 立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// -> logs 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// -> logs 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>区别</p>\n<ul>\n<li>执行时机：watchEffect 是立即执行的，在页面加载时会主动执行一次，来收集依赖；而 watch 是惰性地执行副作用，它不会立即执行，但可以配置 immediate，使其主动触发</li>\n<li>参数不同：watchEffect 只需要传递一个回调函数，不需要传递侦听的数据，它会在页面加载时主动执行一次，来收集依赖；而 watch 至少要有两个参数（第三个参数是配置项），第一个参数是侦听的数据，第二个参数是回调函数</li>\n<li>结果不同：watchEffect 获取不到更改前的值；而 watch 可以同时获取更改前和更改后的值</li>\n</ul>\n<ol start=\"3\">\n<li>语法糖内的 defineProps 及 defineEmits、defineExpose</li>\n</ol>\n<p>defineProps 和 defineEmits 都是只能在  <code>&lt;script setup&gt; </code> 中使用的编译器宏。他们不需要导入，且会随着  <code>&lt;script setup&gt; </code> 的处理过程一同被编译掉。</p>\n<p>defineProps 接收与 props 选项相同的值，defineEmits 接收与 emits 选项相同的值，它们具备完整的类型推断并且在 script setup 中是直接可用的。</p>\n<p>defineProps 或 defineEmits 要么使用运行时声明，要么使用类型声明。同时使用两种声明方式会导致编译报错</p>\n<ul>\n<li>defineProps<br />\n 获取组件传值：父传子 defineProps</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickThis\"</span><span class=\"token operator\">></span><span class=\"token number\">1111</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  defineProps<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 采用 ts 专有声明，无默认值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    num<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token comment\">// 采用 ts 专有声明，有默认值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        msg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        labels<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">withDefaults</span><span class=\"token punctuation\">(</span>defineProps<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function-variable function\">labels</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">defineProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 非 ts 专有声明</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span>Number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>defineEmits<br />\ndefineEmits 子组件向父组件事件传递：子传父</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickThis\"</span><span class=\"token operator\">></span>点我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*ts 专有 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> emit<span class=\"token operator\">=</span> defineEmits<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 非 ts 专有 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> emit<span class=\"token operator\">=</span> <span class=\"token function\">defineEmits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clickThis</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>defineExpose<br />\n 子组件暴露属性和方法给父组件 defineExpose</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>子组件helloword<span class=\"token punctuation\">.</span>vue<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">defineExpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  count</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/Ant-design-vue中icon的使用/01.jpg","post":"cm7ll5df40001mcuyc73i6q1s","slug":"01.jpg","modified":1,"renderable":0},{"_id":"source/_posts/Ant-design-vue中icon的使用/02.jpg","post":"cm7ll5df40001mcuyc73i6q1s","slug":"02.jpg","modified":1,"renderable":0},{"_id":"source/_posts/Ant-design-vue中icon的使用/03.jpg","post":"cm7ll5df40001mcuyc73i6q1s","slug":"03.jpg","modified":1,"renderable":0},{"_id":"source/_posts/Ant-design-vue中icon的使用/04.jpg","post":"cm7ll5df40001mcuyc73i6q1s","slug":"04.jpg","modified":1,"renderable":0},{"_id":"source/_posts/HTTP协议相关知识/1.jpg","post":"cm7ll5df80006mcuy33jeg5wa","slug":"1.jpg","modified":1,"renderable":0},{"_id":"source/_posts/HTTP协议相关知识/2.jpg","post":"cm7ll5df80006mcuy33jeg5wa","slug":"2.jpg","modified":1,"renderable":0},{"_id":"source/_posts/HTTP协议相关知识/gateway.jpg","post":"cm7ll5df80006mcuy33jeg5wa","slug":"gateway.jpg","modified":1,"renderable":0},{"_id":"source/_posts/HTTP协议相关知识/报文.jpg","post":"cm7ll5df80006mcuy33jeg5wa","slug":"报文.jpg","modified":1,"renderable":0},{"_id":"source/_posts/HTTP协议相关知识/请求代码和报文.jpg","post":"cm7ll5df80006mcuy33jeg5wa","slug":"请求代码和报文.jpg","modified":1,"renderable":0},{"_id":"source/_posts/flex弹性布局/01.png","post":"cm7ll5dfb000lmcuy4rvweydj","slug":"01.png","modified":1,"renderable":0},{"_id":"source/_posts/FMRI2TXT-非侵入性语言脑机接口/01.jpg","post":"cm7ll5df60003mcuy7up42l0u","slug":"01.jpg","modified":1,"renderable":0},{"_id":"source/_posts/FMRI2TXT-非侵入性语言脑机接口/02.jpg","post":"cm7ll5df60003mcuy7up42l0u","slug":"02.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-浏览器是如何运作的/01.jpg","post":"cm7ll5dfg001gmcuy8bvk502t","slug":"01.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-浏览器是如何运作的/02.jpg","post":"cm7ll5dfg001gmcuy8bvk502t","slug":"02.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-浏览器是如何运作的/03.gif","post":"cm7ll5dfg001gmcuy8bvk502t","slug":"03.gif","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-浏览器是如何运作的/04.png","post":"cm7ll5dfg001gmcuy8bvk502t","slug":"04.png","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-HTTP基本概念/01.jpg","post":"cm7ll5dff0018mcuygdsw05x2","slug":"01.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-HTTP基本概念/02.jpg","post":"cm7ll5dff0018mcuygdsw05x2","slug":"02.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-HTTP基本概念/03.jpg","post":"cm7ll5dff0018mcuygdsw05x2","slug":"03.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-HTTP基本概念/04.jpg","post":"cm7ll5dff0018mcuygdsw05x2","slug":"04.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-HTTP基本概念/05.jpg","post":"cm7ll5dff0018mcuygdsw05x2","slug":"05.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端基础-HTTP基本概念/错误码.jpg","post":"cm7ll5dff0018mcuygdsw05x2","slug":"错误码.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习之JS篇（一）/01.jpg","post":"cm7ll5dfh001lmcuybtdk7szf","slug":"01.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习之JS篇（二）/01.jpg","post":"cm7ll5dfi001vmcuy78pd4yo2","slug":"01.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端编程语言/01.jpg","post":"cm7ll5dfj0027mcuy17i92y3k","slug":"01.jpg","modified":1,"renderable":0},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/01.png","post":"cm7ll5dfj002amcuy0o5egnjg","slug":"01.png","modified":1,"renderable":0},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/02.png","post":"cm7ll5dfj002amcuy0o5egnjg","slug":"02.png","modified":1,"renderable":0},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/03.png","post":"cm7ll5dfj002amcuy0o5egnjg","slug":"03.png","modified":1,"renderable":0},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/04.png","post":"cm7ll5dfj002amcuy0o5egnjg","slug":"04.png","modified":1,"renderable":0},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/05.png","post":"cm7ll5dfj002amcuy0o5egnjg","slug":"05.png","modified":1,"renderable":0},{"_id":"source/_posts/基于Nodejs-vue3-uniapp的微信小程序全栈开发配置帖/06.png","post":"cm7ll5dfj002amcuy0o5egnjg","slug":"06.png","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/03.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"03.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/04.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"04.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/05.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"05.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/06.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"06.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/07.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"07.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/08.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"08.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/09.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"09.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/10.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"10.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/OSI七层模型.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"OSI七层模型.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（二）/TCP_IP_五层协议.jpg","post":"cm7ll5dfk002dmcuy5wrh7p3t","slug":"TCP_IP_五层协议.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）/http1长短连接.jpg","post":"cm7ll5dfi001smcuy24fyhi5e","slug":"http1长短连接.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）/HTTP与HTTPS.jpg","post":"cm7ll5dfi001smcuy24fyhi5e","slug":"HTTP与HTTPS.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）/TLS加密.jpg","post":"cm7ll5dfi001smcuy24fyhi5e","slug":"TLS加密.jpg","modified":1,"renderable":0},{"_id":"source/_posts/前端学习汇总-计算机网络篇（一）/状态码类别.jpg","post":"cm7ll5dfi001smcuy24fyhi5e","slug":"状态码类别.jpg","modified":1,"renderable":0},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/attention.png","post":"cm7ll5dfm002tmcuy8l6saxp6","slug":"attention.png","modified":1,"renderable":0},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/e-d.png","post":"cm7ll5dfm002tmcuy8l6saxp6","slug":"e-d.png","modified":1,"renderable":0},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/encore.png","post":"cm7ll5dfm002tmcuy8l6saxp6","slug":"encore.png","modified":1,"renderable":0},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/model.png","post":"cm7ll5dfm002tmcuy8l6saxp6","slug":"model.png","modified":1,"renderable":0},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/no_attention.png","post":"cm7ll5dfm002tmcuy8l6saxp6","slug":"no_attention.png","modified":1,"renderable":0},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/RNN_BLUE.png","post":"cm7ll5dfm002tmcuy8l6saxp6","slug":"RNN_BLUE.png","modified":1,"renderable":0},{"_id":"source/_posts/基于术语词典干预的机器翻译挑战赛/spacy.png","post":"cm7ll5dfm002tmcuy8l6saxp6","slug":"spacy.png","modified":1,"renderable":0},{"_id":"source/_posts/大模型基础/attention01.png","post":"cm7ll5dfm002umcuyeiw92doi","slug":"attention01.png","modified":1,"renderable":0},{"_id":"source/_posts/大模型基础/Attention公式.png","post":"cm7ll5dfm002umcuyeiw92doi","slug":"Attention公式.png","modified":1,"renderable":0},{"_id":"source/_posts/大模型基础/attention原版.png","post":"cm7ll5dfm002umcuyeiw92doi","slug":"attention原版.png","modified":1,"renderable":0},{"_id":"source/_posts/大模型基础/BNLN.jpg","post":"cm7ll5dfm002umcuyeiw92doi","slug":"BNLN.jpg","modified":1,"renderable":0},{"_id":"source/_posts/大模型基础/transformer01.png","post":"cm7ll5dfm002umcuyeiw92doi","slug":"transformer01.png","modified":1,"renderable":0},{"_id":"source/_posts/大模型基础/transformer原版.png","post":"cm7ll5dfm002umcuyeiw92doi","slug":"transformer原版.png","modified":1,"renderable":0},{"_id":"source/_posts/开发问题记录-AI命理师/aichat.jpg","post":"cm7ll5dfn002ymcuyadd3ccbs","slug":"aichat.jpg","modified":1,"renderable":0},{"_id":"source/_posts/开发问题记录-AI命理师/cursor-1.jpg","post":"cm7ll5dfn002ymcuyadd3ccbs","slug":"cursor-1.jpg","modified":1,"renderable":0},{"_id":"source/_posts/开发问题记录-AI命理师/wx.jpg","post":"cm7ll5dfn002ymcuyadd3ccbs","slug":"wx.jpg","modified":1,"renderable":0},{"_id":"source/_posts/机器翻译赛-门控循环单元GRU/01.png","post":"cm7ll5dfn0033mcuyb7bj72hv","slug":"01.png","modified":1,"renderable":0},{"_id":"source/_posts/机器翻译赛-门控循环单元GRU/02.png","post":"cm7ll5dfn0033mcuyb7bj72hv","slug":"02.png","modified":1,"renderable":0},{"_id":"source/_posts/机器翻译赛-门控循环单元GRU/03.png","post":"cm7ll5dfn0033mcuyb7bj72hv","slug":"03.png","modified":1,"renderable":0},{"_id":"source/_posts/机器翻译赛-seq2seq与transformer/01.png","post":"cm7ll5dfo003amcuygnt98amf","slug":"01.png","modified":1,"renderable":0},{"_id":"source/_posts/机器翻译赛-seq2seq与transformer/02.png","post":"cm7ll5dfo003amcuygnt98amf","slug":"02.png","modified":1,"renderable":0},{"_id":"source/_posts/超级常用的一些git命令/01.jpg","post":"cm7ll5dfp003nmcuy4ruk7a7s","slug":"01.jpg","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cm7ll5df40001mcuyc73i6q1s","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfb000jmcuy4v690nfk"},{"post_id":"cm7ll5dfa000dmcuy4ukuebmj","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfc000pmcuy3feyf0u2"},{"post_id":"cm7ll5df60003mcuy7up42l0u","category_id":"cm7ll5df9000bmcuyf3ds1jyb","_id":"cm7ll5dfc000smcuy2mff6ik9"},{"post_id":"cm7ll5df80006mcuy33jeg5wa","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfd000wmcuy8dy3er48"},{"post_id":"cm7ll5df80008mcuy4re54ddg","category_id":"cm7ll5dfb000nmcuybozqaniq","_id":"cm7ll5dff0014mcuy2drmc7qh"},{"post_id":"cm7ll5dfc000rmcuy5rnsbsn7","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dff0017mcuy4x65bc3t"},{"post_id":"cm7ll5dfd000umcuy7wz7gk0o","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfg001cmcuy3f06g3hd"},{"post_id":"cm7ll5dfd000ymcuyhjwrgoeu","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfg001fmcuyacyqdj2z"},{"post_id":"cm7ll5df90009mcuy5k5894ms","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfh001kmcuyagq1431z"},{"post_id":"cm7ll5dfd0010mcuy9n55fz3z","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfh001nmcuy1cp8h0l1"},{"post_id":"cm7ll5dff0015mcuy4gkib5kh","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfh001rmcuyglnjdqhg"},{"post_id":"cm7ll5dfa000emcuy2naabv83","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfi001umcuybunq8tys"},{"post_id":"cm7ll5dff0018mcuygdsw05x2","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfi001xmcuy5ixk2xbm"},{"post_id":"cm7ll5dfg001dmcuyb83o4jce","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfi0020mcuyd4o33m2t"},{"post_id":"cm7ll5dfb000imcuyb44fggav","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfj0023mcuy7ji80i8m"},{"post_id":"cm7ll5dfg001gmcuy8bvk502t","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfj0026mcuy0d6g0lgc"},{"post_id":"cm7ll5dfh001lmcuybtdk7szf","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfj0029mcuy89kv4qj8"},{"post_id":"cm7ll5dfb000lmcuy4rvweydj","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfk002cmcuy4mwshubh"},{"post_id":"cm7ll5dfh001omcuydvi93gca","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfk002fmcuy04de1g71"},{"post_id":"cm7ll5dfi001smcuy24fyhi5e","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfk002hmcuyfk8e2nay"},{"post_id":"cm7ll5dfi001vmcuy78pd4yo2","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfk002jmcuy94bteiq6"},{"post_id":"cm7ll5dfi001ymcuy03rz0she","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfk002lmcuy0ao142yh"},{"post_id":"cm7ll5dfi0021mcuy36l03nwh","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfk002nmcuygl8lf3dk"},{"post_id":"cm7ll5dfj0024mcuy0nzcemtu","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfk002pmcuy3lyv2zya"},{"post_id":"cm7ll5dfj0027mcuy17i92y3k","category_id":"cm7ll5dfd000vmcuyeegs8unz","_id":"cm7ll5dfk002qmcuy3hzf02jn"},{"post_id":"cm7ll5dfj002amcuy0o5egnjg","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfk002rmcuy4tfghy3p"},{"post_id":"cm7ll5dfk002dmcuy5wrh7p3t","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfk002smcuy6jpgbvsy"},{"post_id":"cm7ll5dfm002umcuyeiw92doi","category_id":"cm7ll5df9000bmcuyf3ds1jyb","_id":"cm7ll5dfo0034mcuyfg9g4ruq"},{"post_id":"cm7ll5dfm002wmcuyghug22nd","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfo0037mcuy9wqec3h7"},{"post_id":"cm7ll5dfn002ymcuyadd3ccbs","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfo003bmcuyc1fahrsw"},{"post_id":"cm7ll5dfm002tmcuy8l6saxp6","category_id":"cm7ll5dfn002xmcuyferjclz2","_id":"cm7ll5dfp003emcuyaaa047zm"},{"post_id":"cm7ll5dfn0030mcuydyebe3hc","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfp003hmcuy1wvl3eaw"},{"post_id":"cm7ll5dfn0033mcuyb7bj72hv","category_id":"cm7ll5dfn002xmcuyferjclz2","_id":"cm7ll5dfp003lmcuyaob18emy"},{"post_id":"cm7ll5dfo0036mcuya88z726d","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfp003omcuyaio46s7a"},{"post_id":"cm7ll5dfo003amcuygnt98amf","category_id":"cm7ll5dfn002xmcuyferjclz2","_id":"cm7ll5dfq003smcuy8hss8ipc"},{"post_id":"cm7ll5dfo003dmcuy8q677nig","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfq003vmcuyaip045kf"},{"post_id":"cm7ll5dfp003gmcuyekwh2pko","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfq003xmcuygf5bf29m"},{"post_id":"cm7ll5dfp003kmcuyhvrtdx4t","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfq0040mcuy9mf9ehgd"},{"post_id":"cm7ll5dfp003nmcuy4ruk7a7s","category_id":"cm7ll5dfa000gmcuyd8ej7wql","_id":"cm7ll5dfq0042mcuyeh9y05h3"},{"post_id":"cm7ll5dfq003qmcuy78d7bqqn","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfq0043mcuy9ko67utg"},{"post_id":"cm7ll5dfq003umcuy78l36a3m","category_id":"cm7ll5df80007mcuy2hgz7sn9","_id":"cm7ll5dfq0045mcuy4wph2nzc"}],"PostTag":[{"post_id":"cm7ll5df40001mcuyc73i6q1s","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfa000cmcuy6oz1fozf"},{"post_id":"cm7ll5dfa000dmcuy4ukuebmj","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfb000hmcuyfpqm9jyd"},{"post_id":"cm7ll5df60003mcuy7up42l0u","tag_id":"cm7ll5df9000amcuy37b6e2ig","_id":"cm7ll5dfb000kmcuygx4a1cq6"},{"post_id":"cm7ll5df80008mcuy4re54ddg","tag_id":"cm7ll5dfa000fmcuy45jp90vw","_id":"cm7ll5dfc000qmcuybg590cpn"},{"post_id":"cm7ll5df90009mcuy5k5894ms","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfd000xmcuyfp0864at"},{"post_id":"cm7ll5dfc000rmcuy5rnsbsn7","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfd000zmcuygwcke4xx"},{"post_id":"cm7ll5dfd000ymcuyhjwrgoeu","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dff0013mcuye5780pnj"},{"post_id":"cm7ll5dfa000emcuy2naabv83","tag_id":"cm7ll5dfc000tmcuy93gj0c3r","_id":"cm7ll5dff0016mcuy1n1l7f24"},{"post_id":"cm7ll5dfd0010mcuy9n55fz3z","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfg001bmcuy20rebr9n"},{"post_id":"cm7ll5dff0015mcuy4gkib5kh","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfg001emcuy73y8de9b"},{"post_id":"cm7ll5dfb000imcuyb44fggav","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfh001jmcuyb4ql5g1x"},{"post_id":"cm7ll5dfg001dmcuyb83o4jce","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfh001mmcuyerbq5j4c"},{"post_id":"cm7ll5dfb000lmcuy4rvweydj","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfh001qmcuyg5cb3vne"},{"post_id":"cm7ll5dfg001gmcuy8bvk502t","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfi001tmcuyhqaa6sch"},{"post_id":"cm7ll5dfh001lmcuybtdk7szf","tag_id":"cm7ll5dfc000tmcuy93gj0c3r","_id":"cm7ll5dfi001wmcuy27qsc2u1"},{"post_id":"cm7ll5dfd000umcuy7wz7gk0o","tag_id":"cm7ll5dfc000tmcuy93gj0c3r","_id":"cm7ll5dfi001zmcuy8au2biyh"},{"post_id":"cm7ll5dfh001omcuydvi93gca","tag_id":"cm7ll5dfc000tmcuy93gj0c3r","_id":"cm7ll5dfj0022mcuycquibhi5"},{"post_id":"cm7ll5dfi001smcuy24fyhi5e","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfj0025mcuygwsr2kjn"},{"post_id":"cm7ll5dff0018mcuygdsw05x2","tag_id":"cm7ll5dfh001pmcuy7zk49ik7","_id":"cm7ll5dfj0028mcuydl6h07yi"},{"post_id":"cm7ll5dfi001vmcuy78pd4yo2","tag_id":"cm7ll5dfc000tmcuy93gj0c3r","_id":"cm7ll5dfj002bmcuy0p0c7ey6"},{"post_id":"cm7ll5dfi001ymcuy03rz0she","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfk002emcuyf6lq54f1"},{"post_id":"cm7ll5dfi0021mcuy36l03nwh","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfk002gmcuy54nu3ciw"},{"post_id":"cm7ll5dfj0024mcuy0nzcemtu","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfk002imcuyc2js282q"},{"post_id":"cm7ll5dfj0027mcuy17i92y3k","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfk002kmcuy98ui6o7j"},{"post_id":"cm7ll5dfj002amcuy0o5egnjg","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfk002mmcuy2lor9mc0"},{"post_id":"cm7ll5dfk002dmcuy5wrh7p3t","tag_id":"cm7ll5dfb000mmcuybxhwak9b","_id":"cm7ll5dfk002omcuyec2y5hja"},{"post_id":"cm7ll5dfm002wmcuyghug22nd","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfn002zmcuye5cigpjz"},{"post_id":"cm7ll5dfn002ymcuyadd3ccbs","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfn0032mcuyeyjkatx1"},{"post_id":"cm7ll5dfm002tmcuy8l6saxp6","tag_id":"cm7ll5dfm002vmcuyff6s41zq","_id":"cm7ll5dfo0035mcuy768c5tmu"},{"post_id":"cm7ll5dfn0033mcuyb7bj72hv","tag_id":"cm7ll5dfm002vmcuyff6s41zq","_id":"cm7ll5dfo0039mcuycmewfx9p"},{"post_id":"cm7ll5dfm002umcuyeiw92doi","tag_id":"cm7ll5dfn0031mcuy8hg114qi","_id":"cm7ll5dfo003cmcuy30rq8vk6"},{"post_id":"cm7ll5dfo0036mcuya88z726d","tag_id":"cm7ll5dfh001pmcuy7zk49ik7","_id":"cm7ll5dfp003fmcuy8ojv42gj"},{"post_id":"cm7ll5dfo003amcuygnt98amf","tag_id":"cm7ll5dfm002vmcuyff6s41zq","_id":"cm7ll5dfp003jmcuy829k604j"},{"post_id":"cm7ll5dfn0030mcuydyebe3hc","tag_id":"cm7ll5dfo0038mcuydbze716t","_id":"cm7ll5dfp003mmcuy90f671pp"},{"post_id":"cm7ll5dfp003kmcuyhvrtdx4t","tag_id":"cm7ll5dfh001pmcuy7zk49ik7","_id":"cm7ll5dfp003pmcuyhrqge45x"},{"post_id":"cm7ll5dfo003dmcuy8q677nig","tag_id":"cm7ll5dfp003imcuy2pgz5lka","_id":"cm7ll5dfq003tmcuybpaufy5g"},{"post_id":"cm7ll5dfq003qmcuy78d7bqqn","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfq003wmcuy05ri2kg7"},{"post_id":"cm7ll5dfq003umcuy78l36a3m","tag_id":"cm7ll5df70004mcuy1ayvhgsa","_id":"cm7ll5dfq003zmcuyctxm79bg"},{"post_id":"cm7ll5dfp003gmcuyekwh2pko","tag_id":"cm7ll5dfq003rmcuy6iipdgaq","_id":"cm7ll5dfq0041mcuyair7c6oa"},{"post_id":"cm7ll5dfp003nmcuy4ruk7a7s","tag_id":"cm7ll5dfq003ymcuyhq2j98a3","_id":"cm7ll5dfq0044mcuyah8z8ju2"}],"Tag":[{"name":"Vue","_id":"cm7ll5df70004mcuy1ayvhgsa"},{"name":"脑科学","_id":"cm7ll5df9000amcuy37b6e2ig"},{"name":"React,Vue","_id":"cm7ll5dfa000fmcuy45jp90vw"},{"name":"前端","_id":"cm7ll5dfb000mmcuybxhwak9b"},{"name":"前端开发","_id":"cm7ll5dfc000tmcuy93gj0c3r"},{"name":"计算机网络","_id":"cm7ll5dfh001pmcuy7zk49ik7"},{"name":"NLP","_id":"cm7ll5dfm002vmcuyff6s41zq"},{"name":"大模型,NLP","_id":"cm7ll5dfn0031mcuy8hg114qi"},{"name":"操作系统,计算机组成原理","_id":"cm7ll5dfo0038mcuydbze716t"},{"name":"操作系统","_id":"cm7ll5dfp003imcuy2pgz5lka"},{"name":"linux","_id":"cm7ll5dfq003rmcuy6iipdgaq"},{"name":"git","_id":"cm7ll5dfq003ymcuyhq2j98a3"}]}}