{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo",
    "subtitle": "",
    "icon": "https://kiyoumiii.github.io/images/favicon.ico",
    "description": "kiyoumiii's blog",
    "home_page_url": "https://kiyoumiii.github.io",
    "items": [
        {
            "id": "https://kiyoumiii.github.io/2025/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/",
            "url": "https://kiyoumiii.github.io/2025/02/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/",
            "title": "微信小程序开发笔记",
            "date_published": "2025-02-27T12:13:07.000Z",
            "content_html": "<h1 id=\"关于两个微信小程序项目aixiaoda和百无禁忌varmeta的开发笔记\"><a class=\"anchor\" href=\"#关于两个微信小程序项目aixiaoda和百无禁忌varmeta的开发笔记\">#</a> 关于两个微信小程序项目：AIxiaoda 和百无禁忌 Varmeta 的开发笔记</h1>\n<p>第一个小程序是一个小程序端问答小助手，功能和特点与简洁风格的 AI 智能助手应用如元宝、KIMI、DeepSeek 等基本类似，API 可以任选自己喜欢的，原型图较为简约。</p>\n<p>第二个小程序是与产品经理朋友合作的创业项目，更小众和个性化，在 AI 助手这一扩展功能上，前端的实现在移植第一个小程序的基础上修改了风格与细节以贴合原型图要求。</p>\n<p>记录一些技术点：</p>\n<h3 id=\"1-流式输出的实现\"><a class=\"anchor\" href=\"#1-流式输出的实现\">#</a> 1. 流式输出的实现：</h3>\n<p>ChatGPT 时期一般认为小程序是不支持流式请求的，市面上大多数开发者的解决方案都是使用 websocket 来解决，还有一部分开发者是小程序嵌套网页解决这个问题。</p>\n<p>流式输出思路：</p>\n<p>使用 uni.request 的 enableChunked: true 配置，并通过 onChunkReceived 方法逐步接收和处理服务器返回的数据块。</p>\n<ul>\n<li>\n<p>uni.request 发起请求时，配置 enableChunked: true：启用分块传输模式，服务器会将数据分块发送，客户端可以逐步接收。</p>\n</li>\n<li>\n<p>onChunkReceived：这是一个回调函数，每当接收到一个数据块时就会触发。客户端可以在这里处理每个数据块，将接收到的二进制数据块（chunk）转换为可读的字符串。</p>\n</li>\n<li>\n<p>将分块数据追加到 question 数组中，并实时更新 UI。</p>\n</li>\n</ul>\n<p>微信小程序基础库从 3.7.1 版本开始内置了云开发 AI+ 能力，开发者可以直接通过小程序中的 <span class=\"exturl\" data-url=\"aHR0cDovL3d4LmNsb3VkLmV4dGVuZC5BSQ==\">wx.cloud.extend.AI</span> 调用。</p>\n<p>初始化</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">env</span><span class=\"token operator\">:</span> <span class=\"token string\">\"your-env-id\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建指定的 AI 大模型</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> model <span class=\"token operator\">=</span> wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">.</span><span class=\"token constant\">AI</span><span class=\"token punctuation\">.</span><span class=\"token function\">createModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hunyuan-exp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>类型声明</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createModel</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ChatModel<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>流式调用大模型生成文本</p>\n<p>ChatModel.streamText () 流式调用时，生成的文本及其他响应数据会通过 SSE 返回，该接口的返回值对 SSE 做了不同程度的封装，开发者能根据实际需求获取到文本流和完整数据流。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> hy <span class=\"token operator\">=</span> wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">.</span><span class=\"token constant\">AI</span><span class=\"token punctuation\">.</span><span class=\"token function\">createModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hunyuan-exp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建模型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> hy<span class=\"token punctuation\">.</span><span class=\"token function\">streamText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hunyuan-lite\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">messages</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token literal-property property\">role</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hi\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> str <span class=\"token keyword\">of</span> res<span class=\"token punctuation\">.</span>textStream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印生成的文本</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">await</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> event <span class=\"token keyword\">of</span> res<span class=\"token punctuation\">.</span>eventStream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印每次返回的完整数据</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 当大模型结束传输时，通常会发一条 [DONE] 数据，在此之后即可停止循环</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data <span class=\"token operator\">===</span> <span class=\"token string\">\"[DONE]\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>调用大模型生成文本</p>\n<p>ChatModel.generateText () 生成文本</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> hy <span class=\"token operator\">=</span> wx<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">.</span><span class=\"token constant\">AI</span><span class=\"token punctuation\">.</span><span class=\"token function\">createModel</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hunyuan-exp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建模型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> hy<span class=\"token punctuation\">.</span><span class=\"token function\">generateText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">\"hunyuan-lite\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">messages</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">role</span><span class=\"token operator\">:</span> <span class=\"token string\">\"user\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">content</span><span class=\"token operator\">:</span> <span class=\"token string\">\"你好\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// &#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//   \"id\": \"27dae91f4e9a4777782c61f89acf8ea4\",</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//   \"object\": \"chat.completion\",</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//   \"created\": 1737602298,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//   \"model\": \"hunyuan-lite\",</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//   \"system_fingerprint\": \"\",</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//   \"choices\": [</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//     &#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//       \"index\": 0,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//       \"message\": &#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//         \"role\": \"assistant\",</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">//         \"content\": \"你好！很高兴与你交流。请问有什么我可以帮助你的吗？无论是关于生活、工作、学习还是其他方面的问题，我都会尽力为你提供帮助。\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//       &#125;,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">//       \"finish_reason\": \"stop\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//     &#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">//   ],</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//   \"usage\": &#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//     \"prompt_tokens\": 3,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">//     \"completion_tokens\": 33,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//     \"total_tokens\": 36</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//   &#125;,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">//   \"note\": \"以上内容为 AI 生成，不代表开发者立场，请勿删除或修改本标记\"</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>choices<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">// 你好！很高兴与你交流。请问有什么我可以帮助你的吗？无论是关于生活、工作、学习还是其他方面的问题，我都会尽力为你提供帮助。</span></pre></td></tr></table></figure><h3 id=\"2-输入框高度与文本的适应\"><a class=\"anchor\" href=\"#2-输入框高度与文本的适应\">#</a> 2. 输入框高度与文本的适应</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 输入框换行时触发</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">lineChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token comment\">// console.log(event);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>height<span class=\"token punctuation\">,</span>lineCount<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>detail</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token comment\">// 如果 >=2 行</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\ttextareaValue<span class=\"token punctuation\">.</span>alignItems <span class=\"token operator\">=</span> lineCount <span class=\"token operator\">>=</span> <span class=\"token number\">2</span> <span class=\"token operator\">?</span> <span class=\"token string\">'flex-end'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'center'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// 如果 >=6 行，不再自动增高</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lineCount <span class=\"token operator\">>=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\ttextareaValue<span class=\"token punctuation\">.</span>autoHeight <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\ttextareaValue<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\ttextareaValue<span class=\"token punctuation\">.</span>autoHeight <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">//textarea 的父级高度</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">const</span> textareaHeight <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 获取 textarea 的父级高度</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token function\">onMounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t<span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> uni<span class=\"token punctuation\">.</span><span class=\"token function\">createSelectorQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\tquery<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.input-content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t\ttextareaHeight<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>height <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>动态调整输入框对齐方式：</p>\n<ul>\n<li>当输入框的行数小于 2 行时，将输入框的对齐方式改为 center（居中对齐）。<br />\n(当用户只输入一行文本时，输入框的高度较小，居中对齐可以让输入框在父容器中看起来更加平衡和美观。)</li>\n<li>当输入框的行数大于等于 2 行时，将输入框的对齐方式改为 flex-end（底部对齐）。<br />\n(将输入框对齐方式改为 flex-end（底部对齐），可以确保输入框的底部始终固定，避免内容被遮挡，同时让用户更容易看到最新输入的内容。)</li>\n<li>当输入框的行数小于 6 行时，自动增高。</li>\n<li>当输入框的行数大于等于 6 行时，停止自动增高，固定输入框的高度。</li>\n</ul>\n<h3 id=\"3-小程序分包\"><a class=\"anchor\" href=\"#3-小程序分包\">#</a> 3. 小程序分包</h3>\n<p>为什么要使用分包？</p>\n<ul>\n<li>\n<p>主要原因就是微信小程序规定了主包大小不能超过 2M ，但我们随着开发的更新迭代，一个小程序往往是大于 2M 的。于是小程序提供了分包的解决方法，将一个完整的的小程序，在打包时分成不同功能或需求的分包，在用户使用时再加载对应的分包。</p>\n</li>\n<li>\n<p>主包：使用分包后必须有一个主包，用于存放 TabBar 页面，以及一些公共的资源文件和 JS 脚本。</p>\n</li>\n<li>\n<p>分包：从主包上拆分而来的文件，个人建议的的拆分方式：先根据 TabBar 页面拆分大的模块，再拆分每个 TabBar 内具体的小功能模块，这样拆分管理起来也更加清晰明了。</p>\n</li>\n</ul>\n<p>声明 subpackages 后，将按 subpackages 配置路径进行打包，subpackages 配置路径外的目录将被打包到主包中。也就是没指定分包的文件都会被打包到主包。<br />\n主包也可以有自己的 pages，即最外层的 pages 字段。<br />\nsubpackage 的根目录不能是另外一个 subpackage 内的子目录。也就是不能在分包内放置另外一个另外一个分包，两者必须是平级的关系。<br />\ntabBar 页面必须在主包内。</p>\n<h3 id=\"4-图片懒加载\"><a class=\"anchor\" href=\"#4-图片懒加载\">#</a> 4. 图片懒加载</h3>\n<p>image 标签里的 lazy-load 属性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token literal-property property\">lazyLoad</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> Boolean<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> uni<span class=\"token punctuation\">.</span>$u<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>image<span class=\"token punctuation\">.</span>lazyLoad</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>image</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span><span class=\"token operator\">=</span><span class=\"token string\">\"!isError\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">:</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"src\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token operator\">:</span>mode<span class=\"token operator\">=</span><span class=\"token string\">\"mode\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    @error<span class=\"token operator\">=</span><span class=\"token string\">\"onErrorHandler\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    @load<span class=\"token operator\">=</span><span class=\"token string\">\"onLoadHandler\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">:</span>show<span class=\"token operator\">-</span>menu<span class=\"token operator\">-</span>by<span class=\"token operator\">-</span>longpress<span class=\"token operator\">=</span><span class=\"token string\">\"showMenuByLongpress\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token operator\">:</span>lazy<span class=\"token operator\">-</span>load<span class=\"token operator\">=</span><span class=\"token string\">\"lazyLoad\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"u-image__image\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">:</span>style<span class=\"token operator\">=</span>\"<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">borderRadius</span><span class=\"token operator\">:</span> shape <span class=\"token operator\">==</span> <span class=\"token string\">'circle'</span> <span class=\"token operator\">?</span> <span class=\"token string\">'10000px'</span> <span class=\"token operator\">:</span> $u<span class=\"token punctuation\">.</span><span class=\"token function\">addUnit</span><span class=\"token punctuation\">(</span>radius<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token literal-property property\">width</span><span class=\"token operator\">:</span> $u<span class=\"token punctuation\">.</span><span class=\"token function\">addUnit</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> $u<span class=\"token punctuation\">.</span><span class=\"token function\">addUnit</span><span class=\"token punctuation\">(</span>height<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>\"</pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>image<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"5路由懒加载\"><a class=\"anchor\" href=\"#5路由懒加载\">#</a> 5. 路由懒加载</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> routes <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/pages/Home.vue'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 按需加载 Home 组件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">path</span><span class=\"token operator\">:</span> <span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function-variable function\">component</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/pages/About.vue'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 按需加载 About 组件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在 UniApp 应用中，可以基于路由进行代码拆分，即根据用户访问的页面加载相应的代码资源，而非一次性加载所有页面的代码。</p>\n<h3 id=\"6-设备兼容与显示自适应\"><a class=\"anchor\" href=\"#6-设备兼容与显示自适应\">#</a> 6. 设备兼容与显示自适应</h3>\n<ul>\n<li>\n<p>使用 rpx ，rem，百分比，vh 与 vw 单位</p>\n</li>\n<li>\n<p>uni.getSystemInfo 获取设备信息，动态调整逻辑</p>\n</li>\n<li>\n<p>Flex 布局：使用 Flex 布局实现弹性盒子模型，适应不同屏幕尺寸。</p>\n</li>\n<li>\n<p>媒体查询：在 CSS 中使用 @media 查询，针对不同屏幕尺寸设置样式。</p>\n</li>\n<li>\n<p>多倍图：提供 2x、3x 等多倍图，适应高分辨率屏幕。</p>\n</li>\n</ul>\n<p>等等</p>\n",
            "tags": [
                "前端开发",
                "前端"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/02/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/",
            "url": "https://kiyoumiii.github.io/2025/02/26/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5URL%E4%BC%9A%E5%8F%91%E7%94%9F%E4%BB%80%E4%B9%88/",
            "title": "浏览器输入URL会发生什么",
            "date_published": "2025-02-26T07:09:37.000Z",
            "content_html": "<h1 id=\"输入一个url会发生什么\"><a class=\"anchor\" href=\"#输入一个url会发生什么\">#</a> 输入一个 url 会发生什么</h1>\n<p>本问题在之前的学习合集文章 ———— 计算机网络与浏览器原理篇有过总结，因为本问题经典、关键、常见，所以此处单独开一篇博文再次作以更为详细的总结～</p>\n<h2 id=\"输入一个url会发生什么-2\"><a class=\"anchor\" href=\"#输入一个url会发生什么-2\">#</a> 输入一个 url 会发生什么？</h2>\n<ol>\n<li>URL 解析</li>\n</ol>\n<ul>\n<li>\n<p>步骤：</p>\n</li>\n<li>\n<p>浏览器解析用户输入的 URL，提取协议（如 http 或 https）、域名（如 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span>）、端口（默认 80 或 443）、路径和查询参数。</p>\n</li>\n<li>\n<p>示例：</p>\n</li>\n</ul>\n<p>输入 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9zZWFyY2g/cT12dWUlRUYlQkMlOEMlRTYlQjUlOEYlRTglQTclODglRTUlOTklQTglRTQlQkMlOUElRTglQTclQTMlRTYlOUUlOTAlRTUlODclQkElRUYlQkMlOUE=\">https://www.google.com/search?q=vue，浏览器会解析出：</span></p>\n<p>协议：https</p>\n<p>域名：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span></p>\n<p>路径：/search</p>\n<p>查询参数：q=vue</p>\n<ol start=\"2\">\n<li>DNS 查询</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器通过 DNS（域名系统）将域名解析为对应的 IP 地址。</p>\n</li>\n<li>\n<p>如果本地缓存中有域名对应的 IP 地址，则直接使用；否则，浏览器会向 DNS 服务器发起查询请求。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>解析 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span> 可能会返回 142.250.190.78。</p>\n<ol start=\"3\">\n<li>建立 TCP 连接</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器通过 IP 地址和端口与服务器建立 TCP 连接。</p>\n</li>\n<li>\n<p>如果是 HTTPS，还会进行 TLS 握手，建立加密通道。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>与 142.250.190.78:443 建立 TCP 连接，并进行 TLS 握手。</p>\n<ol start=\"4\">\n<li>发送 HTTP 请求</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>浏览器向服务器发送 HTTP 请求，包括请求方法（如 GET）、路径、请求头和请求体。</li>\n</ul>\n<p>示例：</p>\n<p>发送 GET /search?q=vue HTTP/1.1 请求。</p>\n<ol start=\"5\">\n<li>服务器处理请求</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>服务器接收到请求后，根据路径和参数处理请求，生成响应数据（如 HTML 页面）。</p>\n</li>\n<li>\n<p>服务器返回 HTTP 响应，包括状态码（如 200）、响应头和响应体。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>服务器返回 200 OK 和 Google 搜索结果的 HTML 页面。</p>\n<ol start=\"6\">\n<li>浏览器接收响应</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器接收到服务器的响应后，开始解析响应内容。</p>\n</li>\n<li>\n<p>如果是 HTML 页面，浏览器会解析 HTML、CSS 和 JavaScript，并加载页面所需的资源（如图片、样式表、脚本等）。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>解析 Google 搜索结果的 HTML，并加载相关资源。</p>\n<ol start=\"7\">\n<li>渲染页面</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>浏览器根据 HTML 和 CSS 构建 DOM 树和 CSSOM 树，然后合并生成渲染树。</p>\n</li>\n<li>\n<p>根据渲染树计算布局，绘制页面内容。</p>\n</li>\n<li>\n<p>执行 JavaScript 代码，动态更新页面。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>渲染 Google 搜索结果的页面，并显示给用户。</p>\n<ol start=\"8\">\n<li>加载完成</li>\n</ol>\n<p>步骤：</p>\n<ul>\n<li>\n<p>页面加载完成后，触发 load 事件。</p>\n</li>\n<li>\n<p>如果有异步操作（如 AJAX 请求），页面可能会继续更新。</p>\n</li>\n</ul>\n<p>示例：</p>\n<p>Google 搜索页面加载完成后，用户可以与页面交互。</p>\n<h2 id=\"如果-url-是-googlecom-会有什么不同\"><a class=\"anchor\" href=\"#如果-url-是-googlecom-会有什么不同\">#</a> 如果 URL 是 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span> 会有什么不同？</h2>\n<ol>\n<li>域名解析：</li>\n</ol>\n<p>特殊情况：</p>\n<p>在国内，由于网络限制，本地 DNS 服务器可能无法解析 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span> 的 IP 地址。</p>\n<p>如果用户没有使用 “梯子”（VPN 或代理），DNS 查询会失败，浏览器会显示 “无法访问此网站” 或类似的错误。</p>\n<p>如果用户使用了 “梯子”，DNS 查询会通过代理服务器进行，成功解析到 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span> 的 IP 地址（如 142.250.190.78）。</p>\n<p>浏览器会解析 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span>，但通常会重定向到 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com</span>（Google 的主域名）。</p>\n<p>例如，输入 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">google.com</span> 后，浏览器可能会收到 301 或 302 重定向响应，指向 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>。</p>\n<ol start=\"2\">\n<li>HTTPS 强制跳转：</li>\n</ol>\n<p>Google 会强制使用 HTTPS，因此即使输入 <span class=\"exturl\" data-url=\"aHR0cDovL2dvb2dsZS5jb20=\">http://google.com</span>，浏览器也会重定向到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>。</p>\n<ol start=\"3\">\n<li>首页内容：</li>\n</ol>\n<p>如果访问的是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ29vZ2xlLmNvbQ==\">https://www.google.com</span>，服务器会返回 Google 搜索首页的 HTML 页面。</p>\n<p>页面内容相对简单，主要是搜索框和一些链接。</p>\n<ol start=\"4\">\n<li>资源加载：</li>\n</ol>\n<p>Google 首页的资源（如图片、CSS、JavaScript）通常较少，加载速度较快。</p>\n<p>Google 会使用 CDN 和缓存技术，进一步加速页面加载。</p>\n<ol start=\"5\">\n<li>用户体验：</li>\n</ol>\n<p>Google 首页设计简洁，加载速度快，用户可以立即进行搜索操作。</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>输入 URL 后，浏览器会执行以下步骤：</p>\n<ol>\n<li>\n<p>URL 解析：提取协议、域名、路径等信息。</p>\n</li>\n<li>\n<p>DNS 查询：将域名解析为 IP 地址。</p>\n</li>\n<li>\n<p>建立 TCP 连接：与服务器建立连接（HTTPS 还会进行 TLS 握手）。</p>\n</li>\n<li>\n<p>发送 HTTP 请求：向服务器发送请求。</p>\n</li>\n<li>\n<p>服务器处理请求：服务器生成响应并返回。</p>\n</li>\n<li>\n<p>浏览器接收响应：解析 HTML、CSS 和 JavaScript。</p>\n</li>\n<li>\n<p>渲染页面：构建 DOM 树、CSSOM 树，绘制页面。</p>\n</li>\n<li>\n<p>加载完成：页面显示并触发 load 事件。</p>\n</li>\n</ol>\n",
            "tags": [
                "计算机科学",
                "计算机网络"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/02/24/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-AI%E5%91%BD%E7%90%86%E5%B8%88/",
            "url": "https://kiyoumiii.github.io/2025/02/24/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-AI%E5%91%BD%E7%90%86%E5%B8%88/",
            "title": "开发问题记录-AI命理师",
            "date_published": "2025-02-24T03:27:51.000Z",
            "content_html": "<h1 id=\"百无禁忌varmeta开发日志帖\"><a class=\"anchor\" href=\"#百无禁忌varmeta开发日志帖\">#</a> 百无禁忌 Varmeta 开发日志帖</h1>\n<p>终于体验了 Cursor！效果还不错！ChatGPT-4o 代码生成永远的神！</p>\n<p>可以直接把原型图和多个组件 add 到 chat 台，选择 Claude-3.5 或 GPT-4o 来帮忙生成回答和代码。</p>\n<br>\n<div align=\"center\">\n    <style>.nqhwvpeocjes{}</style><img data-src=\"/2025/02/24/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-AI%E5%91%BD%E7%90%86%E5%B8%88/cursor-1.jpg\" class=\"nqhwvpeocjes\">\n</div>\n<br>\n<div align=\"center\">\n    <style>.lddzybvkpqlt{}</style><img data-src=\"/2025/02/24/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95-AI%E5%91%BD%E7%90%86%E5%B8%88/aichat.jpg\" class=\"lddzybvkpqlt\">\n</div>\n<br>\n<p>记录一个借助 chatgpt-4o 解决的小问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送消息后滚动到底部</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// scrollToBottom() &#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//   setTimeout(() => &#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//     const query = uni.createSelectorQuery().in(this)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//     query.select('.scrollable-content').boundingClientRect(res => &#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//       if (res) &#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//         // 直接滚动到底部</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//         this.scrollTop = res.height// 直接设置为内容高度即可</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//       &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">//     &#125;).exec()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//   &#125;, 100)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// &#125;,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">scrollToBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> uni<span class=\"token punctuation\">.</span><span class=\"token function\">createSelectorQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scrollable-content'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">selectAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.message-wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boundingClientRect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        query<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">const</span> lastMessage <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">=</span> lastMessage<span class=\"token punctuation\">.</span>bottom <span class=\"token comment\">// 滚动到最后一条消息的底部</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><p>需求是每次对话完，都自动滚动到聊天区域的底部，以确保用户始终可以看到最新一条对话记录。</p>\n<p>上面注释掉的解决办法是一开始不能奏效的滚动函数，下面是改动后的函数：</p>\n<ul>\n<li>关键点：</li>\n</ul>\n<ol>\n<li>使用 $nextTick: 确保在 DOM 更新后再执行滚动操作。</li>\n<li>获取最后一条消息的位置：使用 boundingClientRect 获取最后一条消息的位置，并将 scrollTop 设置为该位置的底部。</li>\n<li>确保 scroll-view 的 :scroll-top 绑定到 scrollTop: 确保 scroll-view 的 :scroll-top 属性正确绑定到 scrollTop 数据。</li>\n</ol>\n<p>这样，每次发送消息后，页面应该会自动滚动到最后一条消息的位置。</p>\n<ul>\n<li>原因：</li>\n</ul>\n<p>主要是由于 DOM 更新时机 和 滚动逻辑 的不同导致的：</p>\n<ol>\n<li>函数 1：使用 setTimeout 的目的是等待 DOM 更新完成后再执行滚动逻辑。但 setTimeout 的延迟时间（100ms）是固定的，无法保证 DOM 更新一定在 100ms 内完成。如果 DOM 更新较慢，setTimeout 可能仍然在 DOM 更新前执行，导致滚动失败。</li>\n<li>函数 2：$nextTick 是 Vue 提供的一个方法，用于在 下一次 DOM 更新循环结束之后 执行回调函数。使用 $nextTick 可以确保 DOM 更新完成后再执行滚动逻辑，避免了 setTimeout 的延迟不确定性。</li>\n<li>函数 1 直接使用容器高度，可能不准确；函数 2 使用最后一条消息的底部位置，更精确。</li>\n</ol>\n<ul>\n<li>原理：</li>\n</ul>\n<ol>\n<li>为什么需要 $nextTick？</li>\n</ol>\n<p>在 Vue 中，数据的变化会触发视图的更新，但 DOM 更新是异步的。也就是说，当你修改了数据后，Vue 并不会立即更新 DOM，而是将这些更新操作放入一个队列中，在下一个事件循环中统一处理。</p>\n<p>如果你在数据变化后立即操作 DOM，可能会因为 DOM 还未更新而出现问题。例如：</p>\n<p>获取不到最新的 DOM 元素、获取到的 DOM 元素尺寸或位置不准确。</p>\n<p>$nextTick 就是为了解决这个问题而设计的。它允许你在 DOM 更新完成后执行回调函数，确保操作的是最新的 DOM。</p>\n<ol start=\"2\">\n<li>$nextTick 的工作原理</li>\n</ol>\n<p>当你调用 $nextTick 时，Vue 会将传入的回调函数放入一个队列中。</p>\n<p>在当前事件循环中，Vue 会处理所有的数据更新和 DOM 更新。</p>\n<p>当 DOM 更新完成后，Vue 会执行队列中的回调函数。</p>\n<ol start=\"3\">\n<li>$nextTick 的使用方法</li>\n</ol>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>c</mi><mi>k</mi><mtext>可以作为一个实例方法（</mtext><mi>t</mi><mi>h</mi><mi>i</mi><mi>s</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">nextTick 可以作为一个实例方法（this.</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">可</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">作</span><span class=\"mord cjk_fallback\">为</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">实</span><span class=\"mord cjk_fallback\">例</span><span class=\"mord cjk_fallback\">方</span><span class=\"mord cjk_fallback\">法</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">s</span><span class=\"mord\">.</span></span></span></span>nextTick）或全局方法（Vue.nextTick）使用。</p>\n<ol start=\"4\">\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mi>e</mi><mi>x</mi><mi>t</mi><mi>T</mi><mi>i</mi><mi>c</mi><mi>k</mi><mtext>的返回值</mtext></mrow><annotation encoding=\"application/x-tex\">nextTick 的返回值\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">返</span><span class=\"mord cjk_fallback\">回</span><span class=\"mord cjk_fallback\">值</span></span></span></span>nextTick 返回一个 Promise 对象，因此你可以使用 async/await 语法。</li>\n</ol>\n<ul>\n<li>总结：</li>\n</ul>\n<p>$nextTick 是 Vue 提供的一个用于在 DOM 更新完成后执行回调函数的方法。</p>\n<p>它解决了因 DOM 更新异步性导致的操作不一致问题。</p>\n<p>适用于需要操作更新后的 DOM、获取更新后的 DOM 尺寸或位置等场景。</p>\n<p>与 setTimeout 相比，$nextTick 更精确、更高效。</p>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/02/21/TypeScript%E4%B8%8EJavaScript/",
            "url": "https://kiyoumiii.github.io/2025/02/21/TypeScript%E4%B8%8EJavaScript/",
            "title": "TypeScript与JavaScript",
            "date_published": "2025-02-21T14:33:35.000Z",
            "content_html": "<h1 id=\"typescript与javascript\"><a class=\"anchor\" href=\"#typescript与javascript\">#</a> TypeScript 与 JavaScript</h1>\n<p>JavaScript 和 TypeScript 是现代前端开发中最常用的两种语言。作为 JavaScript 的超集，TypeScript 提供了对 JavaScript 的增强功能，特别是在类型系统和开发工具支持方面。</p>\n<h3 id=\"1-javascript\"><a class=\"anchor\" href=\"#1-javascript\">#</a> 1. JavaScript</h3>\n<p>JavaScript（简称 JS）是一种广泛应用于前端开发的动态类型编程语言，最初是由 Netscape 的 Brendan Eich 在 1995 年开发的。它最初的目标是增强网页的互动性，如验证表单、处理用户输入、动态加载内容等。<br />\n随着时间的推移，JavaScript 已经发展成一种全栈开发语言，不仅用于浏览器端开发，也广泛应用于服务器端开发（如 Node.js）。</p>\n<ul>\n<li>动态类型：变量的类型在运行时确定。</li>\n<li>解释执行：JavaScript 代码在浏览器中直接运行，而无需编译。</li>\n<li>事件驱动：广泛应用于用户界面的交互。</li>\n<li>异步编程：支持异步编程（如使用回调函数、Promise 和 async/await）。</li>\n</ul>\n<p>JavaScript 是动态类型语言，意味着变量的类型是在运行时确定的。你可以随时改变变量的类型，且没有类型检查。这虽然灵活，但也容易引入错误，尤其是在大型应用中，类型错误可能不容易被发现。</p>\n<p>JavaScript 支持面向对象编程，但语法相对简洁且不够严格。例如，JavaScript 中的类是基于原型的，不支持传统的接口和类型检查。</p>\n<p>JavaScript 是浏览器的原生语言，直接在浏览器中运行，不需要任何编译步骤。</p>\n<h3 id=\"2-typescript\"><a class=\"anchor\" href=\"#2-typescript\">#</a> 2. TypeScript</h3>\n<p>TypeScript（简称 TS）是由微软开发的一种编程语言，它是 JavaScript 的超集，意味着 JavaScript 的合法代码也是 TypeScript 的合法代码。TypeScript 增强了 JavaScript 的功能，特别是加入了强类型检查、接口、类等面向对象的特性，以及静态类型系统，可以在编译阶段捕捉到潜在的错误</p>\n<ul>\n<li>静态类型检查：在编译阶段检查类型错误，提高代码的可靠性。</li>\n<li>类型推断：即使没有显式声明类型，TypeScript 也会自动推断变量的类型。</li>\n<li>类和接口：支持面向对象编程，提供类、接口、继承等功能。</li>\n<li>现代 JavaScript 特性：TypeScript 支持最新的 JavaScript 特性，并且可以编译成兼容旧浏览器的 JavaScript 代码。</li>\n</ul>\n<p>TypeScript 加入了静态类型系统，可以在编译阶段进行类型检查，帮助开发者尽早发现错误。TypeScript 不仅支持原始类型（如 string、number、boolean），还支持复杂类型（如数组、元组、枚举、接口、联合类型等）。</p>\n<p>TypeScript 在 JavaScript 的基础上增加了类、接口、继承等面向对象的特性，语法更加严格，有助于开发者编写更清晰、可维护的代码。</p>\n<p>TypeScript 需要编译成 JavaScript，才能在浏览器或 Node.js 中执行。TypeScript 编译器将 TS 代码转换为 JavaScript 代码，通常目标是 ES5 或 ES6 代码，这样可以兼容各种浏览器和环境。</p>\n<h3 id=\"3代码对比\"><a class=\"anchor\" href=\"#3代码对比\">#</a> 3. 代码对比</h3>\n<ol>\n<li>语法</li>\n</ol>\n<p>类型注解</p>\n<ul>\n<li>JavaScript: 不支持类型注解，变量的类型由值来推断。</li>\n<li>TypeScript: 支持静态类型注解，可以在变量、函数参数、函数返回值等地方显式指定类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类和接口</p>\n<ul>\n<li>JavaScript: 使用原型链来实现对象的继承，没有类和接口的概念。</li>\n<li>TypeScript: 引入了类和接口，支持面向对象的编程风格。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Circle</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> radius<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radius <span class=\"token operator\">**</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>枚举</p>\n<ul>\n<li>JavaScript: 不支持枚举类型。</li>\n<li>TypeScript: 支持枚举类型，可以定义一组命名的常量值。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  Up<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Down<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  Left<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Right<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类型系统</p>\n<p>静态类型检查</p>\n<ul>\n<li>JavaScript: 在运行时进行类型检查，类型错误只会在执行阶段被发现。</li>\n<li>TypeScript: 使用静态类型检查，在编译时进行类型检查，能够提前发现并避免一些潜在的错误。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>name <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 编译时错误</span></pre></td></tr></table></figure><p>类型推断</p>\n<ul>\n<li>JavaScript: 变量的类型由值来推断。</li>\n<li>TypeScript: 支持类型推断，当类型没有显式指定时，会根据上下文自动推断出变量的类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 推断为 number 类型</span></pre></td></tr></table></figure><p>提供更丰富的类型</p>\n<ul>\n<li>JavaScript: 基本数据类型和对象类型。</li>\n<li>TypeScript: 支持基本数据类型、对象类型、元组、联合类型、交叉类型、字面量类型等更丰富的类型。</li>\n</ul>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// TypeScript</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Status</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pending\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"in_progress\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"completed\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Fruit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  color<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Apple</span> <span class=\"token operator\">=</span> Fruit <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"apple\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">type</span> <span class=\"token class-name\">Banana</span> <span class=\"token operator\">=</span> Fruit <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"banana\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getFruitColor</span><span class=\"token punctuation\">(</span>fruit<span class=\"token operator\">:</span> Apple <span class=\"token operator\">|</span> Banana<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> fruit<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>工具支持</p>\n<p>编辑器支持<br />\n JavaScript: 可以在大多数代码编辑器中编辑 JavaScript 代码，但没有针对 JavaScript 的专用编辑器。<br />\nTypeScript: 得益于类型系统，TypeScript 在编辑器中提供了更强大的代码补全、类型检查和重构功能。同时，一些编辑器如 Visual Studio Code 提供了针对 TypeScript 的更完善支持。</p>\n<p>调试支持<br />\n JavaScript: 可以通过浏览器的开发者工具进行调试。<br />\nTypeScript: 能够生成可调试的 JavaScript 代码，支持在编辑器或浏览器中进行调试。</p>\n<p>文档和社区<br />\n JavaScript: 具有成熟的文档和庞大的社区资源，容易找到相关的教程、博客文章和解决方案。<br />\nTypeScript: TypeScript 基于 JavaScript，因此可以享受到 JavaScript 社区的一部分资源，此外还有针对 TypeScript 的官方文档、社区论坛和第三方库的支持。</p>\n<p>第三方库<br />\n JavaScript: 拥有世界上最大的开源生态系统，有众多的第三方库和框架可供选择。<br />\nTypeScript: TypeScript 与 JavaScript 兼容，可以直接使用 JavaScript 的第三方库。此外，TypeScript 还有自己的类型声明文件（.d.ts）生态系统，提供了大量的类型定义供开发者使用。</p>\n<p>TypeScript 编写一个 API 的案例<br />\n下面演示用 TypeScript 开发一个简单的 Express.js 后端 API：</p>\n<figure class=\"highlight typescript\"><figcaption data-lang=\"typescript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> express<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> Request<span class=\"token punctuation\">,</span> Response <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"express\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/users\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> Request<span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> Response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> user<span class=\"token operator\">:</span> User <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 处理用户数据</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Server is running on port 3000\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在该案例中，使用 TypeScript 提供的静态类型检查，使你能够更早地发现和解决潜在的错误。此外 TypeScript 还提供了代码补全和类型推断，大大提高开发效率。</p>\n<p>性能：<br />\n将 ts 编译为 js 之后，和原生 js 的性能表现几乎是一致的</p>\n",
            "tags": [
                "前端开发",
                "前端"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/02/21/Flex%E4%B8%8EGrid%E5%B8%83%E5%B1%80/",
            "url": "https://kiyoumiii.github.io/2025/02/21/Flex%E4%B8%8EGrid%E5%B8%83%E5%B1%80/",
            "title": "Flex与Grid布局",
            "date_published": "2025-02-21T05:52:57.000Z",
            "content_html": "<h1 id=\"flex布局与grid布局\"><a class=\"anchor\" href=\"#flex布局与grid布局\">#</a> Flex 布局与 Grid 布局</h1>\n<ol>\n<li>flex 布局又称为弹性布局。</li>\n</ol>\n<ul>\n<li>当我们给一个容器元素设置 display:flex; 时，这个容器就变成了 flex 容器，容器中所有直接子元素就成了容器成员（flex 项目）。</li>\n<li>flex 容器默认存在两根轴：水平的主轴和垂直的交叉轴，flex 布局主要是围绕这两根轴来进行布局的。</li>\n<li>所以 flex 布局相对于 grid 网格布局来说，他更适合一维布局（单行或单列布局）</li>\n</ul>\n<p>父容器属性：flex-direction， justify-content， align-items， align-content<br />\n 子容器属性：order， flex-grow， flex-shrink， flex-basis， align-self</p>\n<ol start=\"2\">\n<li>Grid 布局又称为网格布局。</li>\n</ol>\n<ul>\n<li>当我们给一个元素加上 display:grid; 时，我们称这个元素为容器，元素中所有直接子元素称为子项或项目。</li>\n<li>Grid 布局则是将容器划分成行和列，产生单元格，然后指定项目所在的单元格，可以看作是二维布局。</li>\n<li>划分网格的线，称为 &quot;网格线&quot;（grid line）。水平网格线划分出行，垂直网格线划分出列。</li>\n<li>设为网格布局以后，容器子元素（项目）的 float、display: inline-block、display: table-cell、vertical-align 和 column-* 等设置都将失效。</li>\n</ul>\n<p>父容器属性：grid-template-columns， grid-template-rows， grid-gap， grid-auto-flow， grid-auto-columns， grid-auto-rows， justify-items， align-items， justify-content， align-content<br />\n 子容器属性：grid-column-start， grid-column-end， grid-row-start， grid-row-end， justify-self， align-self</p>\n<ol start=\"3\">\n<li>经典问题</li>\n</ol>\n<h3 id=\"经典问题\"><a class=\"anchor\" href=\"#经典问题\">#</a> 经典问题：</h3>\n<h4 id=\"ask-flex1是什么意思\"><a class=\"anchor\" href=\"#ask-flex1是什么意思\">#</a> ask: flex=1 是什么意思</h4>\n<h4 id=\"answer-flex-1-是-css-flexbox-布局中的一个属性值用于控制弹性容器内子元素的伸缩行为\"><a class=\"anchor\" href=\"#answer-flex-1-是-css-flexbox-布局中的一个属性值用于控制弹性容器内子元素的伸缩行为\">#</a> answer: flex: 1 是 CSS Flexbox 布局中的一个属性值，用于控制弹性容器内子元素的伸缩行为。</h4>\n<p>具体含义<br />\n flex 是 flex-grow、flex-shrink 和 flex-basis 的简写。</p>\n<p>flex: 1 等同于 flex: 1 1 0，表示：</p>\n<p>flex-grow: 1：子元素会按比例分配剩余空间。</p>\n<p>flex-shrink: 1：子元素在空间不足时会缩小。</p>\n<p>flex-basis: 0：子元素的初始大小为 0。</p>\n<p>效果<br />\n子元素会根据 flex-grow 的值分配剩余空间。</p>\n<p>如果多个子元素都有 flex: 1，它们将平分剩余空间。</p>\n<h4 id=\"ask-flex-布局设置水平垂直居中\"><a class=\"anchor\" href=\"#ask-flex-布局设置水平垂直居中\">#</a> ask: flex 布局设置水平垂直居中</h4>\n<h4 id=\"answer-给-flex-容器添加以下三个属性就可以实现子项水平垂直居中\"><a class=\"anchor\" href=\"#answer-给-flex-容器添加以下三个属性就可以实现子项水平垂直居中\">#</a> answer: 给 flex 容器添加以下三个属性，就可以实现子项水平垂直居中：</h4>\n<p>display: flex; // 容器为 flex 布局<br />\n justify-content: center; // 子项在主轴（水平居中）<br />\nalign-items: center; // 子项在交叉轴（垂直居中）</p>\n<h4 id=\"ask-如何解决-flex-布局-7-个元素使用-space-between-最后一行两边分布的问题\"><a class=\"anchor\" href=\"#ask-如何解决-flex-布局-7-个元素使用-space-between-最后一行两边分布的问题\">#</a> ask: 如何解决 flex 布局 7 个元素使用 space-between 最后一行两边分布的问题？</h4>\n<h4 id=\"answer-如果我们每一行显示的个数为-n那我们可以最后一行子项的后面加上-n-2-个-span-元素span-元素的宽度和其它子项元素宽度一样但不用设置高度\"><a class=\"anchor\" href=\"#answer-如果我们每一行显示的个数为-n那我们可以最后一行子项的后面加上-n-2-个-span-元素span-元素的宽度和其它子项元素宽度一样但不用设置高度\">#</a> answer: 如果我们每一行显示的个数为 n，那我们可以最后一行子项的后面加上 n-2 个 span 元素，span 元素的宽度和其它子项元素宽度一样，但不用设置高度。</h4>\n<p>为什么是添加 n-2 个 span 元素呢 ？</p>\n<p>当最后一行只有 1 个子元素时，他会默认靠左，不用处理<br />\n当最后一行子元素正好时，我们就不用关心这个问题。<br />\n所以要去掉这两种情况，只需要加 n-2 个 span 元素就好</p>\n<h4 id=\"ask-flex-实现-8-个元素分两行排列-每行-4-个平均分布-自适应\"><a class=\"anchor\" href=\"#ask-flex-实现-8-个元素分两行排列-每行-4-个平均分布-自适应\">#</a> ask: flex 实现 8 个元素分两行排列 每行 4 个平均分布 - 自适应</h4>\n<h4 id=\"answer-给父元素设置-display-flex-flex-wrap-wrap-子元素设置-flex-1-0-25\"><a class=\"anchor\" href=\"#answer-给父元素设置-display-flex-flex-wrap-wrap-子元素设置-flex-1-0-25\">#</a> answer: 给父元素设置 display: flex; flex-wrap: wrap; 子元素设置 flex: 1 0 25%;</h4>\n<p>给父容器添加如下属性：</p>\n<p>display: flex; //flex 布局<br />\n flex-wrap: wrap; // 换行<br />\n给子项添加如下样式：</p>\n<p>flex-basis: 25%; // 项目占据主轴（父容器宽）的空间。<br />\nflex-grow: 0; // 不放大<br />\n flex-shrink: 0; // 缩小<br />\n以上三个属性，也可以简写在 flex: 0 0 25%;</p>\n<h4 id=\"当容器为-flex-时其子元素没有指定高度时其高度默认为父元素高度\"><a class=\"anchor\" href=\"#当容器为-flex-时其子元素没有指定高度时其高度默认为父元素高度\">#</a> 当容器为 flex 时，其子元素没有指定高度时，其高度默认为父元素高度。</h4>\n<h4 id=\"ask-圣杯布局\"><a class=\"anchor\" href=\"#ask-圣杯布局\">#</a> ask: 圣杯布局</h4>\n<h4 id=\"answer-拥有-header-和-footer中间是主内容行left-和-right-分别固定了宽度center-会随着整体布局宽度的变化而进行伸缩\"><a class=\"anchor\" href=\"#answer-拥有-header-和-footer中间是主内容行left-和-right-分别固定了宽度center-会随着整体布局宽度的变化而进行伸缩\">#</a> answer: 拥有 header 和 footer，中间是主内容行；left 和 right 分别固定了宽度，center 会随着整体布局宽度的变化而进行伸缩</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>圣杯布局<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t\t<span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 550px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token selector\">#header</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #999999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token selector\">#middle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 2. 把中间部分留出左右元素的宽度 */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t\t\t<span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t\t\t<span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token selector\">#middle .column</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t\t<span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t\t<span class=\"token selector\">#left</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFFF00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 4. 向左移动 center 的宽度 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 5. 再向左移动自身宽度，露出被覆盖的 center 块 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t\t\t<span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t\t\t<span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token selector\">#center</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> pink<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t\t<span class=\"token selector\">#right</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t\t\t<span class=\"token comment\">/* 3.margin-right 让右方元素覆盖自身，达到消除自身宽度的目的，浮动到 center 上面去 */</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t\t\t<span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> -150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t\t\t<span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #CCCCCC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\t\t<span class=\"token selector\">#footer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\t\t\t<span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #999999<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t\t<span class=\"token selector\">.clearfix:after</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t\t\t<span class=\"token property\">display</span><span class=\"token punctuation\">:</span> table<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t\t\t<span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t\t\t<span class=\"token property\">clear</span><span class=\"token punctuation\">:</span> both<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>middle<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clearfix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\t\t\tcenter</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\t\t\tleft</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>column<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t\t\t\tright</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>footer<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>footer<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"ask-双飞翼布局\"><a class=\"anchor\" href=\"#ask-双飞翼布局\">#</a> ask: 双飞翼布局</h4>\n<h4 id=\"answer-left-和-right-固定宽度-中间-main-会随着整体布局宽度的变化而伸缩\"><a class=\"anchor\" href=\"#answer-left-和-right-固定宽度-中间-main-会随着整体布局宽度的变化而伸缩\">#</a> answer: left 和 right 固定宽度；中间 main 会随着整体布局宽度的变化而伸缩</h4>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ie=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>双飞翼布局<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 550px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token selector\">.col</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 1. 设置浮动 */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token property\">float</span><span class=\"token punctuation\">:</span> left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token selector\">#main</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFC0CB<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token selector\">#main-wrap</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 2. 将 main 左右内边距留出 left 和 right 的宽度 */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t\t<span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 200px 0 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token selector\">#left</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 150px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #FFFF00<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 3.left 向左偏移 main 的宽度 */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token selector\">#right</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #cccccc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\t\t<span class=\"token comment\">/* 4.right 向左偏移自身宽度 */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\t\t<span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -200px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main-wrap<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            main</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        left</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>col<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>        right</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"ask-圣杯布局与双飞翼布局异同比较\"><a class=\"anchor\" href=\"#ask-圣杯布局与双飞翼布局异同比较\">#</a> ask: 圣杯布局与双飞翼布局异同比较</h4>\n<h4 id=\"answer\"><a class=\"anchor\" href=\"#answer\">#</a> answer:</h4>\n<table>\n<thead>\n<tr>\n<th>维度</th>\n<th>双飞翼布局</th>\n<th>圣杯布局</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>边距控制</strong></td>\n<td>通过外层  <code>margin</code>  实现</td>\n<td>通过内层  <code>padding</code>  实现</td>\n</tr>\n<tr>\n<td><strong>元素偏移</strong></td>\n<td>左右均向左偏移</td>\n<td>左侧左偏移，右侧右偏移</td>\n</tr>\n<tr>\n<td><strong>视觉重心</strong></td>\n<td>主内容居中</td>\n<td>主内容靠左</td>\n</tr>\n<tr>\n<td><strong>适用场景</strong></td>\n<td>广告位 / 侧边栏固定展示</td>\n<td>两侧内容灵活布局</td>\n</tr>\n</tbody>\n</table>\n<p>双飞翼：均使用 margin-left，左：向左偏移 main 的宽度；右：向左偏移自身宽度</p>\n<p>圣杯：左：使用 margin-left（向左偏移 main 的宽度）; 右：margin-right（取消自身宽度）</p>\n",
            "tags": [
                "前端开发",
                "前端"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/",
            "url": "https://kiyoumiii.github.io/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/",
            "title": "基于Nodejs+vue3+uniapp的微信小程序全栈开发配置帖",
            "date_published": "2025-01-20T13:00:56.000Z",
            "content_html": "<h3 id=\"基于vue框架uniapp的微信小程序开发配置教程帖\"><a class=\"anchor\" href=\"#基于vue框架uniapp的微信小程序开发配置教程帖\">#</a> 基于 vue 框架 + uniapp 的微信小程序开发配置教程帖</h3>\n<p>运行教程</p>\n<ul>\n<li>后端</li>\n<li>跨端启动</li>\n<li>小程序端</li>\n</ul>\n<h4 id=\"后端-基于nodejsidevscode\"><a class=\"anchor\" href=\"#后端-基于nodejsidevscode\">#</a> 后端 - 基于 Node.js，IDE：VScode</h4>\n<p>配置数据库：</p>\n<p>数据库：MySQL、Redis</p>\n<p>数据库管理工具：SQLynx、TinyRDM</p>\n<p>配置大模型 api：</p>\n<p>注册并配置智谱清言和阿里云实时语音识别产品的 AccessKey 和对应密钥</p>\n<p>安装依赖并运行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>nodemon app.js</pre></td></tr></table></figure><p>得到如下输出说明启动成功：</p>\n<div align=\"center\">\n    <style>.fkllkpmiwyrv{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/01.png\" class=\"fkllkpmiwyrv\">\n</div>\n<h4 id=\"微信小程序端-微信公众平台-微信开发者工具\"><a class=\"anchor\" href=\"#微信小程序端-微信公众平台-微信开发者工具\">#</a> 微信小程序端 - 微信公众平台、微信开发者工具</h4>\n<p>注册微信小程序，配置 appID 和密钥；在阿里云创建智能语音交互项目，并将第三方服务器域名配置在微信小程序的服务器域名配置栏，同时配置图床 url：</p>\n<div align=\"center\">\n    <style>.rxlbsdefgovf{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/02.png\" class=\"rxlbsdefgovf\">\n</div>\n<h4 id=\"跨端启动-hbuilderx\"><a class=\"anchor\" href=\"#跨端启动-hbuilderx\">#</a> 跨端启动 - HBuilderX</h4>\n<p>将微信小程序端代码拖入 HBuilderX，通过 ipconfig 查看自己的 IPv4 地址为项目配置 baseURL</p>\n<p>通过 uni-app 实现跨端，在 mainfest.json 配置对应的微信小程序 appID，选择运行到小程序模拟器 - 微信开发者工具，自动启动微信开发者工具编译项目。</p>\n<div align=\"center\">\n    <style>.blbhttnfybbs{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/03.png\" class=\"blbhttnfybbs\">\n</div>\n<div align=\"center\">\n    <style>.lzoiggqszoib{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/04.png\" class=\"lzoiggqszoib\">\n</div>\n<p>项目最终在微信开发者工具中呈现。</p>\n<p>注意：设置微信开发者工具为没有代理、开启服务端口；在右侧点击 “详情” 查看配置，在本地配置下勾选不校验合法域名；注意 appID 一定要和 vscode 以及 HBuilderX 中配置的 appID 是一致的。</p>\n<div align=\"center\">\n    <style>.kswjlqfjxxvd{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/05.png\" class=\"kswjlqfjxxvd\">\n</div>\n<div align=\"center\">\n    <style>.omanlsikgwrc{}</style><img data-src=\"/2025/01/20/%E5%9F%BA%E4%BA%8ENodejs-vue3-uniapp%E7%9A%84%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%A8%E6%A0%88%E5%BC%80%E5%8F%91%E9%85%8D%E7%BD%AE%E5%B8%96/06.png\" class=\"omanlsikgwrc\">\n</div>\n<p>撒花！！！</p>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/20/FMRI2TXT-%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%AD%E8%A8%80%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/",
            "url": "https://kiyoumiii.github.io/2025/01/20/FMRI2TXT-%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%AD%E8%A8%80%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/",
            "title": "FMRI2TXT:非侵入性语言脑机接口",
            "date_published": "2025-01-20T03:43:47.000Z",
            "content_html": "<h3 id=\"文章阅读记录-fmri2txt非侵入性语言脑机接口\"><a class=\"anchor\" href=\"#文章阅读记录-fmri2txt非侵入性语言脑机接口\">#</a> 文章阅读记录 - FMRI2TXT: 非侵入性语言脑机接口</h3>\n<p>一篇在研一初期阅读到的文章，发表在《自然神经科学》杂志，它以一种 “神奇的 AI 读心术” 的形式，给我与朋友留下了深刻的印象。研二寒假闲暇，将它简单整理下来作以记录。</p>\n<p>德克萨斯大学奥斯汀分校的研究者开发了一种基于 GPT 的语言解码器，它能通过非侵入性的 MRI/fMRI 收集大脑活动信息，并将思维转化为语言文字，准确率高达 82%。这项技术有望为失去语言能力或无法外部沟通的人提供一种新的交流方式，同时也为认知神经科学和人工智能领域带来了新的突破。</p>\n<div align=\"center\">\n    <style>.wfgtfhtylygf{}</style><img data-src=\"/2025/01/20/FMRI2TXT-%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%AD%E8%A8%80%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/01.jpg\" class=\"wfgtfhtylygf\">\n</div>\n<h4 id=\"背景补充\"><a class=\"anchor\" href=\"#背景补充\">#</a> 背景补充：</h4>\n<p>大脑解码技术可以通过不同的方法来实现。这其中主要分为三类：侵入式脑机接口，非侵入式脑机接口，以及用于研究神经元活动的大脑解码技术。</p>\n<p>侵入式脑机接口是一种通过直接植入电极到大脑皮层来记录神经元活动的技术。它被广泛用于动物实验，可以帮助科学家们深入研究大脑的内部机制。</p>\n<p>与侵入式脑机接口技术不同，非侵入式脑机接口技术不需要在大脑中植入电极，因此对于临床和人类研究而言更为安全。fMRI (功能性磁共振成像) 是一种常用的非侵入式脑机接口技术，它通过测量大脑中的血液流量变化来了解神经活动。EEG (脑电图) 和 MEG (脑磁图) 也是常用的非侵入式脑机接口技术，它们可以记录脑电活动和磁场活动。fNIRS (近红外光谱成像) 利用可见光外的红外光谱来研究脑血流量的变化。相比于侵入式脑机接口而言，这些非侵入式技术具有相对较低的信噪比，无法记录神经元活动的细节，但这仍然是理解大脑活动的有力工具。</p>\n<p>fMRI 是一种可以捕捉大脑在行为过程中血氧水平变化的技术，它可以反映出大脑不同区域的神经活动。通过 fMRI，我们可以观察到大脑在听、说、想或看语言时所激活的区域和模式。</p>\n<p>然而，fMRI 也有一个很大的缺点，就是它的时间分辨率很低，也就是说它不能捕捉到快速变化的神经信号。对于自然语言（每秒超过两个词），这意味着每张 fMRI 图像可能受到 20 多个词的影响。因此，要从 fMRI 图像中还原出连续的语言，就需要解决一个不适定问题，即未知数比方程数多得多。</p>\n<p>为了克服这个难题，德克萨斯大学奥斯汀分校的研究者利用了一个先进的 AI 语言模型 ——GPT-1。GPT 是由 OpenAI 实验室开发的一个基于深度学习的文本生成系统，它可以根据给定的上下文生成连贯和流畅的自然语言。研究者将 GPT 与 fMRI 图像进行了训练和匹配，从而构建了一个语言解码器。</p>\n<h4 id=\"实验设计\"><a class=\"anchor\" href=\"#实验设计\">#</a> 实验设计：</h4>\n<div align=\"center\">\n    <style>.fbiqdzwhvuvf{}</style><img data-src=\"/2025/01/20/FMRI2TXT-%E9%9D%9E%E4%BE%B5%E5%85%A5%E6%80%A7%E8%AF%AD%E8%A8%80%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/02.jpg\" class=\"fbiqdzwhvuvf\">\n</div>\n<p>首先，在实验前期，研究者让参与者在 fMRI 扫描仪中听或想一些故事，并记录下他们的大脑活动；</p>\n<p>然后，在实验后期，研究者给出一些新的故事，并让参与者再次听或想，并记录下他们的大脑活动；</p>\n<p>接着，研究者将这些新的大脑活动输入到语言解码器中，并让 GPT 生成多个可能与之对应的词序列；</p>\n<p>最后，研究者通过比较 GPT 预测出来的大脑活动与实际记录下来的大脑活动之间的相似度，来选择最佳匹配的词序列作为输出。</p>\n<p>研究者发现，这个语言解码器可以在不同任务和条件下都表现出较高的准确率和可靠性。</p>\n<p>无论是听到、想象还是观看故事，语言解码器都可以生成与原始故事含义相近甚至相同的词序列。</p>\n<p>例如，在听故事任务中，原始故事是 “她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小木盒子里”，而语言解码器输出是 “她把钱放进了她父亲以前用过并且现在已经坏掉了但她仍然保留着并且非常珍惜它并且把它放在床头柜上面那个小盒子里”。</p>\n<p>可以看出，输出与原始故事几乎完全相同，只有一个词（木）被省略了。</p>\n<p>在想象故事任务中，原始故事是 “我今天早上起床后去洗澡然后吃早饭然后去上班”，而语言解码器输出是 “我今天早上起床后去洗澡然后吃早饭然后去工作”。</p>\n<p>可以看出，输出与原始故事含义完全相同，只有一个词（工作）被替换了。</p>\n<p>在观看故事任务中，原始故事是一个视频片段，内容是一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始交谈并走向公园里面 ，而语言解码器输出是 “一个男孩在玩滑板时摔倒了，并被一个女孩帮助起来，并且两人开始聊天并走向公园”。</p>\n<p>可以看出，输出与原始故事含义非常接近。</p>\n<p>研究者还发现，在所有任务中，听故事任务表现最好（平均准确率 82%），想象故事任务次之（平均准确率 75%），观看故事任务最差（平均准确率 63%）。</p>\n<p>这可能是因为听故事任务中输入和输出都是自然语言形式，而观看故事任务中输入和输出之间存在跨媒体转换。</p>\n<p>此外，在所有条件中， 主动合作条件表现最好（平均准确率 79%），被动合作条件次之（平均准确率 72%），主动反抗条件最差（平均准确率 54%）。</p>\n<p>这可能是因为主动合作条件中，参与者主动配合语言解码器的工作，而被动合作条件中，参与者只是被动地接受语言刺激，而主动反抗条件中，参与者故意分散注意力或想象与刺激无关的内容。这表明，语言解码器的效果受到参与者意愿和态度的影响。</p>\n<p>这项研究是首次利用非侵入性的 fMRI 和基于 GPT 的 AI 语言模型来实现连续语言的解码，它为认知神经科学和人工智能领域带来了新的突破。</p>\n",
            "tags": [
                "深度学习",
                "脑科学"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/12/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/",
            "url": "https://kiyoumiii.github.io/2025/01/12/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%89%EF%BC%89/",
            "title": "前端学习之JS篇（三）",
            "date_published": "2025-01-12T05:25:58.000Z",
            "content_html": "<h3 id=\"六-thiscallapplybind\"><a class=\"anchor\" href=\"#六-thiscallapplybind\">#</a> 六、this/call/apply/bind</h3>\n<ol>\n<li>对 this 对象的理解</li>\n</ol>\n<p>this 是执行上下文中的一个属性，它指向<strong>最后一次调用这个方法的对象</strong>。在实际开发中，this 的指向可以通过四种调用模式来判断。</p>\n<ul>\n<li>\n<p>第一种是函数调用模式，当一个函数不是一个对象的属性时，直接作为函数来调用时，this 指向全局对象。</p>\n</li>\n<li>\n<p>第二种是方法调用模式，如果一个函数作为一个对象的方法来调用时，this 指向这个对象。</p>\n</li>\n<li>\n<p>第三种是构造器调用模式，如果一个函数用 new 调用时，函数执行前会新创建一个对象，this 指向这个新创建的对象。</p>\n</li>\n<li>\n<p>第四种是 apply 、 call 和 bind 调用模式，这三个方法都可以显示的指定调用函数的 this 指向。其中 apply 方法接收两个参数：一个是 this 绑定的对象，一个是参数数组。call 方法接收的参数，第一个是 this 绑定的对象，后面的其余参数是传入函数执行的参数。也就是说，在使用 call () 方法时，传递给函数的参数必须逐个列举出来。bind 方法通过传入一个对象，返回一个 this 绑定了传入对象的新函数。这个函数的 this 指向除了使用 new 时会被改变，其他情况下都不会改变。</p>\n</li>\n</ul>\n<p>这四种方式，使用构造器调用模式的优先级最高，然后是 apply、call 和 bind 调用模式，然后是方法调用模式，然后是函数调用模式。</p>\n<ol start=\"2\">\n<li>call () 和 apply () 的区别？</li>\n</ol>\n<p>它们的作用一模一样，区别仅在于传入参数的形式的不同。</p>\n<ul>\n<li>\n<p>apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组，apply 方法把这个集合中的元素作为参数传递给被调用的函数。</p>\n</li>\n<li>\n<p>call 传入的参数数量不固定，跟 apply 相同的是，第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数。</p>\n</li>\n</ul>\n<ol start=\"3\">\n<li>实现 call、apply 及 bind 函数</li>\n</ol>\n<p>（1）call 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>处理传入的参数，截取第一个参数后的所有参数。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性。</li>\n<li>返回结果。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 判断调用对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!</span> <span class=\"token operator\">==</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'type error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 获取参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 判断 context 是否传入，如果未传入则设置为 window</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token comment\">// 将调用函数设为对象的方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 将属性删除</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（2）apply 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>判断传入上下文对象是否存在，如果不存在，则设置为 window 。</li>\n<li>将函数作为上下文对象的一个属性。</li>\n<li>判断参数值是否传入</li>\n<li>使用上下文对象来调用这个方法，并保存返回结果。</li>\n<li>删除刚才新增的属性</li>\n<li>返回结果</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 判断调用对象是否为函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 判断 context 是否存在，如果未传入则为 window</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  context <span class=\"token operator\">=</span> context <span class=\"token operator\">||</span> window<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 将函数设为对象的方法</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  context<span class=\"token punctuation\">.</span>fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 调用方法</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    result <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 将属性删除</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">delete</span> context<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（3）bind 函数的实现步骤：</p>\n<ul>\n<li>判断调用对象是否为函数，即使是定义在函数的原型上的，但是可能出现使用 call 等方式调用的情况。</li>\n<li>保存当前函数的引用，获取其余传入参数值。</li>\n<li>创建一个函数返回</li>\n<li>函数内部使用 apply 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 this 给 apply 调用，其余情况都传入指定的上下文对象。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myBind</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 判断调用对象是否为函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 获取参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    fn <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 根据调用方式，传入不同绑定值</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">this</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Fn</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span> <span class=\"token operator\">:</span> context<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      args<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"七-异步编程\"><a class=\"anchor\" href=\"#七-异步编程\">#</a> 七、异步编程</h3>\n<ol>\n<li>异步编程的实现方式？</li>\n</ol>\n<ul>\n<li>\n<p>回调函数 的方式，使用回调函数的方式有一个缺点是，多个回调函数嵌套的时候会造成回调函数地狱，上下两层的回调函数间的代码耦合度太高，不利于代码的可维护。</p>\n</li>\n<li>\n<p>Promise 的方式，使用 Promise 的方式可以将嵌套的回调函数作为链式调用。但是使用这种方法，有时会造成多个 then 的链式调用，可能会造成代码的语义不够明确。</p>\n</li>\n<li>\n<p>generator 的方式，它可以在函数的执行过程中，将函数的执行权转移出去，在函数外部还可以将执行权转移回来。当遇到异步函数执行的时候，将函数执行权转移出去，当异步函数执行完毕时再将执行权给转移回来。因此在 generator 内部对于异步操作的方式，可以以同步的顺序来书写。使用这种方式需要考虑的问题是何时将函数的控制权转移回来，因此需要有一个自动执行 generator 的机制，比如说 co 模块等方式来实现 generator 的自动执行。</p>\n</li>\n<li>\n<p>async 函数 的方式，async 函数是 generator 和 promise 实现的一个自动执行的语法糖，它内部自带执行器，当函数内部执行到一个 await 语句的时候，如果语句返回一个 promise 对象，那么函数将会等待 promise 对象的状态变为 resolve 后再继续向下执行。因此可以将异步逻辑，转化为同步的顺序来书写，并且这个函数可以自动执行。</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li>setTimeout、Promise、Async/Await 的区别</li>\n</ol>\n<p>setTimeout、Promise 和 Async/Await 都是 JavaScript 中用于处理异步操作的机制，但它们在使用方式、语法和功能上有所不同。</p>\n<p>setTimeout 是一个全局函数，用于在指定的延迟时间后执行一个函数或一段代码。它是异步的，但不涉及任何状态管理或链式调用。</p>\n<p>Promise 是一个用于处理异步操作的对象，表示一个最终会完成（或失败）的操作，并返回一个值。它可以用于更好地管理异步操作的链式调用和错误处理。</p>\n<p>Async/Await 是 Promise 的语法糖，用于简化异步代码的编写。它使得异步代码看起来更像同步代码，提高了代码的可读性和可维护性。</p>\n<p>（1）setTimeout</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//1. 打印 script start</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'settimeout'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 4. 打印 settimeout</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">// 2. 调用 setTimeout 函数，并定义其完成后执行的回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span>\t<span class=\"token comment\">//3. 打印 script start</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 输出顺序：script start->script end->settimeout</span></pre></td></tr></table></figure><p>（2）Promise</p>\n<p>Promise 本身是同步的立即执行函数， 当在 executor 中执行 resolve 或者 reject 的时候，此时是异步操作， 会先执行 then/catch 等，当主栈完成后，才会去调用 resolve/reject 中存放的方法执行，打印 p 的时候，是打印的返回结果，一个 Promise 实例。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'settimeout'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 输出顺序: script start->promise1->promise1 end->script end->promise2->settimeout</span></pre></td></tr></table></figure><p>当 JS 主线程执行到 Promise 对象时：</p>\n<ul>\n<li>promise1.then () 的回调就是一个 task</li>\n<li>promise1 是 resolved 或 rejected: 那这个 task 就会放入当前事件循环回合的 microtask queue</li>\n<li>promise1 是 pending: 这个 task 就会放入 事件循环的未来的某个 (可能下一个) 回合的 microtask queue 中</li>\n<li>setTimeout 的回调也是个 task ，它会被放入 macrotask queue 即使是 0ms 的情况</li>\n</ul>\n<p>（3）async/await</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async1 end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 输出顺序：script start->async1 start->async2->script end->async1 end</span></pre></td></tr></table></figure><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p>\n<p>例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>func1 的运行结果其实就是一个 Promise 对象。因此也可以使用 then 来处理后续逻辑。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 30</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>await 的含义为等待，也就是 async 函数需要等待 await 后的函数执行完成并且有了返回结果（Promise 对象）之后，才能继续执行下面的代码。await 通过返回一个 Promise 对象来实现同步的效果。</p>\n<ol start=\"3\">\n<li>对 Promise 的理解</li>\n</ol>\n<p>Promise 是异步编程的一种解决方案，它是一个对象，可以获取异步操作的消息，他的出现大大改善了异步编程的困境，避免了地狱回调，它比传统的解决方案回调函数和事件更合理和更强大。</p>\n<p>所谓 Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p>\n<p>（1）Promise 的实例有三个状态:</p>\n<ul>\n<li>pending（进行中）</li>\n<li>Resolved（已完成）</li>\n<li>Rejected（已拒绝）</li>\n</ul>\n<p>当把一件事情交给 promise 时，它的状态就是 Pending，任务完成了状态就变成了 Resolved、没有完成失败了就变成了 Rejected。</p>\n<p>（2）Promise 的实例有两个过程：</p>\n<ul>\n<li>pending -&gt; fulfilled : Resolved（已完成）</li>\n<li>pending -&gt; rejected：Rejected（已拒绝）</li>\n</ul>\n<p>注意：一旦从进行状态变成为其他状态就永远不能更改状态了。</p>\n<p>Promise 的特点：</p>\n<ul>\n<li>\n<p>对象的状态不受外界影响。promise 对象代表一个异步操作，有三种状态，pending（进行中）、fulfilled（已成功）、rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态，这也是 promise 这个名字的由来 ——“承诺”；</p>\n</li>\n<li>\n<p>一旦状态改变就不会再变，任何时候都可以得到这个结果。promise 对象的状态改变，只有两种可能：从 pending 变为 fulfilled，从 pending 变为 rejected。这时就称为 resolved（已定型）。如果改变已经发生了，你再对 promise 对象添加回调函数，也会立即得到这个结果。这与事件（event）完全不同，事件的特点是：如果你错过了它，再去监听是得不到结果的。</p>\n</li>\n</ul>\n<p>Promise 的缺点：</p>\n<ul>\n<li>无法取消 Promise，一旦新建它就会立即执行，无法中途取消。</li>\n<li>如果不设置回调函数，Promise 内部抛出的错误，不会反应到外部。</li>\n<li>当处于 pending 状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</li>\n</ul>\n<p>总结： Promise 对象是异步编程的一种解决方案，最早由社区提出。Promise 是一个构造函数，接收一个函数作为参数，返回一个 Promise 实例。一个 Promise 实例有三种状态，分别是 pending、resolved 和 rejected，分别代表了进行中、已成功和已失败。实例的状态只能由 pending 转变 resolved 或者 rejected 状态，并且状态一经改变，就凝固了，无法再被改变了。</p>\n<p>状态的改变是通过 resolve () 和 reject () 函数来实现的，可以在异步操作结束后调用这两个函数改变 Promise 实例的状态，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数。这个回调函数属于微任务，会在本轮事件循环的末尾执行。</p>\n<p>注意： 在构造 Promise 的时候，构造函数内部的代码是立即执行的</p>\n<ol start=\"4\">\n<li>Promise 的基本用法</li>\n</ol>\n<p>（1）创建 Promise 对象</p>\n<p>Promise 对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和 rejected（已失败）。</p>\n<p>Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 和 reject。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ... some code</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">/* 异步操作成功 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般情况下都会使用 new Promise () 来创建 promise 对象，但是也可以使用 promise.resolve 和 promise.reject 这两个方法：</p>\n<ul>\n<li>Promise.resolve</li>\n</ul>\n<p>Promise.resolve (value) 的返回值也是一个 promise 对象，可以对返回值进行.then 调用，代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印出 11</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>resolve (11) 代码中，会让 promise 对象进入确定 (resolve 状态)，并将参数 11 传递给后面的 then 所指定的 onFulfilled 函数；</p>\n<p>创建 promise 对象可以使用 new Promise 的形式创建对象，也可以使用 Promise.resolve (value) 的形式创建 promise 对象；</p>\n<ul>\n<li>Promise.reject</li>\n</ul>\n<p>Promise.reject 也是 new Promise 的快捷形式，也创建一个 promise 对象。代码如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>“我错了，请原谅俺！！”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>就是下面的代码 new Promise 的简单形式：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我错了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>下面是使用 resolve 方法和 reject 方法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">testPromise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ready</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ready<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No thanks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 方法调用</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">testPromise</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面的代码的含义是给 testPromise 方法传递一个参数，返回一个 promise 对象，如果为 true 的话，那么调用 promise 对象中的 resolve () 方法，并且把其中的参数传递给后面的 then 第一个函数内，因此打印出 “hello world”, 如果为 false 的话，会调用 promise 对象中的 reject () 方法，则会进入 then 的第二个函数内，会打印 No thanks；</p>\n<p>（2）Promise 方法</p>\n<p>Promise 有五个常用的方法：then ()、catch ()、all ()、race ()、finally。下面就来看一下这些方法。</p>\n<ul>\n<li>\n<ol>\n<li>then()</li>\n</ol>\n</li>\n</ul>\n<p>当 Promise 执行的内容符合成功条件时，调用 resolve 函数，失败就调用 reject 函数。Promise 创建完了，那该如何调用呢？</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// success</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// failure</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 resolved 时调用，第二个回调函数是 Promise 对象的状态变为 rejected 时调用。其中第二个参数可以省略。 then 方法返回的是一个新的 Promise 实例（不是原来那个 Promise 实例）。因此可以采用链式写法，即 then 方法后面再调用另一个 then 方法。</p>\n<p>当要写有顺序的异步事件时，需要串行时，可以这样写：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'first'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resovle<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那当要写的事件没有顺序或者关系时，还如何写呢？可以使用 all 方法来解决。</p>\n<ul>\n<li>\n<ol start=\"2\">\n<li>catch()</li>\n</ol>\n</li>\n</ul>\n<p>Promise 对象除了有 then 方法，还有一个 catch 方法，该方法相当于 then 方法的第二个参数，指向 reject 的回调函数。不过 catch 方法还有一个作用，就是在执行 resolve 回调函数时，如果出现错误，抛出异常，不会停止运行，而是进入 catch 方法中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">,</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"3\">\n<li>all()</li>\n</ol>\n</li>\n</ul>\n<p>all 方法可以完成并行任务， 它接收一个数组，数组的每一项都是一个 promise 对象。<br />\n当数组中所有的 promise 的状态都达到 resolved 的时候，all 方法的状态就会变成 resolved，如果有一个状态变成了 rejected，那么 all 方法的状态就会变成 rejected。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>javascript</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 结果为：[1,2,3] </span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>调用 all 方法时的结果成功的时候是回调函数的参数也是一个数组，这个数组按顺序保存着每一个 promise 对象 resolve 执行时的值。</p>\n<ul>\n<li>\n<ol start=\"4\">\n<li>race()</li>\n</ol>\n</li>\n</ul>\n<p>race 方法和 all 一样，接受的参数是一个每项都是 promise 的数组，但是与 all 不同的是，当最先执行完的事件执行完之后，就直接返回该 promise 对象的值。如果第一个 promise 对象状态变成 resolved，那自身的状态变成了 resolved；反之第一个 promise 变成 rejected，那自身状态就会变成 rejected。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> promise1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> promise2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> promise3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span>promise2<span class=\"token punctuation\">,</span>promise3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token comment\">// 结果：2</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">rej</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那么 race 方法有什么实际作用呢？当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span><span class=\"token function\">timeOutPromise</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"5\">\n<li>finally()</li>\n</ol>\n</li>\n</ul>\n<p>finally 方法用于指定不管 Promise 对象最后状态如何，都会执行的操作。该方法是 ES2018 引入标准的。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span>···<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，不管 promise 最后的状态，在执行完 then 或 catch 指定的回调函数以后，都会执行 finally 方法指定的回调函数。</p>\n<p>下面是一个例子，服务器使用 Promise 处理请求，然后使用 finally 方法关掉服务器。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>stop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>finally 方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是 fulfilled 还是 rejected。这表明，finally 方法里面的操作，应该是与状态无关的，不依赖于 Promise 的执行结果。finally 本质上是 then 方法的特例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 等同于</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>promise</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 语句</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">throw</span> error<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>上面代码中，如果不使用 finally 方法，同样的语句需要为成功和失败两种情况各写一次。有了 finally 方法，则只需要写一次。</p>\n<ol start=\"5\">\n<li>Promise 解决了什么问题</li>\n</ol>\n<p>在工作中经常会碰到这样一个需求，比如我使用 ajax 发一个 A 请求后，成功后拿到数据，需要把数据传给 B 请求；那么需要如下编写代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.txt'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>上面的代码有如下缺点：</p>\n<ul>\n<li>后一个请求需要依赖于前一个请求成功后，将数据往下传递，会导致多个 ajax 请求嵌套的情况，代码不够直观。</li>\n<li>如果前后两个请求不需要传递参数的情况下，那么后一个请求也需要前一个请求成功后再执行下一步操作，这种情况下，那么也需要如上编写代码，导致代码不够直观。</li>\n</ul>\n<p>Promise 出现之后，代码变成这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span><span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./a.txt'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>这样代码看起了就简洁了很多，解决了地狱回调的问题。</p>\n<ol start=\"6\">\n<li>Promise.all 和 Promise.race 的区别的使用场景</li>\n</ol>\n<p>（1）Promise.all</p>\n<p>Promise.all 可以将多个 Promise 实例包装成一个新的 Promise 实例。同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，而失败的时候则返回最先被 reject 失败状态的值。</p>\n<p>Promise.all 中传入的是数组，返回的也是是数组，并且会将进行映射，传入的 promise 对象返回的值是按照顺序在数组中排列的，但是注意的是他们执行的顺序并不是按照顺序的，除非可迭代对象为空。</p>\n<p>需要注意，Promise.all 获得的成功结果的数组里面的数据顺序和 Promise.all 接收到的数组顺序是一致的，这样当遇到发送多个请求并根据请求顺序获取和使用数据的场景，就可以使用 Promise.all 来解决。</p>\n<p>（2）Promise.race</p>\n<p>顾名思义，Promse.race 就是赛跑的意思，意思就是说，Promise.race ([p1, p2, p3]) 里面哪个结果获得的快，就返回那个结果，不管结果本身是成功状态还是失败状态。当要做一件事，超过多长时间就不做了，可以用这个方法来解决：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>promise1<span class=\"token punctuation\">,</span><span class=\"token function\">timeOutPromise</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>对 async/await 的理解</li>\n</ol>\n<p>async/await 其实是 Generator 的语法糖，它能实现的效果都能用 then 链来实现，它是为优化 then 链而开发出来的。<br />\n从字面上来看，async 是 “异步” 的简写，await 则为等待，所以很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。当然语法上强制规定 await 只能出现在 asnyc 函数中，先来看看 async 函数返回了什么：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>所以，async 函数返回的是一个 Promise 对象。async 函数（包含函数语句、函数表达式、Lambda 表达式）会返回一个 Promise 对象，如果在函数中 return 一个直接量，async 会把这个直接量通过 Promise.resolve () 封装成 Promise 对象。</p>\n<p>async 函数返回的是一个 Promise 对象，所以在最外层不能用 await 获取其返回值的情况下，当然应该用原来的方式：then () 链来处理这个 Promise 对象，就像这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// hello world</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>那如果 async 函数没有返回值，又该如何？很容易想到，它会返回 Promise.resolve (undefined)。</p>\n<p>联想一下 Promise 的特点 —— 无等待，所以在没有 await 的情况下执行 async 函数，它会立即执行，返回一个 Promise 对象，并且，绝不会阻塞后面的语句。这和普通返回 Promise 对象的函数并无二致。</p>\n<p>注意：Promise.resolve (x) 可以看作是 new Promise (resolve =&gt; resolve (x)) 的简写，可以用于快速封装字面量对象或其他对象，将其封装成 Promise 实例。</p>\n<ol start=\"8\">\n<li>await 到底在等啥？</li>\n</ol>\n<p>await 在等待什么呢？ 一般来说，都认为 await 是在等待一个 async 函数完成。不过按语法说明，await 等待的是一个表达式，这个表达式的计算结果是 Promise 对象或者其它值（换句话说，就是没有特殊限定）。</p>\n<p>因为 async 函数返回一个 Promise 对象，所以 await 可以用于等待一个 async 函数的返回值 —— 这也可以说是 await 在等 async 函数，但要清楚，它等的实际是一个返回值。注意到 await 不仅仅用于等 Promise 对象，它可以等任意表达式的结果，所以，await 后面实际是可以接普通函数调用或者直接量的。所以下面这个示例完全可以正确运行：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"something\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello async\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> v1 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> v2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">testAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">,</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>await 表达式的运算结果取决于它等的是什么。</p>\n<ul>\n<li>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</li>\n<li>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</li>\n</ul>\n<p>来看一个例子：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">testAwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span>  <span class=\"token keyword\">await</span> <span class=\"token function\">testAsy</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 3 秒钟之后出现 hello world</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cuger'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 3 秒钟之后出现 cug</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">testAwt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cug'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 立即输出 cug</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>async/await 的优势<br />\n单一的 Promise 链并不能发现 async/await 的优势，但是，如果需要处理由多个 Promise 组成的 then 链的时候，优势就能体现出来了（很有意思，Promise 通过 then 链来解决多层回调的问题，现在又用 async/await 来进一步优化它）。</li>\n</ol>\n<p>假设一个业务，分多个步骤完成，每个步骤都是异步的，而且依赖于上一个步骤的结果。仍然用 setTimeout 来模拟异步操作：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 传入参数 n，表示这个函数执行的时间（毫秒）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 执行的结果是 n + 200，这个值将用于下一步骤</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step1 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step2 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">step3 with </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>n<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">takeLongTime</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在用 Promise 方式来实现这三个步骤的处理：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> time1 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time2</span> <span class=\"token operator\">=></span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span>time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">time3</span> <span class=\"token operator\">=></span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>time3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">result is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// c:\\var\\test>node --harmony_async_await .</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// step1 with 300</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// step2 with 500</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// step3 with 700</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// result is 900</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// doIt: 1507.251ms</span></pre></td></tr></table></figure><p>输出结果 result 是 step3 () 的参数 700 + 200 = 900。doIt () 顺序执行了三个步骤，一共用了 300 + 500 + 700 = 1500 毫秒，和 console.time ()/console.timeEnd () 计算的结果一致。</p>\n<p>如果用 async/await 来实现呢，会是这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> time1 <span class=\"token operator\">=</span> <span class=\"token number\">300</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> time2 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step1</span><span class=\"token punctuation\">(</span>time1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> time3 <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step2</span><span class=\"token punctuation\">(</span>time2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">step3</span><span class=\"token punctuation\">(</span>time3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">result is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>result<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"doIt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">doIt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>结果和之前的 Promise 实现是一样的，但是这个代码看起来是不是清晰得多，几乎跟同步代码一样</p>\n<ol start=\"10\">\n<li>async/await 对比 Promise 的优势</li>\n</ol>\n<ul>\n<li>代码读起来更加同步，Promise 虽然摆脱了回调地狱，但是 then 的链式调⽤也会带来额外的阅读负担</li>\n<li>Promise 传递中间值⾮常麻烦，⽽ async/await ⼏乎是同步的写法，⾮常优雅</li>\n<li>错误处理友好，async/await 可以⽤成熟的 try/catch，Promise 的错误捕获⾮常冗余</li>\n<li>调试友好，Promise 的调试很差，由于没有代码块，你不能在⼀个返回表达式的箭头函数中设置断点，如果你在⼀个.then 代码块中使⽤调试器的步进 (step-over) 功能，调试器并不会进⼊后续的.then 代码块，因为调试器只能跟踪同步代码的每⼀步。</li>\n</ul>\n<ol start=\"11\">\n<li>async/await 如何捕获异常</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>八、面向对象</p>\n<ol>\n<li>对象创建的方式有哪些？</li>\n</ol>\n<p>一般使用字面量的形式直接创建对象，但是这种创建方式对于创建大量相似对象的时候，会产生大量的重复代码。但 js 和一般的面向对象的语言不同，在 ES6 之前它没有类的概念。但是可以使用函数来进行模拟，从而产生出可复用的对象创建方式，常见的有以下几种：</p>\n<p>（1）第一种是工厂模式，工厂模式的主要工作原理是用函数来封装创建对象的细节，从而通过调用函数来达到复用的目的。但是它有一个很大的问题就是创建出来的对象无法和某个类型联系起来，它只是简单的封装了复用代码，而没有建立起对象和类型间的关系。</p>\n<p>（2）第二种是构造函数模式。js 中每一个函数都可以作为构造函数，只要一个函数是通过 new 来调用的，那么就可以把它称为构造函数。执行构造函数首先会创建一个对象，然后将对象的原型指向构造函数的 prototype 属性，然后将执行上下文中的 this 指向这个对象，最后再执行整个函数，如果返回值不是对象，则返回新建的对象。因为 this 的值指向了新建的对象，因此可以使用 this 给对象赋值。构造函数模式相对于工厂模式的优点是，所创建的对象和构造函数建立起了联系，因此可以通过原型来识别对象的类型。但是构造函数存在一个缺点就是，造成了不必要的函数对象的创建，因为在 js 中函数也是一个对象，因此如果对象属性中如果包含函数的话，那么每次都会新建一个函数对象，浪费了不必要的内存空间，因为函数是所有的实例都可以通用的。</p>\n<p>（3）第三种模式是原型模式，因为每一个函数都有一个 prototype 属性，这个属性是一个对象，它包含了通过构造函数创建的所有实例都能共享的属性和方法。因此可以使用原型对象来添加公用属性和方法，从而实现代码的复用。这种方式相对于构造函数模式来说，解决了函数对象的复用问题。但是这种模式也存在一些问题，一个是没有办法通过传入参数来初始化值，另一个是如果存在一个引用类型如 Array 这样的值，那么所有的实例将共享一个对象，一个实例对引用类型值的改变会影响所有的实例。</p>\n<p>（4）第四种模式是组合使用构造函数模式和原型模式，这是创建自定义类型的最常见方式。因为构造函数模式和原型模式分开使用都存在一些问题，因此可以组合使用这两种模式，通过构造函数来初始化对象的属性，通过原型对象来实现函数方法的复用。这种方法很好的解决了两种模式单独使用时的缺点，但是有一点不足的就是，因为使用了两种不同的模式，所以对于代码的封装性不够好。</p>\n<p>（5）第五种模式是动态原型模式，这一种模式将原型方法赋值的创建过程移动到了构造函数的内部，通过对属性是否存在的判断，可以实现仅在第一次调用函数时对原型对象赋值一次的效果。这一种方式很好地对上面的混合模式进行了封装。</p>\n<p>（6）第六种模式是寄生构造函数模式，这一种模式和工厂模式的实现基本相同，我对这个模式的理解是，它主要是基于一个已有的类型，在实例化时对实例化的对象进行扩展。这样既不用修改原来的构造函数，也达到了扩展对象的目的。它的一个缺点和工厂模式一样，无法实现对象的识别。</p>\n<ol start=\"2\">\n<li>对象继承的方式有哪些？</li>\n</ol>\n<p>（1）第一种是以原型链的方式来实现继承，但是这种实现方式存在的缺点是，在包含有引用类型的数据时，会被所有的实例对象所共享，容易造成修改的混乱。还有就是在创建子类型的时候不能向超类型传递参数。</p>\n<p>（2）第二种方式是使用借用构造函数的方式，这种方式是通过在子类型的函数中调用超类型的构造函数来实现的，这一种方法解决了不能向超类型传递参数的缺点，但是它存在的一个问题就是无法实现函数方法的复用，并且超类型原型定义的方法子类型也没有办法访问到。</p>\n<p>（3）第三种方式是组合继承，组合继承是将原型链和借用构造函数组合起来使用的一种方式。通过借用构造函数的方式来实现类型的属性的继承，通过将子类型的原型设置为超类型的实例来实现方法的继承。这种方式解决了上面的两种模式单独使用时的问题，但是由于我们是以超类型的实例来作为子类型的原型，所以调用了两次超类的构造函数，造成了子类型的原型中多了很多不必要的属性。</p>\n<p>（4）第四种方式是原型式继承，原型式继承的主要思路就是基于已有的对象来创建新的对象，实现的原理是，向函数中传入一个对象，然后返回一个以这个对象为原型的对象。这种继承的思路主要不是为了实现创造一种新的类型，只是对某个对象实现一种简单继承，ES5 中定义的 Object.create () 方法就是原型式继承的实现。缺点与原型链方式相同。</p>\n<p>（5）第五种方式是寄生式继承，寄生式继承的思路是创建一个用于封装继承过程的函数，通过传入一个对象，然后复制一个对象的副本，然后对象进行扩展，最后返回这个对象。这个扩展的过程就可以理解是一种继承。这种继承的优点就是对一个简单对象实现继承，如果这个对象不是自定义类型时。缺点是没有办法实现函数的复用。</p>\n<p>（6）第六种方式是寄生式组合继承，组合继承的缺点就是使用超类型的实例做为子类型的原型，导致添加了不必要的原型属性。寄生式组合继承的方式是使用超类型的原型的副本来作为子类型的原型，这样就避免了创建不必要的属性。</p>\n<p>九、垃圾回收与内存泄漏</p>\n<ol>\n<li>浏览器的垃圾回收机制</li>\n</ol>\n<p>（1）垃圾回收的概念</p>\n<p>垃圾回收：JavaScript 代码运行时，需要分配内存空间来储存变量和值。当变量不在参与运行时，就需要系统收回被占用的内存空间，这就是垃圾回收。</p>\n<p>回收机制：</p>\n<ul>\n<li>Javascript 具有自动垃圾回收机制，会定期对那些不再使用的变量、对象所占用的内存进行释放，原理就是找到不再使用的变量，然后释放掉其占用的内存。</li>\n<li>JavaScript 中存在两种变量：局部变量和全局变量。全局变量的生命周期会持续要页面卸载；而局部变量声明在函数中，它的生命周期从函数执行开始，直到函数执行结束，在这个过程中，局部变量会在堆或栈中存储它们的值，当函数执行结束后，这些局部变量不再被使用，它们所占有的空间就会被释放。</li>\n<li>不过，当局部变量被外部函数使用时，其中一种情况就是闭包，在函数执行结束后，函数外部的变量依然指向函数内部的局部变量，此时局部变量依然在被使用，所以不会回收。</li>\n</ul>\n<p>（2）垃圾回收的方式</p>\n<p>浏览器通常使用的垃圾回收方法有两种：标记清除，引用计数。</p>\n<p>1）标记清除</p>\n<ul>\n<li>标记清除是浏览器常见的垃圾回收方式，当变量进入执行环境时，就标记这个变量 “进入环境”，被标记为 “进入环境” 的变量是不能被回收的，因为他们正在被使用。当变量离开环境时，就会被标记为 “离开环境”，被标记为 “离开环境” 的变量会被内存释放。</li>\n<li>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后。垃圾收集器完成内存清除工作，销毁那些带标记的值，并回收他们所占用的内存空间。</li>\n</ul>\n<p>2）引用计数</p>\n<ul>\n<li>另外一种垃圾回收机制就是引用计数，这个用的相对较少。引用计数就是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋值给该变量时，则这个值的引用次数就是 1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数就减 1。当这个引用次数变为 0 时，说明这个变量已经没有价值，因此，在在机回收期下次再运行时，这个变量所占有的内存空间就会被释放出来。</li>\n<li>这种方法会引起循环引用的问题：例如： obj1 和 obj2 通过属性进行相互引用，两个对象的引用次数都是 2。当使用循环计数时，由于函数执行完后，两个对象都离开作用域，函数执行结束，obj1 和 obj2 还将会继续存在，因此它们的引用次数永远不会是 0，就会引起循环引用。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    obj1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> obj2<span class=\"token punctuation\">;</span> <span class=\"token comment\">//obj1 引用 obj2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    obj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span> <span class=\"token comment\">//obj2 引用 obj1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种情况下，就要手动释放变量占用的内存：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span>  <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>obj2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span>  <span class=\"token keyword\">null</span></pre></td></tr></table></figure><p>（3）减少垃圾回收<br />\n虽然浏览器可以进行垃圾自动回收，但是当代码比较复杂时，垃圾回收所带来的代价比较大，所以应该尽量减少垃圾回收。</p>\n<ul>\n<li>对数组进行优化： 在清空一个数组时，最简单的方法就是给其赋值为 [ ]，但是与此同时会创建一个新的空对象，可以将数组的长度设置为 0，以此来达到清空数组的目的。</li>\n<li>对 object 进行优化： 对象尽量复用，对于不再使用的对象，就将其设置为 null，尽快被回收。</li>\n<li>对函数进行优化： 在循环中的函数表达式，如果可以复用，尽量放在函数的外面。</li>\n</ul>\n<ol start=\"2\">\n<li>哪些情况会导致内存泄漏</li>\n</ol>\n<p>以下四种情况会造成内存的泄漏：</p>\n<ul>\n<li>意外的全局变量： 由于使用未声明的变量，而意外的创建了一个全局变量，而使这个变量一直留在内存中无法被回收。</li>\n<li>被遗忘的计时器或回调函数： 设置了 setInterval 定时器，而忘记取消它，如果循环函数有对外部变量的引用的话，那么这个变量会被一直留在内存中，而无法被回收。</li>\n<li>脱离 DOM 的引用： 获取一个 DOM 元素的引用，而后面这个元素被删除，由于一直保留了对这个元素的引用，所以它也无法被回收。</li>\n<li>闭包： 不合理的使用闭包，从而导致某些变量一直被留在内存当中。</li>\n</ul>\n<p>P.S. 引用是指向对象的变量。</p>\n",
            "tags": [
                "前端开发",
                "前端开发"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "https://kiyoumiii.github.io/2025/01/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "前端学习之JS篇（二）",
            "date_published": "2025-01-09T08:26:08.000Z",
            "content_html": "<p>续接上一篇文章：前端学习之 JS 篇（一）</p>\n<h3 id=\"三-javascript基础\"><a class=\"anchor\" href=\"#三-javascript基础\">#</a> 三、JavaScript 基础</h3>\n<ol>\n<li>new 操作符的实现原理</li>\n</ol>\n<p>new 操作符的执行过程：</p>\n<p>（1）首先创建了一个新的空对象</p>\n<p>（2）设置原型，将对象的原型设置为函数的 prototype 对象。</p>\n<p>（3）让函数的 this 指向这个对象，执行构造函数的代码（为这个新对象添加属性）</p>\n<p>（4）判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</p>\n<p>具体实现：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">objectFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> newObject <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> constructor <span class=\"token operator\">=</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 判断参数是否是一个函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> constructor <span class=\"token operator\">!==</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"type error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 新建一个空对象，对象的原型为构造函数的 prototype 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  newObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">// 将 this 指向新建对象，并执行函数</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  result <span class=\"token operator\">=</span> <span class=\"token function\">constructor</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>newObject<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 判断返回对象</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> result <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 判断返回结果</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">return</span> flag <span class=\"token operator\">?</span> result <span class=\"token operator\">:</span> newObject<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 使用方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">objectFactory</span><span class=\"token punctuation\">(</span>构造函数<span class=\"token punctuation\">,</span> 初始化参数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>map 和 Object 的区别</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Map</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>意外的键</td>\n<td>Map 默认情况不包含任何键，只包含显式插入的键。</td>\n<td>Object 有一个原型，原型链上的键名有可能和自己在对象上的设置的键名产生冲突。</td>\n</tr>\n<tr>\n<td>键的类型</td>\n<td>Map 的键可以是任意值，包括函数、对象或任意基本类型。</td>\n<td>Object 的键必须是 String 或是 Symbol。</td>\n</tr>\n<tr>\n<td>键的顺序</td>\n<td>Map 中的 key 是有序的。因此，当迭代的时候， Map 对象以插入的顺序返回键值。</td>\n<td>Object 的键是无序的</td>\n</tr>\n<tr>\n<td>Size</td>\n<td>Map 的键值对个数可以轻易地通过 size 属性获取</td>\n<td>Object 的键值对个数只能手动计算</td>\n</tr>\n<tr>\n<td>迭代</td>\n<td>Map 是 iterable 的，所以可以直接被迭代。</td>\n<td>迭代 Object 需要以某种方式获取它的键然后才能迭代。</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>在频繁增删键值对的场景下表现更好。</td>\n<td>在频繁添加和删除键值对的场景下未作出优化。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>map 和 weakMap 的区别</li>\n</ol>\n<p>（1）Map<br />\nmap 本质上就是键值对的集合，但是普通的 Object 中的键值对中的键只能是字符串。而 ES6 提供的 Map 数据结构类似于对象，但是它的键不限制范围，可以是任意类型，是一种更加完善的 Hash 结构。如果 Map 的键是一个原始数据类型，只要两个键严格相同，就视为是同一个键。</p>\n<p>实际上 Map 是一个数组，它的每一个数据也都是一个数组，其形式如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">18</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>Map 数据结构有以下操作方法：</p>\n<ul>\n<li>size： map.size 返回 Map 结构的成员总数。</li>\n<li>set (key,value)：设置键名 key 对应的键值 value，然后返回整个 Map 结构，如果 key 已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前 Map 对象，所以可以链式调用）</li>\n<li>get (key)：该方法读取 key 对应的键值，如果找不到 key，返回 undefined。</li>\n<li>has (key)：该方法返回一个布尔值，表示某个键是否在当前 Map 对象中。</li>\n<li>delete (key)：该方法删除某个键，返回 true，如果删除失败，返回 false。</li>\n<li>clear ()：map.clear () 清除所有成员，没有返回值。</li>\n</ul>\n<p>Map 结构原生提供是三个遍历器生成函数和一个遍历方法</p>\n<ul>\n<li>keys ()：返回键名的遍历器。</li>\n<li>values ()：返回键值的遍历器。</li>\n<li>entries ()：返回所有成员的遍历器。</li>\n<li>forEach ()：遍历 Map 的所有成员。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token punctuation\">[</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// foo bar</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 2</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> items <span class=\"token keyword\">of</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// [\"foo\",1]  [\"bar\",2]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>map</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo 1    bar 2</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（2）WeakMap WeakMap 对象也是一组键值对的集合，其中的键是弱引用的。其键必须是对象，原始数据类型不能作为 key 值，而值可以是任意的。</p>\n<p>该对象也有以下几种方法：</p>\n<ul>\n<li>set (key,value)：设置键名 key 对应的键值 value，然后返回整个 WeakMap 结构。如果 key 已经有值，则键值会被更新，否则就新生成该键。（因为返回的是当前 Map 对象，所以可以链式调用）</li>\n<li>get (key)：该方法读取 key 对应的键值，如果找不到 key，返回 undefined。</li>\n<li>has (key)：该方法返回一个布尔值，表示某个键是否在当前 WeakMap 对象中。</li>\n<li>delete (key)：该方法删除某个键，返回 true，如果删除失败，返回 false。</li>\n</ul>\n<p>其 clear () 方法已经被弃用，所以可以通过创建一个空的 WeakMap 并替换原对象来实现清除。</p>\n<p>WeakMap 的设计目的在于，有时想在某个对象上面存放一些数据，但是这会形成对于这个对象的引用。一旦不再需要这两个对象，就必须手动删除这个引用，否则垃圾回收机制就不会释放对象占用的内存。</p>\n<p>而 WeakMap 的键名所引用的对象都是弱引用，即垃圾回收机制不将该引用考虑在内。因此，只要所引用的对象的其他引用都被清除，垃圾回收机制就会释放该对象所占用的内存。也就是说，一旦不再需要，WeakMap 里面的键名对象和所对应的键值对会自动消失，不用手动删除引用。</p>\n<p>总结：</p>\n<ul>\n<li>Map 数据结构。它类似于对象，也是键值对的集合，但是 “键” 的范围不限于字符串，各种类型的值（包括对象）都可以当作键。</li>\n<li>WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。但是 WeakMap 只接受对象作为键名（ null 除外），不接受其他类型的值作为键名。而且 WeakMap 的键名所指向的对象，不计入垃圾回收机制。</li>\n</ul>\n<ol start=\"4\">\n<li>JavaScript 有哪些内置对象</li>\n</ol>\n<p>全局的对象（ global objects ）或称标准内置对象，不要和 &quot;全局对象（global object）&quot; 混淆。这里说的全局的对象是说在 全局作用域里的对象。全局作用域中的其他对象可以由用户的脚本创建或由宿主程序提供。</p>\n<p>标准内置对象的分类：</p>\n<p>（1）值属性，这些全局属性返回一个简单值，这些值没有自己的属性和方法。例如 Infinity、NaN、undefined、null 字面量</p>\n<p>（2）函数属性，全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。例如 eval ()、parseFloat ()、parseInt () 等</p>\n<p>（3）基本对象，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。例如 Object、Function、Boolean、Symbol、Error 等</p>\n<p>（4）数字和日期对象，用来表示数字、日期和执行数学计算的对象。例如 Number、Math、Date</p>\n<p>（5）字符串，用来表示和操作字符串的对象。例如 String、RegExp</p>\n<p>（6）可索引的集合对象，这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。例如 Array</p>\n<p>（7）使用键的集合对象，这些集合对象在存储数据时会使用到键，支持按照插入顺序来迭代元素。 例如 Map、Set、WeakMap、WeakSet</p>\n<p>（8）矢量集合，SIMD 矢量集合中的数据会被组织为一个数据序列。 例如 SIMD 等</p>\n<p>（9）结构化数据，这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON 编码的数据。例如 JSON 等</p>\n<p>（10）控制抽象对象 例如 Promise、Generator 等</p>\n<p>（11）反射。例如 Reflect、Proxy</p>\n<p>（12）国际化，为了支持多语言处理而加入 ECMAScript 的对象。例如 Intl、Intl.Collator 等</p>\n<p>（13）WebAssembly</p>\n<p>（14）其他。例如 arguments</p>\n<p>总结：<br />\njs 中的内置对象主要指的是在程序执行前存在全局作用域里的由 js 定义的一些全局值属性、函数和用来实例化其他对象的构造函数对象。一般经常用到的如全局变量值 NaN、undefined，全局函数如 parseInt ()、parseFloat () 用来实例化对象的构造函数如 Date、Object 等，还有提供数学计算的单体内置对象如 Math 对象。</p>\n<ol start=\"5\">\n<li>常用的正则表达式有哪些？</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// （1）匹配 16 进制颜色值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">#([0-9a-fA-F]&#123;6&#125;|[0-9a-fA-F]&#123;3&#125;)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// （2）匹配日期，如 yyyy-mm-dd 格式</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[0-9]&#123;4&#125;-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// （3）匹配 qq 号</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[1-9][0-9]&#123;4,10&#125;$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// （4）手机号码正则</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^1[34578]\\d&#123;9&#125;$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// （5）用户名正则</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[a-zA-Z\\$][a-zA-Z0-9_\\$]&#123;4,16&#125;$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>对 JSON 的理解</li>\n</ol>\n<p>JSON 是一种基于文本的轻量级的数据交换格式。它可以被任何的编程语言读取和作为数据格式来传递。</p>\n<p>在项目开发中，使用 JSON 作为前后端数据交换的方式。在前端通过将一个符合 JSON 格式的数据结构序列化为 JSON 字符串，然后将它传递到后端，后端通过 JSON 格式的字符串解析后生成对应的数据结构，以此来实现前后端数据的一个传递。</p>\n<p>因为 JSON 的语法是基于 js 的，因此很容易将 JSON 和 js 中的对象弄混，但是应该注意的是 JSON 和 js 中的对象不是一回事，JSON 中对象格式更加严格，比如说在 JSON 中属性值不能为函数，不能出现 NaN 这样的属性值等，因此大多数的 js 对象是不符合 JSON 对象的格式的。</p>\n<p>在 js 中提供了两个函数来实现 js 数据结构和 JSON 格式的转换处理，</p>\n<ul>\n<li>\n<p>JSON.stringify 函数，通过传入一个符合 JSON 格式的数据结构，将其转换为一个 JSON 字符串。如果传入的数据结构不符合 JSON 格式，那么在序列化的时候会对这些值进行对应的特殊处理，使其符合规范。在前端向后端发送数据时，可以调用这个函数将数据对象转化为 JSON 格式的字符串。</p>\n</li>\n<li>\n<p>JSON.parse () 函数，这个函数用来将 JSON 格式的字符串转换为一个 js 数据结构，如果传入的字符串不是标准的 JSON 格式的字符串的话，将会抛出错误。当从后端接收到 JSON 格式的字符串时，可以通过这个方法来将其解析为一个 js 数据结构，以此来进行数据的访问。</p>\n</li>\n</ul>\n<ol start=\"7\">\n<li>JavaScript 脚本延迟加载的方式有哪些？</li>\n</ol>\n<p>延迟加载就是等页面加载完成之后再加载 JavaScript 文件。 js 延迟加载有助于提高页面加载速度。</p>\n<p>一般有以下几种方式：</p>\n<ul>\n<li>\n<p>defer 属性： 给 js 脚本添加 defer 属性，这个属性会让脚本的加载与文档的解析同步解析，然后在文档解析完成后再执行这个脚本文件，这样的话就能使页面的渲染不被阻塞。多个设置了 defer 属性的脚本按规范来说最后是顺序执行的，但是在一些浏览器中可能不是这样。</p>\n</li>\n<li>\n<p>async 属性： 给 js 脚本添加 async 属性，这个属性会使脚本异步加载，不会阻塞页面的解析过程，但是当脚本加载完成后立即执行 js 脚本，这个时候如果文档没有解析完成的话同样会阻塞。多个 async 属性的脚本的执行顺序是不可预测的，一般不会按照代码的顺序依次执行。</p>\n</li>\n<li>\n<p>动态创建 DOM 方式： 动态创建 DOM 标签的方式，可以对文档的加载事件进行监听，当文档加载完成后再动态的创建 script 标签来引入 js 脚本。</p>\n</li>\n<li>\n<p>使用 setTimeout 延迟方法： 设置一个定时器来延迟加载 js 脚本文件</p>\n</li>\n<li>\n<p>让 JS 最后加载： 将 js 脚本放在文档的底部，来使 js 脚本尽可能的在最后来加载执行。</p>\n</li>\n</ul>\n<ol start=\"8\">\n<li>JavaScript 类数组对象的定义？</li>\n</ol>\n<p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，类数组对象和数组类似，但是不能调用数组的方法。常见的类数组对象有 arguments 和 DOM 方法的返回结果，还有一个函数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<p>（1）通过 call 调用数组的 slice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（2）通过 call 调用数组的 splice 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>（3）通过 apply 调用数组的 concat 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>(P.S.call 和 apply 是 JavaScript 中函数对象的两个方法，它们的主要功能非常相似，都是用于调用函数并显式指定函数内部的 this 值。然而，它们在传递参数的方式上有所不同:call 接受参数列表，apply 接受参数数组。)</p>\n<p>（4）通过 Array.from 方法来实现转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"9\">\n<li>数组有哪些原生方法？</li>\n</ol>\n<ul>\n<li>数组和字符串的转换方法：toString ()、toLocalString ()、join () 其中 join () 方法可以指定转换为字符串时的分隔符。</li>\n<li>数组尾部操作的方法 pop () 和 push ()，push 方法可以传入多个参数。</li>\n<li>数组首部操作的方法 shift () 和 unshift () 重排序的方法 reverse () 和 sort ()，sort () 方法可以传入一个函数来进行比较，传入前后两个值，如果返回值为正数，则交换两个参数的位置。</li>\n<li>数组连接的方法 concat () ，返回的是拼接好的数组，不影响原数组。</li>\n<li>数组截取办法 slice ()，用于截取数组中的一部分返回，不影响原数组。</li>\n<li>数组插入方法 splice ()，影响原数组查找特定项的索引的方法，indexOf () 和 lastIndexOf () 迭代方法 every ()、some ()、filter ()、map () 和 forEach () 方法</li>\n<li>数组归并方法 reduce () 和 reduceRight ()</li>\n</ul>\n<ol start=\"10\">\n<li>Unicode、UTF-8、UTF-16、UTF-32 的区别？</li>\n</ol>\n<p>（1）Unicode</p>\n<p>在说 Unicode 之前需要先了解一下 ASCII 码：ASCII 码（American Standard Code for Information Interchange）称为美国标准信息交换码。</p>\n<ul>\n<li>它是基于拉丁字母的一套电脑编码系统。</li>\n<li>它定义了一个用于代表常见字符的字典。</li>\n<li>它包含了 &quot;A-Z&quot;(包含大小写)，数据 &quot;0-9&quot; 以及一些常见的符号。</li>\n<li>它是专门为英语而设计的，有 128 个编码，对其他语言无能为力</li>\n</ul>\n<p>ASCII 码可以表示的编码有限，要想表示其他语言的编码，还是要使用 Unicode 来表示，可以说 Unicode 是 ASCII 的超集。</p>\n<p>Unicode 全称 Unicode Translation Format，又叫做统一码、万国码、单一码。<br />\nUnicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p>\n<p>Unicode 的实现方式（也就是编码方式）有很多种，常见的是 UTF-8、UTF-16、UTF-32 和 USC-2。</p>\n<p>（2）UTF-8</p>\n<p>UTF-8 是使用最广泛的 Unicode 编码方式，它是一种可变长的编码方式，可以是 1—4 个字节不等，它可以完全兼容 ASCII 码的 128 个字符。</p>\n<p>注意： UTF-8 是一种编码方式，Unicode 是一个字符集合。</p>\n<p>UTF-8 的编码规则：</p>\n<ul>\n<li>对于单字节的符号，字节的第一位为 0，后面的 7 位为这个字符的 Unicode 编码，因此对于英文字母，它的 Unicode 编码和 ACSII 编码一样。</li>\n<li>对于 n 字节的符号，第一个字节的前 n 位都是 1，第 n+1 位设为 0，后面字节的前两位一律设为 10，剩下的没有提及的二进制位，全部为这个符号的 Unicode 码 。</li>\n</ul>\n<p>来看一下具体的 Unicode 编号范围与对应的 UTF-8 二进制格式 ：</p>\n<table>\n<thead>\n<tr>\n<th>编码范围（编号对应的十进制数）</th>\n<th>二进制格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0x00—0x7F （0-127）</td>\n<td>0xxxxxxx</td>\n</tr>\n<tr>\n<td>0x80—0x7FF （128-2047）</td>\n<td>110xxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x800—0xFFFF  （2048-65535）</td>\n<td>1110xxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n<tr>\n<td>0x10000—0x10FFFF  （65536 以上）</td>\n<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>\n</tr>\n</tbody>\n</table>\n<p>那该如何通过具体的 Unicode 编码，进行具体的 UTF-8 编码呢？步骤如下：</p>\n<ul>\n<li>找到该 Unicode 编码的所在的编号范围，进而找到与之对应的二进制格式</li>\n<li>将 Unicode 编码转换为二进制数（去掉最高位的 0）</li>\n<li>将二进制数从右往左一次填入二进制格式的 X 中，如果有 X 未填，就设为 0</li>\n</ul>\n<p>来看一个实际的例子：<br />\n“马” 字的 Unicode 编码是：0x9A6C，整数编号是 39532<br />\n（1）首选确定了该字符在第三个范围内，它的格式是 1110xxxx 10xxxxxx 10xxxxxx<br />\n（2）39532 对应的二进制数为 1001 1010 0110 1100<br />\n（3）将二进制数填入 X 中，结果是：11101001 10101001 10101100</p>\n<p>（3）UTF-16</p>\n<p>平面的概念<br />\n在了解 UTF-16 之前，先看一下平面的概念：<br />\nUnicode 编码中有很多很多的字符，它并不是一次性定义的，而是分区进行定义的，每个区存放 65536（216）个字符，这称为一个平面，目前总共有 17 个平面。<br />\n最前面的一个平面称为基本平面，它的码点从 0 — 216-1，写成 16 进制就是 U+0000 — U+FFFF，那剩下的 16 个平面就是辅助平面，码点范围是 U+10000—U+10FFFF。</p>\n<p>UTF-16 概念：<br />\nUTF-16 也是 Unicode 编码集的一种编码形式，把 Unicode 字符集的抽象码位映射为 16 位长的整数（即码元）的序列，用于数据存储或传递。Unicode 字符的码位需要 1 个或者 2 个 16 位长的码元来表示，因此 UTF-16 也是用变长字节表示的。</p>\n<p>UTF-16 编码规则：<br />\n编号在 U+0000—U+FFFF 的字符（常用字符集），直接用两个字节表示。<br />\n编号在 U+10000—U+10FFFF 之间的字符，需要用四个字节表示。</p>\n<p>编码识别</p>\n<p>那么问题来了，当遇到两个字节时，怎么知道是把它当做一个字符还是和后面的两个字节一起当做一个字符呢？</p>\n<p>UTF-16 编码肯定也考虑到了这个问题，在基本平面内，从 U+D800 — U+DFFF 是一个空段，也就是说这个区间的码点不对应任何的字符，因此这些空段就可以用来映射辅助平面的字符。</p>\n<p>辅助平面共有 220 个字符位，因此表示这些字符至少需要 20 个二进制位。UTF-16 将这 20 个二进制位分成两半，前 10 位映射在 U+D800 — U+DBFF，称为高位（H），后 10 位映射在 U+DC00 — U+DFFF，称为低位（L）。这就相当于，将一个辅助平面的字符拆成了两个基本平面的字符来表示。</p>\n<p>因此，当遇到两个字节时，发现它的码点在 U+D800 —U+DBFF 之间，就可以知道，它后面的两个字节的码点应该在 U+DC00 — U+DFFF 之间，这四个字节必须放在一起进行解读。</p>\n<p>举例说明<br />\n以 &quot;𡠀&quot; 字为例，它的 Unicode 码点为 0x21800，该码点超出了基本平面的范围，因此需要用四个字节来表示，步骤如下：</p>\n<p>首先计算超出部分的结果：0x21800 - 0x10000<br />\n 将上面的计算结果转为 20 位的二进制数，不足 20 位就在前面补 0，结果为：0001000110 0000000000<br />\n 将得到的两个 10 位二进制数分别对应到两个区间中<br />\n U+D800 对应的二进制数为 1101100000000000， 将 0001000110 填充在它的后 10 个二进制位，得到 1101100001000110，转成 16 进制数为 0xD846。同理，低位为 0xDC00，所以这个字的 UTF-16 编码为 0xD846 0xDC00</p>\n<p>（4） UTF-32<br />\nUTF-32 就是字符所对应编号的整数二进制形式，每个字符占四个字节，这个是直接进行转换的。该编码方式占用的储存空间较多，所以使用较少。<br />\n比如 “马” 字的 Unicode 编号是：U+9A6C，整数编号是 39532，直接转化为二进制：1001 1010 0110 1100，这就是它的 UTF-32 编码。</p>\n<p>（5）总结<br />\n Unicode、UTF-8、UTF-16、UTF-32 有什么区别？</p>\n<ul>\n<li>Unicode 是编码字符集（字符集），而 UTF-8、UTF-16、UTF-32 是字符集编码（编码规则）；</li>\n<li>UTF-16 使用变长码元序列的编码方式，相较于定长码元序列的 UTF-32 算法更复杂，甚至比同样是变长码元序列的 UTF-8 也更为复杂，因为其引入了独特的代理对这样的代理机制；</li>\n<li>UTF-8 需要判断每个字节中的开头标志信息，所以如果某个字节在传送过程中出错了，就会导致后面的字节也会解析出错；而 UTF-16 不会判断开头标志，即使错也只会错一个字符，所以容错能力教强；</li>\n<li>如果字符内容全部英文或英文与其他文字混合，但英文占绝大部分，那么用 UTF-8 就比 UTF-16 节省了很多空间；而如果字符内容全部是中文这样类似的字符或者混合字符中中文占绝大多数，那么 UTF-16 就占优势了，可以节省很多空间；</li>\n</ul>\n<ol start=\"11\">\n<li>常见的位运算符有哪些？其计算规则是什么？</li>\n</ol>\n<p>现代计算机中数据都是以二进制的形式存储的，即 0、1 两种状态，计算机对二进制数据进行的运算加减乘除等都是叫位运算，即将符号位共同参与运算的运算。</p>\n<p>常见的位运算符有：</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>运算规则</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&amp;</td>\n<td>与</td>\n<td>两个位都为 1 时，结果才为 1</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>或</td>\n<td>两个位都为 0 时，结果才为 0</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>两个位相同为 0，不同为 1</td>\n</tr>\n<tr>\n<td>~</td>\n<td>取反</td>\n<td>0 变 1，1 变 0</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移</td>\n<td>各二进位全部左移若干位，高位丢弃，低位补 0</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移</td>\n<td>各二进制位全部右移若干位，正数左补 0，负数左补 1，右边丢弃</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"7\">\n<li>原码、补码、反码<br />\n上面提到了补码、反码等知识，这里就补充一下。 计算机中的有符号数有三种表示方法，即原码、反码和补码。三种表示方法均有符号位和数值位两部分，符号位都是用 0 表示 “正”，用 1 表示 “负”，而数值位，三种表示方法各不相同。</li>\n</ol>\n<p>（1）原码</p>\n<p>原码就是一个数的二进制数。例如：10 的原码为 0000 1010</p>\n<p>（2）反码</p>\n<ul>\n<li>正数的反码与原码相同，如：10 反码为 0000 1010</li>\n<li>负数的反码为除符号位，按位取反，即 0 变 1，1 变 0。</li>\n</ul>\n<p>（3）补码<br />\n正数的补码与原码相同，如：10 补码为 0000 1010<br />\n 负数的补码是原码除符号位外的所有位取反即 0 变 1，1 变 0，然后加 1，也就是反码加 1。</p>\n<ol start=\"12\">\n<li>为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组？</li>\n</ol>\n<p>arguments 是一个对象，它的属性是从 0 开始依次递增的数字，还有 callee 和 length 等属性，与数组相似；但是它却没有数组常见的方法属性，如 forEach, reduce 等，所以叫它们类数组。</p>\n<p>要遍历类数组，有三个方法：</p>\n<p>（1）将数组的方法应用到类数组上，这时候就可以使用 call 和 apply 方法，如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">,</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（2）使用 Array.from 方法将类数组转化成数组：‌</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> arrArgs <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  arrArgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（3）使用展开运算符将类数组转化成数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> arrArgs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    arrArgs<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"13\">\n<li>什么是 DOM 和 BOM？</li>\n</ol>\n<ul>\n<li>DOM 指的是文档对象原型，它指的是把文档当作一个对象，这个对象主要定义了处理网页内容的方法和接口。</li>\n<li>BOM 指的是浏览器对象模型，它指的是把浏览器当做一个对象来对待，这个对象主要定义了与浏览器进行交互的方法和接口。BOM 的核心是 window，而 window 对象具有双重角色，它既是通过 js 访问浏览器窗口的一个接口，又是一个 Global（全局）对象。这意味着在网页中定义的任何对象，变量和函数，都作为全局对象的一个属性或者方法存在。window 对象含有 location 对象、navigator 对象、screen 对象等子对象，并且 DOM 的最根本的对象 document 对象也是 BOM 的 window 对象的子对象。</li>\n</ul>\n<ol start=\"14\">\n<li>对类数组对象的理解，如何转化为数组</li>\n</ol>\n<p>一个拥有 length 属性和若干索引属性的对象就可以被称为类数组对象，<br />\n类数组对象和数组类似，但是不能调用数组的方法。<br />\n见的类数组对象有 arguments 和 DOM 方法的返回结果，函数参数也可以被看作是类数组对象，因为它含有 length 属性值，代表可接收的参数个数。</p>\n<p>常见的类数组转换为数组的方法有这样几种：</p>\n<ul>\n<li>通过 call 调用数组的 slice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>通过 call 调用数组的 splice 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 apply 调用数组的 concat 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 Array.from 方法来实现转换</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arrayLike<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"15\">\n<li>escape、encodeURI、encodeURIComponent 的区别</li>\n</ol>\n<ul>\n<li>encodeURI 是对整个 URI 进行转义，将 URI 中的非法字符转换为合法字符，所以对于一些在 URI 中有特殊意义的字符不会进行转义。</li>\n<li>encodeURIComponent 是对 URI 的组成部分进行转义，所以一些特殊字符也会得到转义。</li>\n<li>escape 和 encodeURI 的作用相同，不过它们对于 unicode 编码为 0xff 之外字符的时候会有区别，escape 是直接在字符的 unicode 编码前加上 % u，而 encodeURI 首先会将字符转换为 UTF-8 的格式，再在每个字节前加上 %。</li>\n</ul>\n<ol start=\"16\">\n<li>对 AJAX 的理解，实现一个 AJAX 请求</li>\n</ol>\n<p>AJAX 是 Asynchronous JavaScript and XML 的缩写，指的是通过 JavaScript 的 异步通信，从服务器获取 XML 文档从中提取数据，再更新当前网页的对应部分，而不用刷新整个网页。</p>\n<p>创建 AJAX 请求的步骤：</p>\n<ul>\n<li>创建一个 XMLHttpRequest 对象。</li>\n<li>在这个对象上使用 open 方法创建一个 HTTP 请求，open 方法所需要的参数是请求的方法、请求的地址、是否异步和用户的认证信息。</li>\n<li>在发起请求前，可以为这个对象添加一些信息和监听函数。比如说可以通过 setRequestHeader 方法来为请求添加头信息。还可以为这个对象添加一个状态监听函数。一个 XMLHttpRequest 对象一共有 5 个状态，当它的状态变化时会触发 onreadystatechange 事件，可以通过设置监听函数，来处理请求成功后的结果。当对象的 readyState 变为 4 的时候，代表服务器返回的数据接收完成，这个时候可以通过判断请求的状态，如果状态是 2xx 或者 304 的话则代表返回正常。这个时候就可以通过 response 中的数据来对页面进行更新了。</li>\n<li>当对象的属性和监听函数设置完成后，最后调用 sent 方法来向服务器发起请求，可以传入参数作为发送的数据体。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">SERVER_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"/server\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 Http 请求</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">SERVER_URL</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置状态监听函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 当请求成功时</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 设置请求失败时的监听函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">// 设置请求头信息</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>xhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 发送 Http 请求</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 Promise 封装 AJAX：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//promise 封装实现：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 创建一个 promise 对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 新建一个 http 请求</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 设置状态的监听函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// 当请求成功或失败时，改变 promise 的状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 设置错误监听函数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 设置响应的数据类型</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span>responseType <span class=\"token operator\">=</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">// 设置请求头信息</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Accept\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 发送 http 请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">return</span> promise<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>传统的 AJAX 请求通常使用 XMLHttpRequest 对象来实现。这种方式需要手动处理异步操作的回调函数，代码的可读性和维护性相对较低。<br />\n使用 Promise 封装 AJAX 请求可以将异步操作以更简洁和可读的方式表达。Promise 提供了链式调用的能力，使得处理多个异步操作时更加方便。Promise 是 ES6 标准的一部分，提供了统一的异步编程模型，更容易被其他开发者理解和使用。</p>\n<ol start=\"17\">\n<li>JavaScript 为什么要进行变量提升，它导致了什么问题？</li>\n</ol>\n<p>变量提升的表现是，无论在函数中何处位置声明的变量，好像都被提升到了函数的首部，可以在变量声明前访问到而不会报错。</p>\n<p>造成变量声明提升的本质原因是 js 引擎在代码执行前有一个解析的过程，创建了执行上下文，初始化了一些代码执行时需要用到的对象。当访问一个变量时，会到当前执行上下文中的作用域链中去查找，而作用域链的首端指向的是当前执行上下文的变量对象，这个变量对象是执行上下文的一个属性，它包含了函数的形参、所有的函数和变量声明，这个对象的是在代码解析的时候创建的。</p>\n<p>首先要知道，JS 在拿到一个变量或者一个函数的时候，会有两步操作，即解析和执行。</p>\n<ul>\n<li>\n<p>在解析阶段，JS 会检查语法，并对函数进行预编译。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为 undefined，函数先声明好可使用。在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出 this、arguments 和函数的参数。</p>\n</li>\n<li>\n<p>全局上下文：变量定义，函数声明</p>\n</li>\n<li>\n<p>函数上下文：变量定义，函数声明，this，arguments</p>\n</li>\n<li>\n<p>在执行阶段，就是按照代码的顺序依次执行。</p>\n</li>\n</ul>\n<p>那为什么会进行变量提升呢？主要有以下两个原因：</p>\n<ul>\n<li>提高性能</li>\n<li>容错性更好</li>\n</ul>\n<p>（1）提高性能 在 JS 代码执行之前，会进行语法检查和预编译，并且这一操作只进行一次。这么做就是为了提高性能，如果没有这一步，那么每次执行代码前都必须重新解析一遍该变量（函数），而这是没有必要的，因为变量（函数）的代码并不会改变，解析一遍就够了。<br />\n在解析的过程中，还会为函数生成预编译代码。在预编译时，会统计声明了哪些变量、创建了哪些函数，并对函数的代码进行压缩，去除注释、不必要的空白等。这样做的好处就是每次执行函数时都可以直接为该函数分配栈空间（不需要再解析一遍去获取代码中声明了哪些变量，创建了哪些函数），并且因为代码压缩的原因，代码执行也更快了。</p>\n<p>（2）容错性更好<br />\n变量提升可以在一定程度上提高 JS 的容错性，看下面的代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">var</span> a<span class=\"token punctuation\">;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果没有变量提升，这两行代码就会报错，但是因为有了变量提升，这段代码就可以正常执行。</p>\n<p>虽然，在可以开发过程中，可以完全避免这样写，但是有时代码很复杂的时候。可能因为疏忽而先使用后定义了，这样也不会影响正常使用。由于变量提升的存在，而会正常运行。</p>\n<p>总结：</p>\n<ul>\n<li>解析和预编译过程中的声明提升可以提高性能，让函数可以在执行时预先为变量分配栈空间</li>\n<li>声明提升还可以提高 JS 代码的容错性，使一些不规范的代码也可以正常执行</li>\n</ul>\n<p>变量提升虽然有一些优点，但是他也会造成一定的问题，在 ES6 中提出了 let、const 来定义变量，它们就没有变量提升的机制。下面看一下变量提升可能会导致的问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// undefined</span></pre></td></tr></table></figure><p>在这个函数中，原本是要打印出外层的 tmp 变量，但是因为变量提升的问题，内层定义的 tmp 被提到函数内部的最顶部，相当于覆盖了外层的 tmp，所以打印结果为 undefined。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> tmp <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tmp<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11</span></pre></td></tr></table></figure><p>由于遍历时定义的 i 会变量提升成为一个全局变量，在函数结束之后不会被销毁，所以打印出来 11。</p>\n<ol start=\"18\">\n<li>什么是尾调用，使用尾调用有什么好处？</li>\n</ol>\n<p>尾调用指的是函数的最后一步调用另一个函数。<br />\n代码执行是基于执行栈的，所以当在一个函数里调用另一个函数时，会保留当前的执行上下文，然后再新建另外一个执行上下文加入栈中。使用尾调用的话，因为已经是函数的最后一步，所以这时可以不必再保留当前的执行上下文，从而节省了内存，这就是尾调用优化。</p>\n<p>但是 ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。</p>\n<ol start=\"19\">\n<li>ES6 模块与 CommonJS 模块有什么异同？<br />\nES6 Module 和 CommonJS 是两种常见的 JavaScript 模块系统，它们用于在不同的 JavaScript 运行环境中管理代码的组织和复用。</li>\n</ol>\n<p>ES6 Module 和 CommonJS 模块的区别：</p>\n<ul>\n<li>CommonJS 是对模块的浅拷⻉，ES6 Module 是对模块的引⽤，即 ES6 Module 只存只读，不能改变其值，也就是指针指向不能变，类似 const；</li>\n<li>import 的接⼝是 read-only（只读状态），不能修改其变量值。即不能修改其变量的指针指向，但可以改变变量内部指针指向，可以对 commonJS 对重新赋值（改变指针指向），但是对 ES6 Module 赋值会编译报错。</li>\n</ul>\n<p>ES6 Module 和 CommonJS 模块的共同点：</p>\n<ul>\n<li>CommonJS 和 ES6 Module 都可以对引⼊的对象进⾏赋值，即对对象内部属性的值进⾏改变。</li>\n</ul>\n<ol start=\"20\">\n<li>常见的 DOM 操作有哪些</li>\n</ol>\n<p>1）DOM 节点的获取</p>\n<p>DOM 节点的获取的 API 及使用：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>getElementById <span class=\"token comment\">// 按照 id 查询</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>getElementsByTagName <span class=\"token comment\">// 按照标签名查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>getElementsByClassName <span class=\"token comment\">// 按照类名查询</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>querySelectorAll <span class=\"token comment\">// 按照 css 选择器查询</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 按照 id 查询</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> imooc <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'imooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到 id 为 imooc 的元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 按照标签名查询</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> pList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 查询到标签为 p 的集合</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divList<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>divList<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 按照类名查询</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> moocList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到类名为 mooc 的集合</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 按照 css 选择器查询</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">var</span> pList <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mooc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 查询到类名为 mooc 的集合</span></pre></td></tr></table></figure><p>2）DOM 节点的创建</p>\n<p>创建一个新节点，并把它添加到指定节点的后面。 已知的 HTML 结构如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"><span>l</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>DEMO<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>我是标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>要求添加一个有内容的 span 节点到 id 为 title 的节点后面，做法就是：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 首先获取父节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建新节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> targetSpan <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 设置 span 节点的内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>targetSpan<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 把新创建的元素塞进父节点里去</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>targetSpan<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>3）DOM 节点的删除</p>\n<p>删除指定的 DOM 节点， 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token constant\">DEMO</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>我是标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>需要删除 id 为 title 的元素，做法是：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取目标元素的父元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 获取目标元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> targetNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 删除目标元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>targetNode<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>或者通过子节点数组来完成删除：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取目标元素的父元素 var container = document.getElementById ('container')// 获取目标元素 var targetNode = container.childNodes [1]// 删除目标元素 container.removeChild (targetNode)</span></pre></td></tr></table></figure><p>4）修改 DOM 元素</p>\n<p>修改 DOM 元素这个动作可以分很多维度，比如说移动 DOM 元素的位置，修改 DOM 元素的属性等。</p>\n<p>将指定的两个 DOM 元素交换位置， 已知的 HTML 结构如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span><span class=\"token constant\">DEMO</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token operator\">&lt;</span>h1 id<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token operator\">></span>我是标题<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token operator\">&lt;</span>p id<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span>我是内容<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>   </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p>现在需要调换 title 和 content 的位置，可以考虑 insertBefore 或者 appendChild：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取父元素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> container <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'container'</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取两个需要被交换的元素</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> title <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> content <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'content'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 交换两个元素，把 content 置于 title 前面</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>container<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"21\">\n<li>use strict 是什么意思？使用它区别是什么？</li>\n</ol>\n<p>use strict 是一种 ECMAscript5 添加的（严格模式）运行模式，这种模式使得 Javascript 在更严格的条件下运行。设立严格模式的目的如下：</p>\n<ul>\n<li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为；</li>\n<li>消除代码运行的一些不安全之处，保证代码运行的安全；</li>\n<li>提高编译器效率，增加运行速度；</li>\n<li>为未来新版本的 Javascript 做好铺垫。</li>\n</ul>\n<p>区别：</p>\n<ul>\n<li>禁止使用 with 语句。</li>\n<li>禁止 this 关键字指向全局对象。</li>\n<li>对象不能有重名的属性。</li>\n</ul>\n<ol start=\"22\">\n<li>如何判断一个对象是否属于某个类？</li>\n</ol>\n<ul>\n<li>第一种方式，使用 instanceof 运算符来判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</li>\n<li>第二种方式，通过对象的 constructor 属性来判断，对象的 constructor 属性指向该对象的构造函数，但是这种方式不是很安全，因为 constructor 属性可以被改写。</li>\n<li>第三种方式，如果需要判断的是某个内置的引用类型的话，可以使用 Object.prototype.toString () 方法来打印对象的 [[Class]] 属性来进行判断。</li>\n</ul>\n<ol start=\"23\">\n<li>强类型语言和弱类型语言的区别</li>\n</ol>\n<ul>\n<li>强类型语言：强类型语言也称为强类型定义语言，是一种总是强制类型定义的语言，要求变量的使用要严格符合定义，所有变量都必须先定义后使用。</li>\n<li>Java 和 C++ 等语言都是强制类型定义的，也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。例如你有一个整数，如果不显式地进行转换，你不能将其视为一个字符串。</li>\n<li>弱类型语言：弱类型语言也称为弱类型定义语言，与强类型定义相反。</li>\n<li>JavaScript 语言就属于弱类型语言。简单理解就是一种变量类型可以被忽略的语言。比如 JavaScript 是弱类型定义的，在 JavaScript 中就可以将字符串 '12' 和整数 3 进行连接得到字符串 '123'，在相加的时候会进行强制类型转换。</li>\n</ul>\n<p>两者对比：强类型语言在速度上可能略逊色于弱类型语言，但是强类型语言带来的严谨性可以有效地帮助避免许多错误。</p>\n<ol start=\"24\">\n<li>解释性语言和编译型语言的区别</li>\n</ol>\n<p>（1）解释型语言 使用专门的解释器对源程序逐行解释成特定平台的机器码并立即执行。是代码在执行时才被解释器一行行动态翻译和执行，而不是在执行之前就完成翻译。解释型语言不需要事先编译，其直接将源代码解释成机器码并立即执行，所以只要某一平台提供了相应的解释器即可运行该程序。其特点总结如下</p>\n<ul>\n<li>解释型语言每次运行都需要将源代码解释成机器码并执行，效率较低；</li>\n<li>只要平台提供相应的解释器，就可以运行源代码，所以可以方便源程序移植；</li>\n<li>JavaScript、Python 等属于解释型语言。</li>\n</ul>\n<p>（2）编译型语言 使用专门的编译器，针对特定的平台，将高级语言源代码一次性的编译成可被该平台硬件执行的机器码，并包装成该平台所能识别的可执行性程序的格式。在编译型语言写的程序执行之前，需要一个专门的编译过程，把源代码编译成机器语言的文件，如 exe 格式的文件，以后要再运行时，直接使用编译结果即可，如直接运行 exe 文件。因为只需编译一次，以后运行时不需要编译，所以编译型语言执行效率高。其特点总结如下：</p>\n<ul>\n<li>一次性的编译成平台相关的机器语言文件，运行时脱离开发环境，运行效率高；</li>\n<li>与特定平台相关，一般无法移植到其他平台；</li>\n<li>C、C++、Java、Go、Rust 等属于编译型语言。</li>\n</ul>\n<p>两者主要区别在于： 前者（编译型）源程序编译后即可在该平台运行，（解释型）后者是在运行期间才编译。所以前者运行速度快，后者跨平台性好。</p>\n<ol start=\"25\">\n<li>for...in 和 for...of 的区别</li>\n</ol>\n<p>for…of 是 ES6 新增的遍历方式，允许遍历一个含有 iterator 接口的数据结构（数组、对象等）并且返回各项的值，和 ES3 中的 for…in 的区别如下:</p>\n<ul>\n<li>for…of 遍历获取的是对象的键值，for…in 获取的是对象的键名；</li>\n<li>for… in 会遍历对象的整个原型链，性能非常差不推荐使用，而 for … of 只遍历当前对象不会遍历原型链；</li>\n<li>对于数组的遍历，for…in 会返回数组中所有可枚举的属性 (包括原型链上可枚举的属性)，for…of 只返回数组的下标对应的属性值；</li>\n</ul>\n<p>总结： for...in 循环主要是为了遍历对象而生，不适用于遍历数组；for...of 循环可以用来遍历数组、类数组对象，字符串、Set、Map 以及 Generator 对象。</p>\n<ol start=\"26\">\n<li>如何使用 for...of 遍历对象</li>\n</ol>\n<p>for…of 是作为 ES6 新增的遍历方式，允许遍历一个含有 iterator 接口的数据结构（数组、对象等）并且返回各项的值，普通的对象用 for..of 遍历是会报错的。</p>\n<p>p.s. 含有迭代器接口（Iterator Interface）的数据结构是一种可以被遍历的数据结构，它提供了一种标准的方法来访问集合中的元素，而无需暴露集合的内部结构。在 JavaScript 中，迭代器接口通过 Symbol.iterator 方法实现。许多内置的数据结构（如数组、Set、Map）都实现了这一接口。</p>\n<p>如果需要遍历的对象是类数组对象，用 Array.from 转成数组即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">length</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>obj <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果不是类数组对象，就给对象添加一个 [Symbol.iterator] 属性，并指向一个迭代器即可。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法一：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">var</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">&lt;</span>keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span>count<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">// 方法二</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token literal-property property\">c</span><span class=\"token operator\">:</span><span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>obj<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">var</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">of</span> keys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>obj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> <span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"27\">\n<li>ajax、axios、fetch 的区别</li>\n</ol>\n<p>（1）AJAX Ajax 即 “AsynchronousJavascriptAndXML”（异步 JavaScript 和 XML），是指一种创建交互式网页应用的网页开发技术。它是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。其缺点如下：</p>\n<ul>\n<li>本身是针对 MVC（Model-View-Controller）编程，不符合前端 MVVM (（Model-View-ViewModel）) 的浪潮</li>\n<li>基于原生 XHR (XMLHttpRequest) 开发，XHR 本身的架构不清晰</li>\n<li>不符合关注分离（Separation of Concerns）的原则</li>\n<li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li>\n</ul>\n<p>（2）Fetch fetch 号称是 AJAX 的替代品，是在 ES6 出现的，使用了 ES6 中的 promise 对象。Fetch 是基于 promise 设计的。Fetch 的代码结构比起 ajax 简单多。fetch 不是 ajax 的进一步封装，而是原生 js，没有使用 XMLHttpRequest 对象。<br />\nfetch 的优点：</p>\n<ul>\n<li>语法简洁，更加语义化</li>\n<li>基于标准 Promise 实现，支持 async/await</li>\n<li>更加底层，提供的 API 丰富（request, response）</li>\n<li>脱离了 XHR，是 ES 规范里新的实现方式</li>\n</ul>\n<p>P.S. async/await 是 JavaScript 中用于简化异步代码的语法糖，基于 Promise 实现。它使得异步代码的书写和阅读更加直观，避免了传统的回调函数嵌套（即 “回调地狱”）和复杂的 Promise 链式调用。</p>\n<p>fetch 的缺点：</p>\n<ul>\n<li>fetch 只对网络请求报错，对 400，500 都当做成功的请求，服务器返回 400，500 错误码时并不会 reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>\n<li>fetch 默认不会带 cookie，需要添加配置项： fetch (url, {credentials: 'include'})</li>\n<li>fetch 不支持 abort，不支持超时控制，使用 setTimeout 及 Promise.reject 的实现的超时控制并不能阻止请求过程继续在后台运行，造成了流量的浪费</li>\n<li>fetch 没有办法原生监测请求的进度，而 XHR 可以</li>\n</ul>\n<p>（3）Axios Axios 是一种基于 Promise 封装的 HTTP 客户端，其特点如下：</p>\n<ul>\n<li>浏览器端发起 XMLHttpRequests 请求</li>\n<li>node 端发起 http 请求</li>\n<li>支持 Promise API</li>\n<li>监听请求和返回</li>\n<li>对请求和返回进行转化</li>\n<li>取消请求</li>\n<li>自动转换 json 数据</li>\n<li>客户端支持抵御 XSRF 攻击</li>\n</ul>\n<ol start=\"28\">\n<li>\n<p>数组的遍历方法有哪些<br />\n | 方法 | 是否改变原数组 | 特点 |<br />\n| forEach ()\t| 否 | 数组方法，不改变原数组，没有返回值 |<br />\n| map () | 否 | 数组方法，不改变原数组，有返回值，可链式调用 |<br />\n| filter () | 否 | 数组方法，过滤数组，返回包含符合条件的元素的数组，可链式调用 |<br />\n| for...of | 否 | for...of 遍历具有 Iterator 迭代器的对象的属性，返回的是数组的元素、对象的属性值，不能遍历普通的 obj 对象，将异步循环变成同步循环 |<br />\n| every () 和 some () | 否 | 数组方法，some () 只要有一个是 true，便返回 true；而 every () 只要有一个是 false，便返回 false. |<br />\n| find () 和 findIndex () | 否 | 数组方法，find () 返回的是第一个符合条件的值；findIndex () 返回的是第一个返回条件的值的索引值 |<br />\n| reduce () 和 reduceRight () | 否 | 数组方法，reduce () 对数组正序操作；reduceRight () 对数组逆序操作 |</p>\n</li>\n<li>\n<p>forEach 和 map 方法有什么区别</p>\n</li>\n</ol>\n<p>这方法都是用来遍历数组的，两者区别如下：</p>\n<ul>\n<li>forEach () 方法会针对每一个元素执行提供的函数，对数据的操作会改变原数组，该方法没有返回值；</li>\n<li>map () 方法不会改变原数组的值，返回一个新数组，新数组中的值为原数组调用函数处理之后的值；</li>\n</ul>\n<h3 id=\"四-原型与原型链\"><a class=\"anchor\" href=\"#四-原型与原型链\">#</a> 四、原型与原型链</h3>\n<ol>\n<li>对原型、原型链的理解</li>\n</ol>\n<p>在 JavaScript 中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。<br />\n当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 proto 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。<br />\nES5 中新增了一个 Object.getPrototypeOf () 方法，可以通过这个方法来获取对象的原型。</p>\n<p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 Object.prototype 所以这就是新建的对象为什么能够使用 toString () 等方法的原因。</p>\n<p>特点： JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p>\n<div align=center>\n    <style>.gncgivbqvcnm{}</style><img data-src=\"/2025/01/09/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/01.jpg\" class=\"gncgivbqvcnm\">\n</div>\n<ol start=\"2\">\n<li>原型修改、重写</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 修改原型</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 重写原型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>可以看到修改原型的时候 p 的构造函数不是指向 Person 了，因为直接给 Person 的原型对象直接用对象赋值时，它的构造函数指向的了根构造函数 Object，所以这时候 p.constructor === Object ，而不是 p.constructor === Person。要想成立，就要用 constructor 指回来：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Person</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span>        <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>原型链指向</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p<span class=\"token punctuation\">.</span>__proto__  <span class=\"token comment\">// Person.prototype</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__  <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>p<span class=\"token punctuation\">.</span>__proto__<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">//Object.prototype</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__ <span class=\"token comment\">// Object.prototype</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span>constructor <span class=\"token comment\">// Person</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor  <span class=\"token comment\">// Person</span></pre></td></tr></table></figure><p>P.S. constructor 是一个特殊的属性，它指向用于创建该对象的函数。<br />\nPerson.prototype.constructor 这是 Person 函数本身。<br />\n假设 p1 是 new Person () 创建的对象，那么 p1.<strong>proto</strong> 是 Person.prototype。</p>\n<ol start=\"4\">\n<li>原型链的终点是什么？如何打印出原型链的终点？</li>\n</ol>\n<p>由于 Object 是构造函数，原型链终点是 Object.prototype.<strong>proto</strong>，而 Object.prototype.<strong>proto</strong>=== null //true，所以，原型链的终点是 null。</p>\n<p>原型链上的所有原型都是对象，所有的对象最终都是由 Object 构造的，而 Object.prototype 的下一级是 Object.prototype.<strong>proto</strong>。（null）</p>\n<ol start=\"5\">\n<li>如何获得对象非原型链上的属性？</li>\n</ol>\n<p>使用后 hasOwnProperty () 方法来判断属性是否属于原型链的属性：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token keyword\">var</span> res<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>           res<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">+</span><span class=\"token string\">': '</span><span class=\"token operator\">+</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"五-执行上下文作用域链闭包\"><a class=\"anchor\" href=\"#五-执行上下文作用域链闭包\">#</a> 五、执行上下文 / 作用域链 / 闭包</h3>\n<ol>\n<li>对闭包的理解</li>\n</ol>\n<p>闭包是指有权访问另一个函数作用域中变量的函数，<br />\n创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p>\n<p>闭包有两个常用的用途；</p>\n<ul>\n<li>\n<p>闭包的第一个用途是使我们在函数外部能够访问到函数内部的变量。通过使用闭包，可以通过在外部调用闭包函数，从而在外部访问到函数内部的变量，可以使用这种方法来创建私有变量。</p>\n</li>\n<li>\n<p>闭包的另一个用途是使已经运行结束的函数上下文中的变量对象继续留在内存中，因为闭包函数保留了这个变量对象的引用，所以这个变量对象不会被回收。</p>\n</li>\n</ul>\n<p>P.S. 引用是一个变量或数据结构，它存储了另一个对象或数据的内存地址，而不是数据本身。通过引用，程序可以直接访问和操作该内存地址中的数据。</p>\n<p>比如，函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">B</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>在 JS 中，闭包存在的意义就是让我们可以间接访问函数内部的变量。经典面试题：循环中使用闭包解决 var 定义函数的问题</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>首先因为 setTimeout 是个异步函数，所以会先把循环全部执行完毕，这时候 i 就是 6 了，所以会输出一堆 6。解决办法有三种：</p>\n<ul>\n<li>第一种是使用闭包的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>P.S. 立即执行函数表达式（IIFE）：</p>\n<p>(function (j) { ... })(i)：这是一个立即执行的函数表达式，它创建了一个新的作用域，并将当前的 i 值传递给参数 j。这样可以确保每个 setTimeout 回调函数中的 j 都是当前循环迭代的值，而不是最终的 i 值。</p>\n<p>在上述代码中，首先使用了立即执行函数将 i 传入函数内部，这个时候值就被固定在了参数 j 上面不会改变，当下次执行 timer 这个闭包的时候，就可以使用外部函数的变量 j，从而达到目的。</p>\n<ul>\n<li>第二种就是使用 setTimeout 的第三个参数，这个参数会被当成 timer 函数的参数传入。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">j</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    i</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>第三种就是使用 let 定义 i 了来解决问题了，这个也是最为推荐的方式</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>P.S.</p>\n<ul>\n<li>var 的问题<br />\n（1）函数作用域：var 声明的变量具有函数作用域，而不是块作用域。这意味着在函数内部定义的 var 变量在整个函数内部都是可见的，而不受块（如 if 语句或 for 循环）的限制。</li>\n</ul>\n<p>（2）变量提升：var 声明的变量会被提升到其作用域的顶部，导致变量在声明之前可以被访问，但其值为 undefined。</p>\n<p>（3）循环中的问题：在 for 循环中使用 var 声明的变量会在每次循环迭代中被重新赋值，但变量本身仍然是函数作用域的。这导致在异步操作（如 setTimeout）中，所有回调函数引用的是同一个变量，而不是各自循环迭代时的值。</p>\n<ul>\n<li>let 的优点<br />\n（1）块作用域：let 声明的变量具有块作用域，这意味着它们只在定义它们的块内可见。</li>\n</ul>\n<p>（2）不提升：let 声明的变量不会被提升到其作用域的顶部，因此在声明之前访问会报错（暂时性死区）。</p>\n<p>（3）循环中的行为：在 for 循环中使用 let 声明的变量，每次循环迭代都会创建一个新的变量绑定，因此在异步操作中，每个回调函数引用的是各自循环迭代时的值。</p>\n<p>var：函数作用域，变量提升，不推荐在现代 JavaScript 中使用，特别是在循环中。<br />\nlet：块作用域，不提升，推荐在需要块作用域变量时使用。<br />\n使用 let 可以避免很多 var 带来的问题，特别是与作用域和变量提升相关的问题。因此，在现代 JavaScript 开发中，推荐使用 let 和 const 来声明变量，而不是 var。</p>\n<ol start=\"2\">\n<li>对作用域、作用域链的理解</li>\n</ol>\n<p>1）全局作用域和函数作用域</p>\n<p>（1）全局作用域</p>\n<ul>\n<li>最外层函数和最外层函数外面定义的变量拥有全局作用域</li>\n<li>所有未定义直接赋值的变量自动声明为全局作用域</li>\n<li>所有 window 对象的属性拥有全局作用域</li>\n<li>全局作用域有很大的弊端，过多的全局作用域变量会污染全局命名空间，容易引起命名冲突。</li>\n</ul>\n<p>（2）函数作用域</p>\n<ul>\n<li>函数作用域声明在函数内部的变量，一般只有固定的代码片段可以访问到</li>\n<li>作用域是分层的，内层作用域可以访问外层作用域，反之不行</li>\n</ul>\n<p>2）块级作用域</p>\n<ul>\n<li>使用 ES6 中新增的 let 和 const 指令可以声明块级作用域，块级作用域可以在函数中创建也可以在一个代码块中的创建（由 { } 包裹的代码片段）</li>\n<li>let 和 const 声明的变量不会有变量提升，也不可以重复声明</li>\n<li>在循环中比较适合绑定块级作用域，这样就可以把声明的计数器变量限制在循环内部。</li>\n</ul>\n<p>作用域链： 在当前作用域中查找所需变量，但是该作用域没有这个变量，那这个变量就是自由变量。如果在自己作用域找不到该变量就去父级作用域查找，依次向上级作用域查找，直到访问到 window 对象就被终止，这一层层的关系就是作用域链。</p>\n<p>作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问，通过作用域链，可以访问到外层环境的变量和函数。</p>\n<p>作用域链的本质上是一个指向变量对象的指针列表。变量对象是一个包含了执行环境中所有变量和函数的对象。作用域链的前端始终都是当前执行上下文的变量对象。全局执行上下文的变量对象（也就是全局对象）始终是作用域链的最后一个对象。</p>\n<p>当查找一个变量时，如果当前执行环境中没有找到，可以沿着作用域链向后查找。</p>\n<ol start=\"3\">\n<li>对执行上下文的理解</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>执行上下文类型</li>\n</ol>\n</li>\n</ul>\n<p>（1）全局执行上下文</p>\n<p>任何不在函数内部的都是全局执行上下文，它首先会创建一个全局的 window 对象，并且设置 this 的值等于这个全局对象，一个程序中只有一个全局执行上下文。</p>\n<p>（2）函数执行上下文</p>\n<p>当一个函数被调用时，就会为该函数创建一个新的执行上下文，函数的上下文可以有任意多个。</p>\n<p>（3）Eval 函数执行上下文</p>\n<p>执行在 eval 函数中的代码会有属于他自己的执行上下文，不过 eval 函数不常使用，不做介绍。</p>\n<ul>\n<li>\n<ol start=\"2\">\n<li>执行上下文栈</li>\n</ol>\n</li>\n<li>\n<p>JavaScript 引擎使用执行上下文栈来管理执行上下文</p>\n</li>\n<li>\n<p>当 JavaScript 执行代码时，首先遇到全局代码，会创建一个全局执行上下文并且压入执行栈中，每当遇到一个函数调用，就会为该函数创建一个新的执行上下文并压入栈顶，引擎会执行位于执行上下文栈顶的函数，当函数执行完成之后，执行上下文从栈中弹出，继续执行下一个上下文。当所有的代码都执行完毕之后，从栈中弹出全局执行上下文。</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside first function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Again inside first function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">second</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Inside second function'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">first</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 执行顺序</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 先执行 second (), 在执行 first ()</span></pre></td></tr></table></figure><ul>\n<li>\n<ol start=\"3\">\n<li>创建执行上下文</li>\n</ol>\n</li>\n</ul>\n<p>创建执行上下文有两个阶段：创建阶段和执行阶段</p>\n<p>1）创建阶段</p>\n<p>（1）this 绑定</p>\n<ul>\n<li>在全局执行上下文中，this 指向全局对象（window 对象）</li>\n<li>在函数执行上下文中，this 指向取决于函数如何调用。如果它被一个引用对象调用，那么 this 会被设置成那个对象，否则 this 的值被设置为全局对象或者 undefined</li>\n</ul>\n<p>（2）创建词法环境组件</p>\n<ul>\n<li>词法环境是一种有标识符 —— 变量映射的数据结构，标识符是指变量 / 函数名，变量是对实际对象或原始数据的引用。</li>\n<li>词法环境的内部有两个组件：加粗样式：环境记录器：用来储存变量个函数声明的实际位置外部环境的引用：可以访问父级作用域</li>\n</ul>\n<p>（3）创建变量环境组件</p>\n<ul>\n<li>变量环境也是一个词法环境，其环境记录器持有变量声明语句在执行上下文中创建的绑定关系。</li>\n</ul>\n<p>2）执行阶段 此阶段会完成对变量的分配，最后执行完代码。</p>\n<p>简单来说执行上下文就是指：</p>\n<p>在执行一点 JS 代码之前，需要先解析代码。解析的时候会先创建一个全局执行上下文环境，先把代码中即将执行的变量、函数声明都拿出来，变量先赋值为 undefined，函数先声明好可使用。这一步执行完了，才开始正式的执行程序。</p>\n<p>在一个函数执行之前，也会创建一个函数执行上下文环境，跟全局执行上下文类似，不过函数执行上下文会多出 this、arguments 和函数的参数。</p>\n<ul>\n<li>全局上下文：变量定义，函数声明</li>\n<li>函数上下文：变量定义，函数声明，this，arguments</li>\n</ul>\n",
            "tags": [
                "前端开发",
                "前端开发"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/09/node%E7%89%88%E6%9C%AC%E5%BC%95%E8%B5%B7%E7%9A%84%E5%8A%A0%E5%AF%86%E5%BA%93OpenSSL%E6%97%A0%E6%B3%95%E6%94%AF%E6%8C%81%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/",
            "url": "https://kiyoumiii.github.io/2025/01/09/node%E7%89%88%E6%9C%AC%E5%BC%95%E8%B5%B7%E7%9A%84%E5%8A%A0%E5%AF%86%E5%BA%93OpenSSL%E6%97%A0%E6%B3%95%E6%94%AF%E6%8C%81%E7%AE%97%E6%B3%95%E9%97%AE%E9%A2%98/",
            "title": "node版本引起的加密库OpenSSL无法支持算法问题",
            "date_published": "2025-01-09T07:50:57.000Z",
            "content_html": "<h4 id=\"问题描述\"><a class=\"anchor\" href=\"#问题描述\">#</a> 问题描述</h4>\n<p>digital envelope routines::unsupported</p>\n<h4 id=\"解决方法\"><a class=\"anchor\" href=\"#解决方法\">#</a> 解决方法</h4>\n<p>在 package.json 文件中，将 serve 和 build 行修改为如下格式：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"><span>n</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service serve\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"SET NODE_OPTIONS=--openssl-legacy-provider &amp;&amp; vue-cli-service build\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"原因\"><a class=\"anchor\" href=\"#原因\">#</a> 原因</h4>\n<p>这个错误是因为 Node.js 中的加密库 OpenSSL 版本过低，无法支持算法。<br />\n因为 node.js V17 版本中最近发布的 OpenSSL3.0, 而 OpenSSL3.0 对允许算法和密钥大小增加了严格的限制，可能会对生态系统造成一些影响。故此以前的项目在升级 nodejs 版本后会报错。</p>\n<p>您可以尝试使用 node@14 版本，或者在安装 Node.js 时选择包含较新的 OpenSSL 版本。如果您确实需要使用 Node.js v18.14.2 版本，可以更新 OpenSSL 版本来解决这个问题。具体的做法可以参考 OpenSSL 官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3BlbnNzbC5vcmcvZG9jcy8lRTMlODAlODI=\">https://www.openssl.org/docs/。</span></p>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/",
            "url": "https://kiyoumiii.github.io/2025/01/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/",
            "title": "前端学习之JS篇（一）",
            "date_published": "2025-01-07T15:06:15.000Z",
            "content_html": "<h2 id=\"javascript学习总结\"><a class=\"anchor\" href=\"#javascript学习总结\">#</a> Javascript 学习总结</h2>\n<h3 id=\"一-数据类型\"><a class=\"anchor\" href=\"#一-数据类型\">#</a> 一、数据类型</h3>\n<ol>\n<li>JavaScript 有哪些数据类型，它们的区别？</li>\n</ol>\n<p>JavaScript 共有八种数据类型，分别是 Undefined、Null、Boolean、Number、String、Object、Symbol、BigInt。</p>\n<p>其中 Symbol 和 BigInt 是 ES6 中新增的数据类型：</p>\n<ul>\n<li>Symbol 代表创建后独一无二且不可变的数据类型，它主要是为了解决可能出现的全局变量冲突的问题。</li>\n<li>BigInt 是一种数字类型的数据，它可以表示任意精度格式的整数，使用 BigInt 可以安全地存储和操作大整数，即使这个数已经超出了 Number 能够表示的安全整数范围。</li>\n</ul>\n<p>这些数据可以分为原始数据类型和引用数据类型：</p>\n<ul>\n<li>栈：原始数据类型（Undefined、Null、Boolean、Number、String）</li>\n<li>堆：引用数据类型（对象、数组和函数）</li>\n</ul>\n<p>两种类型的区别在于存储位置的不同：</p>\n<ul>\n<li>原始数据类型直接存储在栈（stack）中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li>\n<li>引用数据类型存储在堆（heap）中的对象，占据空间大、大小不固定。如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其在栈中的地址，取得地址后从堆中获得实体。</li>\n</ul>\n<p>堆和栈的概念存在于数据结构和操作系统内存中，在数据结构中：</p>\n<ul>\n<li>在数据结构中，栈中数据的存取方式为先进后出。</li>\n<li>堆是一个优先队列，是按优先级来进行排序的，优先级可以按照大小来规定。</li>\n</ul>\n<p>在操作系统中，内存被分为栈区和堆区：</p>\n<ul>\n<li>栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈。</li>\n<li>堆区内存一般由开发着分配释放，若开发者不释放，程序结束时可能由垃圾回收机制回收。</li>\n</ul>\n<ol start=\"2\">\n<li>数据类型检测的方式有哪些</li>\n</ol>\n<p>（1）typeof</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// number</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// boolean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object    </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// function</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// object</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// object</span></pre></td></tr></table></figure><p>其中数组、对象、null 都会被判断为 object，其他判断都正确。</p>\n<p>（2）instanceof</p>\n<p>instanceof 可以正确判断对象的类型，其内部运行机制是判断在其原型链中能否找到该类型的原型。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                    <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                   <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>可以看到，instanceof 只能正确判断引用数据类型，而不能判断基本数据类型。instanceof 运算符可以用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性。</p>\n<p>（3） constructor</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Boolean<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> String<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Function<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>constructor 有两个作用，一是判断数据的类型，二是对象实例通过 constrcutor 对象访问它的构造函数。<br />\n需要注意，如果创建一个对象来改变它的原型，constructor 就不能用来判断数据类型了：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Fn</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> f <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>（4）Object.prototype.toString.call()</p>\n<p>Object.prototype.toString.call () 使用 Object 对象的原型方法 toString 来判断数据类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>toString<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token string\">'str'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">a</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样是检测对象 obj 调用 toString 方法，obj.toString () 的结果和 Object.prototype.toString.call (obj) 的结果不一样，这是为什么？</p>\n<p>这是因为 toString 是 Object 的原型方法，而 Array、function 等类型作为 Object 的实例，都重写了 toString 方法。不同的对象类型调用 toString 方法时，根据原型链的知识，调用的是对应的重写之后的 toString 方法（function 类型返回内容为函数体的字符串，Array 类型返回元素组成的字符串…），而不会去调用 Object 上原型 toString 方法（返回对象的具体类型），所以采用 obj.toString () 不能得到其对象类型，只能将 obj 转换为字符串类型；因此，在想要得到对象的具体类型时，应该调用 Object 原型上的 toString 方法。</p>\n<ol start=\"3\">\n<li>判断数组的方式有哪些</li>\n</ol>\n<ul>\n<li>通过 Object.prototype.toString.call () 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'Array'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过原型链做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 ES6 的 Array.isArray () 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArrray</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>通过 instanceof 做判断</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span></pre></td></tr></table></figure><ul>\n<li>通过 Array.prototype.isPrototypeOf</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>null 和 undefined 区别</li>\n</ol>\n<p>首先 Undefined 和 Null 都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 undefined 和 null。</p>\n<p>undefined 代表的含义是未定义，null 代表的含义是空对象。一般变量声明了但还没有定义的时候会返回 undefined，null 主要用于赋值给一些可能会返回对象的变量，作为初始化。</p>\n<p>undefined 在 JavaScript 中不是一个保留字，这意味着可以使用 undefined 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 undefined 值的判断。我们可以通过一些方法获得安全的 undefined 值，比如说 void 0。</p>\n<p>当对这两种类型使用 typeof 进行判断时，Null 类型化会返回 “object”，这是一个历史遗留的问题。当使用双等号对两种类型的值进行比较时会返回 true，使用三个等号时会返回 false。</p>\n<ol start=\"5\">\n<li>typeof null 的结果是什么，为什么？</li>\n</ol>\n<p>typeof null 的结果是 Object。</p>\n<p>在 JavaScript 第一个版本中，所有值都存储在 32 位的单元中，每个单元包含一个小的 类型标签 (1-3 bits) 以及当前要存储值的真实数据。类型标签存储在每个单元的低位中，共有五种数据类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">000</span><span class=\"token operator\">:</span> object   <span class=\"token operator\">-</span> 当前存储的数据指向一个对象。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token number\">1</span><span class=\"token operator\">:</span> int      <span class=\"token operator\">-</span> 当前存储的数据是一个 <span class=\"token number\">31</span> 位的有符号整数。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">010</span><span class=\"token operator\">:</span> double   <span class=\"token operator\">-</span> 当前存储的数据指向一个双精度的浮点数。</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">100</span><span class=\"token operator\">:</span> string   <span class=\"token operator\">-</span> 当前存储的数据指向一个字符串。</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">110</span><span class=\"token operator\">:</span> boolean  <span class=\"token operator\">-</span> 当前存储的数据是布尔值。</pre></td></tr></table></figure><p>如果最低位是 1，则类型标签标志位的长度只有一位；如果最低位是 0，则类型标签标志位的长度占三位，为存储其他四种数据类型提供了额外两个 bit 的长度。</p>\n<p>有两种特殊数据类型：</p>\n<ul>\n<li>undefined 的值是 (-2) 30 (一个超出整数范围的数字)；</li>\n<li>null 的值是机器码 NULL 指针 (null 指针的值全是 0)</li>\n</ul>\n<p>那也就是说 null 的类型标签也是 000，和 Object 的类型标签一样，所以会被判定为 Object。</p>\n<ol start=\"6\">\n<li>intanceof 操作符的实现原理及实现</li>\n</ol>\n<p>instanceof 运算符用于判断构造函数的 prototype 属性是否出现在对象的原型链中的任何位置。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 获取对象的原型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 获取构造函数的 prototype 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> prototype <span class=\"token operator\">=</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 判断构造函数的 prototype 对象是否在对象的原型链上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>proto<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> prototype<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 如果没有找到，就继续从其原型上找，Object.getPrototypeOf 方法用来获取指定对象的原型</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li>为什么 0.1+0.2 ! == 0.3，如何让其相等</li>\n</ol>\n<p>在开发过程中遇到类似这样的问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> n1 <span class=\"token operator\">=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 0.30000000000000004</span></pre></td></tr></table></figure><p>这里得到的不是想要的结果，要想等于 0.3，就要把它进行转化：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>n1 <span class=\"token operator\">+</span> n2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 注意，toFixed 为四舍五入</span></pre></td></tr></table></figure><p>toFixed (num) 方法可把 Number 四舍五入为指定小数位数的数字。那为什么会出现这样的结果呢？</p>\n<p>计算机是通过二进制的方式存储数据的，所以计算机计算 0.1+0.2 的时候，实际上是计算的两个数的二进制的和。0.1 的二进制是 0.0001100110011001100...（1100 循环），0.2 的二进制是：0.00110011001100...（1100 循环），这两个数的二进制都是无限循环的数。那 JavaScript 是如何处理无限循环的二进制小数呢？</p>\n<p>一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型：Number，它的实现遵循 IEEE 754 标准，使用 64 位固定长度来表示，也就是标准的 double 双精度浮点数。在二进制科学表示法中，双精度浮点数的小数部分最多只能保留 52 位，再加上前面的 1，其实就是保留 53 位有效数字，剩余的需要舍去，遵从 “0 舍 1 入” 的原则。</p>\n<p>根据这个原则，0.1 和 0.2 的二进制数相加，再转化为十进制数就是：0.30000000000000004。</p>\n<p>下面看一下双精度数是如何保存的：</p>\n<div align=center>\n    <style>.avyzjnwejrqs{}</style><img data-src=\"/2025/01/07/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E4%B9%8BJS%E7%AF%87%EF%BC%88%E4%B8%80%EF%BC%89/01.jpg\" class=\"avyzjnwejrqs\">\n</div>\n<ul>\n<li>第一部分（蓝色）：用来存储符号位（sign），用来区分正负数，0 表示正数，占用 1 位</li>\n<li>第二部分（绿色）：用来存储指数（exponent），占用 11 位</li>\n<li>第三部分（红色）：用来存储小数（fraction），占用 52 位</li>\n</ul>\n<p>对于 0.1，它的二进制为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0.00011001100110011001100110011001100110011001100110011001</span> <span class=\"token number\">10011.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>转为科学计数法（科学计数法的结果就是浮点数）：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.1001100110011001100110011001100110011001100110011001</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">^</span><span class=\"token operator\">-</span><span class=\"token number\">4</span></pre></td></tr></table></figure><p>可以看出 0.1 的符号位为 0，指数位为 - 4，小数位为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1001100110011001100110011001100110011001100110011001</span></pre></td></tr></table></figure><p>那么问题又来了，指数位是负数，该如何保存呢？</p>\n<p>IEEE 标准规定了一个偏移量，对于指数部分，每次都加这个偏移量进行保存，这样即使指数是负数，那么加上这个偏移量也就是正数了。由于 JavaScript 的数字是双精度数，这里就以双精度数为例，它的指数部分为 11 位，能表示的范围就是 0~2047，IEEE 固定双精度数的偏移量为 1023。</p>\n<ul>\n<li>当指数位不全是 0 也不全是 1 时 (规格化的数值)，IEEE 规定，阶码计算公式为 e-Bias。 此时 e 最小值是 1，则 1-1023= -1022，e 最大值是 2046，则 2046-1023=1023，可以看到，这种情况下取值范围是 - 1022~1013。</li>\n<li>当指数位全部是 0 的时候 (非规格化的数值)，IEEE 规定，阶码的计算公式为 1-Bias，即 1-1023= -1022。</li>\n<li>当指数位全部是 1 的时候 (特殊值)，IEEE 规定这个浮点数可用来表示 3 个特殊值，分别是正无穷，负无穷，NaN。 具体的，小数位不为 0 的时候表示 NaN；小数位为 0 时，当符号位 s=0 时表示正无穷，s=1 时候表示负无穷。</li>\n</ul>\n<p>对于上面的 0.1 的指数位为 - 4，-4+1023 = 1019 转化为二进制就是：1111111011.</p>\n<p>所以，0.1 表示为：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token number\">1111111011</span> <span class=\"token number\">1001100110011001100110011001100110011001100110011001</span></pre></td></tr></table></figure><p>说了这么多，是时候该最开始的问题了，如何实现 0.1+0.2=0.3 呢？</p>\n<p>对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为 “机器精度”。对 JavaScript 来说，这个值通常为 2-52，在 ES6 中，提供了 Number.EPSILON 属性，而它的值就是 2-52，只要判断 0.1+0.2-0.3 是否小于 Number.EPSILON，如果小于，就可以判断为 0.1+0.2 ===0.3</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">numberepsilon</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span>arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>                   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>arg1 <span class=\"token operator\">-</span> arg2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> Number<span class=\"token punctuation\">.</span><span class=\"token constant\">EPSILON</span><span class=\"token punctuation\">;</span>        </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">numberepsilon</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>如何获取安全的 undefined 值？</li>\n</ol>\n<p>因为 undefined 是一个标识符，所以可以被当作变量来使用和赋值，但是这样会影响 undefined 的正常判断。<br />\n表达式 void ___ 没有返回值，因此返回结果是 undefined。<br />\nvoid 并不改变表达式的结果，只是让表达式不返回值。因此可以用 void 0 来获得 undefined。</p>\n<ol start=\"9\">\n<li>typeof NaN 的结果是什么？</li>\n</ol>\n<p>NaN 指 “不是一个数字”（not a number），NaN 是一个 “警戒值”（sentinel value，有特殊用途的常规值），用于指出数字类型中的错误情况，即 “执行数学运算没有成功，这是失败后返回的结果”。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"number\"</span></pre></td></tr></table></figure><p>NaN 是一个特殊值，它和自身不相等，是唯一一个非自反（自反，reflexive，即 x === x 不成立）的值。而 NaN !== NaN 为 true。</p>\n<ol start=\"10\">\n<li>isNaN 和 Number.isNaN 函数的区别？</li>\n</ol>\n<ul>\n<li>函数 isNaN 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 true，因此非数字值传入也会返回 true ，会影响 NaN 的判断。</li>\n<li>函数 Number.isNaN 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 NaN ，不会进行数据类型的转换，这种方法对于 NaN 的判断更为准确。</li>\n</ul>\n<ol start=\"12\">\n<li>其他值到字符串的转换规则？</li>\n</ol>\n<ul>\n<li>Null 和 Undefined 类型 ，null 转换为 &quot;null&quot;，undefined 转换为 &quot;undefined&quot;，</li>\n<li>Boolean 类型，true 转换为 &quot;true&quot;，false 转换为 &quot;false&quot;。</li>\n<li>Number 类型的值直接转换，不过那些极小和极大的数字会使用指数形式。</li>\n<li>Symbol 类型的值直接转换，但是只允许显式强制类型转换，使用隐式强制类型转换会产生错误。</li>\n<li>对普通对象来说，除非自行定义 toString () 方法，否则会调用 toString ()（Object.prototype.toString ()）来返回内部属性 [[Class]] 的值，如 &quot;[object Object]&quot;。如果对象有自己的 toString () 方法，字符串化时就会调用该方法并使用其返回值。</li>\n</ul>\n<ol start=\"13\">\n<li>其他值到数字值的转换规则？</li>\n</ol>\n<ul>\n<li>Undefined 类型的值转换为 NaN。</li>\n<li>Null 类型的值转换为 0。</li>\n<li>Boolean 类型的值，true 转换为 1，false 转换为 0。</li>\n<li>String 类型的值转换如同使用 Number () 函数进行转换，如果包含非数字值则转换为 NaN，空字符串为 0。</li>\n<li>Symbol 类型的值不能转换为数字，会报错。</li>\n<li>对象（包括数组）会首先被转换为相应的基本类型值，如果返回的是非数字的基本类型值，则再遵循以上规则将其强制转换为数字。</li>\n</ul>\n<p>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有 valueOf () 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString () 的返回值（如果存在）来进行强制类型转换。</p>\n<p>如果 valueOf () 和 toString () 均不返回基本类型值，会产生 TypeError 错误。</p>\n<ol start=\"14\">\n<li>其他值到布尔类型的值的转换规则？</li>\n</ol>\n<p>以下这些是假值：  <code>• undefined • null • false • +0、-0 和 NaN •</code></p>\n<p>假值的布尔强制类型转换结果为 false。从逻辑上说，假值列表以外的都应该是真值。</p>\n<ol start=\"15\">\n<li>|| 和 &amp;&amp; 操作符的返回值？</li>\n</ol>\n<p>|| 和 &amp;&amp; 首先会对第一个操作数执行条件判断，如果其不是布尔值就先强制转换为布尔类型，然后再执行条件判断。</p>\n<ul>\n<li>对于 || 来说，如果条件判断结果为 true 就返回第一个操作数的值，如果为 false 就返回第二个操作数的值。</li>\n<li>&amp;&amp; 则相反，如果条件判断结果为 true 就返回第二个操作数的值，如果为 false 就返回第一个操作数的值。</li>\n</ul>\n<p>|| 和 &amp;&amp; 返回它们其中一个操作数的值，而非条件判断的结果</p>\n<ol start=\"16\">\n<li><span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> () 与比较操作符  <code>“===”、“==” </code> 的区别？</li>\n</ol>\n<ul>\n<li>使用双等号（==）进行相等判断时，如果两边的类型不一致，则会进行强制类型转化后再进行比较。</li>\n<li>使用三等号（===）进行相等判断时，如果两边的类型不一致时，不会做强制类型准换，直接返回 false。</li>\n<li>使用 <span class=\"exturl\" data-url=\"aHR0cDovL09iamVjdC5pcw==\">Object.is</span> 来进行相等判断时，一般情况下和三等号的判断相同，它处理了一些特殊的情况，比如 -0 和 +0 不再相等，两个 NaN 是相等的。</li>\n</ul>\n<ol start=\"17\">\n<li>什么是 JavaScript 中的包装类型？</li>\n</ol>\n<p>在 JavaScript 中，基本类型是没有属性和方法的，但是为了便于操作基本类型的值，在调用基本类型的属性或方法时 JavaScript 会在后台隐式地将基本类型的值转换为对象，如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"ABC\"</span></pre></td></tr></table></figure><p>在访问 'abc'.length 时，JavaScript 将 'abc' 在后台转换成 String ('abc')，然后再访问其 length 属性。</p>\n<p>JavaScript 也可以使用 Object 函数显式地将基本类型转换为包装类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// String &#123;\"abc\"&#125;</span></pre></td></tr></table></figure><p>也可以使用 valueOf 方法将包装类型倒转成基本类型：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">Object</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'abc'</span></pre></td></tr></table></figure><p>看看如下代码会打印出什么：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Oops\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// never runs</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>答案是<strong>什么都不会打印</strong>，因为虽然包裹的基本类型是 false，但是 false 被包裹成包装类型后就成了对象，所以其非值为 false，所以循环体中的内容不会运行。</p>\n<ol start=\"18\">\n<li>JavaScript 中如何进行隐式类型转换？</li>\n</ol>\n<p>首先要介绍 ToPrimitive 方法，这是 JavaScript 中每个值隐含的自带的方法，用来将值 （无论是基本类型值还是对象）转换为基本类型值。如果值为基本类型，则直接返回值本身；如果值为对象，其看起来大概是这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* @obj 需要转换的对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @type 期望的结果类型</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">ToPrimitive</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>type 的值为 number 或者 string。</p>\n<p>（1）当 type 为 number 时规则如下：</p>\n<ul>\n<li>调用 obj 的 valueOf 方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用 obj 的 toString 方法，后续同上；</li>\n<li>抛出 TypeError 异常。</li>\n</ul>\n<p>（2）当 type 为 string 时规则如下：</p>\n<ul>\n<li>调用 obj 的 toString 方法，如果为原始值，则返回，否则下一步；</li>\n<li>调用 obj 的 valueOf 方法，后续同上；</li>\n<li>抛出 TypeError 异常。</li>\n</ul>\n<p>p.s.</p>\n<ul>\n<li>toString 方法用于将对象转换为字符串。</li>\n<li>valueOf 方法用于返回对象的原始值。</li>\n</ul>\n<p>可以看出两者的主要区别在于调用 toString 和 valueOf 的先后顺序。默认情况下：</p>\n<ul>\n<li>如果对象为 Date 对象，则 type 默认为 string；</li>\n<li>其他情况下，type 默认为 number。</li>\n</ul>\n<p>总结上面的规则，对于 Date 以外的对象，转换为基本类型的大概规则可以概括为一个函数：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">objToNumber</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">objToNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">objToNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span></pre></td></tr></table></figure><p>而 JavaScript 中的隐式类型转换主要发生在 +、-、*、/ 以及 ==、&gt;、&lt; 这些运算符之间。而这些运算符只能操作基本类型值，所以在进行这些运算前的第一步就是将两边的值用 ToPrimitive 转换成基本类型，再进行操作。</p>\n<p>以下是基本类型的值在不同操作符的情况下隐式转换的规则 （对于对象，其会被 ToPrimitive 转换成基本类型，所以最终还是要应用基本类型转换规则）：</p>\n<p>(1) + 操作符 + 操作符的两边有至少一个 string 类型变量时，两边的变量都会被隐式转换为字符串；其他情况下两边的变量都会被转换为数字。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'23'</span> <span class=\"token comment\">// '123'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 1 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught TypeError: Cannot convert a Symbol value to a number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token string\">'1'</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// '1false'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token boolean\">false</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><p>(2) -、*、\\ 操作符</p>\n<p>NaN 也是一个数字</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token string\">'23'</span> <span class=\"token comment\">// 23</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token string\">'aa'</span> <span class=\"token comment\">// NaN</span></pre></td></tr></table></figure><p>(3) 对于 == 操作符</p>\n<p>操作符两边的值都尽量转成 number：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">//false, 3 转为 number 为 3，true 转为 number 为 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">//true, '0' 转为 number 为 0，false 转为 number 为 0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// '0' 转为 number 为 0</span></pre></td></tr></table></figure><p>(4) 对于 &lt; 和 &gt; 比较符</p>\n<p>如果两边都是字符串，则比较字母表顺序：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'ca'</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'bd'</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">'a'</span> <span class=\"token operator\">&lt;</span> <span class=\"token string\">'b'</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>其他情况下，转换为数字再比较：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'12'</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">13</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>以上说的是基本类型的隐式转换，而对象会被 ToPrimitive 转换为基本类型再进行转换：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>其对比过程如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;, 上面提到过，ToPrimitive 默认 type 为 number，所以先 valueOf，结果还是个对象，下一步</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"，现在是一个字符串了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN，根据上面 &lt; 和 > 操作符的规则，要转换成数字</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span> <span class=\"token comment\">//false，得出比较结果</span></pre></td></tr></table></figure><p>又比如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span><span class=\"token string\">'Jack'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">+</span> b <span class=\"token comment\">// \"[object Object][object Object]\"</span></pre></td></tr></table></figure><p>运算过程如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;&#125;，上面提到过，ToPrimitive 默认 type 为 number，所以先 valueOf，结果还是个对象，下一步</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同理</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>a <span class=\"token operator\">+</span> b <span class=\"token comment\">// \"[object Object][object Object]\"</span></pre></td></tr></table></figure><ol start=\"19\">\n<li><code>+</code>  操作符什么时候用于字符串的拼接？</li>\n</ol>\n<p>根据 ES5 规范，如果某个操作数是字符串或者能够通过以下步骤转换为字符串的话，+ 将进行拼接操作。如果其中一个操作数是对象（包括数组），则首先对其调用 ToPrimitive 抽象操作，该抽象操作再调用 [[DefaultValue]]，以数字作为上下文。如果不能转换为字符串，则会将其转换为数字类型来进行计算。</p>\n<p>简单来说就是，如果 + 的其中一个操作数是字符串（或者通过以上步骤最终得到字符串），则执行字符串拼接，否则执行数字加法。</p>\n<p>那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字。</p>\n<ol start=\"20\">\n<li>为什么会有 BigInt 的提案？</li>\n</ol>\n<p>JavaScript 中 Number.MAX_SAFE_INTEGER 表示最⼤安全数字，计算结果是 9007199254740991，即在这个数范围内不会出现精度丢失（⼩数除外）。但是⼀旦超过这个范围，js 就会出现计算不准确的情况，这在⼤数计算的时候不得不依靠⼀些第三⽅库进⾏解决，因此官⽅提出了 BigInt 来解决此问题。</p>\n<ol start=\"21\">\n<li>object.assign 和扩展运算法是深拷贝还是浅拷贝，两者区别</li>\n</ol>\n<p>扩展运算符：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> outObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">inObj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>outObj<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>newObj<span class=\"token punctuation\">.</span>inObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></pre></td></tr></table></figure><p>Object.assign():</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> outObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">inObj</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> outObj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>newObj<span class=\"token punctuation\">.</span>inObj<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>outObj<span class=\"token punctuation\">)</span> <span class=\"token comment\">// &#123;inObj: &#123;a: 2, b: 2&#125;&#125;</span></pre></td></tr></table></figure><p>可以看到，两者都是浅拷贝。</p>\n<ul>\n<li>Object.assign () 方法接收的第一个参数作为目标对象，后面的所有参数作为源对象。然后把所有的源对象合并到目标对象中。它会修改了一个对象，因此会触发 ES6 setter。</li>\n<li>扩展操作符（…）使用它时，数组或对象中的每一个值都会被拷贝到一个新的数组或对象中。它不复制继承的属性或类的属性，但是它会复制 ES6 的 symbols 属性。</li>\n</ul>\n<h3 id=\"二-es6\"><a class=\"anchor\" href=\"#二-es6\">#</a> 二、ES6</h3>\n<ol>\n<li>let、const、var 的区别</li>\n</ol>\n<p>（1）块级作用域： 块作用域由 { } 包括，let 和 const 具有块级作用域，var 不存在块级作用域。块级作用域解决了 ES5 中的两个问题：</p>\n<ul>\n<li>内层变量可能覆盖外层变量</li>\n<li>用来计数的循环变量泄露为全局变量</li>\n</ul>\n<p>（2）变量提升： var 存在变量提升，let 和 const 不存在变量提升，即在变量只能在声明之后使用，否在会报错。</p>\n<p>（3）给全局添加属性： 浏览器的全局对象是 window，Node 的全局对象是 global。var 声明的变量为全局变量，并且会将该变量添加为全局对象的属性，但是 let 和 const 不会。</p>\n<p>（4）重复声明： var 声明变量时，可以重复声明变量，后声明的同名变量会覆盖之前声明的遍历。const 和 let 不允许重复声明变量。</p>\n<p>（5）暂时性死区： 在使用 let、const 命令声明变量之前，该变量都是不可用的。这在语法上，称为暂时性死区。使用 var 声明的变量不存在暂时性死区。</p>\n<p>（6）初始值设置： 在变量声明时，var 和 let 可以不用设置初始值。而 const 声明变量必须设置初始值。</p>\n<p>（7）指针指向： let 和 const 都是 ES6 新增的用于创建变量的语法。 let 创建的变量是可以更改指针指向（可以重新赋值）。但 const 声明的变量是不允许改变指针的指向。</p>\n<table>\n<thead>\n<tr>\n<th>区别</th>\n<th>var</th>\n<th>let</th>\n<th>const</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>是否有块级作用域</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否有变量提升</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否添加全局属性</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>能否重复声明变量</td>\n<td>✔️</td>\n<td>×</td>\n<td>×</td>\n</tr>\n<tr>\n<td>是否有暂时性死区</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否需要初始化</td>\n<td>×</td>\n<td>✔️</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否必须设置初始值</td>\n<td>×</td>\n<td>×</td>\n<td>✔️</td>\n</tr>\n<tr>\n<td>是否可以改变指针指向</td>\n<td>✔️</td>\n<td>✔️</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>const 对象的属性可以修改吗</li>\n</ol>\n<p>const 保证的并不是变量的值不能改动，而是变量指向的那个内存地址不能改动。对于基本类型的数据（数值、字符串、布尔值），其值就保存在变量指向的那个内存地址，因此等同于常量。</p>\n<p>但对于引用类型的数据（主要是对象和数组）来说，变量指向数据的内存地址，保存的只是一个指针，const 只能保证这个指针是固定不变的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>\n<ol start=\"3\">\n<li>如果 new 一个箭头函数会怎么样</li>\n</ol>\n<p>箭头函数是 ES6 中的提出来的，它没有 prototype，也没有自己的 this 指向，更不可以使用 arguments 参数，所以不能 New 一个箭头函数。</p>\n<p>new 操作符的实现步骤如下：<br />\n（1）创建一个对象<br />\n（2）将构造函数的作用域赋给新对象（也就是将对象的__proto__属性指向构造函数的 prototype 属性）<br />\n（3）执行构造函数中的代码，构造函数中的 this 指向该对象（也就是为这个对象添加属性和方法）<br />\n（4）返回新对象</p>\n<p>所以，上面的第二、三步，箭头函数都是没有办法执行的。</p>\n<ol start=\"4\">\n<li>箭头函数与普通函数的区别</li>\n</ol>\n<p>（1）箭头函数比普通函数更加简洁</p>\n<ul>\n<li>如果没有参数，就直接写一个空括号即可</li>\n<li>如果只有一个参数，可以省去参数的括号</li>\n<li>如果有多个参数，用逗号分割</li>\n<li>如果函数体的返回值只有一句，可以省略大括号</li>\n<li>如果函数体不需要返回值，且只有一句话，可以给这个语句前面加一个 void 关键字。最常见的就是调用一个函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span> <span class=\"token function\">doesNotReturn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>（2）箭头函数没有自己的 this<br />\n 箭头函数不会创建自己的 this， 所以它没有自己的 this，它只会在自己作用域的上一层继承 this。所以箭头函数中 this 的指向在它在定义时已经确定了，之后不会改变。</p>\n<p>（3）箭头函数继承来的 this 指向永远不会改变</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'GLOBAL'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'OBJ'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">a</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">b</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'OBJ'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>obj<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'GLOBAL'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// Uncaught TypeError: obj.b is not a constructor</span></pre></td></tr></table></figure><p>(b 是箭头函数，它的外层作用域是全局作用域，因此它的 this 被绑定到全局对象（（在浏览器中是 window 对象，在 Node.js 中是 global 对象））)</p>\n<p>对象 obj 的方法 b 是使用箭头函数定义的，这个函数中的 this 就永远指向它定义时所处的全局执行环境中的 this，即便这个函数是作为对象 obj 的方法调用，this 依旧指向 Window 对象。需要注意，定义对象的大括号 {} 是无法形成一个单独的执行环境的，它依旧是处于全局执行环境中。</p>\n<p>（对象的大括号 {} 不会创建新的执行环境：它只是在当前的作用域中定义了一个对象字面量，所有的属性和方法都仍然是当前作用域的一部分。<br />\n函数会创建新的执行环境：定义一个函数时，函数内部会形成一个新的作用域，函数内部的变量和操作不会影响外部的作用域。）</p>\n<p>（4）call ()、apply ()、bind () 等方法不能改变箭头函数中 this 的指向</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'Global'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fun1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 'Global'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fun1</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'Obj'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 'Global'</span></pre></td></tr></table></figure><p>（5）箭头函数不能作为构造函数使用</p>\n<p>构造函数在 new 的步骤在上面已经说过了，实际上第二步就是将函数中的 this 指向该对象。 但是由于箭头函数时没有自己的 this 的，且 this 指向外层的执行环境，且不能改变指向，所以不能当做构造函数使用。</p>\n<p>（6）箭头函数没有自己的 arguments</p>\n<p>箭头函数没有自己的 arguments 对象。在箭头函数中访问 arguments 实际上获得的是外层函数的 arguments。</p>\n<p>（7）箭头函数没有 prototype</p>\n<p>（8）箭头函数不能用作 Generator 函数，不能使用 yeild 关键字</p>\n<ol start=\"5\">\n<li>箭头函数的 this 指向哪⾥？</li>\n</ol>\n<p>箭头函数不同于传统 JavaScript 中的函数，箭头函数并没有属于⾃⼰的 this，它所谓的 this 是捕获其所在上下⽂的 this 值，作为⾃⼰的 this 值，并且由于没有属于⾃⼰的 this，所以是不会被 new 调⽤的，这个所谓的 this 也不会被改变。</p>\n<p>可以⽤ Babel 理解⼀下箭头函数:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES6 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">getArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>转化后：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ES5，由 Babel 转译</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token function-variable function\">getArrow</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getArrow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     <span class=\"token keyword\">var</span> _this <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>_this <span class=\"token operator\">===</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li>扩展运算符的作用及使用场景</li>\n</ol>\n<p>（1）对象扩展运算符</p>\n<p>对象的扩展运算符 (...) 用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>bar <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; a: 1, b: 2 &#125;</span></pre></td></tr></table></figure><p>上述方法实际上等价于:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// &#123; a: 1, b: 2 &#125;</span></pre></td></tr></table></figure><p>Object.assign 方法用于对象的合并，将源对象（source）的所有可枚举属性，复制到目标对象（target）。Object.assign 方法的第一个参数是目标对象，后面的参数都是源对象。(如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性)。</p>\n<p>同样，如果用户自定义的属性，放在扩展运算符后面，则扩展运算符内部的同名属性会被覆盖掉。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> baz <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span>bar<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">a</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">b</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &#123;a: 2, b: 4&#125;</span></pre></td></tr></table></figure><p>利用上述特性就可以很方便的修改对象的部分属性。在 redux 中的 reducer 函数规定必须是一个纯函数，reducer 中的 state 对象要求不能直接修改，可以通过扩展运算符把修改路径的对象都复制一遍，然后产生一个新的对象返回。</p>\n<p>需要注意：扩展运算符对对象实例的拷贝属于浅拷贝。</p>\n<p>（2）数组扩展运算符</p>\n<p>数组的扩展运算符可以将一个数组转为用逗号分隔的参数序列，且每次只能展开一层数组。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1 2 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1 [2, 3, 4] 5</span></pre></td></tr></table></figure><p>下面是数组的扩展运算符的应用：</p>\n<ul>\n<li>将数组转换为参数序列</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><ul>\n<li>复制数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>要记住：扩展运算符 (…) 用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中，这里参数对象是个数组，数组里面的所有对象都是基础数据类型，将所有基础数据类型重新拷贝到新的数组中。</p>\n<ul>\n<li>合并数组</li>\n</ul>\n<p>如果想在数组内合并数组，可以这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'two'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr1<span class=\"token punctuation\">,</span> <span class=\"token string\">'four'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'five'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [\"one\", \"two\", \"three\", \"four\", \"five\"]</span></pre></td></tr></table></figure><ul>\n<li>扩展运算符与解构赋值结合起来，用于生成数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>first<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>rest<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>first <span class=\"token comment\">// 1rest  // [2, 3, 4, 5]</span></pre></td></tr></table></figure><p>需要注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>rest<span class=\"token punctuation\">,</span> last<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 报错 const [first, ...rest, last] = [1, 2, 3, 4, 5];  // 报错</span></pre></td></tr></table></figure><ul>\n<li>将字符串转为真正的数组</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span>    <span class=\"token comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></pre></td></tr></table></figure><ul>\n<li>任何 Iterator 接口的对象，都可以用扩展运算符转为真正的数组</li>\n</ul>\n<p>比较常见的应用是可以将某些数据结构转为数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//arguments 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arguments<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>用于替换 es5 中的 Array.prototype.slice.call (arguments) 写法。</p>\n<ul>\n<li>使用 Math 函数获取数组中特定的值</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>numbers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9</span></pre></td></tr></table></figure><ol start=\"8\">\n<li>对对象与数组的解构的理解</li>\n</ol>\n<p>解构是 ES6 提供的一种新的提取数据的模式，这种模式能够从对象或数组里有针对性地拿到想要的数值。 1）数组的解构 在解构数组时，以元素的位置为匹配条件来提取想要的数据的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>最终，a、b、c 分别被赋予了数组第 0、1、2 个索引位的值：</p>\n<p>数组里的 0、1、2 索引位的元素值，精准地被映射到了左侧的第 0、1、2 个变量里去，这就是数组解构的工作模式。还可以通过给左侧变量数组设置空占位的方式，实现对数组中某几个元素的精准提取：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>通过把中间位留空，可以顺利地把数组第一位和最后一位的值赋给 a、c 两个变量</p>\n<p>2）对象的解构 对象解构比数组结构稍微复杂一些，也更显强大。在解构对象时，是以属性的名称为匹配条件，来提取想要的数据的。现在定义一个对象：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> stu <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>假如想要解构它的两个自有属性，可以这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr></table></figure><p>这样就得到了 name 和 age 两个和 stu 平级的变量：</p>\n<p>注意，对象解构严格以属性名作为定位依据，所以就算调换了 name 和 age 的位置，结果也是一样的：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> age<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr></table></figure><ol start=\"9\">\n<li>如何提取高度嵌套的对象里的指定属性？</li>\n</ol>\n<p>有时会遇到一些嵌套程度非常深的对象：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> school <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">classes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token literal-property property\">stu</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>         <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>像此处的 name 这个变量，嵌套了四层，此时如果仍然尝试老方法来提取它：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr></table></figure><p>显然是不奏效的，因为 school 这个对象本身是没有 name 这个属性的，name 位于 school 对象的 “儿子的儿子” 对象里面。要想把 name 提取出来，一种比较笨的方法是逐层解构：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> classes <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> stu <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> classes</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> stu</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>name <span class=\"token comment\">// 'Bob'</span></pre></td></tr></table></figure><p>但是还有一种更标准的做法，可以用一行代码来解决这个问题：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">classes</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">stu</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name <span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> school</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 'Bob'</span></pre></td></tr></table></figure><p>可以在解构出来的变量名右侧，通过冒号 +{目标属性名} 这种形式，进一步解构它，一直解构到拿到目标数据为止。</p>\n<ol start=\"10\">\n<li>对 rest 参数的理解</li>\n</ol>\n<p>扩展运算符被用在函数形参上时，它还可以把一个分离的参数序列整合成一个数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> val <span class=\"token keyword\">of</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result <span class=\"token operator\">*=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 24</span></pre></td></tr></table></figure><p>这里，传入 mutiple 的是四个分离的参数，但是如果在 mutiple 函数里尝试输出 args 的值，会发现它是一个数组：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">mutiple</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1, 2, 3, 4]</span></pre></td></tr></table></figure><p>这就是 … rest 运算符的又一层威力了，它可以把函数的多个入参收敛进一个数组里。这一点经常用于获取函数的多余参数，或者像上面这样处理函数参数个数不确定的情况。</p>\n<ol start=\"11\">\n<li>ES6 中模板语法与字符串处理</li>\n</ol>\n<p>ES6 提出了 “模板语法” 的概念。在 ES6 以前，拼接字符串是很麻烦的事情：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'css'</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> career <span class=\"token operator\">=</span> <span class=\"token string\">'coder'</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'coding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'writing'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> finalString <span class=\"token operator\">=</span> <span class=\"token string\">'my name is '</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">', I work as a '</span> <span class=\"token operator\">+</span> career <span class=\"token operator\">+</span> <span class=\"token string\">', I love '</span> <span class=\"token operator\">+</span> hobby<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">' and '</span> <span class=\"token operator\">+</span> hobby<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p>仅仅几个变量，写了这么多加号，还要时刻小心里面的空格和标点符号有没有跟错地方。但是有了模板字符串，拼接难度直线下降：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'css'</span>   </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> career <span class=\"token operator\">=</span> <span class=\"token string\">'coder'</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> hobby <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'coding'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'writing'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> finalString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">my name is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>name<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">, I work as a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>career<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> I love </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hobby<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> and </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>hobby<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr></table></figure><p>字符串不仅更容易拼了，也更易读了，代码整体的质量都变高了。这就是模板字符串的第一个优势 —— 允许用 ${} 的方式嵌入变量。但这还不是问题的关键，模板字符串的关键优势有两个：</p>\n<ul>\n<li>在模板字符串中，空格、缩进、换行都会被保留</li>\n<li>模板字符串完全支持 “运算” 式的表达式，可以在 ${} 里完成一些计算</li>\n</ul>\n<p>基于第一点，可以在模板字符串里无障碍地直接写 html 代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t&lt;ul></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t&lt;li>列表项1&lt;/li></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t&lt;li>列表项2&lt;/li></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t&lt;/ul></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正确输出，不存在报错</span></pre></td></tr></table></figure><p>基于第二点，可以把一些简单的计算和调用丢进 ${} 来做：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> finalString <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> + </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token operator\">+</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>finalString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出 '1 + 2 = 3'</span></pre></td></tr></table></figure><p>除了模板语法外， ES6 中还新增了一系列的字符串方法用于提升开发效率：</p>\n<p>（1）存在性判定：在过去，当判断一个字符 / 字符串是否在某字符串中时，只能用 indexOf &gt; -1 来做。现在 ES6 提供了三个方法：includes、startsWith、endsWith，它们都会返回一个布尔值来告诉你是否存在。</p>\n<ul>\n<li>includes：判断字符串与子串的包含关系：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> son <span class=\"token operator\">=</span> <span class=\"token string\">'haha'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>son<span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ul>\n<li>startsWith：判断字符串是否以指定子串开头：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'haha'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>father<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xixi'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><ul>\n<li>endsWith：判断字符串是否以指定子串结尾：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> father <span class=\"token operator\">=</span> <span class=\"token string\">'xixi haha hehe'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  father<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hehe'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>（2）自动重复：可以使用 repeat 方法来使同一个字符串输出多次（被连续复制多次）：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sourceCode <span class=\"token operator\">=</span> <span class=\"token string\">'repeat for 3 times;'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> repeated <span class=\"token operator\">=</span> sourceCode<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>repeated<span class=\"token punctuation\">)</span> <span class=\"token comment\">// repeat for 3 times;repeat for 3 times;repeat for 3 times;</span></pre></td></tr></table></figure>",
            "tags": [
                "前端开发",
                "前端开发"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/06/React%E4%B8%8EVue/",
            "url": "https://kiyoumiii.github.io/2025/01/06/React%E4%B8%8EVue/",
            "title": "React与Vue",
            "date_published": "2025-01-06T09:55:46.000Z",
            "content_html": "<h3 id=\"react与vue\"><a class=\"anchor\" href=\"#react与vue\">#</a> React 与 Vue</h3>\n<ol>\n<li>\n<p>什么是 React？<br />\nReact 是一个免费、开源的 JavaScript 库，可以基于组件构建界面，并采用声明式编程方式。由 Meta 公司和一个由开发人员以及公司组成的社区共同维护，React 可用于开发单页、移动和服务器渲染的应用程序。</p>\n</li>\n<li>\n<p>什么是 Vue？<br />\nVue 则是一个用于构建界面的开源 JavaScript 框架，同样提供声明式和基于组件的编程选项。因此，您可以构建简单和复杂的界面。</p>\n</li>\n<li>\n<p>React 和 Vue 的相似之处</p>\n</li>\n</ol>\n<p>这两款 Web 开发工具在许多方面高度相似，主要的初始共同点是：</p>\n<ul>\n<li>虚拟 DOM（文档对象模型）;</li>\n<li>响应式和基于组件的结构；</li>\n<li>JavaScript 使用；</li>\n<li>支持 TypeScript;</li>\n<li>核心库和支持库；</li>\n<li>无缝版本迁移；</li>\n<li>向后兼容性；</li>\n<li>种类繁多的库和工具；</li>\n<li>PWA 支持；</li>\n<li>灵活性、性能和速度；</li>\n<li>大型、活跃的社区。</li>\n</ul>\n<p>React 和 Vue 都采用了虚拟 DOM 这一关键技术，它作为实际 HTML DOM 的 JavaScript 对象副本，在浏览器中呈现为常规网页。虚拟 DOM 的优势在于，它能在应用重新渲染时避免直接操作 HTML DOM，从而提高性能，减少不必要的元素重绘。</p>\n<p>在数据绑定方面，Vue 提供了 v-model 指令，简化了表单的双向数据绑定过程。相比之下，React 没有内置的双向数据绑定解决方案，但允许开发者根据需要自定义实现，以满足特定需求。</p>\n<p>此外，React 和 Vue 都遵循单向数据流的原则，即数据从父组件流向子组件。这种向下数据绑定的方式确保了数据流的清晰和一致，只有在数据发生更改时，子组件才会更新其内容，从而维护了干净且可预测的数据流架构。</p>\n<ol start=\"4\">\n<li>Vue 和 React 的区别</li>\n</ol>\n<p>Vue 和 React 在多个关键词上展现出显著的区别。首先，从定义上来看，Vue 是一个渐进式 JavaScript 框架，而 React 是一个开源 JavaScript 库。这种基础定位的不同，直接影响了它们的用例和适用范围。</p>\n<p>在内容渲染方面，React 采用了 JSX，这是一种专门用于构建 DOM 树的 JavaScript 扩展，非常适合创建 React 组件。相对地，Vue 则采用了不同的方法，它使用 HTML 模板来进行 DOM 渲染，而不是 JSX。</p>\n<p>此外，React 和 Vue 在预构建工具和第三方工具的支持上也存在差异。React 提供了一个强大的架构，包括虚拟 DOM 操作和组件状态管理，但其他功能则主要依赖于社区成员的开发和支持。</p>\n<p>相比之下，Vue 的工具和库则更加平衡。Vue 的核心团队不仅开发了自己的工具和库，还提供了基于社区的解决方案。这种组合使得 Vue 能够更好地满足经验丰富的开发人员和新手的需求。</p>\n<p>综上所述，Vue 与 React 在定义、内容渲染、预构建工具和第三方工具支持等方面都存在显著的差异。这些差异使得两者在各自的领域内都有独特的优势和适用场景。</p>\n<ol start=\"5\">\n<li>灵活性与状态管理<br />\n React</li>\n</ol>\n<p>React 以 UI 为核心，专注于构建 UI 组件，其 XML 风格的语法便于创建包含视图描述的 UI 组件。</p>\n<p>然而，React 本身不提供状态管理功能。对于小型应用，开发者可以利用 React 内置的 Context API 来管理状态，但对于更复杂的 Web 应用，则需要借助第三方库。Redux、MobX、Recoil 和 Zustand 等是流行的状态管理库，其中 Redux 基于 Flux 架构模式，备受推崇。此外，React Router 也是由第三方提供的，并非官方包。</p>\n<p>Vue</p>\n<p>Vue.js 作为一个动态框架，允许开发者使用其基本工具轻松创建应用。但是，如有必要，它还提供您可能需要的绝大多数功能：</p>\n<p>Pinia 或 Vuex 用于状态管理。<br />\nVue Router 用于应用程序 URL 管理。<br />\nVue.js 用于服务器端渲染的服务器端渲染器。<br />\n综上所述，Vue 在灵活性方面表现优异，无论是小型还是大型应用，都提供了直观且强大的解决方案。相比之下，React 则需要开发者根据需要选择和使用第三方库来扩展功能。</p>\n<ol start=\"6\">\n<li>移动开发</li>\n</ol>\n<p>React</p>\n<p>React 在移动应用程序开发领域以 React Native 框架崭露头角。React Native 是一个利用 JavaScript 构建跨平台 iOS 和 Android 应用的工具，自 2015 年初问世以来，便基于 React 不断演进。该框架摒弃了 WebView 和 HTML 技术，转而采用原生组件与 JS 的绑定，并将其封装在 React 中。</p>\n<p>尽管 iOS 对 React Native 的支持略胜一筹，但 Android 的支持也在不断进步，为开发者提供了高质量的跨平台应用开发服务。</p>\n<p>此外，React 在渐进式 Web 应用程序（PWA）开发方面也展现出了巨大潜力。自 2015 年起，PWA 便凭借其接近原生应用性能的 Web 技术（CSS、HTML 和 JavaScript）构建方式而备受瞩目。</p>\n<p>Vue</p>\n<p>另一方面，Vue.js 与 NativeScript （NS） 配对，后者允许您使用 XML、CSS 和 JavaScript 构建跨平台应用程序。NativeScript 解决了与上面提到的 React Native 相同的问题，但它们有一些不同。</p>\n<p>使用 HTML/CSS/JavaScript 的 Web 开发人员更容易理解 NativeScript 语法和实现。在标记创建中，XML 用法也类似于 HTML。<br />\nNativeScript 可以直接访问本机平台 API。</p>\n",
            "tags": [
                "React",
                "React,Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/06/%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%AF%94%E6%B3%A8%E8%A7%A3/",
            "url": "https://kiyoumiii.github.io/2025/01/06/%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%AF%94%E6%B3%A8%E8%A7%A3/",
            "title": "项目对比注解",
            "date_published": "2025-01-06T09:29:51.000Z",
            "content_html": "<h2 id=\"项目对比文章的注解篇\"><a class=\"anchor\" href=\"#项目对比文章的注解篇\">#</a> 项目对比文章的注解篇</h2>\n<ol>\n<li>Vuex 和 Pinia</li>\n</ol>\n<p>Vuex 和 Pinia 都是 Vue.js 的状态管理库，用于帮助开发者管理大型应用中的全局状态。它们的主要功能是提供一个集中存储和管理应用状态的机制，使得状态的更新和访问更加可预测和可维护。</p>\n<p>API 风格<br />\n Pinia 使用类似 Vue 组件的 API 来创建和使用 store，而 Vuex 使用一个全局对象来访问 store。<br />\n在 Pinia 中，状态是响应式的，这意味着当状态发生变化时，组件会自动更新。在 Vuex 中，我们需要手动触发更新。<br />\nPinia 的 store 是模块化的，这意味着每个 store 可以包含自己的状态、操作和插件。在 Vuex 中，store 是全局的，这意味着所有的状态和操作都在同一个 store 中。</p>\n<p>Vuex 的功能</p>\n<ul>\n<li>集中存储状态：Vuex 提供了一个全局的 state 对象，所有组件都可以访问和修改这个状态。</li>\n<li>严格的状态更新规则：状态只能通过提交 mutation 来更新，而 mutation 必须是同步的。</li>\n<li>异步操作：通过 actions 来处理异步逻辑，然后提交 mutation 更新状态。</li>\n<li>模块化：支持将状态管理拆分成多个模块，每个模块可以有自己的 state、getters、mutations 和 actions。</li>\n<li>严格模式：可以开启严格模式来确保状态只通过 mutation 来更新，避免状态被意外修改。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// store.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">mutations</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'decrement'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 组件中使用</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapState<span class=\"token punctuation\">,</span> mapActions <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token literal-property property\">computed</span><span class=\"token operator\">:</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token literal-property property\">methods</span><span class=\"token operator\">:</span> <span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'decrement'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Pinia 的功能</p>\n<ul>\n<li>更简洁的 API：Pinia 提供了更简洁和直观的 API，使得状态管理更加简单易用。</li>\n<li>组合式 API 支持：Pinia 完全基于 Vue 3 的组合式 API 设计，与 Vue 3 的特性（如 setup 函数）更加契合。</li>\n<li>无严格模式：Pinia 不需要严格模式，因为它的设计使得状态更新更加自然和安全。</li>\n<li>类型推断：Pinia 提供了更好的 TypeScript 支持，能够自动推断状态的类型，减少了类型注解的需要。</li>\n<li>插件系统：支持插件系统，可以扩展 Pinia 的功能。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> defineStore <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'pinia'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useCounterStore <span class=\"token operator\">=</span> <span class=\"token function\">defineStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'counter'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function-variable function\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">increment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">decrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>区别</p>\n<ul>\n<li>API 设计：Vuex 的 API 相对复杂，需要定义 state、getters、mutations、actions 等多个部分，而 Pinia 的 API 更为简洁，通过 defineStore 函数来定义状态管理。</li>\n<li>与 Vue 的集成：Vuex 主要与 Vue 2 和 Vue 3 的选项式 API 集成，而 Pinia 完全基于 Vue 3 的组合式 API 设计，更适合 Vue 3 的开发方式。</li>\n<li>类型支持：Pinia 提供了更好的 TypeScript 支持，能够自动推断类型，而 Vuex 在 TypeScript 支持方面需要更多的类型注解。</li>\n<li>性能和易用性：Pinia 由于其简洁的设计和与 Vue 3 的紧密集成，通常被认为在性能和易用性上更优。</li>\n<li>社区和生态：Vuex 是 Vue.js 的官方状态管理库，拥有较大的社区和丰富的生态支持，而 Pinia 是 Vue 3 推荐的状态管理库，逐渐在社区中获得更多的关注和支持。</li>\n</ul>\n<ol start=\"2\">\n<li>watch 和 watchEffect</li>\n</ol>\n<p>watch 和 watchEffect 是 Vue 3 中用于响应式地观察数据变化的两个 API，它们在使用场景和行为上有一些区别。</p>\n<ul>\n<li>watch<br />\nwatch API 与 vue2 选项式 API this.$watch (以及相应的 watch 选项) 完全等效。watch<br />\n 需要侦听特定的数据源，并在单独的回调函数中执行副作用。默认情况下，它也是惰性的 —— 即回调仅在侦听源发生变化时被调用。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 侦听一个 getter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">count</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">(</span><span class=\"token parameter\">count<span class=\"token punctuation\">,</span> prevCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 直接侦听一个 ref</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count<span class=\"token punctuation\">,</span> prevCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 监听多个源</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">watch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>fooRef<span class=\"token punctuation\">,</span> barRef<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>prevFoo<span class=\"token punctuation\">,</span> prevBar<span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">/* ... */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>watchEffect<br />\n 立即执行传入的一个函数，同时响应式追踪其依赖，并在其依赖变更时重新运行该函数。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">watchEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// -> logs 0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  count<span class=\"token punctuation\">.</span>value<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// -> logs 1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>区别</p>\n<ul>\n<li>执行时机：watchEffect 是立即执行的，在页面加载时会主动执行一次，来收集依赖；而 watch 是惰性地执行副作用，它不会立即执行，但可以配置 immediate，使其主动触发</li>\n<li>参数不同：watchEffect 只需要传递一个回调函数，不需要传递侦听的数据，它会在页面加载时主动执行一次，来收集依赖；而 watch 至少要有两个参数（第三个参数是配置项），第一个参数是侦听的数据，第二个参数是回调函数</li>\n<li>结果不同：watchEffect 获取不到更改前的值；而 watch 可以同时获取更改前和更改后的值</li>\n</ul>\n<ol start=\"3\">\n<li>语法糖内的 defineProps 及 defineEmits、defineExpose</li>\n</ol>\n<p>defineProps 和 defineEmits 都是只能在  <code>&lt;script setup&gt; </code> 中使用的编译器宏。他们不需要导入，且会随着  <code>&lt;script setup&gt; </code> 的处理过程一同被编译掉。</p>\n<p>defineProps 接收与 props 选项相同的值，defineEmits 接收与 emits 选项相同的值，它们具备完整的类型推断并且在 script setup 中是直接可用的。</p>\n<p>defineProps 或 defineEmits 要么使用运行时声明，要么使用类型声明。同时使用两种声明方式会导致编译报错</p>\n<ul>\n<li>defineProps<br />\n 获取组件传值：父传子 defineProps</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickThis\"</span><span class=\"token operator\">></span><span class=\"token number\">1111</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  defineProps<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 采用 ts 专有声明，无默认值</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    num<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token comment\">// 采用 ts 专有声明，有默认值</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        msg<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        labels<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">withDefaults</span><span class=\"token punctuation\">(</span>defineProps<span class=\"token operator\">&lt;</span>Props<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function-variable function\">labels</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token string\">'one'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'two'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token function\">defineProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 非 ts 专有声明</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span>Number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>defineEmits<br />\ndefineEmits 子组件向父组件事件传递：子传父</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickThis\"</span><span class=\"token operator\">></span>点我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/*ts 专有 */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> emit<span class=\"token operator\">=</span> defineEmits<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> <span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">num</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* 非 ts 专有 */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">const</span> emit<span class=\"token operator\">=</span> <span class=\"token function\">defineEmits</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">clickThis</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>defineExpose<br />\n 子组件暴露属性和方法给父组件 defineExpose</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>子组件helloword<span class=\"token punctuation\">.</span>vue<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">\"ts\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> ref <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">123456</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">defineExpose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  count</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"less\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>style<span class=\"token operator\">></span></pre></td></tr></table></figure>",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/06/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%80%E8%A7%88%E8%A1%A8/",
            "url": "https://kiyoumiii.github.io/2025/01/06/vue%E8%84%9A%E6%89%8B%E6%9E%B6%E4%B8%80%E8%A7%88%E8%A1%A8/",
            "title": "vue脚手架一览表",
            "date_published": "2025-01-06T08:01:29.000Z",
            "content_html": "<h2 id=\"vue脚手架一览表\"><a class=\"anchor\" href=\"#vue脚手架一览表\">#</a> vue 脚手架一览表</h2>\n<p>1、使用 vue 脚手架安装项目</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>node-v</td>\n<td>查看 node 版本</td>\n</tr>\n<tr>\n<td>npm -v</td>\n<td>查看 npm 版本</td>\n</tr>\n<tr>\n<td>nrm</td>\n<td>用来切换 npm 下载源：安装指令：npm install nrm -gnpm install nrm -g 可以使用 nrm ls，查看有哪些源；使用 nrm use XXX 切换下载源</td>\n</tr>\n<tr>\n<td>@vue/cli</td>\n<td>vue 较新版本的脚手架，用来创建 vue 项目：1、使用 npm install -g @vue/cli 安装脚手架 2、执行 vue create XXX，创建项目，项目名是 XXX 3、执行 cd XXX，进入项目 4、执行 npm run serve 启动项目。备注：如果之前安装过老版本的脚手架工具，可以使用 npm uninstall vue-cli -g 指令卸载一下</td>\n</tr>\n</tbody>\n</table>\n<p>2、路由</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createRouter()</td>\n<td>创建路由</td>\n</tr>\n<tr>\n<td>path</td>\n<td>配置路由路径</td>\n</tr>\n<tr>\n<td>name</td>\n<td>配置路由的名字</td>\n</tr>\n<tr>\n<td>component</td>\n<td>配置路由的组件</td>\n</tr>\n<tr>\n<td>router-link</td>\n<td>跳转路由的标签，具体跳到哪，可以用 to 属性来定义</td>\n</tr>\n<tr>\n<td>router-view</td>\n<td>负责展示当前路由对应的组件内容</td>\n</tr>\n<tr>\n<td>import</td>\n<td>异步加载路由</td>\n</tr>\n</tbody>\n</table>\n<p>3、vuex</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>createStore()</td>\n<td>创建 vuex，管理全局数据</td>\n</tr>\n<tr>\n<td>state</td>\n<td>用来创建全局数据可以通过 <span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHN0b3JlLnN0YXRlLnh4eA==\">this.$store.state.xxx</span> 获取具体的数据</td>\n</tr>\n<tr>\n<td>actions</td>\n<td>定义 action</td>\n</tr>\n<tr>\n<td>dispatch</td>\n<td>派发 action</td>\n</tr>\n<tr>\n<td>mutations</td>\n<td>定义 mutations</td>\n</tr>\n<tr>\n<td>commit</td>\n<td>提交一个 commit，触发一个 mutation; 在 action 中使用：this.commit (xxx); 在 mutation 中使用：this.$store.commit (xxx)</td>\n</tr>\n<tr>\n<td>modules</td>\n<td>对 store 进行局部拆分（了解即可）</td>\n</tr>\n</tbody>\n</table>\n<p>4、发送 ajax 请求</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>axios</td>\n<td>插件，用来发送 ajax 请求:npm install axios --save 通过 get 方法，发送 get 请求，通过 post 方法，发送 post 请求</td>\n</tr>\n</tbody>\n</table>\n<p>5、插件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vetur</td>\n<td>vscode 开发 vue 项目时，语法提示插件</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/06/Sass-Scss-css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/",
            "url": "https://kiyoumiii.github.io/2025/01/06/Sass-Scss-css%E9%A2%84%E5%A4%84%E7%90%86%E5%99%A8/",
            "title": "Sass/Scss-css预处理器",
            "date_published": "2025-01-06T05:47:26.000Z",
            "content_html": "<h2 id=\"sassscss-css预处理器\"><a class=\"anchor\" href=\"#sassscss-css预处理器\">#</a> Sass/Scss-css 预处理器</h2>\n<h3 id=\"sass的诞生\"><a class=\"anchor\" href=\"#sass的诞生\">#</a> Sass 的诞生</h3>\n<p>众所周知 css 并不能算是一们真正意义上的 “编程” 语言，它本身无法未完成像其它编程语言一样的嵌套、继承、设置变量等工作。<br />\n为了解决 css 的不足，开发者们想到了编写一种对 css 进行预处理的 “中间语言”，可以实现一些 “编程” 语言才有的功能，然后自动编译成 css 供浏览识别，这样既一定程度上弥补了 css 的不足，也无需一种新的语言来代替 css 以供浏览器识别。<br />\n于是 css 预处理语言 SASS 就应运而生了。它诞生于 2007 年，是最早成熟 css 预处理语言。</p>\n<h3 id=\"1-什么是sass\"><a class=\"anchor\" href=\"#1-什么是sass\">#</a> 1. 什么是 Sass?</h3>\n<p>Sass 是 css 的预处理器，它能用来清晰地、结构化地描述文件样式，有着比普通 CSS 更加强大的功能。</p>\n<p>Sass 能够提供更简洁、更优雅的语法，同时提供多种功能来创建可维护和管理的样式表，有助于更好地组织管理样式文件，以及更高效地开发项目。</p>\n<p>sass 是采用的 Ruby 语言编写的一款 css 预处理语言</p>\n<p>sass 是最早的 css 预处理语言，有比 less 更为强大的功能。也是目前企业级开发中应用最多的 CSS 预处理器。</p>\n<h3 id=\"2-列出-sass-的一些常用功能\"><a class=\"anchor\" href=\"#2-列出-sass-的一些常用功能\">#</a> 2、列出 Sass 的一些常用功能 ？</h3>\n<p>常用功能</p>\n<p>一个开源的预处理器，被解析为 CSS<br />\n 完全兼容 CSS3<br />\n 在 CSS 基础上增加变量、嵌套 、混合等功能<br />\n在更少的时间内轻松地编写 CSS 代码<br />\n自定义输出格式</p>\n<h3 id=\"3-解释-scss-和-sass-之间的区别\"><a class=\"anchor\" href=\"#3-解释-scss-和-sass-之间的区别\">#</a> 3、解释 SCSS 和 Sass 之间的区别 ？</h3>\n<p>区别</p>\n<p>Sass 和 SCSS 其实就是同一种东西，我们平时都称之为 Sass，两者之间不同之处主要有以下两点：</p>\n<ul>\n<li>文件扩展名不同，Sass 是以.sass 后缀为扩展名，而 SCSS 是以.scss 后缀为扩展名。</li>\n<li>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号 {} 和分号；，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。</li>\n<li>sass 从第三代开始，放弃了缩进式风格，并且完全向下兼容普通的 css 代码，这一代的 sass 也被称为 scss。</li>\n</ul>\n<h3 id=\"4-sass-中的嵌套规则是什么\"><a class=\"anchor\" href=\"#4-sass-中的嵌套规则是什么\">#</a> 4、Sass 中的嵌套规则是什么 ？</h3>\n<p>嵌套规则</p>\n<p>嵌套是一种将多个逻辑结构相互组合的方法。在 Sass 中，各种 CSS 规则相互连接。</p>\n<p>例如：如果使用多个选择器，则可以在另一个选择器内部使用一个选择器来创建复合选择器。</p>\n<h3 id=\"5-sass-基础知识\"><a class=\"anchor\" href=\"#5-sass-基础知识\">#</a> 5、Sass 基础知识</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Live Sass Compiler（Sass 编译插件）</td>\n<td>VScode 编译 sass 的插件</td>\n</tr>\n<tr>\n<td>.scss （sass 文件后缀名）</td>\n<td>sass 文件的后缀名之一。在该文件中，可以写花括号 {} 和分号</td>\n</tr>\n<tr>\n<td>.sass （sass 文件后缀名）</td>\n<td>sass 文件的后缀名之一。在该文件中，不能写花括号 {} 和分号</td>\n</tr>\n<tr>\n<td>&amp;（sass 修饰符）</td>\n<td>修饰符，表示上层标签。如下: <code>span&#123;&amp;:active&#123;color: red;&#125;&#125;编译后的代码是 span:active &#123; color: red; &#125; </code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"6-sass-常用变量\"><a class=\"anchor\" href=\"#6-sass-常用变量\">#</a> 6、sass 常用变量</h3>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>$ （变量前缀）</td>\n<td>使用 $，可以用来定义 css 变量（变量名可自定义）</td>\n</tr>\n<tr>\n<td>lighten()</td>\n<td>颜色变量相关的功能函数，可以把颜色变浅</td>\n</tr>\n<tr>\n<td>darken()</td>\n<td>颜色变量相关的功能函数，可以把颜色变深</td>\n</tr>\n<tr>\n<td>@import</td>\n<td>关键字，可以用来引入 css 变量</td>\n</tr>\n<tr>\n<td>@mixin</td>\n<td>关键字，用来定义混入的内容</td>\n</tr>\n<tr>\n<td>@include</td>\n<td>关键字，用来引入 @mixin 定义的混入</td>\n</tr>\n<tr>\n<td>@content</td>\n<td>关键字。当引入 mixin 时，@include 花括号中的内容可以用该关键字代替</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/05/vue%E8%BF%9B%E9%98%B6%E4%B8%80%E8%A7%88/",
            "url": "https://kiyoumiii.github.io/2025/01/05/vue%E8%BF%9B%E9%98%B6%E4%B8%80%E8%A7%88/",
            "title": "vue进阶一览",
            "date_published": "2025-01-05T13:07:22.000Z",
            "content_html": "<h2 id=\"vue3进阶一览表\"><a class=\"anchor\" href=\"#vue3进阶一览表\">#</a> Vue3 进阶一览表</h2>\n<p>1、Vue 的设计模式</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mvvm</td>\n<td>m 代表 model，指代数据；v 代表 view，指代视图；vm 代表 viewModel，指代视图数据连接层</td>\n</tr>\n<tr>\n<td>vm</td>\n<td>自定义的变量名，用来接收 app.mount () 的返回值，代表 vue 应用的根组件。利用该变量，可以使用 vm.$data 直接访问、操作根组件上的数据</td>\n</tr>\n</tbody>\n</table>\n<p>2、Vue 生命周期函数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate()</td>\n<td>在实例生成之前，会自动执行该函数</td>\n</tr>\n<tr>\n<td>created()</td>\n<td>在实例生成之后，会自动执行该函数</td>\n</tr>\n<tr>\n<td>beforeMount()</td>\n<td>在组件内容被渲染到页面之前，会自动执行该函数</td>\n</tr>\n<tr>\n<td>mounted()</td>\n<td>组件内容被渲染到页面后，会自动执行该函数</td>\n</tr>\n<tr>\n<td>beforeUpdate()</td>\n<td>当 data 中的数据发生变化时会自动执行该函数</td>\n</tr>\n<tr>\n<td>updated()</td>\n<td>当 data 中的数据发生变化，同时页面完成更新后，会自动执行的函数</td>\n</tr>\n<tr>\n<td>beforeUnmount()</td>\n<td>当 Vue 应用失效时，会自动执行该函数</td>\n</tr>\n<tr>\n<td>unmounted()</td>\n<td>当 Vue 应用失效后，同时 dom 完全销毁之后，自动执行的函数</td>\n</tr>\n</tbody>\n</table>\n<p>3、vue 实例的方法</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>unmount()</td>\n<td>销毁 vue 应用</td>\n</tr>\n</tbody>\n</table>\n<p>4、插槽</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;slot&gt;&lt;/slot&gt;</code></td>\n<td>插槽。父组件可以利用插槽往子组件中传入 dom 结构</td>\n</tr>\n<tr>\n<td>name</td>\n<td>定义插槽的名字 (具名插槽）。父组件要使用 “v-slot: 插槽名” 指定为哪个插槽传递内容 “v-slot: 插槽名” 可以简写成 “# 插槽名”</td>\n</tr>\n<tr>\n<td><code>&lt;template&gt;&lt;/template&gt;</code></td>\n<td>占位符</td>\n</tr>\n<tr>\n<td>v-slot</td>\n<td>父组件利用 v-slot 可以接收到子组件绑定到插槽上的数据</td>\n</tr>\n</tbody>\n</table>\n<p>5、标签、组件的过渡与动画</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;transition&gt;&lt;/transition&gt;</code></td>\n<td>用来给标签、组件添加过渡效果</td>\n</tr>\n<tr>\n<td>.v-enter-from</td>\n<td>元素准备入场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-enter-to</td>\n<td>元素准备离场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-enter-active</td>\n<td>元素入场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-from</td>\n<td>元素准备离场时的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-to</td>\n<td>元素已经离场后的默认类名</td>\n</tr>\n<tr>\n<td>.v-leave-active</td>\n<td>元素离场过程中的默认类名</td>\n</tr>\n<tr>\n<td>name</td>\n<td>通过给<transition></transition>组件设置 name 属性，可以统一修改元素做动画时的类名</td>\n</tr>\n<tr>\n<td>.enter-from-class</td>\n<td>单独设置元素准备入场时的类名</td>\n</tr>\n<tr>\n<td>.enter-active-class</td>\n<td>单独设置元素入场的过程中的类名</td>\n</tr>\n<tr>\n<td>.enter-to-class</td>\n<td>单独设置元素入场之后的类名</td>\n</tr>\n<tr>\n<td>.leave-from-class</td>\n<td>单独设置元素准备出场时的类名</td>\n</tr>\n<tr>\n<td>.leave-active-class</td>\n<td>单独设置元素出场过程中的类名</td>\n</tr>\n<tr>\n<td>.leave-to-class</td>\n<td>单独设置元素出场之后的类名</td>\n</tr>\n<tr>\n<td>type</td>\n<td>当元素既有过渡又有动画，并且二者时间不一致时，使用 type 属性，可以指定以哪一个时间为准</td>\n</tr>\n<tr>\n<td>:duration</td>\n<td>设置过渡、动画的时间，单位是毫秒</td>\n</tr>\n<tr>\n<td>:css</td>\n<td>设置是否使用 css 动画</td>\n</tr>\n<tr>\n<td>@before-enter</td>\n<td>元素准备入场时的钩子</td>\n</tr>\n<tr>\n<td>@enter</td>\n<td>元素入场过程中的钩子</td>\n</tr>\n<tr>\n<td>@after-enter</td>\n<td>元素入场结束时的钩子</td>\n</tr>\n<tr>\n<td>@before-leave</td>\n<td>元素准备出场时的钩子</td>\n</tr>\n<tr>\n<td>@leave</td>\n<td>元素出场过程中的钩子</td>\n</tr>\n<tr>\n<td>@leave-after</td>\n<td>元素出场结束时的钩子</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>设置多个单元素之间状态切换时，可以采取的模式：out-in：先隐藏，再进来 in-out：先进来，再隐藏</td>\n</tr>\n<tr>\n<td>appear</td>\n<td>设置初次显示的元素，也有动画效果</td>\n</tr>\n</tbody>\n</table>\n<p>6、列表动画</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;transition-group&gt;&lt;/transition-group&gt;</code></td>\n<td>用来定义列表动画。使用该组件包裹的一组元素，当元素新增或减少时，可以设置动画效果。动画的相关效果可以设置在默认类名 v-enter-from、v-enter-active、v-enter-to、v-leave-from、v-leave-active、v-leave-to 下</td>\n</tr>\n<tr>\n<td>.v-move</td>\n<td>列表元素移动过程中的，默认的类名</td>\n</tr>\n</tbody>\n</table>\n<p>7、 mixin 混入</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mixins</td>\n<td>定义局部的混入</td>\n</tr>\n<tr>\n<td>app.mixin()</td>\n<td>定义全局的混入</td>\n</tr>\n<tr>\n<td>$options</td>\n<td>可以通过该属性，获取 vue 应用中的自定义属性</td>\n</tr>\n<tr>\n<td>app.config.optionMergeStragies</td>\n<td>为自定义选项定义合并策略</td>\n</tr>\n</tbody>\n</table>\n<p>8、自定义指令 directive</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.directive()</td>\n<td>定义全局自定义指令，使用指令时，直接在元素上写上 “v - 指令名” 即可，自定义指令时，也可以使用 mounted、updated 等生命周期函数</td>\n</tr>\n<tr>\n<td>directives:{}</td>\n<td>引入局部指令</td>\n</tr>\n<tr>\n<td>binding</td>\n<td>获取指令上的相关信息</td>\n</tr>\n</tbody>\n</table>\n<p>9、teleport 传送门</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;teleport&gt;&lt;/teleport&gt;</code></td>\n<td>传送门，用来将包裹的内容，传送到 to 属性对应的 dom 元素下</td>\n</tr>\n</tbody>\n</table>\n<p>10、 render 函数（选学）</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>render()</td>\n<td>用来定义组件的内容</td>\n</tr>\n<tr>\n<td>$slots</td>\n<td>用来获取插槽的相关内容</td>\n</tr>\n</tbody>\n</table>\n<p>11、 plugin 插件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>install(){}</td>\n<td>定义插件时，会执行的方法</td>\n</tr>\n<tr>\n<td>app.use()</td>\n<td>使用插件</td>\n</tr>\n<tr>\n<td>app.provide()</td>\n<td>注入全局依赖</td>\n</tr>\n<tr>\n<td>app.config.globalProperties</td>\n<td>扩展全局属性</td>\n</tr>\n<tr>\n<td>$watch</td>\n<td>vue 实例的方法，用来监听数据</td>\n</tr>\n</tbody>\n</table>\n<p>12、 composition API</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>setup(){}</td>\n<td>实例被完全初始化之前执行的函数，可以使用 this.$options.setup () 获取 setup 函数中的返回值</td>\n</tr>\n<tr>\n<td>ref()</td>\n<td>将基础类型的数据，转成响应式 配合 ref 属性，可用于获取 dom 节点</td>\n</tr>\n<tr>\n<td>reactive()</td>\n<td>将非基础型的数据，转成响应式</td>\n</tr>\n<tr>\n<td>readonly()</td>\n<td>将响应式数据转成只读数据</td>\n</tr>\n<tr>\n<td>toRefs()</td>\n<td>从响应式对象中解构出具备响应式的数据</td>\n</tr>\n<tr>\n<td>toRef()</td>\n<td>可以从响应式数据中解构出不存在的数据，并且解构出来的值是响应式的</td>\n</tr>\n<tr>\n<td>context</td>\n<td>setup 函数的第二个参数，可以用来获取到 None-Props 属性、插槽，以及 emit 方法</td>\n</tr>\n<tr>\n<td>computed()</td>\n<td>用来定义计算属性，里面可以写 get、set 方法</td>\n</tr>\n<tr>\n<td>watch()</td>\n<td>监听器，可以让其监一个或多个数据的变化</td>\n</tr>\n<tr>\n<td>immediate</td>\n<td>配置 watch 监听器，让其变成非惰性</td>\n</tr>\n<tr>\n<td>watchEffect()</td>\n<td>监听器，会自动检测自己内部的代码，如果自己内部代码的某些依赖变化了，watchEffect 方法就会自动执行</td>\n</tr>\n<tr>\n<td>provide()</td>\n<td>祖先组件，通过 provide，向子孙组件注入依赖</td>\n</tr>\n<tr>\n<td>inject()</td>\n<td>子孙组件，通过 inject，来获取祖先组件注入的依赖</td>\n</tr>\n<tr>\n<td>useStore()</td>\n<td>用来获取 store，从而操作 vuex 中的数据</td>\n</tr>\n</tbody>\n</table>\n<p>13、composition API 中的生命周期函数</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onBeforeMount(){}</td>\n<td>vue 实例即将挂载到页面上的时候执行，等价于 beforeMount</td>\n</tr>\n<tr>\n<td>onMounted(){}</td>\n<td>vue 实例挂载到页面上之后执行，等价于 mounted</td>\n</tr>\n<tr>\n<td>onBeforeUpdate(){}</td>\n<td>当数据发生变化时执行，等价于 beforeUpdate</td>\n</tr>\n<tr>\n<td>onUpdated(){}</td>\n<td>当数据发生变化，同时页面完成更新后，会自动执行，等价于 updated</td>\n</tr>\n<tr>\n<td>onBeforeUnmount(){}</td>\n<td>组件从页面移除之前，会自动执行该函数，等价于 beforeUnMount</td>\n</tr>\n<tr>\n<td>onUnmounted(){}</td>\n<td>组件从页面移除之后，自动执行的函数，等价于 unmounted</td>\n</tr>\n<tr>\n<td>onRenderTracked(){}</td>\n<td>每次渲染之后，收集依赖的时候会自动执行的函数</td>\n</tr>\n<tr>\n<td>onRenderTriggered(){}</td>\n<td>每次重新渲染被触发的时候，自动执行的函数</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/05/vue%E5%9F%BA%E7%A1%80%E4%B8%80%E8%A7%88/",
            "url": "https://kiyoumiii.github.io/2025/01/05/vue%E5%9F%BA%E7%A1%80%E4%B8%80%E8%A7%88/",
            "title": "vue基础一览",
            "date_published": "2025-01-05T11:57:41.000Z",
            "content_html": "<h2 id=\"vue3基础一览表\"><a class=\"anchor\" href=\"#vue3基础一览表\">#</a> Vue3 基础一览表</h2>\n<p>Vue 是一套用于构建用户界面的渐进式框架</p>\n<p>与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。 另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>\n<p>1、Vue 实例（应用）相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.createApp()</td>\n<td>创建 vue 实例（应用），参数可以决定根组件如何渲染</td>\n</tr>\n<tr>\n<td>mount(){}</td>\n<td>该方法可以将 vue 实例，挂载在 dom 元素上</td>\n</tr>\n<tr>\n<td>template</td>\n<td>模板，用来定义该 vue 应用的展示内容。</td>\n</tr>\n<tr>\n<td>data(){}</td>\n<td>用来定义数据</td>\n</tr>\n<tr>\n<td><code>&#123;&#123;&#125;&#125;</code></td>\n<td>插值表达式① 可以用来将变量渲染到 dom 结构中。用于起始标签与闭合标签之间②  <code>&#123;&#123;&#125;&#125;</code>  中间可以写 js 表达式</td>\n</tr>\n<tr>\n<td>$data</td>\n<td>vue 实例的属性，可以用来操作 data 中定义的数据</td>\n</tr>\n<tr>\n<td>methods:{}</td>\n<td>里面可以书写方法（函数）</td>\n</tr>\n<tr>\n<td>computed:{}</td>\n<td>计算属性，当计算属性依赖的内容发生变更时，才会重新执行计算</td>\n</tr>\n<tr>\n<td>watch:{}</td>\n<td>监听器，可以监听数据的改变，做异步操作</td>\n</tr>\n</tbody>\n</table>\n<p>2、Vue 样式相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:class</td>\n<td>v-bind:class 的简写形式，为元素绑定动态类名</td>\n</tr>\n<tr>\n<td>$attrs</td>\n<td>可以用来获取父组件绑定在子组件身上的属性（Non-Props 属性）</td>\n</tr>\n<tr>\n<td>:style</td>\n<td>v-bind:style 的简写形式，为元素绑定动态的行内样式</td>\n</tr>\n</tbody>\n</table>\n<p>3、Vue 常见指令</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>v-on</td>\n<td>绑定事件 ① “v-on:” 可以简写成 @ ② 可以使用 “@[变量名]”，绑定动态事件。即，具体绑定哪个事件，由 “变量名” 决定 ③ 事件处理函数中，可以使用事件对象 event ④ 事件处理函数中，如果想传递多个参数，可以使用 $event 指代事件对象</td>\n</tr>\n<tr>\n<td>v-if ，v-else-if ，v-else</td>\n<td>条件渲染：通过控制 dom 结构的存在与否来实现区块的显示和隐藏</td>\n</tr>\n<tr>\n<td>三者可以组合使用</td>\n</tr>\n<tr>\n<td>v-show</td>\n<td>条件渲染：&gt; 通过控制元素的 display 属性来控制区块的显示和隐藏</td>\n</tr>\n<tr>\n<td>v-for</td>\n<td>列表渲染：用来循环数组、对象为了提高性能，可以使用 :key（前面没有出现:key, 要不要考虑加上）为元素绑定唯一的 key 值</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>① 表单中的内容与 data 方法中的变量，进行双向数据绑定 ② 复选框，可以通过 true-value、false-value 属性指定选中、没选中时显示的值（不常用） ③ v-model 可以使用.lazy 修饰符，减少数据的变化频率（不常用） ④ v-model 可以使用.number 修饰符将数据转换成数字（不常用） ⑤ v-model 可以使用.trim 修饰符去除数据首尾的空格</td>\n</tr>\n<tr>\n<td>v-bind</td>\n<td>① 可以将标签 / 组件上的某个属性与数据变量进行绑定。 ② “v-bind:” 可以简写成 “:” ③ 可以使用 “:[变量名]”，绑定动态属性。即，具体绑定哪个属性，由 “变量名” 决定</td>\n</tr>\n<tr>\n<td>v-html</td>\n<td>识别变量中的 html 标签；将变量中的 html 结构解析成 dom 结构</td>\n</tr>\n<tr>\n<td>v-once</td>\n<td>标签 / 组件只渲染一次；渲染一次后，如果数据变化，标签 / 组件的内容不会跟随变化</td>\n</tr>\n</tbody>\n</table>\n<p>4、Vue 事件修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.prevent</td>\n<td>阻止默认事件</td>\n</tr>\n<tr>\n<td>.stop</td>\n<td>阻止事件冒泡</td>\n</tr>\n<tr>\n<td>.self</td>\n<td>只有操作自身时，才会触发自身上的事件（常用于点击事件，即只有点击自己时，才会触发自身上绑定的点击事件）</td>\n</tr>\n<tr>\n<td>.once</td>\n<td>事件只触发一次</td>\n</tr>\n<tr>\n<td>.capture</td>\n<td>把事件的运营模式变成捕获（不常用）</td>\n</tr>\n<tr>\n<td>.passive</td>\n<td>提升事件性能，常用于滚动事件 scroll（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>5、Vue 按键修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.enter</td>\n<td>触发事件的按键是 enter 键，才会真正触发事件。类似的按键修饰符还有.tab、.delete、.esc、.up、.down、.left、.right、.ctrl（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>6、鼠标修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.left</td>\n<td>触发事件的鼠标按键是左键，才会真正触发事件。类似的按键修饰符还有.right、.middle（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>7、精确修饰符</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>.exact</td>\n<td>精确的按住指定键，才会触发事件（不常用）</td>\n</tr>\n</tbody>\n</table>\n<p>8、Vue dom 相关</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ref</td>\n<td>标签、组件设置该属性后，可以通过 “<span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHJlZnMueHh4\">this.$refs.xxx</span>” 的形式获取到该标签的 dom 节点、该组件的引用</td>\n</tr>\n</tbody>\n</table>\n<p>9、创建组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>app.component()</td>\n<td>组定义全局组件，其中 “app” 是保存 Vue 实例的变量</td>\n</tr>\n<tr>\n<td>components:{}</td>\n<td>注册局部组件</td>\n</tr>\n</tbody>\n</table>\n<p>10、组件之间传值</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>props</td>\n<td>父组件调用子组件时，可以通过标签属性的形式给子组件传值。子组件内部通过 props 属性接收传过来的值。子组件接收值时，可以进行校验：type 用来校验数据类型，default 用来设置默认值，require 用来设置必填</td>\n</tr>\n<tr>\n<td>Non-Props</td>\n<td>父组件给子组件传递内容的时候，子组件不通过 props 接收。此时 vue 底层会把传递过来的属性，放在子组件最外层元素上，将其变成子组件的一个属性</td>\n</tr>\n<tr>\n<td>inheritAttrs</td>\n<td>用来设置子组件是否继承父组件传递过来的 Non-props 属性</td>\n</tr>\n<tr>\n<td>$emit</td>\n<td>子组件通过 $emit 方法触发自定义事件，利用该事件可以给父组件传值</td>\n</tr>\n<tr>\n<td>emits</td>\n<td>声明组件会向外触发什么事件。通过 emits 属性我们就能知道该组件会向外触发什么事件</td>\n</tr>\n<tr>\n<td>v-model</td>\n<td>父子组件之间可以通过 v-model 实现双向数据绑定，子组件接收到的数据可以用 modelValue 表示父组件要通过 v-model 给子组件绑定数据（选学绑定多个数据）</td>\n</tr>\n</tbody>\n</table>\n<p>11、动态组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;component/&gt;</code></td>\n<td>定义动态组件。具体显示哪个组件，由 “:is” 属性的值决定</td>\n</tr>\n<tr>\n<td><code> &lt;keep-alive&gt;&lt;/keep-alive&gt;</code></td>\n<td>缓存标签。包裹动态组件后，可以保留上一个组件中的内容</td>\n</tr>\n</tbody>\n</table>\n<p>12、异步组件</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Vue.defineAsyncComponent()</td>\n<td>该方法可以创建异步组件（了解即可）</td>\n</tr>\n</tbody>\n</table>\n<p>13、依赖、注入</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>provide，inject</td>\n<td>祖先组件，通过 provide，可以向子孙组件注入依赖孙子组件，通过 inject，可以在可用的注入内容中搜索需要使用的内容，二者配合，可以实现祖先组件向子孙组件传值（一次性的）</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/05/okjob-wztj%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%AF%94/",
            "url": "https://kiyoumiii.github.io/2025/01/05/okjob-wztj%E9%A1%B9%E7%9B%AE%E5%AF%B9%E6%AF%94/",
            "title": "okjob-wztj项目对比",
            "date_published": "2025-01-05T11:53:36.000Z",
            "content_html": "<h2 id=\"项目总结与对比\"><a class=\"anchor\" href=\"#项目总结与对比\">#</a> 项目总结与对比</h2>\n<h3 id=\"ok-job\"><a class=\"anchor\" href=\"#ok-job\">#</a> OK-JOB</h3>\n<p>VueX</p>\n<p>watch</p>\n<p>事件修饰符.prevent</p>\n<p>props 选项</p>\n<p>$emit 和 v-on（@）</p>\n<p>Props + emit</p>\n<p>Vue-cli 项目（npm run serve 启动，8080 监听）</p>\n<p>lang = javascipt</p>\n<p>lang = scss</p>\n<p>mixins 混入</p>\n<h3 id=\"王者图鉴\"><a class=\"anchor\" href=\"#王者图鉴\">#</a> 王者图鉴</h3>\n<p>pinia</p>\n<p>动态组件： <code>&lt;component&gt;+: is</code>  实现</p>\n<p>watchEffect</p>\n<p>defineProps 宏</p>\n<p>defineEmits 宏</p>\n<p>defineModel 宏</p>\n<p>Vite4 项目（npm run dev 启动，5173 监听）</p>\n<p>slot 插槽</p>\n<p>lang = typescript</p>\n<p>lang = less</p>\n<p>通过依赖注入（provide+inject）解决 vue 多层组件逐级透传问题</p>\n",
            "tags": [
                "Vue",
                "前端开发"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2025/01/02/%E5%B0%86vite%E6%9E%84%E5%BB%BA%E7%9A%84vue3%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0githubpage%E6%95%99%E7%A8%8B/",
            "url": "https://kiyoumiii.github.io/2025/01/02/%E5%B0%86vite%E6%9E%84%E5%BB%BA%E7%9A%84vue3%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0githubpage%E6%95%99%E7%A8%8B/",
            "title": "将vite构建的vue3项目部署到githubpage教程",
            "date_published": "2025-01-02T03:30:24.000Z",
            "content_html": "<h2 id=\"利用github-page托管vue项目\"><a class=\"anchor\" href=\"#利用github-page托管vue项目\">#</a> 利用 github page 托管 vue 项目</h2>\n<ol>\n<li>设置好 vite.config.js</li>\n</ol>\n<p>在 vite.config.js 中设置正确的 base。</p>\n<p>如果你要部署在  <code>https://&lt;USERNAME&gt;.github.io/ </code> 上，你可以省略 base 使其默认为  <code>‘/’</code> 。<br />\n如果你要部署在  <code>https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;/</code>  上，例如你的仓库地址为  <code>https://github.com/&lt;USERNAME&gt;/&lt;REPO&gt;</code> ，那么请设置 base 为  <code>‘/&lt;REPO&gt;/’</code> 。</p>\n<ol start=\"2\">\n<li>构建项目</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run build</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> build</pre></td></tr></table></figure><p>执行上述命令后，就会看到根目录下，多了一个 dist 文件夹，这便是我们需要部署的文件夹。</p>\n<p>3. 预览项目</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run dev</pre></td></tr></table></figure><ol start=\"4\">\n<li>部署到 github<br />\n 如果上面的 preview 没有问题，就可以部署到 github 了。</li>\n</ol>\n<p>在 github 中，项目的源代码上传到了 main 分支，因此接下来要将 dist 文件夹上传到另外一个分支，给这个分支起个名字 gh-pages。</p>\n<p>这里将 dist 文件夹上传到 gh-pages：(执行这条命令的前提是你已经完成了 git add. git commit git push 这些操作。)</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> subtree push <span class=\"token parameter variable\">--prefix</span> dist origin<span class=\"token punctuation\">(</span>远程主机的名字<span class=\"token punctuation\">)</span> gh-pages</pre></td></tr></table></figure><ol start=\"5\">\n<li>开启 pages 功能<br />\n将分支切换到 gh-pages，然后 save，就能成功开启页面了！</li>\n</ol>\n",
            "tags": [
                "Vue",
                "Vue"
            ]
        },
        {
            "id": "https://kiyoumiii.github.io/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "url": "https://kiyoumiii.github.io/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/",
            "title": "前端学习汇总-计算机网络篇（二）",
            "date_published": "2024-12-31T10:02:25.000Z",
            "content_html": "<h2 id=\"计算机网络知识总结篇dns协议介绍网络模型tcpip五层协议tcp与udp\"><a class=\"anchor\" href=\"#计算机网络知识总结篇dns协议介绍网络模型tcpip五层协议tcp与udp\">#</a> 计算机网络知识总结篇：DNS 协议介绍，网络模型，TCP/IP 五层协议，TCP 与 UDP</h2>\n<h3 id=\"四-dns协议介绍\"><a class=\"anchor\" href=\"#四-dns协议介绍\">#</a> 四、DNS 协议介绍</h3>\n<h4 id=\"1-dns-协议是什么\"><a class=\"anchor\" href=\"#1-dns-协议是什么\">#</a> 1. DNS 协议是什么</h4>\n<p>概念： DNS 是域名系统 (Domain Name System) 的缩写，提供的是一种主机名到 IP 地址的转换服务，就是我们常说的域名系统。它是一个由分层的 DNS 服务器组成的分布式数据库，是定义了主机如何查询这个分布式数据库的方式的应用层协议。能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的 IP 数串。<br />\n作用： 将域名解析为 IP 地址，客户端向 DNS 服务器（DNS 服务器有自己的 IP 地址）发送域名查询请求，DNS 服务器告知客户机 Web 服务器的 IP 地址。</p>\n<h4 id=\"2-dns同时使用tcp和udp协议\"><a class=\"anchor\" href=\"#2-dns同时使用tcp和udp协议\">#</a> 2. DNS 同时使用 TCP 和 UDP 协议？</h4>\n<p>DNS 占用 53 号端口，同时使用 TCP 和 UDP 协议。<br />\n（1）在区域传输的时候使用 TCP 协议</p>\n<ul>\n<li>辅域名服务器会定时（一般 3 小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，会执行一次区域传送，进行数据同步。区域传送使用 TCP 而不是 UDP，因为数据同步传送的数据量比一个请求应答的数据量要多得多。</li>\n<li>TCP 是一种可靠连接，保证了数据的准确性。<br />\n（2）在域名解析的时候使用 UDP 协议</li>\n<li>客户端向 DNS 服务器查询域名，一般返回的内容都不超过 512 字节，用 UDP 传输即可。不用经过三次握手，这样 DNS 服务器负载更低，响应更快。理论上说，客户端也可以指定向 DNS 服务器查询时用 TCP，但事实上，很多 DNS 服务器进行配置的时候，仅支持 UDP 查询包。</li>\n</ul>\n<h4 id=\"3-dns完整的查询过程\"><a class=\"anchor\" href=\"#3-dns完整的查询过程\">#</a> 3. DNS 完整的查询过程</h4>\n<p>DNS 服务器解析域名的过程：</p>\n<ul>\n<li>首先会在浏览器的缓存中查找对应的 IP 地址，如果查找到直接返回，若找不到继续下一步</li>\n<li>将请求发送给本地 DNS 服务器，在本地域名服务器缓存中查询，如果查找到，就直接将查找结果返回，若找不到继续下一步</li>\n<li>本地 DNS 服务器向根域名服务器发送请求，根域名服务器会返回一个所查询域的顶级域名服务器地址</li>\n<li>本地 DNS 服务器向顶级域名服务器发送请求，接受请求的服务器查询自己的缓存，如果有记录，就返回查询结果，如果没有就返回相关的下一级的权威域名服务器的地址</li>\n<li>本地 DNS 服务器向权威域名服务器发送请求，域名服务器返回对应的结果</li>\n<li>本地 DNS 服务器将返回结果保存在缓存中，便于下次使用</li>\n<li>本地 DNS 服务器将返回结果返回给浏览器<br />\n比如要查询 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20=\">www.baidu.com</span> 的 IP 地址，首先会在浏览器的缓存中查找是否有该域名的缓存，如果不存在就将请求发送到本地的 DNS 服务器中，本地 DNS 服务器会判断是否存在该域名的缓存，如果不存在，则向根域名服务器发送一个请求，根域名服务器返回负责 .com 的顶级域名服务器的 IP 地址的列表。然后本地 DNS 服务器再向其中一个负责 .com 的顶级域名服务器发送一个请求，负责 .com 的顶级域名服务器返回负责 .baidu 的权威域名服务器的 IP 地址列表。然后本地 DNS 服务器再向其中一个权威域名服务器发送一个请求，最后权威域名服务器返回一个对应的主机名的 IP 地址列表。</li>\n</ul>\n<h4 id=\"4-迭代查询与递归查询\"><a class=\"anchor\" href=\"#4-迭代查询与递归查询\">#</a> 4. 迭代查询与递归查询</h4>\n<p>实际上，DNS 解析是一个包含迭代查询和递归查询的过程。</p>\n<ul>\n<li>递归查询指的是查询请求发出后，域名服务器代为向下一级域名服务器发出请求，最后向用户返回查询的最终结果。使用递归查询，<strong>用户只需要发出一次查询请求</strong>。</li>\n<li>迭代查询指的是查询请求后，域名服务器返回单次查询的结果。下一级的查询由用户自己请求。使用迭代查询，<strong>用户需要发出多次的查询请求</strong>。<br />\n一般我们向本地 DNS 服务器发送请求的方式就是<strong>递归查询</strong>，因为我们只需要发出一次请求，然后本地 DNS 服务器返回给我们最终的请求结果。<br />\n而本地 DNS 服务器向其他域名服务器请求的过程是<strong>迭代查询</strong>的过程，因为每一次域名服务器只返回单次查询的结果，下一级的查询由本地 DNS 服务器自己进行。</li>\n</ul>\n<h4 id=\"5-dns-记录和报文\"><a class=\"anchor\" href=\"#5-dns-记录和报文\">#</a> 5. DNS 记录和报文</h4>\n<p>DNS 服务器中以资源记录的形式存储信息，每一个 DNS 响应报文一般包含多条资源记录。一条资源记录的具体的格式为</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>（Name，Value，Type，<span class=\"token constant\">TTL</span>）</pre></td></tr></table></figure><p>其中 TTL 是资源记录的生存时间，它定义了资源记录能够被其他的 DNS 服务器缓存多长时间。<br />\n常用的一共有四种 Type 的值，分别是 A、NS、CNAME 和 MX ，不同 Type 的值，对应资源记录代表的意义不同：</p>\n<ul>\n<li>如果 Type = A，则 Name 是主机名，Value 是主机名对应的 IP 地址。因此一条记录为 A 的资源记录，提供了标 准的主机名到 IP 地址的映射。</li>\n<li>如果 Type = NS，则 Name 是个域名，Value 是负责该域名的 DNS 服务器的主机名。这个记录主要用于 DNS 链式 查询时，返回下一级需要查询的 DNS 服务器的信息。</li>\n<li>如果 Type = CNAME，则 Name 为别名，Value 为该主机的规范主机名。该条记录用于向查询的主机返回一个主机名 对应的规范主机名，从而告诉查询主机去查询这个主机名的 IP 地址。主机别名主要是为了通过给一些复杂的主机名提供 一个便于记忆的简单的别名。</li>\n<li>如果 Type = MX，则 Name 为一个邮件服务器的别名，Value 为邮件服务器的规范主机名。它的作用和 CNAME 是一 样的，都是为了解决规范主机名不利于记忆的缺点。</li>\n</ul>\n<h3 id=\"五-网络模型\"><a class=\"anchor\" href=\"#五-网络模型\">#</a> 五、网络模型</h3>\n<h4 id=\"1-osi七层模型\"><a class=\"anchor\" href=\"#1-osi七层模型\">#</a> 1. OSI 七层模型</h4>\n<p>ISO 为了更好的使网络应用更为普及，推出了 OSI 参考模型。</p>\n<div align=\"center\">\n    <style>.fsafpwiqmvyc{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/OSI%E4%B8%83%E5%B1%82%E6%A8%A1%E5%9E%8B.jpg\" class=\"fsafpwiqmvyc\">\n</div>\n<p>（1）应用层<br />\n OSI 参考模型中最靠近用户的一层，是为计算机用户提供应用接口，也为用户直接提供各种网络服务。<br />\n我们常见应用层的网络服务协议有：HTTP，HTTPS，FTP，POP3、SMTP 等。</p>\n<ul>\n<li>在客户端与服务器中经常会有数据的请求，这个时候就是会用到 http (hyper text transfer protocol)(超文本传输协议) 或者 https. 在后端设计数据接口时，我们常常使用到这个协议。</li>\n<li>FTP 是文件传输协议，在开发过程中，个人并没有涉及到，但是我想，在一些资源网站，比如百度网盘 `` 迅雷应该是基于此协议的。</li>\n<li>SMTP 是 simple mail transfer protocol（简单邮件传输协议）。在一个项目中，在用户邮箱验证码登录的功能时，使用到了这个协议。</li>\n</ul>\n<p>（2）表示层<br />\n表示层提供各种用于应用层数据的编码和转换功能，确保一个系统的应用层发送的数据能被另一个系统的应用层识别。<br />\n如果必要，该层可提供一种标准表示形式，用于将计算机内部的多种数据格式转换成通信中采用的标准表示形式。数据压缩和加密也是表示层可提供的转换功能之一。<br />\n在项目开发中，为了方便数据传输，可以使用 base64 对数据进行编解码。如果按功能来划分，base64 应该是工作在表示层。</p>\n<p>（3）会话层<br />\n会话层就是负责建立、管理和终止表示层实体之间的通信会话。该层的通信由不同设备中的应用程序之间的服务请求和响应组成。</p>\n<p>（4）传输层<br />\n传输层建立了主机端到端的链接，传输层的作用是为上层协议提供端到端的可靠和透明的数据传输服务，包括处理差错控制和流量控制等问题。该层向高层屏蔽了下层数据通信的细节，使高层用户看到的只是在两个传输实体间的一条主机到主机的、可由用户控制和设定的、可靠的数据通路。我们通常说的，TCP UDP 就是在这一层。端口号既是这里的 “端”。</p>\n<p>（5）网络层<br />\n本层通过 IP 寻址来建立两个节点之间的连接，为源端的运输层送来的分组，选择合适的路由和交换节点，正确无误地按照地址传送给目的端的运输层。就是通常说的 IP 层。这一层就是我们经常说的 IP 协议层。IP 协议是 Internet 的基础。我们可以这样理解，网络层规定了数据包的传输路线，而传输层则规定了数据包的传输方式。</p>\n<p>（6）数据链路层<br />\n将比特组合成字节，再将字节组合成帧，使用链路层地址 (以太网使用 MAC 地址) 来访问介质，并进行差错检测。网络层与数据链路层的对比，通过上面的描述，我们或许可以这样理解，网络层是规划了数据包的传输路线，而数据链路层就是传输路线。不过，在数据链路层上还增加了差错控制的功能。</p>\n<p>（7）物理层<br />\n实际最终信号的传输是通过物理层实现的。通过物理介质传输比特流。规定了电平、速度和电缆针脚。常用设备有（各种物理设备）集线器、中继器、调制解调器、网线、双绞线、同轴电缆。这些都是物理层的传输介质。</p>\n<p>OSI 七层模型通信特点：对等通信 对等通信，为了使数据分组从源传送到目的地，源端 OSI 模型的每一层都必须与目的端的对等层进行通信，这种通信方式称为对等层通信。在每一层通信过程中，使用本层自己协议进行通信。</p>\n<h4 id=\"2-tcpip五层协议\"><a class=\"anchor\" href=\"#2-tcpip五层协议\">#</a> 2. TCP/IP 五层协议</h4>\n<p>TCP/IP 五层协议和 OSI 的七层协议对应关系如下：</p>\n<div align=\"center\">\n    <style>.enykpbdvfbop{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/TCP_IP_%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE.jpg\" class=\"enykpbdvfbop\">\n</div>\n<ul>\n<li>应用层 (application layer)：直接为应用进程提供服务。应用层协议定义的是应用进程间通讯和交互的规则，不同的应用有着不同的应用层协议，如 HTTP 协议（万维网服务）、FTP 协议（文件传输）、SMTP 协议（电子邮件）、DNS（域名查询）等。</li>\n<li>传输层 (transport layer)：有时也译为运输层，它负责为两台主机中的进程提供通信服务。该层主要有以下两种协议：</li>\n</ul>\n<ol>\n<li>传输控制协议 (Transmission Control Protocol，TCP)：提供面向连接的、可靠的数据传输服务，数据传输的基本单位是报文段（segment）；</li>\n<li>用户数据报协议 (User Datagram Protocol，UDP)：提供无连接的、尽最大努力的数据传输服务，但不保证数据传输的可靠性，数据传输的基本单位是用户数据报。</li>\n</ol>\n<ul>\n<li>网络层 (internet layer)：有时也译为网际层，它负责为两台主机提供通信服务，并通过选择合适的路由将数据传递到目标主机。</li>\n<li>数据链路层 (data link layer)：负责将网络层交下来的 IP 数据报封装成帧，并在链路的两个相邻节点间传送帧，每一帧都包含数据和必要的控制信息（如同步信息、地址信息、差错控制等）。</li>\n<li>物理层 (physical Layer)：确保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境。</li>\n</ul>\n<p><strong>从上图中可以看出，TCP/IP 模型比 OSI 模型更加简洁，它把应用层 / 表示层 / 会话层全部整合为了应用层。</strong></p>\n<p>在每一层都工作着不同的设备，比如我们常用的交换机就工作在数据链路层的，一般的路由器是工作在网络层的。</p>\n<div align=\"center\">\n    <style>.qjdjdotkyleu{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/03.jpg\" class=\"qjdjdotkyleu\">\n</div>\n<p>在每一层实现的协议也各不同，即每一层的服务也不同，下图列出了每层主要的传输协议：</p>\n<div align=\"center\">\n    <style>.ocvkvidkmpij{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/04.jpg\" class=\"ocvkvidkmpij\">\n</div>\n<p>同样，TCP/IP 五层协议的通信方式也是对等通信：</p>\n<div align=\"center\">\n    <style>.rxfggnhbupkf{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/05.jpg\" class=\"rxfggnhbupkf\">\n</div>\n<h3 id=\"六-tcp与udp\"><a class=\"anchor\" href=\"#六-tcp与udp\">#</a> 六、TCP 与 UDP</h3>\n<h4 id=\"1-tcp-和-udp的概念及特点\"><a class=\"anchor\" href=\"#1-tcp-和-udp的概念及特点\">#</a> 1. TCP 和 UDP 的概念及特点</h4>\n<p>TCP 和 UDP 都是传输层协议，他们都属于 TCP/IP 协议族：<br />\n（1）UDP<br />\nUDP 的全称是用户数据报协议，在网络中它与 TCP 协议一样用于处理数据包，是一种无连接的协议。在 OSI 模型中，在传输层，处于 IP 协议的上一层。UDP 有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>\n<p>它的特点如下：<br />\n1）面向无连接<br />\n首先 UDP 是不需要和 TCP 一样在发送数据前进行三次握手建立连接的，想发数据就可以开始发送了。并且也只是数据报文的搬运工，不会对数据报文进行任何拆分和拼接操作。<br />\n具体来说就是：</p>\n<ul>\n<li>在发送端，应用层将数据传递给传输层的 UDP 协议，UDP 只会给数据增加一个 UDP 头标识下是 UDP 协议，然后就传递给网络层了</li>\n<li>在接收端，网络层将数据传递给传输层，UDP 只去除 IP 报文头就传递给应用层，不会任何拼接操作</li>\n</ul>\n<p>2）有单播，多播，广播的功能<br />\n UDP 不止支持一对一的传输方式，同样支持一对多，多对多，多对一的方式，也就是说 UDP 提供了单播，多播，广播的功能。</p>\n<p>3）面向报文<br />\n发送方的 UDP 对应用程序交下来的报文，在添加首部后就向下交付 IP 层。UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界。因此，应用程序必须选择合适大小的报文</p>\n<p>4）不可靠性<br />\n首先不可靠性体现在无连接上，通信都不需要建立连接，想发就发，这样的情况肯定不可靠。<br />\n并且收到什么数据就传递什么数据，并且也不会备份数据，发送数据也不会关心对方是否已经正确接收到数据了。<br />\n再者网络环境时好时坏，但是 UDP 因为没有拥塞控制，一直会以恒定的速度发送数据。即使网络条件不好，也不会对发送速率进行调整。这样实现的弊端就是在网络条件不好的情况下可能会导致丢包，但是优点也很明显，在某些实时性要求高的场景（比如电话会议）就需要使用 UDP 而不是 TCP。</p>\n<p>5）头部开销小，传输数据报文时是很高效的。<br />\nUDP 头部包含了以下几个数据：</p>\n<ul>\n<li>两个十六位的端口号，分别为源端口（可选字段）和目标端口</li>\n<li>整个数据报文的长度</li>\n<li>整个数据报文的检验和（IPv4 可选字段），该字段用于发现头部信息和数据中的错误<br />\n因此 UDP 的头部开销小，只有 8 字节，相比 TCP 的至少 20 字节要少得多，在传输数据报文时是很高效的。</li>\n</ul>\n<p>（2）TCP TCP 的全称是传输控制协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。TCP 是面向连接的、可靠的流协议（流就是指不间断的数据结构）。</p>\n<p>它有以下几个特点：<br />\n1）面向连接<br />\n面向连接，是指发送数据之前必须在两端建立连接。建立连接的方法是 “三次握手”，这样能建立可靠的连接。建立连接，是为数据的可靠传输打下了基础。<br />\n2）仅支持单播传输<br />\n每条 TCP 传输连接只能有两个端点，只能进行点对点的数据传输，不支持多播和广播传输方式。<br />\n3）面向字节流<br />\n TCP 不像 UDP 一样那样一个个报文独立地传输，而是在不保留报文边界的情况下以字节流方式进行传输。<br />\n4）可靠传输<br />\n对于可靠传输，判断丢包、误码靠的是 TCP 的段编号以及确认号。TCP 为了保证报文传输的可靠，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的字节发回一个相应的确认 (ACK)；如果发送端实体在合理的往返时延 (RTT) 内未收到确认，那么对应的数据（假设丢失了）将会被重传。<br />\n5）提供拥塞控制<br />\n当网络出现拥塞的时候，TCP 能够减小向网络注入数据的速率和数量，缓解拥塞。<br />\n6）提供全双工通信<br />\n TCP 允许通信双方的应用程序在任何时候都能发送数据，因为 TCP 连接的两端都设有缓存，用来临时存放双向通信的数据。当然，TCP 可以立即发送一个数据段，也可以缓存一段时间以便一次发送更多的数据段（最大的数据段大小取决于 MSS）</p>\n<h4 id=\"2-tcp和udp的区别\"><a class=\"anchor\" href=\"#2-tcp和udp的区别\">#</a> 2. TCP 和 UDP 的区别</h4>\n<div align=\"center\">\n    <style>.lnmwolpmowre{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/06.jpg\" class=\"lnmwolpmowre\">\n</div>\n<h4 id=\"3-tcp和udp的使用场景\"><a class=\"anchor\" href=\"#3-tcp和udp的使用场景\">#</a> 3. TCP 和 UDP 的使用场景</h4>\n<ul>\n<li>TCP 应用场景： 效率要求相对低，但对准确性要求相对高的场景。因为传输中需要对数据确认、重发、排序等操作，相比之下效率没有 UDP 高。例如：文件传输（准确高要求高、但是速度可以相对慢）、接受邮件、远程登录。</li>\n<li>UDP 应用场景： 效率要求相对高，对准确性要求相对低的场景。例如：QQ 聊天、在线视频、网络语音电话（即时通讯，速度要求高，但是出现偶尔断续不是太大问题，并且此处完全不可以使用重发机制）、广播通信（广播、多播）。</li>\n</ul>\n<h4 id=\"4-udp协议为什么不可靠\"><a class=\"anchor\" href=\"#4-udp协议为什么不可靠\">#</a> 4. UDP 协议为什么不可靠？</h4>\n<p>UDP 在传输数据之前不需要先建立连接，远地主机的运输层在接收到 UDP 报文后，不需要确认，提供不可靠交付。总结就以下四点：</p>\n<ul>\n<li>不保证消息交付：不确认，不重传，无超时</li>\n<li>不保证交付顺序：不设置包序号，不重排，不会发生队首阻塞</li>\n<li>不跟踪连接状态：不必建立连接或重启状态机</li>\n<li>不进行拥塞控制：不内置客户端或网络反馈机制</li>\n</ul>\n<h4 id=\"5-tcp的重传机制\"><a class=\"anchor\" href=\"#5-tcp的重传机制\">#</a> 5. TCP 的重传机制</h4>\n<p>由于 TCP 的下层网络（网络层）可能出现丢失、重复或失序的情况，TCP 协议提供可靠数据传输服务。为保证数据传输的正确性，TCP 会重传其认为已丢失（包括报文中的比特错误）的包。TCP 使用两套独立的机制来完成重传，一是基于时间，二是基于确认信息。<br />\nTCP 在发送一个数据之后，就开启一个定时器，若是在这个时间内没有收到发送数据的 ACK 确认报文，则对该报文进行重传，在达到一定次数还没有成功时放弃并发送一个复位信号。</p>\n<h4 id=\"6-tcp的拥塞控制机制\"><a class=\"anchor\" href=\"#6-tcp的拥塞控制机制\">#</a> 6. TCP 的拥塞控制机制</h4>\n<p>TCP 的拥塞控制机制主要是以下四种机制：</p>\n<ul>\n<li>慢启动（慢开始）</li>\n<li>拥塞避免</li>\n<li>快速重传</li>\n<li>快速恢复</li>\n</ul>\n<p>（1）慢启动（慢开始）</p>\n<ul>\n<li>在开始发送的时候设置 cwnd = 1（cwnd 指的是拥塞窗口）</li>\n<li>思路：开始的时候不要发送大量数据，而是先测试一下网络的拥塞程度，由小到大增加拥塞窗口的大小。</li>\n<li>为了防止 cwnd 增长过大引起网络拥塞，设置一个慢开始门限 (ssthresh 状态变量)</li>\n</ul>\n<ol>\n<li>当 cwnd &lt; ssthresh 时，使用慢开始算法</li>\n<li>当 cnwd = ssthresh，既可使用慢开始算法，也可以使用拥塞避免算法</li>\n<li>当 cwnd &gt; ssthresh 时，使用拥塞避免算法</li>\n</ol>\n<p>（2）拥塞避免</p>\n<ul>\n<li>拥塞避免未必能够完全避免拥塞，是说在拥塞避免阶段将拥塞窗口控制为按线性增长，使网络不容易出现阻塞。</li>\n<li>思路： 让拥塞窗口 cwnd 缓慢的增大，即每经过一个返回时间 RTT 就把发送方的拥塞控制窗口加一</li>\n<li>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限设置为出现拥塞时的发送窗口大小的一半。然后把拥塞窗口设置为 1，执行慢开始算法。如图所示:</li>\n</ul>\n<div align=\"center\">\n    <style>.jsbuyymrifnc{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/07.jpg\" class=\"jsbuyymrifnc\">\n</div>\n其中，判断网络出现拥塞的根据就是没有收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理。\n<p>（3）快速重传</p>\n<ul>\n<li>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认 (为的是使发送方及早知道有报文段没有到达对方)。发送方只要连续收到三个重复确认就立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。</li>\n<li>由于不需要等待设置的重传计时器到期，能尽早重传未被确认的报文段，能提高整个网络的吞吐量</li>\n</ul>\n<p>（4）快速恢复</p>\n<ul>\n<li>当发送方连续收到三个重复确认时，就执行 “乘法减小” 算法，把 ssthresh 门限减半。但是接下去并不执行慢开始算法。</li>\n<li>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将 cwnd 设置为 ssthresh 的大小，然后执行拥塞避免算法。</li>\n</ul>\n<div align=\"center\">\n    <style>.tqeugqcmwdhe{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/08.jpg\" class=\"tqeugqcmwdhe\">\n</div>\n<h4 id=\"7-tcp的流量控制机制\"><a class=\"anchor\" href=\"#7-tcp的流量控制机制\">#</a> 7. TCP 的流量控制机制</h4>\n<p>一般来说，流量控制就是为了让发送方发送数据的速度不要太快，要让接收方来得及接收。TCP 采用大小可变的滑动窗口进行流量控制，窗口大小的单位是字节。这里说的窗口大小其实就是每次传输的数据大小。</p>\n<ul>\n<li>当一个连接建立时，连接的每一端分配一个缓冲区来保存输入的数据，并将缓冲区的大小发送给另一端。</li>\n<li>当数据到达时，接收方发送确认，其中包含了自己剩余的缓冲区大小。（剩余的缓冲区空间的大小被称为窗口，指出窗口大小的通知称为窗口通告 。接收方在发送的每一确认中都含有一个窗口通告。）</li>\n<li>如果接收方应用程序读数据的速度能够与数据到达的速度一样快，接收方将在每一确认中发送一个正的窗口通告。</li>\n<li>如果发送方操作的速度快于接收方，接收到的数据最终将充满接收方的缓冲区，导致接收方通告一个零窗口 。发送方收到一个零窗口通告时，必须停止发送，直到接收方重新通告一个正的窗口。</li>\n</ul>\n<h4 id=\"8-tcp的可靠传输机制\"><a class=\"anchor\" href=\"#8-tcp的可靠传输机制\">#</a> 8. TCP 的可靠传输机制</h4>\n<p>TCP 的可靠传输机制是基于连续 ARQ 协议和滑动窗口协议的。<br />\nTCP 协议在发送方维持了一个发送窗口，发送窗口以前的报文段是已经发送并确认了的报文段，发送窗口中包含了已经发送但 未确认的报文段和允许发送但还未发送的报文段，发送窗口以后的报文段是缓存中还不允许发送的报文段。当发送方向接收方发 送报文时，会依次发送窗口内的所有报文段，并且设置一个定时器，这个定时器可以理解为是最早发送但未收到确认的报文段。 如果在定时器的时间内收到某一个报文段的确认回答，则滑动窗口，将窗口的首部向后滑动到确认报文段的后一个位置，此时如 果还有已发送但没有确认的报文段，则重新设置定时器，如果没有了则关闭定时器。如果定时器超时，则重新发送所有已经发送 但还未收到确认的报文段，并将超时的间隔设置为以前的两倍。当发送方收到接收方的三个冗余的确认应答后，这是一种指示， 说明该报文段以后的报文段很有可能发生丢失了，那么发送方会启用快速重传的机制，就是当前定时器结束前，发送所有的已发 送但确认的报文段。</p>\n<p>接收方使用的是累计确认的机制，对于所有按序到达的报文段，接收方返回一个报文段的肯定回答。如果收到了一个乱序的报文 段，那么接方会直接丢弃，并返回一个最近的按序到达的报文段的肯定回答。使用累计确认保证了返回的确认号之前的报文段都 已经按序到达了，所以发送窗口可以移动到已确认报文段的后面。</p>\n<p>发送窗口的大小是变化的，它是由接收窗口剩余大小和网络中拥塞程度来决定的，TCP 就是通过控制发送窗口的长度来控制报文 段的发送速率。</p>\n<p>但是 TCP 协议并不完全和滑动窗口协议相同，因为许多的 TCP 实现会将失序的报文段给缓存起来，并且发生重传时，只会重 传一个报文段，因此 TCP 协议的可靠传输机制更像是窗口滑动协议和选择重传协议的一个混合体。</p>\n<h4 id=\"9-tcp的三次握手和四次挥手\"><a class=\"anchor\" href=\"#9-tcp的三次握手和四次挥手\">#</a> 9. TCP 的三次握手和四次挥手</h4>\n<p>（1）三次握手</p>\n<div align=\"center\">\n    <style>.yerygdycihix{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/09.jpg\" class=\"yerygdycihix\">\n</div>\n（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包。进行三次握手的主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备。实质上其实就是连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息。\n<p>刚开始客户端处于 Closed 的状态，服务端处于 Listen 状态。</p>\n<ul>\n<li>第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN，此时客户端处于 SYN_SEND 状态。</li>\n</ul>\n<p><strong>首部的同步位 SYN=1，初始序号 seq=x，SYN=1 的报文段不能携带数据，但要消耗掉一个序号。</strong></p>\n<ul>\n<li>第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN。同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。</li>\n</ul>\n<p><strong>在确认报文段中 SYN=1，ACK=1，确认号 ack=x+1，初始序号 seq=y</strong></p>\n<ul>\n<li>第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接。</li>\n</ul>\n<p><strong>确认报文段 ACK=1，确认号 ack=y+1，序号 seq=x+1（初始为 seq=x，第二个报文段所以要 + 1），ACK 报文段可以携带数据，不携带数据则不消耗序号。</strong></p>\n<p>那为什么要三次握手呢？两次不行吗？</p>\n<ul>\n<li>为了确认双方的接收能力和发送能力都正常</li>\n<li>如果是用两次握手，则会出现下面这种情况：</li>\n</ul>\n<p><strong>如客户端发出连接请求，但因连接请求报文丢失而未收到确认，于是客户端再重传一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接，客户端共发出了两个连接请求报文段，其中第一个丢失，第二个到达了服务端，但是第一个丢失的报文段只是在某些网络结点长时间滞留了，延误到连接释放以后的某个时间才到达服务端，此时服务端误认为客户端又发出一次新的连接请求，于是就向客户端发出确认报文段，同意建立连接，不采用三次握手，只要服务端发出确认，就建立新的连接了，此时客户端忽略服务端发来的确认，也不发送数据，则服务端一致等待客户端发送数据，浪费资源。</strong></p>\n<p>简单来说就是以下三步：</p>\n<ul>\n<li>第一次握手： 客户端向服务端发送连接请求报文段。该报文段中包含自身的数据通讯初始序号。请求发送后，客户端便进入 SYN-SENT 状态。</li>\n<li>第二次握手： 服务端收到连接请求报文段后，如果同意连接，则会发送一个应答，该应答中也会包含自身的数据通讯初始序号，发送完成后便进入 SYN-RECEIVED 状态。</li>\n<li>第三次握手： 当客户端收到连接同意的应答后，还要向服务端发送一个确认报文。客户端发完这个报文段后便进入 ESTABLISHED 状态，服务端收到这个应答后也进入 ESTABLISHED 状态，此时连接建立成功。</li>\n</ul>\n<p>TCP 三次握手的建立连接的过程就是相互确认初始序号的过程，告诉对方，什么样序号的报文段能够被正确接收。 第三次握手的作用是客户端对服务器端的初始序号的确认。如果只使用两次握手，那么服务器就没有办法知道自己的序号是否 已被确认。同时这样也是为了防止失效的请求报文段被服务器接收，而出现错误的情况。</p>\n<p>（2）四次挥手</p>\n<div align=\"center\">\n    <style>.knqmcatfryrd{}</style><img data-src=\"/2024/12/31/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E6%B1%87%E6%80%BB-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%AF%87%EF%BC%88%E4%BA%8C%EF%BC%89/10.jpg\" class=\"knqmcatfryrd\">\n</div>\n<p>刚开始方都处于 ESTABLISHED 状态，假如是客户端先发起关闭请求。四次挥手的过程如下：</p>\n<ul>\n<li>\n<p>第一次挥手： 客户端会发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态。<br />\n即发出连接释放报文段（FIN=1，序号 seq=u），并停止再发送数据，主动关闭 TCP 连接，进入 FIN_WAIT1（终止等待 1）状态，等待服务端的确认。</p>\n</li>\n<li>\n<p>第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT 状态。</p>\n</li>\n</ul>\n<p>即服务端收到连接释放报文段后即发出确认报文段（ACK=1，确认号 ack=u+1，序号 seq=v），服务端进入 CLOSE_WAIT（关闭等待）状态，此时的 TCP 处于半关闭状态，客户端到服务端的连接释放。客户端收到服务端的确认后，进入 FIN_WAIT2（终止等待 2）状态，等待服务端发出的连接释放报文段。</p>\n<ul>\n<li>\n<p>第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。<br />\n即服务端没有要向客户端发出的数据，服务端发出连接释放报文段（FIN=1，ACK=1，序号 seq=w，确认号 ack=u+1），服务端进入 LAST_ACK（最后确认）状态，等待客户端的确认。</p>\n</li>\n<li>\n<p>第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。</p>\n</li>\n</ul>\n<p>即客户端收到服务端的连接释放报文段后，对此发出确认报文段（ACK=1，seq=u+1，ack=w+1），客户端进入 TIME_WAIT（时间等待）状态。此时 TCP 未释放掉，需要经过时间等待计时器设置的时间 2MSL 后，客户端才进入 CLOSED 状态。</p>\n<p>那为什么需要四次挥手呢？<br />\n因为当服务端收到客户端的 SYN 连接请求报文后，可以直接发送 SYN+ACK 报文。其中 ACK 报文是用来应答的，SYN 报文是用来同步的。但是关闭连接时，当服务端收到 FIN 报文时，很可能并不会立即关闭 SOCKET，所以只能先回复一个 ACK 报文，告诉客户端，“你发的 FIN 报文我收到了”。只有等到我服务端所有的报文都发送完了，我才能发送 FIN 报文，因此不能一起发送，故需要四次挥手。</p>\n<p>简单来说就是以下四步：</p>\n<ul>\n<li>第一次挥手： 若客户端认为数据发送完成，则它需要向服务端发送连接释放请求。</li>\n<li>第二次挥手：服务端收到连接释放请求后，会告诉应用层要释放 TCP 链接。然后会发送 ACK 包，并进入 CLOSE_WAIT 状态，此时表明客户端到服务端的连接已经释放，不再接收客户端发的数据了。但是因为 TCP 连接是双向的，所以服务端仍旧可以发送数据给客户端。</li>\n<li>第三次挥手：服务端如果此时还有没发完的数据会继续发送，完毕后会向客户端发送连接释放请求，然后服务端便进入 LAST-ACK 状态。</li>\n<li>第四次挥手： 客户端收到释放请求后，向服务端发送确认应答，此时客户端进入 TIME-WAIT 状态。该状态会持续 2MSL（最大段生存期，指报文段在网络中生存的时间，超时会被抛弃） 时间，若该时间段内没有服务端的重发请求的话，就进入 CLOSED 状态。当服务端收到确认应答后，也便进入 CLOSED 状态。</li>\n</ul>\n<p>TCP 使用四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代 表不能再向对方发送数据，连接处于的是半释放的状态。<br />\n最后一次挥手中，客户端会等待一段时间再关闭的原因，是为了防止发送给服务器的确认报文段丢失或者出错，从而导致服务器 端不能正常关闭。</p>\n<h4 id=\"10-tcp粘包是怎么回事如何处理\"><a class=\"anchor\" href=\"#10-tcp粘包是怎么回事如何处理\">#</a> 10. TCP 粘包是怎么回事，如何处理？</h4>\n<p>默认情况下，TCP 连接会启⽤延迟传送算法 (Nagle 算法), 在数据发送之前缓存他们。如果短时间有多个数据发送，会缓冲到⼀起作⼀次发送 (缓冲⼤⼩⻅ socket.bufferSize ), 这样可以减少 IO 消耗提⾼性能.<br />\n 如果是传输⽂件的话，那么根本不⽤处理粘包的问题，来⼀个包拼⼀个包就好了。但是如果是多条消息，或者是别的⽤途的数据那么就需要处理粘包.<br />\n 下面看⼀个例⼦，连续调⽤两次 send 分别发送两段数据 data1 和 data2, 在接收端有以下⼏种常⻅的情况:<br />\nA. 先接收到 data1, 然后接收到 data2 .<br />\nB. 先接收到 data1 的部分数据，然后接收到 data1 余下的部分以及 data2 的全部.<br />\nC. 先接收到了 data1 的全部数据和 data2 的部分数据，然后接收到了 data2 的余下的数据.<br />\nD. ⼀次性接收到了 data1 和 data2 的全部数据.</p>\n<p>其中的 BCD 就是我们常⻅的粘包的情况。⽽对于处理粘包的问题，常⻅的解决⽅案有:</p>\n<ul>\n<li>多次发送之前间隔⼀个等待时间：只需要等上⼀段时间再进⾏下⼀次 send 就好，适⽤于交互频率特别低的场景。缺点也很明显，对于⽐较频繁的场景⽽⾔传输效率实在太低，不过⼏乎不⽤做什么处理.</li>\n<li>关闭 Nagle 算法：关闭 Nagle 算法，在 Node.js 中你可以通过 socket.setNoDelay () ⽅法来关闭 Nagle 算法，让每⼀次 send 都不缓冲直接发送。该⽅法⽐较适⽤于每次发送的数据都⽐较⼤ (但不是⽂件那么⼤), 并且频率不是特别⾼的场景。如果是每次发送的数据量⽐较⼩，并且频率特别⾼的，关闭 Nagle 纯属⾃废武功。另外，该⽅法不适⽤于⽹络较差的情况，因为 Nagle 算法是在服务端进⾏的包合并情况，但是如果短时间内客户端的⽹络情况不好，或者应⽤层由于某些原因不能及时将 TCP 的数据 recv, 就会造成多个包在客户端缓冲从⽽粘包的情况。 (如果是在稳定的机房内部通信那么这个概率是⽐较⼩可以选择忽略的)</li>\n<li>进⾏封包 / 拆包： 封包 / 拆包是⽬前业内常⻅的解决⽅案了。即给每个数据包在发送之前，于其前 / 后放⼀些有特征的数据，然后收到数据的时 候根据特征数据分割出来各个数据包。</li>\n</ul>\n<h4 id=\"11-为什么udp不会粘包\"><a class=\"anchor\" href=\"#11-为什么udp不会粘包\">#</a> 11. 为什么 udp 不会粘包？</h4>\n<ul>\n<li>TCP 协议是⾯向<strong>流</strong>的协议，UDP 是⾯向<strong>消息</strong>的协议。UDP 段都是⼀条消息，应⽤程序必须以消息为单位提取数据，不能⼀次提取任意字节的数据</li>\n<li>UDP 具有保护消息边界，在每个 UDP 包中就有了消息头（消息来源地址，端⼝等信息），这样对于接收端来说就容易进⾏区分处理了。传输协议把数据当作⼀条独⽴的消息在⽹上传输，接收端只能接收独⽴的消息。接收端⼀次只能接收发送端发出的⼀个数据包，如果⼀次接受数据的⼤⼩⼩于发送端⼀次发送的数据⼤⼩，就会丢失⼀部分数据，即使丢失，接受端也不会分两次去接收。</li>\n</ul>\n<h3 id=\"七-websocket\"><a class=\"anchor\" href=\"#七-websocket\">#</a> 七、WebSocket</h3>\n<h4 id=\"1-对-websocket-的理解\"><a class=\"anchor\" href=\"#1-对-websocket-的理解\">#</a> 1. 对 WebSocket 的理解</h4>\n<p>WebSocket 是 HTML5 提供的一种浏览器与服务器进行全双工通讯的网络技术，属于应用层协议。它基于 TCP 传输协议，并复用 HTTP 的握手通道。浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接， 并进行双向数据传输。</p>\n<p>WebSocket 的出现就解决了半双工通信的弊端。它最大的特点是：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</p>\n<p>WebSocket 原理：客户端向 WebSocket 服务器通知（notify）一个带有所有接收者 ID（recipients IDs）的事件（event），服务器接收后立即通知所有活跃的（active）客户端，只有 ID 在接收者 ID 序列中的客户端才会处理这个事件。<br />\n​</p>\n<p>WebSocket 特点的如下：</p>\n<ul>\n<li>支持双向通信，实时性更强</li>\n<li>可以发送文本，也可以发送二进制数据‘’</li>\n<li>建立在 TCP 协议之上，服务端的实现比较容易</li>\n<li>数据格式比较轻量，性能开销小，通信高效</li>\n<li>没有同源限制，客户端可以与任意服务器通信</li>\n<li>协议标识符是 ws（如果加密，则为 wss），服务器网址就是 URL</li>\n<li>与 HTTP 协议有着良好的兼容性。默认端口也是 80 和 443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器。</li>\n</ul>\n<p>Websocket 的使用方法如下：​</p>\n<p>在客户端中：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在 index.html 中直接写 WebSocket，设置服务端的端口号为 9999</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ws <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://localhost:9999'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 在客户端与服务端建立连接后触发</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onopen</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection open.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    ws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 在服务端给客户端发来消息的时候触发</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 打印的是 MessageEvent 对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 打印的是收到的消息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 在客户端与服务端建立关闭后触发</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>ws<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Connection closed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"2-即时通讯的实现短轮询-长轮询-sse-和-websocket-间的区别\"><a class=\"anchor\" href=\"#2-即时通讯的实现短轮询-长轮询-sse-和-websocket-间的区别\">#</a> 2. 即时通讯的实现：短轮询、长轮询、SSE 和 WebSocket 间的区别？</h4>\n<p>短轮询和长轮询的目的都是用于实现客户端和服务器端的一个即时通讯。</p>\n<p>短轮询的基本思路： 浏览器每隔一段时间向浏览器发送 http 请求，服务器端在收到请求后，不论是否有数据更新，都直接进行响应。这种方式实现的即时通信，本质上还是浏览器发送请求，服务器接受请求的一个过程，通过让客户端不断的进行请求，使得客户端能够模拟实时地收到服务器端的数据的变化。这种方式的优点是比较简单，易于理解。缺点是这种方式由于需要不断的建立 http 连接，严重浪费了服务器端和客户端的资源。当用户增加时，服务器端的压力就会变大，这是很不合理的。</p>\n<p>长轮询的基本思路： 首先由客户端向服务器发起请求，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求挂起，然后判断服务器端数据是否有更新。如果有更新，则进行响应，如果一直没有数据，则到达一定的时间限制才返回。客户端 JavaScript 响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。长轮询和短轮询比起来，它的优点是明显减少了很多不必要的 http 请求次数，相比之下节约了资源。长轮询的缺点在于，连接挂起也会导致资源的浪费。</p>\n<p>SSE 的基本思想： 服务器使用流信息向服务器推送信息。严格地说，http 协议无法做到服务器主动推送信息。但是，有一种变通方法，就是服务器向客户端声明，接下来要发送的是流信息。也就是说，发送的不是一次性的数据包，而是一个数据流，会连续不断地发送过来。这时，客户端不会关闭连接，会一直等着服务器发过来的新的数据流，视频播放就是这样的例子。SSE 就是利用这种机制，使用流信息向浏览器推送信息。它基于 http 协议，目前除了 IE/Edge，其他浏览器都支持。它相对于前面两种方式来说，不需要建立过多的 http 请求，相比之下节约了资源。</p>\n<p>WebSocket 是 HTML5 定义的一个新协议议，与传统的 http 协议不同，该协议允许由服务器主动的向客户端推送信息。使用 WebSocket 协议的缺点是在服务器端的配置比较复杂。WebSocket 是一个全双工的协议，也就是通信双方是平等的，可以相互发送消息，而 SSE 的方式是单向通信的，只能由服务器端向客户端推送信息，如果客户端需要发送信息就是属于下一个 http 请求了。</p>\n<p>上面的四个通信协议，前三个都是基于 HTTP 协议的。</p>\n<p>对于这四种即使通信协议，从性能的角度来看：<br />\nWebSocket &gt; 长连接（SEE） &gt; 长轮询 &gt; 短轮询<br />\n但是，我们如果考虑浏览器的兼容性问题，顺序就恰恰相反了：<br />\n短轮询 &gt; 长轮询 &gt; 长连接（SEE） &gt; WebSocket<br />\n 所以，还是要根据具体的使用场景来判断使用哪种方式。</p>\n",
            "tags": [
                "计算机科学",
                "前端"
            ]
        }
    ]
}